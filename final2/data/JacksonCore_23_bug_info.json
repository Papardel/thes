{
  "bug_id": "23",
  "failed_tests": {
    "com.fasterxml.jackson.core.util.TestDefaultPrettyPrinter": [
      {
        "methodName": "testInvalidSubClass",
        "error": "junit.framework.AssertionFailedError",
        "message": "Should not pass",
        "fail_line": "            fail(\"Should not pass\");",
        "test_source": "  public void testInvalidSubClass() throws Exception {\n  DefaultPrettyPrinter pp = new MyPrettyPrinter();\n  try {\n  pp.createInstance();\n  fail(\"Should not pass\");\n  } catch (IllegalStateException e) {\n  verifyException(e, \"does not override\");\n  }\n  }",
        "stack": [
          "TestDefaultPrettyPrinter.testInvalidSubClass line 169"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java",
      "buggy_full_code": "package com.fasterxml.jackson.core.util;\n\nimport java.io.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.io.SerializedString;\n\n\n@SuppressWarnings(\"serial\")\npublic class DefaultPrettyPrinter implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>, java.io.Serializable { private static final long serialVersionUID = 1; public final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString(\" \"); public interface Indenter {\n        void writeIndentation(JsonGenerator g, int level) throws IOException;\n\n        \n        boolean isInline();\n    }\n\n    \n\n    \n    protected Indenter _arrayIndenter = FixedSpaceIndenter.instance; protected Indenter _objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE; protected final SerializableString _rootSeparator; protected boolean _spacesInObjectEntries = true; protected transient int _nesting; protected Separators _separators; protected String _objectFieldValueSeparatorWithSpaces; public DefaultPrettyPrinter() {\n        this(DEFAULT_ROOT_VALUE_SEPARATOR);\n    }\n\n    \n    public DefaultPrettyPrinter(String rootSeparator) {\n        this((rootSeparator == null) ? null : new SerializedString(rootSeparator));\n    }\n\n    \n    public DefaultPrettyPrinter(SerializableString rootSeparator) {\n        _rootSeparator = rootSeparator;\n        withSeparators(DEFAULT_SEPARATORS);\n    }\n    \n    public DefaultPrettyPrinter(DefaultPrettyPrinter base) {\n        this(base, base._rootSeparator);\n    }\n\n    public DefaultPrettyPrinter(DefaultPrettyPrinter base, SerializableString rootSeparator) {\n        _arrayIndenter = base._arrayIndenter;\n        _objectIndenter = base._objectIndenter;\n        _spacesInObjectEntries = base._spacesInObjectEntries;\n        _nesting = base._nesting;\n\n        _separators = base._separators;\n        _objectFieldValueSeparatorWithSpaces = base._objectFieldValueSeparatorWithSpaces;\n\n        _rootSeparator = rootSeparator;\n    }\n\n    public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator) {\n        if (_rootSeparator == rootSeparator ||\n                (rootSeparator != null && rootSeparator.equals(_rootSeparator))) {\n            return this;\n        }\n        return new DefaultPrettyPrinter(this, rootSeparator);\n    }\n\n    \n    public DefaultPrettyPrinter withRootSeparator(String rootSeparator) {\n        return withRootSeparator((rootSeparator == null) ? null : new SerializedString(rootSeparator));\n    }\n\n    public void indentArraysWith(Indenter i) {\n        _arrayIndenter = (i == null) ? NopIndenter.instance : i;\n    }\n\n    public void indentObjectsWith(Indenter i) {\n        _objectIndenter = (i == null) ? NopIndenter.instance : i;\n    }\n\n    \n    public DefaultPrettyPrinter withArrayIndenter(Indenter i) {\n        if (i == null) {\n            i = NopIndenter.instance;\n        }\n        if (_arrayIndenter == i) {\n            return this;\n        }\n        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n        pp._arrayIndenter = i;\n        return pp;\n    }\n\n    \n    public DefaultPrettyPrinter withObjectIndenter(Indenter i) {\n        if (i == null) {\n            i = NopIndenter.instance;\n        }\n        if (_objectIndenter == i) {\n            return this;\n        }\n        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n        pp._objectIndenter = i;\n        return pp;\n    }\n\n    \n    public DefaultPrettyPrinter withSpacesInObjectEntries() {\n        return _withSpaces(true);\n    }\n\n    \n    public DefaultPrettyPrinter withoutSpacesInObjectEntries() {\n        return _withSpaces(false);\n    }\n\n    protected DefaultPrettyPrinter _withSpaces(boolean state) {\n        if (_spacesInObjectEntries == state) {\n            return this;\n        }\n        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n        pp._spacesInObjectEntries = state;\n        return pp;\n    }\n\n    \n    public DefaultPrettyPrinter withSeparators(Separators separators) {\n        _separators = separators;\n        _objectFieldValueSeparatorWithSpaces = \" \" + separators.getObjectFieldValueSeparator() + \" \";\n        return this;\n    }\n\n    \n\n    @Override\n    public DefaultPrettyPrinter createInstance() {\n        return new DefaultPrettyPrinter(this);\n    }\n\n    \n\n    @Override\n    public void writeRootValueSeparator(JsonGenerator g) throws IOException {\n        if (_rootSeparator != null) {\n            g.writeRaw(_rootSeparator);\n        }\n    }\n\n    @Override\n    public void writeStartObject(JsonGenerator g) throws IOException {\n        g.writeRaw('{');\n        if (!_objectIndenter.isInline()) {\n            ++_nesting;\n        }\n    }\n\n    @Override\n    public void beforeObjectEntries(JsonGenerator g) throws IOException {\n        _objectIndenter.writeIndentation(g, _nesting);\n    }\n\n    \n    @Override\n    public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException {\n        if (_spacesInObjectEntries) {\n            g.writeRaw(_objectFieldValueSeparatorWithSpaces);\n        } else {\n            g.writeRaw(_separators.getObjectFieldValueSeparator());\n        }\n    }\n\n    \n    @Override\n    public void writeObjectEntrySeparator(JsonGenerator g) throws IOException {\n        g.writeRaw(_separators.getObjectEntrySeparator());\n        _objectIndenter.writeIndentation(g, _nesting);\n    }\n\n    @Override\n    public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        if (nrOfEntries > 0) {\n            _objectIndenter.writeIndentation(g, _nesting);\n        } else {\n            g.writeRaw(' ');\n        }\n        g.writeRaw('}');\n    }\n\n    @Override\n    public void writeStartArray(JsonGenerator g) throws IOException {\n        if (!_arrayIndenter.isInline()) {\n            ++_nesting;\n        }\n        g.writeRaw('[');\n    }\n\n    @Override\n    public void beforeArrayValues(JsonGenerator g) throws IOException {\n        _arrayIndenter.writeIndentation(g, _nesting);\n    }\n\n    \n    @Override\n    public void writeArrayValueSeparator(JsonGenerator g) throws IOException {\n        g.writeRaw(_separators.getArrayValueSeparator());\n        _arrayIndenter.writeIndentation(g, _nesting);\n    }\n\n    @Override\n    public void writeEndArray(JsonGenerator g, int nrOfValues) throws IOException {\n        if (!_arrayIndenter.isInline()) {\n            --_nesting;\n        }\n        if (nrOfValues > 0) {\n            _arrayIndenter.writeIndentation(g, _nesting);\n        } else {\n            g.writeRaw(' ');\n        }\n        g.writeRaw(']');\n    }\n\n    \n\n    \n    public static class NopIndenter implements Indenter, java.io.Serializable { public static final NopIndenter instance = new NopIndenter(); @Override public void writeIndentation(JsonGenerator g, int level) throws IOException { }\n\n        @Override\n        public boolean isInline() { return true; }\n    }\n\n    \n    public static class FixedSpaceIndenter extends NopIndenter { public static final FixedSpaceIndenter instance = new FixedSpaceIndenter(); @Override public void writeIndentation(JsonGenerator g, int level) throws IOException {\n            g.writeRaw(' ');\n        }\n\n        @Override\n        public boolean isInline() { return true; }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.core.util;\n\nimport java.io.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.io.SerializedString;\n\n\n@SuppressWarnings(\"serial\")\npublic class DefaultPrettyPrinter implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>, java.io.Serializable { private static final long serialVersionUID = 1; public final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString(\" \"); public interface Indenter {\n        void writeIndentation(JsonGenerator g, int level) throws IOException;\n\n        \n        boolean isInline();\n    }\n\n    \n\n    \n    protected Indenter _arrayIndenter = FixedSpaceIndenter.instance; protected Indenter _objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE; protected final SerializableString _rootSeparator; protected boolean _spacesInObjectEntries = true; protected transient int _nesting; protected Separators _separators; protected String _objectFieldValueSeparatorWithSpaces; public DefaultPrettyPrinter() {\n        this(DEFAULT_ROOT_VALUE_SEPARATOR);\n    }\n\n    \n    public DefaultPrettyPrinter(String rootSeparator) {\n        this((rootSeparator == null) ? null : new SerializedString(rootSeparator));\n    }\n\n    \n    public DefaultPrettyPrinter(SerializableString rootSeparator) {\n        _rootSeparator = rootSeparator;\n        withSeparators(DEFAULT_SEPARATORS);\n    }\n    \n    public DefaultPrettyPrinter(DefaultPrettyPrinter base) {\n        this(base, base._rootSeparator);\n    }\n\n    public DefaultPrettyPrinter(DefaultPrettyPrinter base, SerializableString rootSeparator) {\n        _arrayIndenter = base._arrayIndenter;\n        _objectIndenter = base._objectIndenter;\n        _spacesInObjectEntries = base._spacesInObjectEntries;\n        _nesting = base._nesting;\n\n        _separators = base._separators;\n        _objectFieldValueSeparatorWithSpaces = base._objectFieldValueSeparatorWithSpaces;\n\n        _rootSeparator = rootSeparator;\n    }\n\n    public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator) {\n        if (_rootSeparator == rootSeparator ||\n                (rootSeparator != null && rootSeparator.equals(_rootSeparator))) {\n            return this;\n        }\n        return new DefaultPrettyPrinter(this, rootSeparator);\n    }\n\n    \n    public DefaultPrettyPrinter withRootSeparator(String rootSeparator) {\n        return withRootSeparator((rootSeparator == null) ? null : new SerializedString(rootSeparator));\n    }\n\n    public void indentArraysWith(Indenter i) {\n        _arrayIndenter = (i == null) ? NopIndenter.instance : i;\n    }\n\n    public void indentObjectsWith(Indenter i) {\n        _objectIndenter = (i == null) ? NopIndenter.instance : i;\n    }\n\n    \n    public DefaultPrettyPrinter withArrayIndenter(Indenter i) {\n        if (i == null) {\n            i = NopIndenter.instance;\n        }\n        if (_arrayIndenter == i) {\n            return this;\n        }\n        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n        pp._arrayIndenter = i;\n        return pp;\n    }\n\n    \n    public DefaultPrettyPrinter withObjectIndenter(Indenter i) {\n        if (i == null) {\n            i = NopIndenter.instance;\n        }\n        if (_objectIndenter == i) {\n            return this;\n        }\n        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n        pp._objectIndenter = i;\n        return pp;\n    }\n\n    \n    public DefaultPrettyPrinter withSpacesInObjectEntries() {\n        return _withSpaces(true);\n    }\n\n    \n    public DefaultPrettyPrinter withoutSpacesInObjectEntries() {\n        return _withSpaces(false);\n    }\n\n    protected DefaultPrettyPrinter _withSpaces(boolean state) {\n        if (_spacesInObjectEntries == state) {\n            return this;\n        }\n        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n        pp._spacesInObjectEntries = state;\n        return pp;\n    }\n\n    \n    public DefaultPrettyPrinter withSeparators(Separators separators) {\n        _separators = separators;\n        _objectFieldValueSeparatorWithSpaces = \" \" + separators.getObjectFieldValueSeparator() + \" \";\n        return this;\n    }\n\n    \n\n    @Override\n    public DefaultPrettyPrinter createInstance() {\n        if (getClass() != DefaultPrettyPrinter.class) { \n            throw new IllegalStateException(\"Failed `createInstance()`: \"+getClass().getName()\n                    +\" does not override method; it has to\");\n        }\n        return new DefaultPrettyPrinter(this);\n    }\n\n    \n\n    @Override\n    public void writeRootValueSeparator(JsonGenerator g) throws IOException {\n        if (_rootSeparator != null) {\n            g.writeRaw(_rootSeparator);\n        }\n    }\n\n    @Override\n    public void writeStartObject(JsonGenerator g) throws IOException {\n        g.writeRaw('{');\n        if (!_objectIndenter.isInline()) {\n            ++_nesting;\n        }\n    }\n\n    @Override\n    public void beforeObjectEntries(JsonGenerator g) throws IOException {\n        _objectIndenter.writeIndentation(g, _nesting);\n    }\n\n    \n    @Override\n    public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException {\n        if (_spacesInObjectEntries) {\n            g.writeRaw(_objectFieldValueSeparatorWithSpaces);\n        } else {\n            g.writeRaw(_separators.getObjectFieldValueSeparator());\n        }\n    }\n\n    \n    @Override\n    public void writeObjectEntrySeparator(JsonGenerator g) throws IOException {\n        g.writeRaw(_separators.getObjectEntrySeparator());\n        _objectIndenter.writeIndentation(g, _nesting);\n    }\n\n    @Override\n    public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        if (nrOfEntries > 0) {\n            _objectIndenter.writeIndentation(g, _nesting);\n        } else {\n            g.writeRaw(' ');\n        }\n        g.writeRaw('}');\n    }\n\n    @Override\n    public void writeStartArray(JsonGenerator g) throws IOException {\n        if (!_arrayIndenter.isInline()) {\n            ++_nesting;\n        }\n        g.writeRaw('[');\n    }\n\n    @Override\n    public void beforeArrayValues(JsonGenerator g) throws IOException {\n        _arrayIndenter.writeIndentation(g, _nesting);\n    }\n\n    \n    @Override\n    public void writeArrayValueSeparator(JsonGenerator g) throws IOException {\n        g.writeRaw(_separators.getArrayValueSeparator());\n        _arrayIndenter.writeIndentation(g, _nesting);\n    }\n\n    @Override\n    public void writeEndArray(JsonGenerator g, int nrOfValues) throws IOException {\n        if (!_arrayIndenter.isInline()) {\n            --_nesting;\n        }\n        if (nrOfValues > 0) {\n            _arrayIndenter.writeIndentation(g, _nesting);\n        } else {\n            g.writeRaw(' ');\n        }\n        g.writeRaw(']');\n    }\n\n    \n\n    \n    public static class NopIndenter implements Indenter, java.io.Serializable { public static final NopIndenter instance = new NopIndenter(); @Override public void writeIndentation(JsonGenerator g, int level) throws IOException { }\n\n        @Override\n        public boolean isInline() { return true; }\n    }\n\n    \n    public static class FixedSpaceIndenter extends NopIndenter { public static final FixedSpaceIndenter instance = new FixedSpaceIndenter(); @Override public void writeIndentation(JsonGenerator g, int level) throws IOException {\n            g.writeRaw(' ');\n        }\n\n        @Override\n        public boolean isInline() { return true; }\n    }\n}\n",
      "buggy_signatures": [
        "public DefaultPrettyPrinter(String rootSeparator)",
        "public DefaultPrettyPrinter(SerializableString rootSeparator)",
        "public DefaultPrettyPrinter(DefaultPrettyPrinter base)",
        "public DefaultPrettyPrinter(DefaultPrettyPrinter base, SerializableString rootSeparator)",
        "public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator)",
        "public DefaultPrettyPrinter withRootSeparator(String rootSeparator)",
        "public void indentArraysWith(Indenter i)",
        "public void indentObjectsWith(Indenter i)",
        "public DefaultPrettyPrinter withArrayIndenter(Indenter i)",
        "public DefaultPrettyPrinter withObjectIndenter(Indenter i)",
        "public DefaultPrettyPrinter withSpacesInObjectEntries()",
        "public DefaultPrettyPrinter withoutSpacesInObjectEntries()",
        "protected DefaultPrettyPrinter _withSpaces(boolean state)",
        "public DefaultPrettyPrinter withSeparators(Separators separators)",
        "public DefaultPrettyPrinter createInstance()",
        "public void writeRootValueSeparator(JsonGenerator g) throws IOException",
        "public void writeStartObject(JsonGenerator g) throws IOException",
        "public void beforeObjectEntries(JsonGenerator g) throws IOException",
        "public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException",
        "public void writeObjectEntrySeparator(JsonGenerator g) throws IOException",
        "public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException",
        "public void writeStartArray(JsonGenerator g) throws IOException",
        "public void beforeArrayValues(JsonGenerator g) throws IOException",
        "public void writeArrayValueSeparator(JsonGenerator g) throws IOException",
        "public void writeEndArray(JsonGenerator g, int nrOfValues) throws IOException",
        "public boolean isInline()",
        "public boolean isInline()"
      ],
      "fixed_signatures": [
        "public DefaultPrettyPrinter(String rootSeparator)",
        "public DefaultPrettyPrinter(SerializableString rootSeparator)",
        "public DefaultPrettyPrinter(DefaultPrettyPrinter base)",
        "public DefaultPrettyPrinter(DefaultPrettyPrinter base, SerializableString rootSeparator)",
        "public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator)",
        "public DefaultPrettyPrinter withRootSeparator(String rootSeparator)",
        "public void indentArraysWith(Indenter i)",
        "public void indentObjectsWith(Indenter i)",
        "public DefaultPrettyPrinter withArrayIndenter(Indenter i)",
        "public DefaultPrettyPrinter withObjectIndenter(Indenter i)",
        "public DefaultPrettyPrinter withSpacesInObjectEntries()",
        "public DefaultPrettyPrinter withoutSpacesInObjectEntries()",
        "protected DefaultPrettyPrinter _withSpaces(boolean state)",
        "public DefaultPrettyPrinter withSeparators(Separators separators)",
        "public DefaultPrettyPrinter createInstance()",
        "public void writeRootValueSeparator(JsonGenerator g) throws IOException",
        "public void writeStartObject(JsonGenerator g) throws IOException",
        "public void beforeObjectEntries(JsonGenerator g) throws IOException",
        "public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException",
        "public void writeObjectEntrySeparator(JsonGenerator g) throws IOException",
        "public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException",
        "public void writeStartArray(JsonGenerator g) throws IOException",
        "public void beforeArrayValues(JsonGenerator g) throws IOException",
        "public void writeArrayValueSeparator(JsonGenerator g) throws IOException",
        "public void writeEndArray(JsonGenerator g, int nrOfValues) throws IOException",
        "public boolean isInline()",
        "public boolean isInline()"
      ],
      "methods": [
        {
          "buggy_method": "  public DefaultPrettyPrinter createInstance() {\n  return new DefaultPrettyPrinter(this);\n  }",
          "fixed_method": "  public DefaultPrettyPrinter createInstance() {\n  if (getClass() != DefaultPrettyPrinter.class) { \n  throw new IllegalStateException(\"Failed `createInstance()`: \"+getClass().getName()\n  +\" does not override method; it has to\");\n  }\n  return new DefaultPrettyPrinter(this);\n  }",
          "diff": [
            "@@ -252,6 +252,10 @@",
            " \n",
            "     @Override\n",
            "     public DefaultPrettyPrinter createInstance() {\n",
            "+        if (getClass() != DefaultPrettyPrinter.class) { // since 2.10\n",
            "+            throw new IllegalStateException(\"Failed `createInstance()`: \"+getClass().getName()\n",
            "+                    +\" does not override method; it has to\");\n",
            "+        }\n",
            "         return new DefaultPrettyPrinter(this);\n",
            "     }\n",
            " \n"
          ],
          "changed_lines": 4
        }
      ]
    }
  ]
}
