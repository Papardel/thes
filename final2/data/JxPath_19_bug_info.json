{
  "bug_id": "19",
  "failed_tests": {
    "org.apache.commons.jxpath.ri.model.AliasedNamespaceIterationTest": [
      {
        "methodName": "testIterateJDOM",
        "error": "junit.framework.AssertionFailedError",
        "message": "Evaluating pointer iterator </a:doc/a:elem> expected:<[/a:doc[1]/a:elem[1], /a:doc[1]/a:elem[2]]> but was:<[/a:doc[1]/a:elem[1], /a:doc[1]/a:elem[1]]>",
        "fail_line": "        doTestIterate(DocumentContainer.MODEL_JDOM);",
        "test_source": "  public void testIterateJDOM() {\n  doTestIterate(DocumentContainer.MODEL_JDOM);\n  }",
        "stack": [
          "JXPathTestCase.assertXPathPointerIterator line 176, AliasedNamespaceIterationTest.doTestIterate line 50, AliasedNamespaceIterationTest.testIterateJDOM line 58"
        ]
      },
      {
        "methodName": "testIterateDOM",
        "error": "junit.framework.AssertionFailedError",
        "message": "Evaluating pointer iterator </a:doc/a:elem> expected:<[/a:doc[1]/a:elem[1], /a:doc[1]/a:elem[2]]> but was:<[/a:doc[1]/a:elem[1], /a:doc[1]/a:elem[1]]>",
        "fail_line": "        doTestIterate(DocumentContainer.MODEL_DOM);",
        "test_source": "  public void testIterateDOM() {\n  doTestIterate(DocumentContainer.MODEL_DOM);\n  }",
        "stack": [
          "JXPathTestCase.assertXPathPointerIterator line 176, AliasedNamespaceIterationTest.doTestIterate line 50, AliasedNamespaceIterationTest.testIterateDOM line 54"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "buggy_full_code": "\npackage org.apache.commons.jxpath.ri.model.dom;\n\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport org.apache.commons.jxpath.JXPathAbstractFactoryException;\nimport org.apache.commons.jxpath.JXPathContext;\nimport org.apache.commons.jxpath.JXPathException;\nimport org.apache.commons.jxpath.Pointer;\nimport org.apache.commons.jxpath.ri.Compiler;\nimport org.apache.commons.jxpath.ri.NamespaceResolver;\nimport org.apache.commons.jxpath.ri.QName;\nimport org.apache.commons.jxpath.ri.compiler.NodeNameTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\nimport org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;\nimport org.apache.commons.jxpath.ri.model.NodeIterator;\nimport org.apache.commons.jxpath.ri.model.NodePointer;\nimport org.apache.commons.jxpath.ri.model.beans.NullPointer;\nimport org.apache.commons.jxpath.util.TypeUtils;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Comment;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.ProcessingInstruction;\n\n\npublic class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace; private String id; private NamespaceResolver localNamespaceResolver; public static final String XML_NAMESPACE_URI = \"http: public static final String XMLNS_NAMESPACE_URI = \"http: public DOMNodePointer(Node node, Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    \n    public DOMNodePointer(Node node, Locale locale, String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    \n    public DOMNodePointer(NodePointer parent, Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(NodeTest test) {\n        return testNode(node, test);\n    }\n\n    \n    public static boolean testNode(Node node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            if (node.getNodeType() != Node.ELEMENT_NODE) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            String testPrefix = testName.getPrefix();\n            if (wildcard && testPrefix == null) {\n                return true;\n            }\n            if (wildcard\n                || testName.getName()\n                        .equals(DOMNodePointer.getLocalName(node))) {\n                String nodeNS = DOMNodePointer.getNamespaceURI(node);\n                return equalStrings(namespaceURI, nodeNS) || nodeNS == null\n                        && equalStrings(testPrefix, getPrefix(node));\n            }\n            return false;\n        }\n        if (test instanceof NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return true;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n                default:\n                    return false;\n            }\n        }\n        if (test instanceof ProcessingInstructionTest\n                && node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n        return false;\n    }\n\n    \n    private static boolean equalStrings(String s1, String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = s1 == null ? \"\" : s1.trim();\n        s2 = s2 == null ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public QName getName() {\n        String ln = null;\n        String ns = null;\n        int type = node.getNodeType();\n        if (type == Node.ELEMENT_NODE) {\n            ns = DOMNodePointer.getPrefix(node);\n            ln = DOMNodePointer.getLocalName(node);\n        }\n        else if (type == Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((ProcessingInstruction) node).getTarget();\n        }\n        return new QName(ns, ln);\n    }\n\n    public String getNamespaceURI() {\n        return getNamespaceURI(node);\n    }\n\n    public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {\n        return new DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public NodeIterator attributeIterator(QName name) {\n        return new DOMAttributeIterator(this, name);\n    }\n\n    public NodePointer namespacePointer(String prefix) {\n        return new NamespacePointer(this, prefix);\n    }\n\n    public NodeIterator namespaceIterator() {\n        return new DOMNamespaceIterator(this);\n    }\n\n    public synchronized NamespaceResolver getNamespaceResolver() {\n        if (localNamespaceResolver == null) {\n            localNamespaceResolver = new NamespaceResolver(super.getNamespaceResolver());\n            localNamespaceResolver.setNamespaceContextPointer(this);\n        }\n        return localNamespaceResolver;\n    }\n\n    public String getNamespaceURI(String prefix) {\n        if (prefix == null || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n\n        if (prefix.equals(\"xml\")) {\n            return XML_NAMESPACE_URI;\n        }\n\n        if (prefix.equals(\"xmlns\")) {\n            return XMLNS_NAMESPACE_URI;\n        }\n\n        String namespace = null;\n        if (namespaces == null) {\n            namespaces = new HashMap();\n        }\n        else {\n            namespace = (String) namespaces.get(prefix);\n        }\n\n        if (namespace == null) {\n            String qname = \"xmlns:\" + prefix;\n            Node aNode = node;\n            if (aNode instanceof Document) {\n                aNode = ((Document) aNode).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n            if (namespace == null || namespace.equals(\"\")) {\n                namespace = NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n\n        \n        return namespace;\n    }\n\n    public String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            Node aNode = node;\n            if (aNode instanceof Document) {\n                aNode = ((Document) aNode).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        \n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public Object getBaseValue() {\n        return node;\n    }\n\n    public Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    \n    public boolean isLanguage(String lang) {\n        String current = getLanguage();\n        return current == null ? super.isLanguage(lang)\n                : current.toUpperCase(Locale.ENGLISH).startsWith(lang.toUpperCase(Locale.ENGLISH));\n    }\n\n    \n    protected static String findEnclosingAttribute(Node n, String attrName) {\n        while (n != null) {\n            if (n.getNodeType() == Node.ELEMENT_NODE) {\n                Element e = (Element) n;\n                String attr = e.getAttribute(attrName);\n                if (attr != null && !attr.equals(\"\")) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        }\n        return null;\n    }\n\n    \n    protected String getLanguage() {\n        return findEnclosingAttribute(node, \"xml:lang\");\n    }\n\n    \n    public void setValue(Object value) {\n        if (node.getNodeType() == Node.TEXT_NODE\n            || node.getNodeType() == Node.CDATA_SECTION_NODE) {\n            String string = (String) TypeUtils.convert(value, String.class);\n            if (string != null && !string.equals(\"\")) {\n                node.setNodeValue(string);\n            }\n            else {\n                node.getParentNode().removeChild(node);\n            }\n        }\n        else {\n            NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; --i >= 0;) {\n                Node child = children.item(i);\n                node.removeChild(child);\n            }\n\n            if (value instanceof Node) {\n                Node valueNode = (Node) value;\n                if (valueNode instanceof Element\n                    || valueNode instanceof Document) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                }\n                else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            }\n            else {\n                String string = (String) TypeUtils.convert(value, String.class);\n                if (string != null && !string.equals(\"\")) {\n                    Node textNode =\n                        node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public NodePointer createChild(JXPathContext context, QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success =\n            getAbstractFactory(context).createObject(\n                context,\n                this,\n                node,\n                name.toString(),\n                index);\n        if (success) {\n            NodeTest nodeTest;\n            String prefix = name.getPrefix();\n            String namespaceURI = prefix == null ? null : context\n                    .getNamespaceURI(prefix);\n            nodeTest = new NodeNameTest(name, namespaceURI);\n\n            NodeIterator it = childIterator(nodeTest, false, null);\n            if (it != null && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new JXPathAbstractFactoryException(\n                \"Factory could not create a child node for path: \" + asPath()\n                        + \"/\" + name + \"[\" + (index + 1) + \"]\");\n    }\n\n    public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {\n        NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public NodePointer createAttribute(JXPathContext context, QName name) {\n        if (!(node instanceof Element)) {\n            return super.createAttribute(context, name);\n        }\n        Element element = (Element) node;\n        String prefix = name.getPrefix();\n        if (prefix != null) {\n            String ns = null;\n            NamespaceResolver nsr = getNamespaceResolver();\n            if (nsr != null) {\n                ns = nsr.getNamespaceURI(prefix);\n            }\n            if (ns == null) {\n                throw new JXPathException(\n                    \"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        }\n        else {\n            if (!element.hasAttribute(name.getName())) {\n                element.setAttribute(name.getName(), \"\");\n            }\n        }\n        NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public String asPath() {\n        if (id != null) {\n            return \"id('\" + escape(id) + \"')\";\n        }\n\n        StringBuffer buffer = new StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case Node.ELEMENT_NODE :\n                \n                \n                \n                if (parent instanceof DOMNodePointer) {\n                    if (buffer.length() == 0\n                            || buffer.charAt(buffer.length() - 1) != '/') {\n                        buffer.append('/');\n                    }\n                    String ln = DOMNodePointer.getLocalName(node);\n                    String nsURI = getNamespaceURI();\n                    if (nsURI == null) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByQName()).append(']');\n                    }\n                    else {\n                        String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByQName());\n                            buffer.append(']');\n                        }\n                        else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n            break;\n            case Node.TEXT_NODE :\n            case Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case Node.PROCESSING_INSTRUCTION_NODE :\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(((ProcessingInstruction) node).getTarget()).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI()).append(']');\n                break;\n            case Node.DOCUMENT_NODE :\n                \n                break;\n            default:\n                break;\n        }\n        return buffer.toString();\n    }\n\n    \n    private int getRelativePositionByQName() {\n        int count = 1;\n        Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == Node.ELEMENT_NODE) {\n                String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        }\n        return count;\n    }\n\n\n    \n    private int getRelativePositionOfElement() {\n        int count = 1;\n        Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        }\n        return count;\n    }\n\n    \n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == Node.TEXT_NODE\n                || n.getNodeType() == Node.CDATA_SECTION_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        }\n        return count;\n    }\n\n    \n    private int getRelativePositionOfPI() {\n        int count = 1;\n        String target = ((ProcessingInstruction) node).getTarget();\n        Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE\n                && ((ProcessingInstruction) n).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        }\n        return count;\n    }\n\n    public int hashCode() {\n        return node.hashCode();\n    }\n\n    public boolean equals(Object object) {\n        return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;\n    }\n\n    \n    public static String getPrefix(Node node) {\n        String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n\n        String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    \n    public static String getLocalName(Node node) {\n        String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n\n        String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    \n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n        }\n\n        Element element = (Element) node;\n\n        String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n\n        String prefix = getPrefix(node);\n        String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n        Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                Attr attr = ((Element) aNode).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        }\n        return null;\n    }\n\n    public Object getValue() {\n        if (node.getNodeType() == Node.COMMENT_NODE) {\n            String text = ((Comment) node).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        return stringValue(node);\n    }\n\n    \n    private String stringValue(Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == Node.COMMENT_NODE) {\n            return \"\";\n        }\n        boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"xml:space\"));\n        if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) {\n            String text = node.getNodeValue();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) {\n            String text = ((ProcessingInstruction) node).getData();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        NodeList list = node.getChildNodes();\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < list.getLength(); i++) {\n            Node child = list.item(i);\n            buf.append(stringValue(child));\n        }\n        return buf.toString();\n    }\n\n    \n    public Pointer getPointerByID(JXPathContext context, String id) {\n        Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node\n                : node.getOwnerDocument();\n        Element element = document.getElementById(id);\n        return element == null ? (Pointer) new NullPointer(getLocale(), id)\n                : new DOMNodePointer(element, getLocale(), id);\n    }\n\n    public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {\n        Node node1 = (Node) pointer1.getBaseValue();\n        Node node2 = (Node) pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {\n            return -1;\n        }\n        if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {\n            return 1;\n        }\n        if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {\n            NamedNodeMap map = ((Node) getNode()).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; \n        }\n\n        Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        }\n        return 0;\n    }\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.jxpath.ri.model.dom;\n\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport org.apache.commons.jxpath.JXPathAbstractFactoryException;\nimport org.apache.commons.jxpath.JXPathContext;\nimport org.apache.commons.jxpath.JXPathException;\nimport org.apache.commons.jxpath.Pointer;\nimport org.apache.commons.jxpath.ri.Compiler;\nimport org.apache.commons.jxpath.ri.NamespaceResolver;\nimport org.apache.commons.jxpath.ri.QName;\nimport org.apache.commons.jxpath.ri.compiler.NodeNameTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\nimport org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;\nimport org.apache.commons.jxpath.ri.model.NodeIterator;\nimport org.apache.commons.jxpath.ri.model.NodePointer;\nimport org.apache.commons.jxpath.ri.model.beans.NullPointer;\nimport org.apache.commons.jxpath.util.TypeUtils;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Comment;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.ProcessingInstruction;\n\n\npublic class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace; private String id; private NamespaceResolver localNamespaceResolver; public static final String XML_NAMESPACE_URI = \"http: public static final String XMLNS_NAMESPACE_URI = \"http: public DOMNodePointer(Node node, Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    \n    public DOMNodePointer(Node node, Locale locale, String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    \n    public DOMNodePointer(NodePointer parent, Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(NodeTest test) {\n        return testNode(node, test);\n    }\n\n    \n    public static boolean testNode(Node node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            if (node.getNodeType() != Node.ELEMENT_NODE) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            String testPrefix = testName.getPrefix();\n            if (wildcard && testPrefix == null) {\n                return true;\n            }\n            if (wildcard\n                || testName.getName()\n                        .equals(DOMNodePointer.getLocalName(node))) {\n                String nodeNS = DOMNodePointer.getNamespaceURI(node);\n                return equalStrings(namespaceURI, nodeNS) || nodeNS == null\n                        && equalStrings(testPrefix, getPrefix(node));\n            }\n            return false;\n        }\n        if (test instanceof NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return true;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n                default:\n                    return false;\n            }\n        }\n        if (test instanceof ProcessingInstructionTest\n                && node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n        return false;\n    }\n\n    \n    private static boolean equalStrings(String s1, String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = s1 == null ? \"\" : s1.trim();\n        s2 = s2 == null ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public QName getName() {\n        String ln = null;\n        String ns = null;\n        int type = node.getNodeType();\n        if (type == Node.ELEMENT_NODE) {\n            ns = DOMNodePointer.getPrefix(node);\n            ln = DOMNodePointer.getLocalName(node);\n        }\n        else if (type == Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((ProcessingInstruction) node).getTarget();\n        }\n        return new QName(ns, ln);\n    }\n\n    public String getNamespaceURI() {\n        return getNamespaceURI(node);\n    }\n\n    public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {\n        return new DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public NodeIterator attributeIterator(QName name) {\n        return new DOMAttributeIterator(this, name);\n    }\n\n    public NodePointer namespacePointer(String prefix) {\n        return new NamespacePointer(this, prefix);\n    }\n\n    public NodeIterator namespaceIterator() {\n        return new DOMNamespaceIterator(this);\n    }\n\n    public synchronized NamespaceResolver getNamespaceResolver() {\n        if (localNamespaceResolver == null) {\n            localNamespaceResolver = new NamespaceResolver(super.getNamespaceResolver());\n            localNamespaceResolver.setNamespaceContextPointer(this);\n        }\n        return localNamespaceResolver;\n    }\n\n    public String getNamespaceURI(String prefix) {\n        if (prefix == null || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n\n        if (prefix.equals(\"xml\")) {\n            return XML_NAMESPACE_URI;\n        }\n\n        if (prefix.equals(\"xmlns\")) {\n            return XMLNS_NAMESPACE_URI;\n        }\n\n        String namespace = null;\n        if (namespaces == null) {\n            namespaces = new HashMap();\n        }\n        else {\n            namespace = (String) namespaces.get(prefix);\n        }\n\n        if (namespace == null) {\n            String qname = \"xmlns:\" + prefix;\n            Node aNode = node;\n            if (aNode instanceof Document) {\n                aNode = ((Document) aNode).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n            if (namespace == null || namespace.equals(\"\")) {\n                namespace = NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n\n        \n        return namespace;\n    }\n\n    public String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            Node aNode = node;\n            if (aNode instanceof Document) {\n                aNode = ((Document) aNode).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        \n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public Object getBaseValue() {\n        return node;\n    }\n\n    public Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    \n    public boolean isLanguage(String lang) {\n        String current = getLanguage();\n        return current == null ? super.isLanguage(lang)\n                : current.toUpperCase(Locale.ENGLISH).startsWith(lang.toUpperCase(Locale.ENGLISH));\n    }\n\n    \n    protected static String findEnclosingAttribute(Node n, String attrName) {\n        while (n != null) {\n            if (n.getNodeType() == Node.ELEMENT_NODE) {\n                Element e = (Element) n;\n                String attr = e.getAttribute(attrName);\n                if (attr != null && !attr.equals(\"\")) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        }\n        return null;\n    }\n\n    \n    protected String getLanguage() {\n        return findEnclosingAttribute(node, \"xml:lang\");\n    }\n\n    \n    public void setValue(Object value) {\n        if (node.getNodeType() == Node.TEXT_NODE\n            || node.getNodeType() == Node.CDATA_SECTION_NODE) {\n            String string = (String) TypeUtils.convert(value, String.class);\n            if (string != null && !string.equals(\"\")) {\n                node.setNodeValue(string);\n            }\n            else {\n                node.getParentNode().removeChild(node);\n            }\n        }\n        else {\n            NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; --i >= 0;) {\n                Node child = children.item(i);\n                node.removeChild(child);\n            }\n\n            if (value instanceof Node) {\n                Node valueNode = (Node) value;\n                if (valueNode instanceof Element\n                    || valueNode instanceof Document) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                }\n                else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            }\n            else {\n                String string = (String) TypeUtils.convert(value, String.class);\n                if (string != null && !string.equals(\"\")) {\n                    Node textNode =\n                        node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public NodePointer createChild(JXPathContext context, QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success =\n            getAbstractFactory(context).createObject(\n                context,\n                this,\n                node,\n                name.toString(),\n                index);\n        if (success) {\n            NodeTest nodeTest;\n            String prefix = name.getPrefix();\n            String namespaceURI = prefix == null ? null : context\n                    .getNamespaceURI(prefix);\n            nodeTest = new NodeNameTest(name, namespaceURI);\n\n            NodeIterator it = childIterator(nodeTest, false, null);\n            if (it != null && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new JXPathAbstractFactoryException(\n                \"Factory could not create a child node for path: \" + asPath()\n                        + \"/\" + name + \"[\" + (index + 1) + \"]\");\n    }\n\n    public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {\n        NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public NodePointer createAttribute(JXPathContext context, QName name) {\n        if (!(node instanceof Element)) {\n            return super.createAttribute(context, name);\n        }\n        Element element = (Element) node;\n        String prefix = name.getPrefix();\n        if (prefix != null) {\n            String ns = null;\n            NamespaceResolver nsr = getNamespaceResolver();\n            if (nsr != null) {\n                ns = nsr.getNamespaceURI(prefix);\n            }\n            if (ns == null) {\n                throw new JXPathException(\n                    \"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        }\n        else {\n            if (!element.hasAttribute(name.getName())) {\n                element.setAttribute(name.getName(), \"\");\n            }\n        }\n        NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public String asPath() {\n        if (id != null) {\n            return \"id('\" + escape(id) + \"')\";\n        }\n\n        StringBuffer buffer = new StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case Node.ELEMENT_NODE :\n                \n                \n                \n                if (parent instanceof DOMNodePointer) {\n                    if (buffer.length() == 0\n                            || buffer.charAt(buffer.length() - 1) != '/') {\n                        buffer.append('/');\n                    }\n                    String ln = DOMNodePointer.getLocalName(node);\n                    String nsURI = getNamespaceURI();\n                    if (nsURI == null) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByQName()).append(']');\n                    }\n                    else {\n                        String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByQName());\n                            buffer.append(']');\n                        }\n                        else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n            break;\n            case Node.TEXT_NODE :\n            case Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case Node.PROCESSING_INSTRUCTION_NODE :\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(((ProcessingInstruction) node).getTarget()).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI()).append(']');\n                break;\n            case Node.DOCUMENT_NODE :\n                \n                break;\n            default:\n                break;\n        }\n        return buffer.toString();\n    }\n\n    \n    private int getRelativePositionByQName() {\n        int count = 1;\n        Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == Node.ELEMENT_NODE && matchesQName(n)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        }\n        return count;\n    }\n\n    private boolean matchesQName(Node n) {\n        if (getNamespaceURI() != null) {\n            return equalStrings(getNamespaceURI(n), getNamespaceURI())\n                    && equalStrings(node.getLocalName(), n.getLocalName());\n        }\n        return equalStrings(node.getNodeName(), n.getNodeName());\n    }\n\n    \n    private int getRelativePositionOfElement() {\n        int count = 1;\n        Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        }\n        return count;\n    }\n\n    \n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == Node.TEXT_NODE\n                || n.getNodeType() == Node.CDATA_SECTION_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        }\n        return count;\n    }\n\n    \n    private int getRelativePositionOfPI() {\n        int count = 1;\n        String target = ((ProcessingInstruction) node).getTarget();\n        Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE\n                && ((ProcessingInstruction) n).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        }\n        return count;\n    }\n\n    public int hashCode() {\n        return node.hashCode();\n    }\n\n    public boolean equals(Object object) {\n        return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;\n    }\n\n    \n    public static String getPrefix(Node node) {\n        String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n\n        String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    \n    public static String getLocalName(Node node) {\n        String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n\n        String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    \n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n        }\n\n        Element element = (Element) node;\n\n        String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n\n        String prefix = getPrefix(node);\n        String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n        Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                Attr attr = ((Element) aNode).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        }\n        return null;\n    }\n\n    public Object getValue() {\n        if (node.getNodeType() == Node.COMMENT_NODE) {\n            String text = ((Comment) node).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        return stringValue(node);\n    }\n\n    \n    private String stringValue(Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == Node.COMMENT_NODE) {\n            return \"\";\n        }\n        boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"xml:space\"));\n        if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) {\n            String text = node.getNodeValue();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) {\n            String text = ((ProcessingInstruction) node).getData();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        NodeList list = node.getChildNodes();\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < list.getLength(); i++) {\n            Node child = list.item(i);\n            buf.append(stringValue(child));\n        }\n        return buf.toString();\n    }\n\n    \n    public Pointer getPointerByID(JXPathContext context, String id) {\n        Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node\n                : node.getOwnerDocument();\n        Element element = document.getElementById(id);\n        return element == null ? (Pointer) new NullPointer(getLocale(), id)\n                : new DOMNodePointer(element, getLocale(), id);\n    }\n\n    public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {\n        Node node1 = (Node) pointer1.getBaseValue();\n        Node node2 = (Node) pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {\n            return -1;\n        }\n        if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {\n            return 1;\n        }\n        if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {\n            NamedNodeMap map = ((Node) getNode()).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; \n        }\n\n        Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        }\n        return 0;\n    }\n}\n",
      "buggy_signatures": [
        "public DOMNodePointer(Node node, Locale locale, String id)",
        "public DOMNodePointer(NodePointer parent, Node node)",
        "public boolean testNode(NodeTest test)",
        "public static boolean testNode(Node node, NodeTest test)",
        "private static boolean equalStrings(String s1, String s2)",
        "public QName getName()",
        "public String getNamespaceURI()",
        "public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith)",
        "public NodeIterator attributeIterator(QName name)",
        "public NodePointer namespacePointer(String prefix)",
        "public NodeIterator namespaceIterator()",
        "public synchronized NamespaceResolver getNamespaceResolver()",
        "public String getNamespaceURI(String prefix)",
        "public String getDefaultNamespaceURI()",
        "public Object getBaseValue()",
        "public Object getImmediateNode()",
        "public boolean isActual()",
        "public boolean isCollection()",
        "public int getLength()",
        "public boolean isLeaf()",
        "public boolean isLanguage(String lang)",
        "protected static String findEnclosingAttribute(Node n, String attrName)",
        "protected String getLanguage()",
        "public void setValue(Object value)",
        "public NodePointer createChild(JXPathContext context, QName name, int index)",
        "public NodePointer createChild(JXPathContext context, QName name, int index, Object value)",
        "public NodePointer createAttribute(JXPathContext context, QName name)",
        "public void remove()",
        "public String asPath()",
        "private int getRelativePositionByQName()",
        "private int getRelativePositionOfElement()",
        "private int getRelativePositionOfTextNode()",
        "private int getRelativePositionOfPI()",
        "public int hashCode()",
        "public boolean equals(Object object)",
        "public static String getPrefix(Node node)",
        "public static String getLocalName(Node node)",
        "public static String getNamespaceURI(Node node)",
        "public Object getValue()",
        "private String stringValue(Node node)",
        "public Pointer getPointerByID(JXPathContext context, String id)",
        "public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2)"
      ],
      "fixed_signatures": [
        "public DOMNodePointer(Node node, Locale locale, String id)",
        "public DOMNodePointer(NodePointer parent, Node node)",
        "public boolean testNode(NodeTest test)",
        "public static boolean testNode(Node node, NodeTest test)",
        "private static boolean equalStrings(String s1, String s2)",
        "public QName getName()",
        "public String getNamespaceURI()",
        "public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith)",
        "public NodeIterator attributeIterator(QName name)",
        "public NodePointer namespacePointer(String prefix)",
        "public NodeIterator namespaceIterator()",
        "public synchronized NamespaceResolver getNamespaceResolver()",
        "public String getNamespaceURI(String prefix)",
        "public String getDefaultNamespaceURI()",
        "public Object getBaseValue()",
        "public Object getImmediateNode()",
        "public boolean isActual()",
        "public boolean isCollection()",
        "public int getLength()",
        "public boolean isLeaf()",
        "public boolean isLanguage(String lang)",
        "protected static String findEnclosingAttribute(Node n, String attrName)",
        "protected String getLanguage()",
        "public void setValue(Object value)",
        "public NodePointer createChild(JXPathContext context, QName name, int index)",
        "public NodePointer createChild(JXPathContext context, QName name, int index, Object value)",
        "public NodePointer createAttribute(JXPathContext context, QName name)",
        "public void remove()",
        "public String asPath()",
        "private int getRelativePositionByQName()",
        "private boolean matchesQName(Node n)",
        "private int getRelativePositionOfElement()",
        "private int getRelativePositionOfTextNode()",
        "private int getRelativePositionOfPI()",
        "public int hashCode()",
        "public boolean equals(Object object)",
        "public static String getPrefix(Node node)",
        "public static String getLocalName(Node node)",
        "public static String getNamespaceURI(Node node)",
        "public Object getValue()",
        "private String stringValue(Node node)",
        "public Pointer getPointerByID(JXPathContext context, String id)",
        "public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2)"
      ],
      "methods": [
        {
          "buggy_method": "  private int getRelativePositionByQName() {\n  int count = 1;\n  Node n = node.getPreviousSibling();\n  while (n != null) {\n  if (n.getNodeType() == Node.ELEMENT_NODE) {\n  String nm = n.getNodeName();\n  if (nm.equals(node.getNodeName())) {\n  count++;\n  }\n  }\n  n = n.getPreviousSibling();\n  }\n  return count;\n  }",
          "fixed_method": "  private boolean matchesQName(Node n) {\n  if (getNamespaceURI() != null) {\n  return equalStrings(getNamespaceURI(n), getNamespaceURI())\n  && equalStrings(node.getLocalName(), n.getLocalName());\n  }\n  return equalStrings(node.getNodeName(), n.getNodeName());\n  }",
          "diff": [
            "@@ -557,17 +557,21 @@",
            "         int count = 1;\n",
            "         Node n = node.getPreviousSibling();\n",
            "         while (n != null) {\n",
            "-            if (n.getNodeType() == Node.ELEMENT_NODE) {\n",
            "-                String nm = n.getNodeName();\n",
            "-                if (nm.equals(node.getNodeName())) {\n",
            "+            if (n.getNodeType() == Node.ELEMENT_NODE && matchesQName(n)) {\n",
            "                 count++;\n",
            "-                }\n",
            "             }\n",
            "             n = n.getPreviousSibling();\n",
            "         }\n",
            "         return count;\n",
            "     }\n",
            " \n",
            "+    private boolean matchesQName(Node n) {\n",
            "+        if (getNamespaceURI() != null) {\n",
            "+            return equalStrings(getNamespaceURI(n), getNamespaceURI())\n",
            "+                    && equalStrings(node.getLocalName(), n.getLocalName());\n",
            "+        }\n",
            "+        return equalStrings(node.getNodeName(), n.getNodeName());\n",
            "+    }\n",
            " \n",
            "     /**\n",
            "      * Get relative position of this among all siblings.\n"
          ],
          "changed_lines": 12
        }
      ]
    },
    {
      "name": "org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
      "buggy_full_code": "\npackage org.apache.commons.jxpath.ri.model.jdom;\n\nimport java.util.List;\nimport java.util.Locale;\n\nimport org.apache.commons.jxpath.JXPathAbstractFactoryException;\nimport org.apache.commons.jxpath.JXPathContext;\nimport org.apache.commons.jxpath.JXPathException;\nimport org.apache.commons.jxpath.ri.Compiler;\nimport org.apache.commons.jxpath.ri.NamespaceResolver;\nimport org.apache.commons.jxpath.ri.QName;\nimport org.apache.commons.jxpath.ri.compiler.NodeNameTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\nimport org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;\nimport org.apache.commons.jxpath.ri.model.NodeIterator;\nimport org.apache.commons.jxpath.ri.model.NodePointer;\nimport org.apache.commons.jxpath.util.TypeUtils;\nimport org.jdom.Attribute;\nimport org.jdom.CDATA;\nimport org.jdom.Comment;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.ProcessingInstruction;\nimport org.jdom.Text;\n\n\npublic class JDOMNodePointer extends NodePointer { private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; private NamespaceResolver localNamespaceResolver; public static final String XML_NAMESPACE_URI = \"http: public static final String XMLNS_NAMESPACE_URI = \"http: public JDOMNodePointer(Object node, Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    \n    public JDOMNodePointer(Object node, Locale locale, String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    \n    public JDOMNodePointer(NodePointer parent, Object node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) {\n        return new JDOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public NodeIterator attributeIterator(QName name) {\n        return new JDOMAttributeIterator(this, name);\n    }\n\n    public NodeIterator namespaceIterator() {\n        return new JDOMNamespaceIterator(this);\n    }\n\n    public NodePointer namespacePointer(String prefix) {\n        return new JDOMNamespacePointer(this, prefix);\n    }\n\n    public String getNamespaceURI() {\n        return getNamespaceURI(node);\n    }\n\n    \n    private static String getNamespaceURI(Object node) {\n        if (node instanceof Element) {\n            Element element = (Element) node;\n            String ns = element.getNamespaceURI();\n            if (ns != null && ns.equals(\"\")) {\n                ns = null;\n            }\n            return ns;\n        }\n        return null;\n    }\n\n    public synchronized NamespaceResolver getNamespaceResolver() {\n        if (localNamespaceResolver == null) {\n            localNamespaceResolver = new NamespaceResolver(super.getNamespaceResolver());\n            localNamespaceResolver.setNamespaceContextPointer(this);\n        }\n        return localNamespaceResolver;\n    }\n\n    public String getNamespaceURI(String prefix) {\n        if (prefix.equals(\"xml\")) {\n            return Namespace.XML_NAMESPACE.getURI();\n        }\n        Element element = null;\n        if (node instanceof Document) {\n            element = ((Document) node).getRootElement();\n        }\n        if (node instanceof Element) {\n            element = (Element) node;\n        }\n        if (element == null) {\n            return null;\n        }\n        Namespace ns = element.getNamespace(prefix);\n        return ns == null ? null : ns.getURI();\n    }\n\n    public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; \n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }\n\n    public Object getBaseValue() {\n        return node;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        if (node instanceof Element) {\n            return ((Element) node).getContent().size() == 0;\n        }\n        if (node instanceof Document) {\n            return ((Document) node).getContent().size() == 0;\n        }\n        return true;\n    }\n\n    public QName getName() {\n        String ns = null;\n        String ln = null;\n        if (node instanceof Element) {\n            ns = ((Element) node).getNamespacePrefix();\n            if (ns != null && ns.equals(\"\")) {\n                ns = null;\n            }\n            ln = ((Element) node).getName();\n        }\n        else if (node instanceof ProcessingInstruction) {\n            ln = ((ProcessingInstruction) node).getTarget();\n        }\n        return new QName(ns, ln);\n    }\n\n    public Object getImmediateNode() {\n        return node;\n    }\n\n    public Object getValue() {\n        if (node instanceof Element) {\n            StringBuffer buf = new StringBuffer();\n            for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n                NodePointer ptr = children.getNodePointer();\n                if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {\n                    buf.append(ptr.getValue());\n                }\n            }\n            return buf.toString();\n        }\n        if (node instanceof Comment) {\n            String text = ((Comment) node).getText();\n            if (text != null) {\n                text = text.trim();\n            }\n            return text;\n        }\n        String result = null;\n        if (node instanceof Text) {\n            result = ((Text) node).getText();\n        }\n        if (node instanceof ProcessingInstruction) {\n            result = ((ProcessingInstruction) node).getData();\n        }\n        boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\n        return result != null && trim ? result.trim() : result;\n    }\n\n    public void setValue(Object value) {\n        if (node instanceof Text) {\n            String string = (String) TypeUtils.convert(value, String.class);\n            if (string != null && !string.equals(\"\")) {\n                ((Text) node).setText(string);\n            }\n            else {\n                nodeParent(node).removeContent((Text) node);\n            }\n        }\n        else {\n            Element element = (Element) node;\n            element.getContent().clear();\n\n            if (value instanceof Element) {\n                Element valueElement = (Element) value;\n                addContent(valueElement.getContent());\n            }\n            else if (value instanceof Document) {\n                Document valueDocument = (Document) value;\n                addContent(valueDocument.getContent());\n            }\n            else if (value instanceof Text || value instanceof CDATA) {\n                String string = ((Text) value).getText();\n                element.addContent(new Text(string));\n            }\n            else if (value instanceof ProcessingInstruction) {\n                ProcessingInstruction pi =\n                    (ProcessingInstruction) ((ProcessingInstruction) value)\n                        .clone();\n                element.addContent(pi);\n            }\n            else if (value instanceof Comment) {\n                Comment comment = (Comment) ((Comment) value).clone();\n                element.addContent(comment);\n            }\n            else {\n                String string = (String) TypeUtils.convert(value, String.class);\n                if (string != null && !string.equals(\"\")) {\n                    element.addContent(new Text(string));\n                }\n            }\n        }\n    }\n\n    \n    private void addContent(List content) {\n        Element element = (Element) node;\n        int count = content.size();\n\n        for (int i = 0; i < count; i++) {\n            Object child = content.get(i);\n            if (child instanceof Element) {\n                child = ((Element) child).clone();\n                element.addContent((Element) child);\n            }\n            else if (child instanceof Text) {\n                child = ((Text) child).clone();\n                element.addContent((Text) child);\n            }\n            else if (node instanceof CDATA) {\n                child = ((CDATA) child).clone();\n                element.addContent((CDATA) child);\n            }\n            else if (node instanceof ProcessingInstruction) {\n                child = ((ProcessingInstruction) child).clone();\n                element.addContent((ProcessingInstruction) child);\n            }\n            else if (node instanceof Comment) {\n                child = ((Comment) child).clone();\n                element.addContent((Comment) child);\n            }\n        }\n    }\n\n    public boolean testNode(NodeTest test) {\n        return testNode(this, node, test);\n    }\n\n    \n    public static boolean testNode( NodePointer pointer, Object node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            if (!(node instanceof Element)) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            String testPrefix = testName.getPrefix();\n            if (wildcard && testPrefix == null) {\n                return true;\n            }\n            if (wildcard\n                || testName.getName()\n                        .equals(JDOMNodePointer.getLocalName(node))) {\n                String nodeNS = JDOMNodePointer.getNamespaceURI(node);\n                return equalStrings(namespaceURI, nodeNS) || nodeNS == null\n                        && equalStrings(testPrefix, getPrefix(node));\n            }\n            return false;\n        }\n        if (test instanceof NodeTypeTest) {\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return true;\n                case Compiler.NODE_TYPE_TEXT :\n                    return (node instanceof Text) || (node instanceof CDATA);\n                case Compiler.NODE_TYPE_COMMENT :\n                    return node instanceof Comment;\n                case Compiler.NODE_TYPE_PI :\n                    return node instanceof ProcessingInstruction;\n                default:\n                    return false;\n            }\n        }\n        if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n        return false;\n    }\n\n    \n    private static boolean equalStrings(String s1, String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = s1 == null ? \"\" : s1.trim();\n        s2 = s2 == null ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    \n    public static String getPrefix(Object node) {\n        if (node instanceof Element) {\n            String prefix = ((Element) node).getNamespacePrefix();\n            return (prefix == null || prefix.equals(\"\")) ? null : prefix;\n        }\n        if (node instanceof Attribute) {\n            String prefix = ((Attribute) node).getNamespacePrefix();\n            return (prefix == null || prefix.equals(\"\")) ? null : prefix;\n        }\n        return null;\n    }\n\n    \n    public static String getLocalName(Object node) {\n        if (node instanceof Element) {\n            return ((Element) node).getName();\n        }\n        if (node instanceof Attribute) {\n            return ((Attribute) node).getName();\n        }\n        return null;\n    }\n\n    \n    public boolean isLanguage(String lang) {\n        String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase(\n                Locale.ENGLISH).startsWith(lang.toUpperCase(Locale.ENGLISH));\n    }\n\n    \n    protected String getLanguage() {\n        return findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE);\n    }\n\n    \n    protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns) {\n        while (n != null) {\n            if (n instanceof Element) {\n                Element e = (Element) n;\n                String attr = e.getAttributeValue(attrName, ns);\n                if (attr != null && !attr.equals(\"\")) {\n                    return attr;\n                }\n            }\n            n = nodeParent(n);\n        }\n        return null;\n    }\n\n    \n    private static Element nodeParent(Object node) {\n        if (node instanceof Element) {\n            Object parent = ((Element) node).getParent();\n            return parent instanceof Element ? (Element) parent : null;\n        }\n        if (node instanceof Text) {\n            return (Element) ((Text) node).getParent();\n        }\n        if (node instanceof CDATA) {\n            return (Element) ((CDATA) node).getParent();\n        }\n        if (node instanceof ProcessingInstruction) {\n            return (Element) ((ProcessingInstruction) node).getParent();\n        }\n        if (node instanceof Comment) {\n            return (Element) ((Comment) node).getParent();\n        }\n        return null;\n    }\n\n    public NodePointer createChild( JXPathContext context, QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success =\n            getAbstractFactory(context).createObject(\n                context,\n                this,\n                node,\n                name.toString(),\n                index);\n        if (success) {\n            NodeTest nodeTest;\n            String prefix = name.getPrefix();\n            String namespaceURI = prefix == null ? null : context\n                    .getNamespaceURI(prefix);\n            nodeTest = new NodeNameTest(name, namespaceURI);\n\n            NodeIterator it =\n                childIterator(nodeTest, false, null);\n            if (it != null && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new JXPathAbstractFactoryException(\"Factory could not create \"\n                + \"a child node for path: \" + asPath() + \"/\" + name + \"[\"\n                + (index + 1) + \"]\");\n    }\n\n    public NodePointer createChild( JXPathContext context, QName name, int index, Object value) {\n        NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public NodePointer createAttribute(JXPathContext context, QName name) {\n        if (!(node instanceof Element)) {\n            return super.createAttribute(context, name);\n        }\n\n        Element element = (Element) node;\n        String prefix = name.getPrefix();\n        if (prefix != null) {\n            String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);\n            if (namespaceUri == null) {\n                throw new JXPathException(\n                    \"Unknown namespace prefix: \" + prefix);\n            }\n            Namespace ns = Namespace.getNamespace(prefix, namespaceUri);\n            Attribute attr = element.getAttribute(name.getName(), ns);\n            if (attr == null) {\n                element.setAttribute(name.getName(), \"\", ns);\n            }\n        }\n        else {\n            Attribute attr = element.getAttribute(name.getName());\n            if (attr == null) {\n                element.setAttribute(name.getName(), \"\");\n            }\n        }\n        NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        Element parent = nodeParent(node);\n        if (parent == null) {\n            throw new JXPathException(\"Cannot remove root JDOM node\");\n        }\n        parent.getContent().remove(node);\n    }\n\n    public String asPath() {\n        if (id != null) {\n            return \"id('\" + escape(id) + \"')\";\n        }\n\n        StringBuffer buffer = new StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        if (node instanceof Element) {\n            \n            \n            \n            if (parent instanceof JDOMNodePointer) {\n                if (buffer.length() == 0\n                    || buffer.charAt(buffer.length() - 1) != '/') {\n                    buffer.append('/');\n                }\n                String nsURI = getNamespaceURI();\n                String ln = JDOMNodePointer.getLocalName(node);\n\n                if (nsURI == null) {\n                    buffer.append(ln);\n                    buffer.append('[');\n                    buffer.append(getRelativePositionByQName()).append(']');\n                }\n                else {\n                    String prefix = getNamespaceResolver().getPrefix(nsURI);\n                    if (prefix != null) {\n                        buffer.append(prefix);\n                        buffer.append(':');\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByQName());\n                        buffer.append(']');\n                    }\n                    else {\n                        buffer.append(\"node()\");\n                        buffer.append('[');\n                        buffer.append(getRelativePositionOfElement());\n                        buffer.append(']');\n                    }\n                }\n\n            }\n        }\n        else if (node instanceof Text || node instanceof CDATA) {\n            buffer.append(\"/text()\");\n            buffer.append('[').append(getRelativePositionOfTextNode()).append(\n                ']');\n        }\n        else if (node instanceof ProcessingInstruction) {\n            buffer.append(\"/processing-instruction(\\'\").append(((ProcessingInstruction) node).getTarget()).append(\n                \"')\");\n            buffer.append('[').append(getRelativePositionOfPI()).append(\n                ']');\n        }\n        return buffer.toString();\n    }\n\n    \n    private int getRelativePositionByQName() {\n        if (node instanceof Element) {\n            Object parent = ((Element) node).getParent();\n            if (!(parent instanceof Element)) {\n                return 1;\n            }\n\n            List children = ((Element) parent).getContent();\n            int count = 0;\n            String name = ((Element) node).getQualifiedName();\n            for (int i = 0; i < children.size(); i++) {\n                Object child = children.get(i);\n                if ((child instanceof Element)\n                    && ((Element) child).getQualifiedName().equals(name)) {\n                    count++;\n                }\n                if (child == node) {\n                    break;\n                }\n            }\n            return count;\n        }\n        return 1;\n    }\n\n\n    \n    private int getRelativePositionOfElement() {\n        Object parent = ((Element) node).getParent();\n        if (parent == null) {\n            return 1;\n        }\n        List children;\n        if (parent instanceof Element) {\n            children = ((Element) parent).getContent();\n        }\n        else {\n            children = ((Document) parent).getContent();\n        }\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            Object child = children.get(i);\n            if (child instanceof Element) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    \n    private int getRelativePositionOfTextNode() {\n        Element parent;\n        if (node instanceof Text) {\n            parent = (Element) ((Text) node).getParent();\n        }\n        else {\n            parent = (Element) ((CDATA) node).getParent();\n        }\n        if (parent == null) {\n            return 1;\n        }\n        List children = parent.getContent();\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            Object child = children.get(i);\n            if (child instanceof Text || child instanceof CDATA) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    \n    private int getRelativePositionOfPI() {\n        String target = ((ProcessingInstruction) node).getTarget();\n        Element parent = (Element) ((ProcessingInstruction) node).getParent();\n        if (parent == null) {\n            return 1;\n        }\n        List children = parent.getContent();\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            Object child = children.get(i);\n            if (child instanceof ProcessingInstruction\n                && (target == null\n                    || target.equals(\n                        ((ProcessingInstruction) child).getTarget()))) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int hashCode() {\n        return node.hashCode();\n    }\n\n    public boolean equals(Object object) {\n        if (object == this) {\n            return true;\n        }\n\n        if (!(object instanceof JDOMNodePointer)) {\n            return false;\n        }\n\n        JDOMNodePointer other = (JDOMNodePointer) object;\n        return node == other.node;\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.jxpath.ri.model.jdom;\n\nimport java.util.List;\nimport java.util.Locale;\n\nimport org.apache.commons.jxpath.JXPathAbstractFactoryException;\nimport org.apache.commons.jxpath.JXPathContext;\nimport org.apache.commons.jxpath.JXPathException;\nimport org.apache.commons.jxpath.ri.Compiler;\nimport org.apache.commons.jxpath.ri.NamespaceResolver;\nimport org.apache.commons.jxpath.ri.QName;\nimport org.apache.commons.jxpath.ri.compiler.NodeNameTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\nimport org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;\nimport org.apache.commons.jxpath.ri.model.NodeIterator;\nimport org.apache.commons.jxpath.ri.model.NodePointer;\nimport org.apache.commons.jxpath.util.TypeUtils;\nimport org.jdom.Attribute;\nimport org.jdom.CDATA;\nimport org.jdom.Comment;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.ProcessingInstruction;\nimport org.jdom.Text;\n\n\npublic class JDOMNodePointer extends NodePointer { private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; private NamespaceResolver localNamespaceResolver; public static final String XML_NAMESPACE_URI = \"http: public static final String XMLNS_NAMESPACE_URI = \"http: public JDOMNodePointer(Object node, Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    \n    public JDOMNodePointer(Object node, Locale locale, String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    \n    public JDOMNodePointer(NodePointer parent, Object node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) {\n        return new JDOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public NodeIterator attributeIterator(QName name) {\n        return new JDOMAttributeIterator(this, name);\n    }\n\n    public NodeIterator namespaceIterator() {\n        return new JDOMNamespaceIterator(this);\n    }\n\n    public NodePointer namespacePointer(String prefix) {\n        return new JDOMNamespacePointer(this, prefix);\n    }\n\n    public String getNamespaceURI() {\n        return getNamespaceURI(node);\n    }\n\n    \n    private static String getNamespaceURI(Object node) {\n        if (node instanceof Element) {\n            Element element = (Element) node;\n            String ns = element.getNamespaceURI();\n            if (ns != null && ns.equals(\"\")) {\n                ns = null;\n            }\n            return ns;\n        }\n        return null;\n    }\n\n    public synchronized NamespaceResolver getNamespaceResolver() {\n        if (localNamespaceResolver == null) {\n            localNamespaceResolver = new NamespaceResolver(super.getNamespaceResolver());\n            localNamespaceResolver.setNamespaceContextPointer(this);\n        }\n        return localNamespaceResolver;\n    }\n\n    public String getNamespaceURI(String prefix) {\n        if (prefix.equals(\"xml\")) {\n            return Namespace.XML_NAMESPACE.getURI();\n        }\n        Element element = null;\n        if (node instanceof Document) {\n            element = ((Document) node).getRootElement();\n        }\n        if (node instanceof Element) {\n            element = (Element) node;\n        }\n        if (element == null) {\n            return null;\n        }\n        Namespace ns = element.getNamespace(prefix);\n        return ns == null ? null : ns.getURI();\n    }\n\n    public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; \n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }\n\n    public Object getBaseValue() {\n        return node;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        if (node instanceof Element) {\n            return ((Element) node).getContent().size() == 0;\n        }\n        if (node instanceof Document) {\n            return ((Document) node).getContent().size() == 0;\n        }\n        return true;\n    }\n\n    public QName getName() {\n        String ns = null;\n        String ln = null;\n        if (node instanceof Element) {\n            ns = ((Element) node).getNamespacePrefix();\n            if (ns != null && ns.equals(\"\")) {\n                ns = null;\n            }\n            ln = ((Element) node).getName();\n        }\n        else if (node instanceof ProcessingInstruction) {\n            ln = ((ProcessingInstruction) node).getTarget();\n        }\n        return new QName(ns, ln);\n    }\n\n    public Object getImmediateNode() {\n        return node;\n    }\n\n    public Object getValue() {\n        if (node instanceof Element) {\n            StringBuffer buf = new StringBuffer();\n            for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n                NodePointer ptr = children.getNodePointer();\n                if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {\n                    buf.append(ptr.getValue());\n                }\n            }\n            return buf.toString();\n        }\n        if (node instanceof Comment) {\n            String text = ((Comment) node).getText();\n            if (text != null) {\n                text = text.trim();\n            }\n            return text;\n        }\n        String result = null;\n        if (node instanceof Text) {\n            result = ((Text) node).getText();\n        }\n        if (node instanceof ProcessingInstruction) {\n            result = ((ProcessingInstruction) node).getData();\n        }\n        boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\n        return result != null && trim ? result.trim() : result;\n    }\n\n    public void setValue(Object value) {\n        if (node instanceof Text) {\n            String string = (String) TypeUtils.convert(value, String.class);\n            if (string != null && !string.equals(\"\")) {\n                ((Text) node).setText(string);\n            }\n            else {\n                nodeParent(node).removeContent((Text) node);\n            }\n        }\n        else {\n            Element element = (Element) node;\n            element.getContent().clear();\n\n            if (value instanceof Element) {\n                Element valueElement = (Element) value;\n                addContent(valueElement.getContent());\n            }\n            else if (value instanceof Document) {\n                Document valueDocument = (Document) value;\n                addContent(valueDocument.getContent());\n            }\n            else if (value instanceof Text || value instanceof CDATA) {\n                String string = ((Text) value).getText();\n                element.addContent(new Text(string));\n            }\n            else if (value instanceof ProcessingInstruction) {\n                ProcessingInstruction pi =\n                    (ProcessingInstruction) ((ProcessingInstruction) value)\n                        .clone();\n                element.addContent(pi);\n            }\n            else if (value instanceof Comment) {\n                Comment comment = (Comment) ((Comment) value).clone();\n                element.addContent(comment);\n            }\n            else {\n                String string = (String) TypeUtils.convert(value, String.class);\n                if (string != null && !string.equals(\"\")) {\n                    element.addContent(new Text(string));\n                }\n            }\n        }\n    }\n\n    \n    private void addContent(List content) {\n        Element element = (Element) node;\n        int count = content.size();\n\n        for (int i = 0; i < count; i++) {\n            Object child = content.get(i);\n            if (child instanceof Element) {\n                child = ((Element) child).clone();\n                element.addContent((Element) child);\n            }\n            else if (child instanceof Text) {\n                child = ((Text) child).clone();\n                element.addContent((Text) child);\n            }\n            else if (node instanceof CDATA) {\n                child = ((CDATA) child).clone();\n                element.addContent((CDATA) child);\n            }\n            else if (node instanceof ProcessingInstruction) {\n                child = ((ProcessingInstruction) child).clone();\n                element.addContent((ProcessingInstruction) child);\n            }\n            else if (node instanceof Comment) {\n                child = ((Comment) child).clone();\n                element.addContent((Comment) child);\n            }\n        }\n    }\n\n    public boolean testNode(NodeTest test) {\n        return testNode(this, node, test);\n    }\n\n    \n    public static boolean testNode( NodePointer pointer, Object node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            if (!(node instanceof Element)) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            String testPrefix = testName.getPrefix();\n            if (wildcard && testPrefix == null) {\n                return true;\n            }\n            if (wildcard\n                || testName.getName()\n                        .equals(JDOMNodePointer.getLocalName(node))) {\n                String nodeNS = JDOMNodePointer.getNamespaceURI(node);\n                return equalStrings(namespaceURI, nodeNS) || nodeNS == null\n                        && equalStrings(testPrefix, getPrefix(node));\n            }\n            return false;\n        }\n        if (test instanceof NodeTypeTest) {\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return true;\n                case Compiler.NODE_TYPE_TEXT :\n                    return (node instanceof Text) || (node instanceof CDATA);\n                case Compiler.NODE_TYPE_COMMENT :\n                    return node instanceof Comment;\n                case Compiler.NODE_TYPE_PI :\n                    return node instanceof ProcessingInstruction;\n                default:\n                    return false;\n            }\n        }\n        if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n        return false;\n    }\n\n    \n    private static boolean equalStrings(String s1, String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = s1 == null ? \"\" : s1.trim();\n        s2 = s2 == null ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    \n    public static String getPrefix(Object node) {\n        if (node instanceof Element) {\n            String prefix = ((Element) node).getNamespacePrefix();\n            return (prefix == null || prefix.equals(\"\")) ? null : prefix;\n        }\n        if (node instanceof Attribute) {\n            String prefix = ((Attribute) node).getNamespacePrefix();\n            return (prefix == null || prefix.equals(\"\")) ? null : prefix;\n        }\n        return null;\n    }\n\n    \n    public static String getLocalName(Object node) {\n        if (node instanceof Element) {\n            return ((Element) node).getName();\n        }\n        if (node instanceof Attribute) {\n            return ((Attribute) node).getName();\n        }\n        return null;\n    }\n\n    \n    public boolean isLanguage(String lang) {\n        String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase(\n                Locale.ENGLISH).startsWith(lang.toUpperCase(Locale.ENGLISH));\n    }\n\n    \n    protected String getLanguage() {\n        return findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE);\n    }\n\n    \n    protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns) {\n        while (n != null) {\n            if (n instanceof Element) {\n                Element e = (Element) n;\n                String attr = e.getAttributeValue(attrName, ns);\n                if (attr != null && !attr.equals(\"\")) {\n                    return attr;\n                }\n            }\n            n = nodeParent(n);\n        }\n        return null;\n    }\n\n    \n    private static Element nodeParent(Object node) {\n        if (node instanceof Element) {\n            Object parent = ((Element) node).getParent();\n            return parent instanceof Element ? (Element) parent : null;\n        }\n        if (node instanceof Text) {\n            return (Element) ((Text) node).getParent();\n        }\n        if (node instanceof CDATA) {\n            return (Element) ((CDATA) node).getParent();\n        }\n        if (node instanceof ProcessingInstruction) {\n            return (Element) ((ProcessingInstruction) node).getParent();\n        }\n        if (node instanceof Comment) {\n            return (Element) ((Comment) node).getParent();\n        }\n        return null;\n    }\n\n    public NodePointer createChild( JXPathContext context, QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success =\n            getAbstractFactory(context).createObject(\n                context,\n                this,\n                node,\n                name.toString(),\n                index);\n        if (success) {\n            NodeTest nodeTest;\n            String prefix = name.getPrefix();\n            String namespaceURI = prefix == null ? null : context\n                    .getNamespaceURI(prefix);\n            nodeTest = new NodeNameTest(name, namespaceURI);\n\n            NodeIterator it =\n                childIterator(nodeTest, false, null);\n            if (it != null && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new JXPathAbstractFactoryException(\"Factory could not create \"\n                + \"a child node for path: \" + asPath() + \"/\" + name + \"[\"\n                + (index + 1) + \"]\");\n    }\n\n    public NodePointer createChild( JXPathContext context, QName name, int index, Object value) {\n        NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public NodePointer createAttribute(JXPathContext context, QName name) {\n        if (!(node instanceof Element)) {\n            return super.createAttribute(context, name);\n        }\n\n        Element element = (Element) node;\n        String prefix = name.getPrefix();\n        if (prefix != null) {\n            String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);\n            if (namespaceUri == null) {\n                throw new JXPathException(\n                    \"Unknown namespace prefix: \" + prefix);\n            }\n            Namespace ns = Namespace.getNamespace(prefix, namespaceUri);\n            Attribute attr = element.getAttribute(name.getName(), ns);\n            if (attr == null) {\n                element.setAttribute(name.getName(), \"\", ns);\n            }\n        }\n        else {\n            Attribute attr = element.getAttribute(name.getName());\n            if (attr == null) {\n                element.setAttribute(name.getName(), \"\");\n            }\n        }\n        NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        Element parent = nodeParent(node);\n        if (parent == null) {\n            throw new JXPathException(\"Cannot remove root JDOM node\");\n        }\n        parent.getContent().remove(node);\n    }\n\n    public String asPath() {\n        if (id != null) {\n            return \"id('\" + escape(id) + \"')\";\n        }\n\n        StringBuffer buffer = new StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        if (node instanceof Element) {\n            \n            \n            \n            if (parent instanceof JDOMNodePointer) {\n                if (buffer.length() == 0\n                    || buffer.charAt(buffer.length() - 1) != '/') {\n                    buffer.append('/');\n                }\n                String nsURI = getNamespaceURI();\n                String ln = JDOMNodePointer.getLocalName(node);\n\n                if (nsURI == null) {\n                    buffer.append(ln);\n                    buffer.append('[');\n                    buffer.append(getRelativePositionByQName()).append(']');\n                }\n                else {\n                    String prefix = getNamespaceResolver().getPrefix(nsURI);\n                    if (prefix != null) {\n                        buffer.append(prefix);\n                        buffer.append(':');\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByQName());\n                        buffer.append(']');\n                    }\n                    else {\n                        buffer.append(\"node()\");\n                        buffer.append('[');\n                        buffer.append(getRelativePositionOfElement());\n                        buffer.append(']');\n                    }\n                }\n\n            }\n        }\n        else if (node instanceof Text || node instanceof CDATA) {\n            buffer.append(\"/text()\");\n            buffer.append('[').append(getRelativePositionOfTextNode()).append(\n                ']');\n        }\n        else if (node instanceof ProcessingInstruction) {\n            buffer.append(\"/processing-instruction(\\'\").append(((ProcessingInstruction) node).getTarget()).append(\n                \"')\");\n            buffer.append('[').append(getRelativePositionOfPI()).append(\n                ']');\n        }\n        return buffer.toString();\n    }\n\n    \n    private int getRelativePositionByQName() {\n        if (node instanceof Element) {\n            Object parent = ((Element) node).getParent();\n            if (!(parent instanceof Element)) {\n                return 1;\n            }\n\n            List children = ((Element) parent).getContent();\n            int count = 0;\n            String name = ((Element) node).getQualifiedName();\n            for (int i = 0; i < children.size(); i++) {\n                Object child = children.get(i);\n                if (child instanceof Element && matchesQName(((Element) child))) {\n                    count++;\n                }\n                if (child == node) {\n                    break;\n                }\n            }\n            return count;\n        }\n        return 1;\n    }\n\n    private boolean matchesQName(Element element) {\n        if (getNamespaceURI() != null) {\n            String ns = getNamespaceURI(element);\n            if (ns == null || !ns.equals(getNamespaceURI())) {\n                return false;\n            }\n        }\n        return element.getName().equals(((Element) node).getName());\n    }\n\n    \n    private int getRelativePositionOfElement() {\n        Object parent = ((Element) node).getParent();\n        if (parent == null) {\n            return 1;\n        }\n        List children;\n        if (parent instanceof Element) {\n            children = ((Element) parent).getContent();\n        }\n        else {\n            children = ((Document) parent).getContent();\n        }\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            Object child = children.get(i);\n            if (child instanceof Element) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    \n    private int getRelativePositionOfTextNode() {\n        Element parent;\n        if (node instanceof Text) {\n            parent = (Element) ((Text) node).getParent();\n        }\n        else {\n            parent = (Element) ((CDATA) node).getParent();\n        }\n        if (parent == null) {\n            return 1;\n        }\n        List children = parent.getContent();\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            Object child = children.get(i);\n            if (child instanceof Text || child instanceof CDATA) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    \n    private int getRelativePositionOfPI() {\n        String target = ((ProcessingInstruction) node).getTarget();\n        Element parent = (Element) ((ProcessingInstruction) node).getParent();\n        if (parent == null) {\n            return 1;\n        }\n        List children = parent.getContent();\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            Object child = children.get(i);\n            if (child instanceof ProcessingInstruction\n                && (target == null\n                    || target.equals(\n                        ((ProcessingInstruction) child).getTarget()))) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int hashCode() {\n        return node.hashCode();\n    }\n\n    public boolean equals(Object object) {\n        if (object == this) {\n            return true;\n        }\n\n        if (!(object instanceof JDOMNodePointer)) {\n            return false;\n        }\n\n        JDOMNodePointer other = (JDOMNodePointer) object;\n        return node == other.node;\n    }\n\n}\n",
      "buggy_signatures": [
        "public JDOMNodePointer(Object node, Locale locale, String id)",
        "public JDOMNodePointer(NodePointer parent, Object node)",
        "public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith)",
        "public NodeIterator attributeIterator(QName name)",
        "public NodeIterator namespaceIterator()",
        "public NodePointer namespacePointer(String prefix)",
        "public String getNamespaceURI()",
        "private static String getNamespaceURI(Object node)",
        "public synchronized NamespaceResolver getNamespaceResolver()",
        "public String getNamespaceURI(String prefix)",
        "public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2)",
        "public Object getBaseValue()",
        "public boolean isCollection()",
        "public int getLength()",
        "public boolean isLeaf()",
        "public QName getName()",
        "public Object getImmediateNode()",
        "public Object getValue()",
        "public void setValue(Object value)",
        "private void addContent(List content)",
        "public boolean testNode(NodeTest test)",
        "public static boolean testNode( NodePointer pointer, Object node, NodeTest test)",
        "private static boolean equalStrings(String s1, String s2)",
        "public static String getPrefix(Object node)",
        "public static String getLocalName(Object node)",
        "public boolean isLanguage(String lang)",
        "protected String getLanguage()",
        "protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns)",
        "private static Element nodeParent(Object node)",
        "public NodePointer createChild( JXPathContext context, QName name, int index)",
        "public NodePointer createChild( JXPathContext context, QName name, int index, Object value)",
        "public NodePointer createAttribute(JXPathContext context, QName name)",
        "public void remove()",
        "public String asPath()",
        "private int getRelativePositionByQName()",
        "private int getRelativePositionOfElement()",
        "private int getRelativePositionOfTextNode()",
        "private int getRelativePositionOfPI()",
        "public int hashCode()",
        "public boolean equals(Object object)"
      ],
      "fixed_signatures": [
        "public JDOMNodePointer(Object node, Locale locale, String id)",
        "public JDOMNodePointer(NodePointer parent, Object node)",
        "public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith)",
        "public NodeIterator attributeIterator(QName name)",
        "public NodeIterator namespaceIterator()",
        "public NodePointer namespacePointer(String prefix)",
        "public String getNamespaceURI()",
        "private static String getNamespaceURI(Object node)",
        "public synchronized NamespaceResolver getNamespaceResolver()",
        "public String getNamespaceURI(String prefix)",
        "public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2)",
        "public Object getBaseValue()",
        "public boolean isCollection()",
        "public int getLength()",
        "public boolean isLeaf()",
        "public QName getName()",
        "public Object getImmediateNode()",
        "public Object getValue()",
        "public void setValue(Object value)",
        "private void addContent(List content)",
        "public boolean testNode(NodeTest test)",
        "public static boolean testNode( NodePointer pointer, Object node, NodeTest test)",
        "private static boolean equalStrings(String s1, String s2)",
        "public static String getPrefix(Object node)",
        "public static String getLocalName(Object node)",
        "public boolean isLanguage(String lang)",
        "protected String getLanguage()",
        "protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns)",
        "private static Element nodeParent(Object node)",
        "public NodePointer createChild( JXPathContext context, QName name, int index)",
        "public NodePointer createChild( JXPathContext context, QName name, int index, Object value)",
        "public NodePointer createAttribute(JXPathContext context, QName name)",
        "public void remove()",
        "public String asPath()",
        "private int getRelativePositionByQName()",
        "private boolean matchesQName(Element element)",
        "private int getRelativePositionOfElement()",
        "private int getRelativePositionOfTextNode()",
        "private int getRelativePositionOfPI()",
        "public int hashCode()",
        "public boolean equals(Object object)"
      ],
      "methods": [
        {
          "buggy_method": "  private int getRelativePositionByQName() {\n  if (node instanceof Element) {\n  Object parent = ((Element) node).getParent();\n  if (!(parent instanceof Element)) {\n  return 1;\n  }\n\n  List children = ((Element) parent).getContent();\n  int count = 0;\n  String name = ((Element) node).getQualifiedName();\n  for (int i = 0; i < children.size(); i++) {\n  Object child = children.get(i);\n  if ((child instanceof Element)\n  && ((Element) child).getQualifiedName().equals(name)) {\n  count++;\n  }\n  if (child == node) {\n  break;\n  }\n  }\n  return count;\n  }\n  return 1;\n  }",
          "fixed_method": "  private int getRelativePositionByQName() {\n  if (node instanceof Element) {\n  Object parent = ((Element) node).getParent();\n  if (!(parent instanceof Element)) {\n  return 1;\n  }\n\n  List children = ((Element) parent).getContent();\n  int count = 0;\n  String name = ((Element) node).getQualifiedName();\n  for (int i = 0; i < children.size(); i++) {\n  Object child = children.get(i);\n  if (child instanceof Element && matchesQName(((Element) child))) {\n  count++;\n  }\n  if (child == node) {\n  break;\n  }\n  }\n  return count;\n  }\n  return 1;\n  }",
          "diff": [
            "@@ -693,8 +693,7 @@",
            "             String name = ((Element) node).getQualifiedName();\n",
            "             for (int i = 0; i < children.size(); i++) {\n",
            "                 Object child = children.get(i);\n",
            "-                if ((child instanceof Element)\n",
            "-                    && ((Element) child).getQualifiedName().equals(name)) {\n",
            "+                if (child instanceof Element && matchesQName(((Element) child))) {\n",
            "                     count++;\n",
            "                 }\n",
            "                 if (child == node) {\n",
            "@@ -706,6 +705,15 @@",
            "         return 1;\n",
            "     }\n",
            " \n",
            "+    private boolean matchesQName(Element element) {\n",
            "+        if (getNamespaceURI() != null) {\n",
            "+            String ns = getNamespaceURI(element);\n",
            "+            if (ns == null || !ns.equals(getNamespaceURI())) {\n",
            "+                return false;\n",
            "+            }\n",
            "+        }\n",
            "+        return element.getName().equals(((Element) node).getName());\n",
            "+    }\n",
            " \n",
            "     /**\n",
            "      * Get relative position of this among all siblings.\n"
          ],
          "changed_lines": 12
        }
      ]
    }
  ]
}
