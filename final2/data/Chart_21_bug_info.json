{
  "bug_id": "21",
  "failed_tests": {
    "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests": [
      {
        "methodName": "testGetRangeBounds",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<Range[8.5,9.6]> but was:<Range[8.6,9.6]>",
        "fail_line": "        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));",
        "test_source": "  public void testGetRangeBounds() {\n  DefaultBoxAndWhiskerCategoryDataset d1 \n  = new DefaultBoxAndWhiskerCategoryDataset();\n  d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n  new ArrayList()), \"R1\", \"C1\");\n  assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));\n  assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));\n  \n  d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n  new ArrayList()), \"R1\", \"C1\");\n  assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));\n  assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));\n  \n  d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n  new ArrayList()), \"R2\", \"C1\");\n  assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));\n  assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));\n  \n  // this replaces the entry with the current minimum value, but the new\n  // minimum value is now in a different item\n  d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n  new ArrayList()), \"R1\", \"C1\");\n  assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));\n  assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));\n  }",
        "stack": [
          "DefaultBoxAndWhiskerCategoryDatasetTests.testGetRangeBounds line 292"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
      "buggy_full_code": "\n\npackage org.jfree.data.statistics;\n\nimport java.util.List;\n\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.PublicCloneable;\nimport org.jfree.data.KeyedObjects2D;\nimport org.jfree.data.Range;\nimport org.jfree.data.RangeInfo;\nimport org.jfree.data.general.AbstractDataset;\n\n\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { protected KeyedObjects2D data; private double minimumRangeValue; private int minimumRangeValueRow; private int minimumRangeValueColumn; private double maximumRangeValue; private int maximumRangeValueRow; private int maximumRangeValueColumn; private Range rangeBounds; public DefaultBoxAndWhiskerCategoryDataset() {\n        this.data = new KeyedObjects2D();\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.rangeBounds = new Range(0.0, 0.0);\n    }\n\n    \n    public void add(List list, Comparable rowKey, Comparable columnKey) {\n        BoxAndWhiskerItem item = BoxAndWhiskerCalculator\n                .calculateBoxAndWhiskerStatistics(list);\n        add(item, rowKey, columnKey);\n    }\n    \n    \n    public void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey) {\n\n        this.data.addObject(item, rowKey, columnKey);\n        \n        \n        int r = this.data.getRowIndex(rowKey);\n        int c = this.data.getColumnIndex(columnKey);\n        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn \n                == c) || (this.minimumRangeValueRow == r \n                && this.minimumRangeValueColumn == c))  {\n            updateBounds();\n        }\n        \n            double minval = Double.NaN;\n            if (item.getMinOutlier() != null) {\n                minval = item.getMinOutlier().doubleValue();\n            }\n            double maxval = Double.NaN;\n            if (item.getMaxOutlier() != null) {\n                maxval = item.getMaxOutlier().doubleValue();\n            }\n        \n            if (Double.isNaN(this.maximumRangeValue)) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n            else if (maxval > this.maximumRangeValue) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n        \n            if (Double.isNaN(this.minimumRangeValue)) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n            else if (minval < this.minimumRangeValue) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n        \n        this.rangeBounds = new Range(this.minimumRangeValue,\n              this.maximumRangeValue);\n        fireDatasetChanged();\n\n    }\n\n    \n    public BoxAndWhiskerItem getItem(int row, int column) {\n        return (BoxAndWhiskerItem) this.data.getObject(row, column);  \n    }\n\n    \n    public Number getValue(int row, int column) {\n        return getMedianValue(row, column);\n    }\n\n    \n    public Number getValue(Comparable rowKey, Comparable columnKey) {\n        return getMedianValue(rowKey, columnKey);\n    }\n\n    \n    public Number getMeanValue(int row, int column) {\n\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, \n                column);\n        if (item != null) {\n            result = item.getMean();\n        }\n        return result;\n\n    }\n\n    \n    public Number getMeanValue(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMean();\n        }\n        return result;\n    }\n\n    \n    public Number getMedianValue(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, \n                column);\n        if (item != null) {\n            result = item.getMedian();\n        }\n        return result;\n    }\n\n    \n    public Number getMedianValue(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMedian();\n        }\n        return result;\n    }\n\n    \n    public Number getQ1Value(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getQ1();\n        }\n        return result;\n    }\n\n    \n    public Number getQ1Value(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getQ1();\n        }\n        return result;\n    }\n\n    \n    public Number getQ3Value(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getQ3();\n        }\n        return result;\n    }\n\n    \n    public Number getQ3Value(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getQ3();\n        }\n        return result;\n    }\n\n    \n    public int getColumnIndex(Comparable key) {\n        return this.data.getColumnIndex(key);\n    }\n\n    \n    public Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n\n    \n    public List getColumnKeys() {\n        return this.data.getColumnKeys();\n    }\n\n    \n    public int getRowIndex(Comparable key) {\n        return this.data.getRowIndex(key);\n    }\n\n    \n    public Comparable getRowKey(int row) {\n        return this.data.getRowKey(row);\n    }\n\n    \n    public List getRowKeys() {\n        return this.data.getRowKeys();\n    }\n\n    \n    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n\n    \n    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n\n    \n    public double getRangeLowerBound(boolean includeInterval) {\n        return this.minimumRangeValue;\n    }\n\n    \n    public double getRangeUpperBound(boolean includeInterval) {\n        return this.maximumRangeValue;\n    }\n\n    \n    public Range getRangeBounds(boolean includeInterval) {\n        return this.rangeBounds;\n    }\n    \n    \n    public Number getMinRegularValue(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getMinRegularValue();\n        }\n        return result;\n    }\n\n    \n    public Number getMinRegularValue(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMinRegularValue();\n        }\n        return result;\n    }\n\n    \n    public Number getMaxRegularValue(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getMaxRegularValue();\n        }\n        return result;\n    }\n\n    \n    public Number getMaxRegularValue(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMaxRegularValue();\n        }\n        return result;\n    }\n\n    \n    public Number getMinOutlier(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getMinOutlier();\n        }\n        return result;\n    }\n\n    \n    public Number getMinOutlier(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMinOutlier();\n        }\n        return result;\n    }\n\n    \n    public Number getMaxOutlier(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getMaxOutlier();\n        }\n        return result;\n    }\n\n    \n    public Number getMaxOutlier(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMaxOutlier();\n        }\n        return result;\n    }\n\n    \n    public List getOutliers(int row, int column) {\n        List result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getOutliers();\n        }\n        return result;\n    }\n\n    \n    public List getOutliers(Comparable rowKey, Comparable columnKey) {\n        List result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getOutliers();\n        }\n        return result;\n    }\n    \n    \n    private void updateBounds() {\n        this.minimumRangeValue = Double.NaN;\n        this.maximumRangeValue = Double.NaN;\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (obj instanceof DefaultBoxAndWhiskerCategoryDataset) {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                    = (DefaultBoxAndWhiskerCategoryDataset) obj;\n            return ObjectUtilities.equal(this.data, dataset.data);\n        }\n        return false;\n    }\n    \n    \n    public Object clone() throws CloneNotSupportedException {\n        DefaultBoxAndWhiskerCategoryDataset clone \n                = (DefaultBoxAndWhiskerCategoryDataset) super.clone();\n        clone.data = (KeyedObjects2D) this.data.clone();\n        return clone;\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.jfree.data.statistics;\n\nimport java.util.List;\n\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.PublicCloneable;\nimport org.jfree.data.KeyedObjects2D;\nimport org.jfree.data.Range;\nimport org.jfree.data.RangeInfo;\nimport org.jfree.data.general.AbstractDataset;\n\n\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { protected KeyedObjects2D data; private double minimumRangeValue; private int minimumRangeValueRow; private int minimumRangeValueColumn; private double maximumRangeValue; private int maximumRangeValueRow; private int maximumRangeValueColumn; private Range rangeBounds; public DefaultBoxAndWhiskerCategoryDataset() {\n        this.data = new KeyedObjects2D();\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.rangeBounds = new Range(0.0, 0.0);\n    }\n\n    \n    public void add(List list, Comparable rowKey, Comparable columnKey) {\n        BoxAndWhiskerItem item = BoxAndWhiskerCalculator\n                .calculateBoxAndWhiskerStatistics(list);\n        add(item, rowKey, columnKey);\n    }\n    \n    \n    public void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey) {\n\n        this.data.addObject(item, rowKey, columnKey);\n        \n        \n        int r = this.data.getRowIndex(rowKey);\n        int c = this.data.getColumnIndex(columnKey);\n        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn \n                == c) || (this.minimumRangeValueRow == r \n                && this.minimumRangeValueColumn == c))  {\n            updateBounds();\n        }\n        else {\n        \n            double minval = Double.NaN;\n            if (item.getMinOutlier() != null) {\n                minval = item.getMinOutlier().doubleValue();\n            }\n            double maxval = Double.NaN;\n            if (item.getMaxOutlier() != null) {\n                maxval = item.getMaxOutlier().doubleValue();\n            }\n        \n            if (Double.isNaN(this.maximumRangeValue)) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n            else if (maxval > this.maximumRangeValue) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n        \n            if (Double.isNaN(this.minimumRangeValue)) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n            else if (minval < this.minimumRangeValue) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n        }\n        \n        this.rangeBounds = new Range(this.minimumRangeValue,\n              this.maximumRangeValue);\n        fireDatasetChanged();\n\n    }\n\n    \n    public BoxAndWhiskerItem getItem(int row, int column) {\n        return (BoxAndWhiskerItem) this.data.getObject(row, column);  \n    }\n\n    \n    public Number getValue(int row, int column) {\n        return getMedianValue(row, column);\n    }\n\n    \n    public Number getValue(Comparable rowKey, Comparable columnKey) {\n        return getMedianValue(rowKey, columnKey);\n    }\n\n    \n    public Number getMeanValue(int row, int column) {\n\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, \n                column);\n        if (item != null) {\n            result = item.getMean();\n        }\n        return result;\n\n    }\n\n    \n    public Number getMeanValue(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMean();\n        }\n        return result;\n    }\n\n    \n    public Number getMedianValue(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, \n                column);\n        if (item != null) {\n            result = item.getMedian();\n        }\n        return result;\n    }\n\n    \n    public Number getMedianValue(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMedian();\n        }\n        return result;\n    }\n\n    \n    public Number getQ1Value(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getQ1();\n        }\n        return result;\n    }\n\n    \n    public Number getQ1Value(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getQ1();\n        }\n        return result;\n    }\n\n    \n    public Number getQ3Value(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getQ3();\n        }\n        return result;\n    }\n\n    \n    public Number getQ3Value(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getQ3();\n        }\n        return result;\n    }\n\n    \n    public int getColumnIndex(Comparable key) {\n        return this.data.getColumnIndex(key);\n    }\n\n    \n    public Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n\n    \n    public List getColumnKeys() {\n        return this.data.getColumnKeys();\n    }\n\n    \n    public int getRowIndex(Comparable key) {\n        return this.data.getRowIndex(key);\n    }\n\n    \n    public Comparable getRowKey(int row) {\n        return this.data.getRowKey(row);\n    }\n\n    \n    public List getRowKeys() {\n        return this.data.getRowKeys();\n    }\n\n    \n    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n\n    \n    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n\n    \n    public double getRangeLowerBound(boolean includeInterval) {\n        return this.minimumRangeValue;\n    }\n\n    \n    public double getRangeUpperBound(boolean includeInterval) {\n        return this.maximumRangeValue;\n    }\n\n    \n    public Range getRangeBounds(boolean includeInterval) {\n        return this.rangeBounds;\n    }\n    \n    \n    public Number getMinRegularValue(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getMinRegularValue();\n        }\n        return result;\n    }\n\n    \n    public Number getMinRegularValue(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMinRegularValue();\n        }\n        return result;\n    }\n\n    \n    public Number getMaxRegularValue(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getMaxRegularValue();\n        }\n        return result;\n    }\n\n    \n    public Number getMaxRegularValue(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMaxRegularValue();\n        }\n        return result;\n    }\n\n    \n    public Number getMinOutlier(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getMinOutlier();\n        }\n        return result;\n    }\n\n    \n    public Number getMinOutlier(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMinOutlier();\n        }\n        return result;\n    }\n\n    \n    public Number getMaxOutlier(int row, int column) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getMaxOutlier();\n        }\n        return result;\n    }\n\n    \n    public Number getMaxOutlier(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getMaxOutlier();\n        }\n        return result;\n    }\n\n    \n    public List getOutliers(int row, int column) {\n        List result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                row, column);\n        if (item != null) {\n            result = item.getOutliers();\n        }\n        return result;\n    }\n\n    \n    public List getOutliers(Comparable rowKey, Comparable columnKey) {\n        List result = null;\n        BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(\n                rowKey, columnKey);\n        if (item != null) {\n            result = item.getOutliers();\n        }\n        return result;\n    }\n    \n    \n    private void updateBounds() {\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        int rowCount = getRowCount();\n        int columnCount = getColumnCount();\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                BoxAndWhiskerItem item = getItem(r, c);\n                if (item != null) {\n                    Number min = item.getMinOutlier();\n                    if (min != null) {\n                        double minv = min.doubleValue();\n                        if (!Double.isNaN(minv)) {\n                            if (minv < this.minimumRangeValue || Double.isNaN(\n                                    this.minimumRangeValue)) {\n                                this.minimumRangeValue = minv;\n                                this.minimumRangeValueRow = r;\n                                this.minimumRangeValueColumn = c;\n                            }\n                        }\n                    }\n                    Number max = item.getMaxOutlier();\n                    if (max != null) {\n                        double maxv = max.doubleValue();\n                        if (!Double.isNaN(maxv)) {\n                            if (maxv > this.maximumRangeValue || Double.isNaN(\n                                    this.maximumRangeValue)) {\n                                this.maximumRangeValue = maxv;\n                                this.maximumRangeValueRow = r;\n                                this.maximumRangeValueColumn = c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (obj instanceof DefaultBoxAndWhiskerCategoryDataset) {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                    = (DefaultBoxAndWhiskerCategoryDataset) obj;\n            return ObjectUtilities.equal(this.data, dataset.data);\n        }\n        return false;\n    }\n    \n    \n    public Object clone() throws CloneNotSupportedException {\n        DefaultBoxAndWhiskerCategoryDataset clone \n                = (DefaultBoxAndWhiskerCategoryDataset) super.clone();\n        clone.data = (KeyedObjects2D) this.data.clone();\n        return clone;\n    }\n\n}\n",
      "buggy_signatures": [
        "public class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { protected KeyedObjects2D data; private double minimumRangeValue; private int minimumRangeValueRow; private int minimumRangeValueColumn; private double maximumRangeValue; private int maximumRangeValueRow; private int maximumRangeValueColumn; private Range rangeBounds; public DefaultBoxAndWhiskerCategoryDataset()",
        "public void add(List list, Comparable rowKey, Comparable columnKey)",
        "public void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey)",
        "public BoxAndWhiskerItem getItem(int row, int column)",
        "public Number getValue(int row, int column)",
        "public Number getValue(Comparable rowKey, Comparable columnKey)",
        "public Number getMeanValue(int row, int column)",
        "public Number getMeanValue(Comparable rowKey, Comparable columnKey)",
        "public Number getMedianValue(int row, int column)",
        "public Number getMedianValue(Comparable rowKey, Comparable columnKey)",
        "public Number getQ1Value(int row, int column)",
        "public Number getQ1Value(Comparable rowKey, Comparable columnKey)",
        "public Number getQ3Value(int row, int column)",
        "public Number getQ3Value(Comparable rowKey, Comparable columnKey)",
        "public int getColumnIndex(Comparable key)",
        "public Comparable getColumnKey(int column)",
        "public List getColumnKeys()",
        "public int getRowIndex(Comparable key)",
        "public Comparable getRowKey(int row)",
        "public List getRowKeys()",
        "public int getRowCount()",
        "public int getColumnCount()",
        "public double getRangeLowerBound(boolean includeInterval)",
        "public double getRangeUpperBound(boolean includeInterval)",
        "public Range getRangeBounds(boolean includeInterval)",
        "public Number getMinRegularValue(int row, int column)",
        "public Number getMinRegularValue(Comparable rowKey, Comparable columnKey)",
        "public Number getMaxRegularValue(int row, int column)",
        "public Number getMaxRegularValue(Comparable rowKey, Comparable columnKey)",
        "public Number getMinOutlier(int row, int column)",
        "public Number getMinOutlier(Comparable rowKey, Comparable columnKey)",
        "public Number getMaxOutlier(int row, int column)",
        "public Number getMaxOutlier(Comparable rowKey, Comparable columnKey)",
        "public List getOutliers(int row, int column)",
        "public List getOutliers(Comparable rowKey, Comparable columnKey)",
        "private void updateBounds()",
        "public boolean equals(Object obj)",
        "public Object clone() throws CloneNotSupportedException"
      ],
      "fixed_signatures": [
        "public class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { protected KeyedObjects2D data; private double minimumRangeValue; private int minimumRangeValueRow; private int minimumRangeValueColumn; private double maximumRangeValue; private int maximumRangeValueRow; private int maximumRangeValueColumn; private Range rangeBounds; public DefaultBoxAndWhiskerCategoryDataset()",
        "public void add(List list, Comparable rowKey, Comparable columnKey)",
        "public void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey)",
        "public BoxAndWhiskerItem getItem(int row, int column)",
        "public Number getValue(int row, int column)",
        "public Number getValue(Comparable rowKey, Comparable columnKey)",
        "public Number getMeanValue(int row, int column)",
        "public Number getMeanValue(Comparable rowKey, Comparable columnKey)",
        "public Number getMedianValue(int row, int column)",
        "public Number getMedianValue(Comparable rowKey, Comparable columnKey)",
        "public Number getQ1Value(int row, int column)",
        "public Number getQ1Value(Comparable rowKey, Comparable columnKey)",
        "public Number getQ3Value(int row, int column)",
        "public Number getQ3Value(Comparable rowKey, Comparable columnKey)",
        "public int getColumnIndex(Comparable key)",
        "public Comparable getColumnKey(int column)",
        "public List getColumnKeys()",
        "public int getRowIndex(Comparable key)",
        "public Comparable getRowKey(int row)",
        "public List getRowKeys()",
        "public int getRowCount()",
        "public int getColumnCount()",
        "public double getRangeLowerBound(boolean includeInterval)",
        "public double getRangeUpperBound(boolean includeInterval)",
        "public Range getRangeBounds(boolean includeInterval)",
        "public Number getMinRegularValue(int row, int column)",
        "public Number getMinRegularValue(Comparable rowKey, Comparable columnKey)",
        "public Number getMaxRegularValue(int row, int column)",
        "public Number getMaxRegularValue(Comparable rowKey, Comparable columnKey)",
        "public Number getMinOutlier(int row, int column)",
        "public Number getMinOutlier(Comparable rowKey, Comparable columnKey)",
        "public Number getMaxOutlier(int row, int column)",
        "public Number getMaxOutlier(Comparable rowKey, Comparable columnKey)",
        "public List getOutliers(int row, int column)",
        "public List getOutliers(Comparable rowKey, Comparable columnKey)",
        "private void updateBounds()",
        "public boolean equals(Object obj)",
        "public Object clone() throws CloneNotSupportedException"
      ],
      "methods": [
        {
          "buggy_method": "  public void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey) {\n\n  this.data.addObject(item, rowKey, columnKey);\n  \n  \n  int r = this.data.getRowIndex(rowKey);\n  int c = this.data.getColumnIndex(columnKey);\n  if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn \n  == c) || (this.minimumRangeValueRow == r \n  && this.minimumRangeValueColumn == c))  {\n  updateBounds();\n  }\n  \n  double minval = Double.NaN;\n  if (item.getMinOutlier() != null) {\n  minval = item.getMinOutlier().doubleValue();\n  }\n  double maxval = Double.NaN;\n  if (item.getMaxOutlier() != null) {\n  maxval = item.getMaxOutlier().doubleValue();\n  }\n  \n  if (Double.isNaN(this.maximumRangeValue)) {\n  this.maximumRangeValue = maxval;\n  this.maximumRangeValueRow = r;\n  this.maximumRangeValueColumn = c;\n  }\n  else if (maxval > this.maximumRangeValue) {\n  this.maximumRangeValue = maxval;\n  this.maximumRangeValueRow = r;\n  this.maximumRangeValueColumn = c;\n  }\n  \n  if (Double.isNaN(this.minimumRangeValue)) {\n  this.minimumRangeValue = minval;\n  this.minimumRangeValueRow = r;\n  this.minimumRangeValueColumn = c;\n  }\n  else if (minval < this.minimumRangeValue) {\n  this.minimumRangeValue = minval;\n  this.minimumRangeValueRow = r;\n  this.minimumRangeValueColumn = c;\n  }\n  \n  this.rangeBounds = new Range(this.minimumRangeValue,\n  this.maximumRangeValue);\n  fireDatasetChanged();\n\n  }",
          "fixed_method": "  public void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey) {\n\n  this.data.addObject(item, rowKey, columnKey);\n  \n  \n  int r = this.data.getRowIndex(rowKey);\n  int c = this.data.getColumnIndex(columnKey);\n  if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn \n  == c) || (this.minimumRangeValueRow == r \n  && this.minimumRangeValueColumn == c))  {\n  updateBounds();\n  }\n  else {\n  \n  double minval = Double.NaN;\n  if (item.getMinOutlier() != null) {\n  minval = item.getMinOutlier().doubleValue();\n  }\n  double maxval = Double.NaN;\n  if (item.getMaxOutlier() != null) {\n  maxval = item.getMaxOutlier().doubleValue();\n  }\n  \n  if (Double.isNaN(this.maximumRangeValue)) {\n  this.maximumRangeValue = maxval;\n  this.maximumRangeValueRow = r;\n  this.maximumRangeValueColumn = c;\n  }\n  else if (maxval > this.maximumRangeValue) {\n  this.maximumRangeValue = maxval;\n  this.maximumRangeValueRow = r;\n  this.maximumRangeValueColumn = c;\n  }\n  \n  if (Double.isNaN(this.minimumRangeValue)) {\n  this.minimumRangeValue = minval;\n  this.minimumRangeValueRow = r;\n  this.minimumRangeValueColumn = c;\n  }\n  else if (minval < this.minimumRangeValue) {\n  this.minimumRangeValue = minval;\n  this.minimumRangeValueRow = r;\n  this.minimumRangeValueColumn = c;\n  }\n  }\n  \n  this.rangeBounds = new Range(this.minimumRangeValue,\n  this.maximumRangeValue);\n  fireDatasetChanged();\n\n  }",
          "diff": [
            "@@ -154,6 +154,7 @@",
            "                 && this.minimumRangeValueColumn == c))  {\n",
            "             updateBounds();\n",
            "         }\n",
            "+        else {\n",
            "         \n",
            "             double minval = Double.NaN;\n",
            "             if (item.getMinOutlier() != null) {\n",
            "@@ -185,6 +186,7 @@",
            "                 this.minimumRangeValueRow = r;\n",
            "                 this.minimumRangeValueColumn = c;\n",
            "             }\n",
            "+        }\n",
            "         \n",
            "         this.rangeBounds = new Range(this.minimumRangeValue,\n",
            "               this.maximumRangeValue);\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  private void updateBounds() {\n  this.minimumRangeValue = Double.NaN;\n  this.maximumRangeValue = Double.NaN;\n  }",
          "fixed_method": "  private void updateBounds() {\n  this.minimumRangeValue = Double.NaN;\n  this.minimumRangeValueRow = -1;\n  this.minimumRangeValueColumn = -1;\n  this.maximumRangeValue = Double.NaN;\n  this.maximumRangeValueRow = -1;\n  this.maximumRangeValueColumn = -1;\n  int rowCount = getRowCount();\n  int columnCount = getColumnCount();\n  for (int r = 0; r < rowCount; r++) {\n  for (int c = 0; c < columnCount; c++) {\n  BoxAndWhiskerItem item = getItem(r, c);\n  if (item != null) {\n  Number min = item.getMinOutlier();\n  if (min != null) {\n  double minv = min.doubleValue();\n  if (!Double.isNaN(minv)) {\n  if (minv < this.minimumRangeValue || Double.isNaN(\n  this.minimumRangeValue)) {\n  this.minimumRangeValue = minv;\n  this.minimumRangeValueRow = r;\n  this.minimumRangeValueColumn = c;\n  }\n  }\n  }\n  Number max = item.getMaxOutlier();\n  if (max != null) {\n  double maxv = max.doubleValue();\n  if (!Double.isNaN(maxv)) {\n  if (maxv > this.maximumRangeValue || Double.isNaN(\n  this.maximumRangeValue)) {\n  this.maximumRangeValue = maxv;\n  this.maximumRangeValueRow = r;\n  this.maximumRangeValueColumn = c;\n  }\n  }\n  }\n  }\n  }\n  }\n  }",
          "diff": [
            "@@ -738,7 +740,44 @@",
            "      */\n",
            "     private void updateBounds() {\n",
            "         this.minimumRangeValue = Double.NaN;\n",
            "+        this.minimumRangeValueRow = -1;\n",
            "+        this.minimumRangeValueColumn = -1;\n",
            "         this.maximumRangeValue = Double.NaN;\n",
            "+        this.maximumRangeValueRow = -1;\n",
            "+        this.maximumRangeValueColumn = -1;\n",
            "+        int rowCount = getRowCount();\n",
            "+        int columnCount = getColumnCount();\n",
            "+        for (int r = 0; r < rowCount; r++) {\n",
            "+            for (int c = 0; c < columnCount; c++) {\n",
            "+                BoxAndWhiskerItem item = getItem(r, c);\n",
            "+                if (item != null) {\n",
            "+                    Number min = item.getMinOutlier();\n",
            "+                    if (min != null) {\n",
            "+                        double minv = min.doubleValue();\n",
            "+                        if (!Double.isNaN(minv)) {\n",
            "+                            if (minv < this.minimumRangeValue || Double.isNaN(\n",
            "+                                    this.minimumRangeValue)) {\n",
            "+                                this.minimumRangeValue = minv;\n",
            "+                                this.minimumRangeValueRow = r;\n",
            "+                                this.minimumRangeValueColumn = c;\n",
            "+                            }\n",
            "+                        }\n",
            "+                    }\n",
            "+                    Number max = item.getMaxOutlier();\n",
            "+                    if (max != null) {\n",
            "+                        double maxv = max.doubleValue();\n",
            "+                        if (!Double.isNaN(maxv)) {\n",
            "+                            if (maxv > this.maximumRangeValue || Double.isNaN(\n",
            "+                                    this.maximumRangeValue)) {\n",
            "+                                this.maximumRangeValue = maxv;\n",
            "+                                this.maximumRangeValueRow = r;\n",
            "+                                this.maximumRangeValueColumn = c;\n",
            "+                            }\n",
            "+                        }\n",
            "+                    }\n",
            "+                }\n",
            "+            }\n",
            "+        }\n",
            "     }\n",
            "     \n",
            "     /**\n"
          ],
          "changed_lines": 37
        }
      ]
    }
  ]
}
