{
  "bug_id": "19",
  "failed_tests": {
    "org.jsoup.safety.CleanerTest": [
      {
        "methodName": "handlesCustomProtocols",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<<img [src=\"cid:12345\" />",
        "fail_line": "        assertEquals(\"<img src=\\\"cid:12345\\\" /> \\n<img src=\\\"data:gzzt\\\" />\", preserved);",
        "test_source": "",
        "stack": [
          "CleanerTest.handlesCustomProtocols line 123"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jsoup/safety/Whitelist.java",
      "buggy_full_code": "package org.jsoup.safety;\n\n\n\nimport org.jsoup.helper.Validate;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\n\n\npublic class Whitelist { private Set<TagName> tagNames; private Map<TagName, Set<AttributeKey>> attributes; private Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; private Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols; private boolean preserveRelativeLinks; public static Whitelist none() {\n        return new Whitelist();\n    }\n\n    \n    public static Whitelist simpleText() {\n        return new Whitelist()\n                .addTags(\"b\", \"em\", \"i\", \"strong\", \"u\")\n                ;\n    }\n\n    \n    public static Whitelist basic() {\n        return new Whitelist()\n                .addTags(\n                        \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\", \"sub\",\n                        \"sup\", \"u\", \"ul\")\n\n                .addAttributes(\"a\", \"href\")\n                .addAttributes(\"blockquote\", \"cite\")\n                .addAttributes(\"q\", \"cite\")\n\n                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n                .addProtocols(\"cite\", \"cite\", \"http\", \"https\")\n\n                .addEnforcedAttribute(\"a\", \"rel\", \"nofollow\")\n                ;\n\n    }\n\n    \n    public static Whitelist basicWithImages() {\n        return basic()\n                .addTags(\"img\")\n                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                ;\n    }\n\n    \n    public static Whitelist relaxed() {\n        return new Whitelist()\n                .addTags(\n                        \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n                        \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\",\n                        \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\",\n                        \"ul\")\n\n                .addAttributes(\"a\", \"href\", \"title\")\n                .addAttributes(\"blockquote\", \"cite\")\n                .addAttributes(\"col\", \"span\", \"width\")\n                .addAttributes(\"colgroup\", \"span\", \"width\")\n                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n                .addAttributes(\"ol\", \"start\", \"type\")\n                .addAttributes(\"q\", \"cite\")\n                .addAttributes(\"table\", \"summary\", \"width\")\n                .addAttributes(\"td\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"width\")\n                .addAttributes(\n                        \"th\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"scope\",\n                        \"width\")\n                .addAttributes(\"ul\", \"type\")\n\n                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                .addProtocols(\"q\", \"cite\", \"http\", \"https\")\n                ;\n    }\n\n    \n    public Whitelist() {\n        tagNames = new HashSet<TagName>();\n        attributes = new HashMap<TagName, Set<AttributeKey>>();\n        enforcedAttributes = new HashMap<TagName, Map<AttributeKey, AttributeValue>>();\n        protocols = new HashMap<TagName, Map<AttributeKey, Set<Protocol>>>();\n        preserveRelativeLinks = false;\n    }\n\n    \n    public Whitelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }\n\n    \n    public Whitelist addAttributes(String tag, String... keys) {\n        Validate.notEmpty(tag);\n        Validate.notNull(keys);\n\n        TagName tagName = TagName.valueOf(tag);\n        Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();\n        for (String key : keys) {\n            Validate.notEmpty(key);\n            attributeSet.add(AttributeKey.valueOf(key));\n        }\n        if (attributes.containsKey(tagName)) {\n            Set<AttributeKey> currentSet = attributes.get(tagName);\n            currentSet.addAll(attributeSet);\n        } else {\n            attributes.put(tagName, attributeSet);\n        }\n        return this;\n    }\n\n    \n    public Whitelist addEnforcedAttribute(String tag, String key, String value) {\n        Validate.notEmpty(tag);\n        Validate.notEmpty(key);\n        Validate.notEmpty(value);\n\n        TagName tagName = TagName.valueOf(tag);\n        AttributeKey attrKey = AttributeKey.valueOf(key);\n        AttributeValue attrVal = AttributeValue.valueOf(value);\n\n        if (enforcedAttributes.containsKey(tagName)) {\n            enforcedAttributes.get(tagName).put(attrKey, attrVal);\n        } else {\n            Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>();\n            attrMap.put(attrKey, attrVal);\n            enforcedAttributes.put(tagName, attrMap);\n        }\n        return this;\n    }\n\n    \n    public Whitelist preserveRelativeLinks(boolean preserve) {\n        preserveRelativeLinks = preserve;\n        return this;\n    }\n\n    \n    public Whitelist addProtocols(String tag, String key, String... protocols) {\n        Validate.notEmpty(tag);\n        Validate.notEmpty(key);\n        Validate.notNull(protocols);\n\n        TagName tagName = TagName.valueOf(tag);\n        AttributeKey attrKey = AttributeKey.valueOf(key);\n        Map<AttributeKey, Set<Protocol>> attrMap;\n        Set<Protocol> protSet;\n\n        if (this.protocols.containsKey(tagName)) {\n            attrMap = this.protocols.get(tagName);\n        } else {\n            attrMap = new HashMap<AttributeKey, Set<Protocol>>();\n            this.protocols.put(tagName, attrMap);\n        }\n        if (attrMap.containsKey(attrKey)) {\n            protSet = attrMap.get(attrKey);\n        } else {\n            protSet = new HashSet<Protocol>();\n            attrMap.put(attrKey, protSet);\n        }\n        for (String protocol : protocols) {\n            Validate.notEmpty(protocol);\n            Protocol prot = Protocol.valueOf(protocol);\n            protSet.add(prot);\n        }\n        return this;\n    }\n\n    boolean isSafeTag(String tag) {\n        return tagNames.contains(TagName.valueOf(tag));\n    }\n\n    boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n        TagName tag = TagName.valueOf(tagName);\n        AttributeKey key = AttributeKey.valueOf(attr.getKey());\n\n        if (attributes.containsKey(tag)) {\n            if (attributes.get(tag).contains(key)) {\n                if (protocols.containsKey(tag)) {\n                    Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);\n                    \n                    return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));\n                } else { \n                    return true;\n                }\n            }\n        } else { \n            return !tagName.equals(\":all\") && isSafeAttribute(\":all\", el, attr);\n        }\n        return false;\n    }\n\n    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        \n        \n        String value = el.absUrl(attr.getKey());\n        if (!preserveRelativeLinks)\n            attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    Attributes getEnforcedAttributes(String tagName) {\n        Attributes attrs = new Attributes();\n        TagName tag = TagName.valueOf(tagName);\n        if (enforcedAttributes.containsKey(tag)) {\n            Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag);\n            for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) {\n                attrs.put(entry.getKey().toString(), entry.getValue().toString());\n            }\n        }\n        return attrs;\n    }\n    \n    \n\n    static class TagName extends TypedValue { TagName(String value) {\n            super(value);\n        }\n\n        static TagName valueOf(String value) {\n            return new TagName(value);\n        }\n    }\n\n    static class AttributeKey extends TypedValue { AttributeKey(String value) {\n            super(value);\n        }\n\n        static AttributeKey valueOf(String value) {\n            return new AttributeKey(value);\n        }\n    }\n\n    static class AttributeValue extends TypedValue { AttributeValue(String value) {\n            super(value);\n        }\n\n        static AttributeValue valueOf(String value) {\n            return new AttributeValue(value);\n        }\n    }\n\n    static class Protocol extends TypedValue { Protocol(String value) {\n            super(value);\n        }\n\n        static Protocol valueOf(String value) {\n            return new Protocol(value);\n        }\n    }\n\n    abstract static class TypedValue { private String value; TypedValue(String value) {\n            Validate.notNull(value);\n            this.value = value;\n        }\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((value == null) ? 0 : value.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null) return false;\n            if (getClass() != obj.getClass()) return false;\n            TypedValue other = (TypedValue) obj;\n            if (value == null) {\n                if (other.value != null) return false;\n            } else if (!value.equals(other.value)) return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return value;\n        }\n    }\n}\n\n",
      "fixed_full_code": "package org.jsoup.safety;\n\n\n\nimport org.jsoup.helper.Validate;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\n\n\npublic class Whitelist { private Set<TagName> tagNames; private Map<TagName, Set<AttributeKey>> attributes; private Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; private Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols; private boolean preserveRelativeLinks; public static Whitelist none() {\n        return new Whitelist();\n    }\n\n    \n    public static Whitelist simpleText() {\n        return new Whitelist()\n                .addTags(\"b\", \"em\", \"i\", \"strong\", \"u\")\n                ;\n    }\n\n    \n    public static Whitelist basic() {\n        return new Whitelist()\n                .addTags(\n                        \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\", \"sub\",\n                        \"sup\", \"u\", \"ul\")\n\n                .addAttributes(\"a\", \"href\")\n                .addAttributes(\"blockquote\", \"cite\")\n                .addAttributes(\"q\", \"cite\")\n\n                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n                .addProtocols(\"cite\", \"cite\", \"http\", \"https\")\n\n                .addEnforcedAttribute(\"a\", \"rel\", \"nofollow\")\n                ;\n\n    }\n\n    \n    public static Whitelist basicWithImages() {\n        return basic()\n                .addTags(\"img\")\n                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                ;\n    }\n\n    \n    public static Whitelist relaxed() {\n        return new Whitelist()\n                .addTags(\n                        \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n                        \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\",\n                        \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\",\n                        \"ul\")\n\n                .addAttributes(\"a\", \"href\", \"title\")\n                .addAttributes(\"blockquote\", \"cite\")\n                .addAttributes(\"col\", \"span\", \"width\")\n                .addAttributes(\"colgroup\", \"span\", \"width\")\n                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n                .addAttributes(\"ol\", \"start\", \"type\")\n                .addAttributes(\"q\", \"cite\")\n                .addAttributes(\"table\", \"summary\", \"width\")\n                .addAttributes(\"td\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"width\")\n                .addAttributes(\n                        \"th\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"scope\",\n                        \"width\")\n                .addAttributes(\"ul\", \"type\")\n\n                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                .addProtocols(\"q\", \"cite\", \"http\", \"https\")\n                ;\n    }\n\n    \n    public Whitelist() {\n        tagNames = new HashSet<TagName>();\n        attributes = new HashMap<TagName, Set<AttributeKey>>();\n        enforcedAttributes = new HashMap<TagName, Map<AttributeKey, AttributeValue>>();\n        protocols = new HashMap<TagName, Map<AttributeKey, Set<Protocol>>>();\n        preserveRelativeLinks = false;\n    }\n\n    \n    public Whitelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }\n\n    \n    public Whitelist addAttributes(String tag, String... keys) {\n        Validate.notEmpty(tag);\n        Validate.notNull(keys);\n\n        TagName tagName = TagName.valueOf(tag);\n        Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();\n        for (String key : keys) {\n            Validate.notEmpty(key);\n            attributeSet.add(AttributeKey.valueOf(key));\n        }\n        if (attributes.containsKey(tagName)) {\n            Set<AttributeKey> currentSet = attributes.get(tagName);\n            currentSet.addAll(attributeSet);\n        } else {\n            attributes.put(tagName, attributeSet);\n        }\n        return this;\n    }\n\n    \n    public Whitelist addEnforcedAttribute(String tag, String key, String value) {\n        Validate.notEmpty(tag);\n        Validate.notEmpty(key);\n        Validate.notEmpty(value);\n\n        TagName tagName = TagName.valueOf(tag);\n        AttributeKey attrKey = AttributeKey.valueOf(key);\n        AttributeValue attrVal = AttributeValue.valueOf(value);\n\n        if (enforcedAttributes.containsKey(tagName)) {\n            enforcedAttributes.get(tagName).put(attrKey, attrVal);\n        } else {\n            Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>();\n            attrMap.put(attrKey, attrVal);\n            enforcedAttributes.put(tagName, attrMap);\n        }\n        return this;\n    }\n\n    \n    public Whitelist preserveRelativeLinks(boolean preserve) {\n        preserveRelativeLinks = preserve;\n        return this;\n    }\n\n    \n    public Whitelist addProtocols(String tag, String key, String... protocols) {\n        Validate.notEmpty(tag);\n        Validate.notEmpty(key);\n        Validate.notNull(protocols);\n\n        TagName tagName = TagName.valueOf(tag);\n        AttributeKey attrKey = AttributeKey.valueOf(key);\n        Map<AttributeKey, Set<Protocol>> attrMap;\n        Set<Protocol> protSet;\n\n        if (this.protocols.containsKey(tagName)) {\n            attrMap = this.protocols.get(tagName);\n        } else {\n            attrMap = new HashMap<AttributeKey, Set<Protocol>>();\n            this.protocols.put(tagName, attrMap);\n        }\n        if (attrMap.containsKey(attrKey)) {\n            protSet = attrMap.get(attrKey);\n        } else {\n            protSet = new HashSet<Protocol>();\n            attrMap.put(attrKey, protSet);\n        }\n        for (String protocol : protocols) {\n            Validate.notEmpty(protocol);\n            Protocol prot = Protocol.valueOf(protocol);\n            protSet.add(prot);\n        }\n        return this;\n    }\n\n    boolean isSafeTag(String tag) {\n        return tagNames.contains(TagName.valueOf(tag));\n    }\n\n    boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n        TagName tag = TagName.valueOf(tagName);\n        AttributeKey key = AttributeKey.valueOf(attr.getKey());\n\n        if (attributes.containsKey(tag)) {\n            if (attributes.get(tag).contains(key)) {\n                if (protocols.containsKey(tag)) {\n                    Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);\n                    \n                    return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));\n                } else { \n                    return true;\n                }\n            }\n        } else { \n            return !tagName.equals(\":all\") && isSafeAttribute(\":all\", el, attr);\n        }\n        return false;\n    }\n\n    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        \n        \n        String value = el.absUrl(attr.getKey());\n        if (value.length() == 0)\n            value = attr.getValue(); \n        if (!preserveRelativeLinks)\n            attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    Attributes getEnforcedAttributes(String tagName) {\n        Attributes attrs = new Attributes();\n        TagName tag = TagName.valueOf(tagName);\n        if (enforcedAttributes.containsKey(tag)) {\n            Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag);\n            for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) {\n                attrs.put(entry.getKey().toString(), entry.getValue().toString());\n            }\n        }\n        return attrs;\n    }\n    \n    \n\n    static class TagName extends TypedValue { TagName(String value) {\n            super(value);\n        }\n\n        static TagName valueOf(String value) {\n            return new TagName(value);\n        }\n    }\n\n    static class AttributeKey extends TypedValue { AttributeKey(String value) {\n            super(value);\n        }\n\n        static AttributeKey valueOf(String value) {\n            return new AttributeKey(value);\n        }\n    }\n\n    static class AttributeValue extends TypedValue { AttributeValue(String value) {\n            super(value);\n        }\n\n        static AttributeValue valueOf(String value) {\n            return new AttributeValue(value);\n        }\n    }\n\n    static class Protocol extends TypedValue { Protocol(String value) {\n            super(value);\n        }\n\n        static Protocol valueOf(String value) {\n            return new Protocol(value);\n        }\n    }\n\n    abstract static class TypedValue { private String value; TypedValue(String value) {\n            Validate.notNull(value);\n            this.value = value;\n        }\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((value == null) ? 0 : value.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null) return false;\n            if (getClass() != obj.getClass()) return false;\n            TypedValue other = (TypedValue) obj;\n            if (value == null) {\n                if (other.value != null) return false;\n            } else if (!value.equals(other.value)) return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return value;\n        }\n    }\n}\n\n",
      "buggy_signatures": [
        "public class Whitelist { private Set<TagName> tagNames; private Map<TagName, Set<AttributeKey>> attributes; private Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; private Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols; private boolean preserveRelativeLinks; public static Whitelist none()",
        "public static Whitelist simpleText()",
        "public static Whitelist basic()",
        "public static Whitelist basicWithImages()",
        "public static Whitelist relaxed()",
        "public Whitelist()",
        "public Whitelist addTags(String... tags)",
        "public Whitelist addAttributes(String tag, String... keys)",
        "public Whitelist addEnforcedAttribute(String tag, String key, String value)",
        "public Whitelist preserveRelativeLinks(boolean preserve)",
        "public Whitelist addProtocols(String tag, String key, String... protocols)",
        "private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols)",
        "static class TagName extends TypedValue { TagName(String value)",
        "static TagName valueOf(String value)",
        "static class AttributeKey extends TypedValue { AttributeKey(String value)",
        "static AttributeKey valueOf(String value)",
        "static class AttributeValue extends TypedValue { AttributeValue(String value)",
        "static AttributeValue valueOf(String value)",
        "static class Protocol extends TypedValue { Protocol(String value)",
        "static Protocol valueOf(String value)",
        "abstract static class TypedValue { private String value; TypedValue(String value)",
        "public int hashCode()",
        "public boolean equals(Object obj)",
        "public String toString()"
      ],
      "fixed_signatures": [
        "public class Whitelist { private Set<TagName> tagNames; private Map<TagName, Set<AttributeKey>> attributes; private Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; private Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols; private boolean preserveRelativeLinks; public static Whitelist none()",
        "public static Whitelist simpleText()",
        "public static Whitelist basic()",
        "public static Whitelist basicWithImages()",
        "public static Whitelist relaxed()",
        "public Whitelist()",
        "public Whitelist addTags(String... tags)",
        "public Whitelist addAttributes(String tag, String... keys)",
        "public Whitelist addEnforcedAttribute(String tag, String key, String value)",
        "public Whitelist preserveRelativeLinks(boolean preserve)",
        "public Whitelist addProtocols(String tag, String key, String... protocols)",
        "private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols)",
        "static class TagName extends TypedValue { TagName(String value)",
        "static TagName valueOf(String value)",
        "static class AttributeKey extends TypedValue { AttributeKey(String value)",
        "static AttributeKey valueOf(String value)",
        "static class AttributeValue extends TypedValue { AttributeValue(String value)",
        "static AttributeValue valueOf(String value)",
        "static class Protocol extends TypedValue { Protocol(String value)",
        "static Protocol valueOf(String value)",
        "abstract static class TypedValue { private String value; TypedValue(String value)",
        "public int hashCode()",
        "public boolean equals(Object obj)",
        "public String toString()"
      ],
      "methods": [
        {
          "buggy_method": "  private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n  \n  \n  String value = el.absUrl(attr.getKey());\n  if (!preserveRelativeLinks)\n  attr.setValue(value);\n  \n  for (Protocol protocol : protocols) {\n  String prot = protocol.toString() + \":\";\n  if (value.toLowerCase().startsWith(prot)) {\n  return true;\n  }\n  }\n  return false;\n  }",
          "fixed_method": "  private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n  \n  \n  String value = el.absUrl(attr.getKey());\n  if (value.length() == 0)\n  value = attr.getValue(); \n  if (!preserveRelativeLinks)\n  attr.setValue(value);\n  \n  for (Protocol protocol : protocols) {\n  String prot = protocol.toString() + \":\";\n  if (value.toLowerCase().startsWith(prot)) {\n  return true;\n  }\n  }\n  return false;\n  }",
          "diff": [
            "@@ -339,6 +339,8 @@",
            "         // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n",
            "         // rels without a baseuri get removed\n",
            "         String value = el.absUrl(attr.getKey());\n",
            "+        if (value.length() == 0)\n",
            "+            value = attr.getValue(); // if it could not be made abs, run as-is to allow custom unknown protocols\n",
            "         if (!preserveRelativeLinks)\n",
            "             attr.setValue(value);\n",
            "         \n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
