{
  "bug_id": "45",
  "failed_tests": {
    "org.apache.commons.math.linear.OpenMapRealMatrixTest": [
      {
        "methodName": "testMath679",
        "error": "junit.framework.AssertionFailedError",
        "message": "Expected exception: org.apache.commons.math.exception.NumberIsTooLargeException",
        "fail_line": "",
        "test_source": "  public void testMath679() {\n  new OpenMapRealMatrix(3, Integer.MAX_VALUE);\n  }",
        "stack": [
          ""
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/math/linear/OpenMapRealMatrix.java",
      "buggy_full_code": "\n\npackage org.apache.commons.math.linear;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math.exception.NumberIsTooLargeException;\nimport org.apache.commons.math.util.OpenIntToDoubleHashMap;\n\n\npublic class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix, Serializable { private static final long serialVersionUID = -5962461716457143437L; private final int rows; private final int columns; private final OpenIntToDoubleHashMap entries; public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n        super(rowDimension, columnDimension);\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n        this.entries = new OpenIntToDoubleHashMap(0.0);\n    }\n\n    \n    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {\n        this.rows = matrix.rows;\n        this.columns = matrix.columns;\n        this.entries = new OpenIntToDoubleHashMap(matrix.entries);\n    }\n\n    \n    @Override\n    public OpenMapRealMatrix copy() {\n        return new OpenMapRealMatrix(this);\n    }\n\n    \n    @Override\n    public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension) {\n        return new OpenMapRealMatrix(rowDimension, columnDimension);\n    }\n\n    \n    @Override\n    public int getColumnDimension() {\n        return columns;\n    }\n\n    \n    public OpenMapRealMatrix add(OpenMapRealMatrix m) {\n\n        \n        MatrixUtils.checkAdditionCompatible(this, m);\n\n        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);\n        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {\n            iterator.advance();\n            final int row = iterator.key() / columns;\n            final int col = iterator.key() - row * columns;\n            out.setEntry(row, col, getEntry(row, col) + iterator.value());\n        }\n\n        return out;\n\n    }\n\n    \n    @Override\n    public OpenMapRealMatrix subtract(final RealMatrix m) {\n        try {\n            return subtract((OpenMapRealMatrix) m);\n        } catch (ClassCastException cce) {\n            return (OpenMapRealMatrix) super.subtract(m);\n        }\n    }\n\n    \n    public OpenMapRealMatrix subtract(OpenMapRealMatrix m) {\n        \n        MatrixUtils.checkAdditionCompatible(this, m);\n\n        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);\n        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {\n            iterator.advance();\n            final int row = iterator.key() / columns;\n            final int col = iterator.key() - row * columns;\n            out.setEntry(row, col, getEntry(row, col) - iterator.value());\n        }\n\n        return out;\n    }\n\n    \n    @Override\n    public RealMatrix multiply(final RealMatrix m) {\n        try {\n            return multiply((OpenMapRealMatrix) m);\n        } catch (ClassCastException cce) {\n\n            \n            MatrixUtils.checkMultiplicationCompatible(this, m);\n\n            final int outCols = m.getColumnDimension();\n            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);\n            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {\n                iterator.advance();\n                final double value = iterator.value();\n                final int key      = iterator.key();\n                final int i        = key / columns;\n                final int k        = key % columns;\n                for (int j = 0; j < outCols; ++j) {\n                    out.addToEntry(i, j, value * m.getEntry(k, j));\n                }\n            }\n\n            return out;\n        }\n    }\n\n    \n    public OpenMapRealMatrix multiply(OpenMapRealMatrix m) {\n        \n        MatrixUtils.checkMultiplicationCompatible(this, m);\n\n        final int outCols = m.getColumnDimension();\n        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);\n        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {\n            iterator.advance();\n            final double value = iterator.value();\n            final int key      = iterator.key();\n            final int i        = key / columns;\n            final int k        = key % columns;\n            for (int j = 0; j < outCols; ++j) {\n                final int rightKey = m.computeKey(k, j);\n                if (m.entries.containsKey(rightKey)) {\n                    final int outKey = out.computeKey(i, j);\n                    final double outValue =\n                        out.entries.get(outKey) + value * m.entries.get(rightKey);\n                    if (outValue == 0.0) {\n                        out.entries.remove(outKey);\n                    } else {\n                        out.entries.put(outKey, outValue);\n                    }\n                }\n            }\n        }\n\n        return out;\n    }\n\n    \n    @Override\n    public double getEntry(int row, int column) {\n        MatrixUtils.checkRowIndex(this, row);\n        MatrixUtils.checkColumnIndex(this, column);\n        return entries.get(computeKey(row, column));\n    }\n\n    \n    @Override\n    public int getRowDimension() {\n        return rows;\n    }\n\n    \n    @Override\n    public void setEntry(int row, int column, double value) {\n        MatrixUtils.checkRowIndex(this, row);\n        MatrixUtils.checkColumnIndex(this, column);\n        if (value == 0.0) {\n            entries.remove(computeKey(row, column));\n        } else {\n            entries.put(computeKey(row, column), value);\n        }\n    }\n\n    \n    @Override\n    public void addToEntry(int row, int column, double increment) {\n        MatrixUtils.checkRowIndex(this, row);\n        MatrixUtils.checkColumnIndex(this, column);\n        final int key = computeKey(row, column);\n        final double value = entries.get(key) + increment;\n        if (value == 0.0) {\n            entries.remove(key);\n        } else {\n            entries.put(key, value);\n        }\n    }\n\n    \n    @Override\n    public void multiplyEntry(int row, int column, double factor) {\n        MatrixUtils.checkRowIndex(this, row);\n        MatrixUtils.checkColumnIndex(this, column);\n        final int key = computeKey(row, column);\n        final double value = entries.get(key) * factor;\n        if (value == 0.0) {\n            entries.remove(key);\n        } else {\n            entries.put(key, value);\n        }\n    }\n\n    \n    private int computeKey(int row, int column) {\n        return row * columns + column;\n    }\n\n\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.math.linear;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math.exception.NumberIsTooLargeException;\nimport org.apache.commons.math.util.OpenIntToDoubleHashMap;\n\n\npublic class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix, Serializable { private static final long serialVersionUID = -5962461716457143437L; private final int rows; private final int columns; private final OpenIntToDoubleHashMap entries; public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n        super(rowDimension, columnDimension);\n        long lRow = (long) rowDimension;\n        long lCol = (long) columnDimension;\n        if (lRow * lCol >= (long) Integer.MAX_VALUE) {\n            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);\n        }\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n        this.entries = new OpenIntToDoubleHashMap(0.0);\n    }\n\n    \n    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {\n        this.rows = matrix.rows;\n        this.columns = matrix.columns;\n        this.entries = new OpenIntToDoubleHashMap(matrix.entries);\n    }\n\n    \n    @Override\n    public OpenMapRealMatrix copy() {\n        return new OpenMapRealMatrix(this);\n    }\n\n    \n    @Override\n    public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension) {\n        return new OpenMapRealMatrix(rowDimension, columnDimension);\n    }\n\n    \n    @Override\n    public int getColumnDimension() {\n        return columns;\n    }\n\n    \n    public OpenMapRealMatrix add(OpenMapRealMatrix m) {\n\n        \n        MatrixUtils.checkAdditionCompatible(this, m);\n\n        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);\n        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {\n            iterator.advance();\n            final int row = iterator.key() / columns;\n            final int col = iterator.key() - row * columns;\n            out.setEntry(row, col, getEntry(row, col) + iterator.value());\n        }\n\n        return out;\n\n    }\n\n    \n    @Override\n    public OpenMapRealMatrix subtract(final RealMatrix m) {\n        try {\n            return subtract((OpenMapRealMatrix) m);\n        } catch (ClassCastException cce) {\n            return (OpenMapRealMatrix) super.subtract(m);\n        }\n    }\n\n    \n    public OpenMapRealMatrix subtract(OpenMapRealMatrix m) {\n        \n        MatrixUtils.checkAdditionCompatible(this, m);\n\n        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);\n        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {\n            iterator.advance();\n            final int row = iterator.key() / columns;\n            final int col = iterator.key() - row * columns;\n            out.setEntry(row, col, getEntry(row, col) - iterator.value());\n        }\n\n        return out;\n    }\n\n    \n    @Override\n    public RealMatrix multiply(final RealMatrix m) {\n        try {\n            return multiply((OpenMapRealMatrix) m);\n        } catch (ClassCastException cce) {\n\n            \n            MatrixUtils.checkMultiplicationCompatible(this, m);\n\n            final int outCols = m.getColumnDimension();\n            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);\n            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {\n                iterator.advance();\n                final double value = iterator.value();\n                final int key      = iterator.key();\n                final int i        = key / columns;\n                final int k        = key % columns;\n                for (int j = 0; j < outCols; ++j) {\n                    out.addToEntry(i, j, value * m.getEntry(k, j));\n                }\n            }\n\n            return out;\n        }\n    }\n\n    \n    public OpenMapRealMatrix multiply(OpenMapRealMatrix m) {\n        \n        MatrixUtils.checkMultiplicationCompatible(this, m);\n\n        final int outCols = m.getColumnDimension();\n        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);\n        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {\n            iterator.advance();\n            final double value = iterator.value();\n            final int key      = iterator.key();\n            final int i        = key / columns;\n            final int k        = key % columns;\n            for (int j = 0; j < outCols; ++j) {\n                final int rightKey = m.computeKey(k, j);\n                if (m.entries.containsKey(rightKey)) {\n                    final int outKey = out.computeKey(i, j);\n                    final double outValue =\n                        out.entries.get(outKey) + value * m.entries.get(rightKey);\n                    if (outValue == 0.0) {\n                        out.entries.remove(outKey);\n                    } else {\n                        out.entries.put(outKey, outValue);\n                    }\n                }\n            }\n        }\n\n        return out;\n    }\n\n    \n    @Override\n    public double getEntry(int row, int column) {\n        MatrixUtils.checkRowIndex(this, row);\n        MatrixUtils.checkColumnIndex(this, column);\n        return entries.get(computeKey(row, column));\n    }\n\n    \n    @Override\n    public int getRowDimension() {\n        return rows;\n    }\n\n    \n    @Override\n    public void setEntry(int row, int column, double value) {\n        MatrixUtils.checkRowIndex(this, row);\n        MatrixUtils.checkColumnIndex(this, column);\n        if (value == 0.0) {\n            entries.remove(computeKey(row, column));\n        } else {\n            entries.put(computeKey(row, column), value);\n        }\n    }\n\n    \n    @Override\n    public void addToEntry(int row, int column, double increment) {\n        MatrixUtils.checkRowIndex(this, row);\n        MatrixUtils.checkColumnIndex(this, column);\n        final int key = computeKey(row, column);\n        final double value = entries.get(key) + increment;\n        if (value == 0.0) {\n            entries.remove(key);\n        } else {\n            entries.put(key, value);\n        }\n    }\n\n    \n    @Override\n    public void multiplyEntry(int row, int column, double factor) {\n        MatrixUtils.checkRowIndex(this, row);\n        MatrixUtils.checkColumnIndex(this, column);\n        final int key = computeKey(row, column);\n        final double value = entries.get(key) * factor;\n        if (value == 0.0) {\n            entries.remove(key);\n        } else {\n            entries.put(key, value);\n        }\n    }\n\n    \n    private int computeKey(int row, int column) {\n        return row * columns + column;\n    }\n\n\n}\n",
      "buggy_signatures": [
        "public OpenMapRealMatrix(OpenMapRealMatrix matrix)",
        "public OpenMapRealMatrix copy()",
        "public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension)",
        "public int getColumnDimension()",
        "public OpenMapRealMatrix add(OpenMapRealMatrix m)",
        "public OpenMapRealMatrix subtract(final RealMatrix m)",
        "public OpenMapRealMatrix subtract(OpenMapRealMatrix m)",
        "public RealMatrix multiply(final RealMatrix m)",
        "public OpenMapRealMatrix multiply(OpenMapRealMatrix m)",
        "public double getEntry(int row, int column)",
        "public int getRowDimension()",
        "public void setEntry(int row, int column, double value)",
        "public void addToEntry(int row, int column, double increment)",
        "public void multiplyEntry(int row, int column, double factor)",
        "private int computeKey(int row, int column)"
      ],
      "fixed_signatures": [
        "public OpenMapRealMatrix(OpenMapRealMatrix matrix)",
        "public OpenMapRealMatrix copy()",
        "public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension)",
        "public int getColumnDimension()",
        "public OpenMapRealMatrix add(OpenMapRealMatrix m)",
        "public OpenMapRealMatrix subtract(final RealMatrix m)",
        "public OpenMapRealMatrix subtract(OpenMapRealMatrix m)",
        "public RealMatrix multiply(final RealMatrix m)",
        "public OpenMapRealMatrix multiply(OpenMapRealMatrix m)",
        "public double getEntry(int row, int column)",
        "public int getRowDimension()",
        "public void setEntry(int row, int column, double value)",
        "public void addToEntry(int row, int column, double increment)",
        "public void multiplyEntry(int row, int column, double factor)",
        "private int computeKey(int row, int column)"
      ],
      "methods": [
        {
          "buggy_method": "  public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n  super(rowDimension, columnDimension);\n  this.rows = rowDimension;\n  this.columns = columnDimension;\n  this.entries = new OpenIntToDoubleHashMap(0.0);\n  }",
          "fixed_method": "  public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n  super(rowDimension, columnDimension);\n  long lRow = (long) rowDimension;\n  long lCol = (long) columnDimension;\n  if (lRow * lCol >= (long) Integer.MAX_VALUE) {\n  throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);\n  }\n  this.rows = rowDimension;\n  this.columns = columnDimension;\n  this.entries = new OpenIntToDoubleHashMap(0.0);\n  }",
          "diff": [
            "@@ -47,6 +47,11 @@",
            "      */\n",
            "     public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n",
            "         super(rowDimension, columnDimension);\n",
            "+        long lRow = (long) rowDimension;\n",
            "+        long lCol = (long) columnDimension;\n",
            "+        if (lRow * lCol >= (long) Integer.MAX_VALUE) {\n",
            "+            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);\n",
            "+        }\n",
            "         this.rows = rowDimension;\n",
            "         this.columns = columnDimension;\n",
            "         this.entries = new OpenIntToDoubleHashMap(0.0);\n"
          ],
          "changed_lines": 5
        }
      ]
    }
  ]
}
