{
  "bug_id": "7",
  "failed_tests": {
    "org.jfree.data.time.junit.TimePeriodValuesTests": [
      {
        "methodName": "testGetMaxMiddleIndex",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<1> but was:<3>",
        "fail_line": "        assertEquals(1, s.getMaxMiddleIndex());",
        "test_source": "  public void testGetMaxMiddleIndex() {\n  TimePeriodValues s = new TimePeriodValues(\"Test\");\n  assertEquals(-1, s.getMaxMiddleIndex());\n  s.add(new SimpleTimePeriod(100L, 200L), 1.0);\n  assertEquals(0, s.getMaxMiddleIndex());\n  s.add(new SimpleTimePeriod(300L, 400L), 2.0);\n  assertEquals(1, s.getMaxMiddleIndex());\n  s.add(new SimpleTimePeriod(0L, 50L), 3.0);\n  assertEquals(1, s.getMaxMiddleIndex());\n  s.add(new SimpleTimePeriod(150L, 200L), 4.0);\n  assertEquals(1, s.getMaxMiddleIndex());\n  }",
        "stack": [
          "TimePeriodValuesTests.testGetMaxMiddleIndex line 377"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/data/time/TimePeriodValues.java",
      "buggy_full_code": "\n\npackage org.jfree.data.time;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.data.general.Series;\nimport org.jfree.data.general.SeriesChangeEvent;\nimport org.jfree.data.general.SeriesException;\n\n\npublic class TimePeriodValues extends Series implements Serializable { static final long serialVersionUID = -2210593619794989709L; protected static final String DEFAULT_DOMAIN_DESCRIPTION = \"Time\"; protected static final String DEFAULT_RANGE_DESCRIPTION = \"Value\"; private String domain; private String range; private List data; private int minStartIndex = -1; private int maxStartIndex = -1; private int minMiddleIndex = -1; private int maxMiddleIndex = -1; private int minEndIndex = -1; private int maxEndIndex = -1; public TimePeriodValues(Comparable name) {\n        this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);\n    }\n\n    \n    public TimePeriodValues(Comparable name, String domain, String range) {\n        super(name);\n        this.domain = domain;\n        this.range = range;\n        this.data = new ArrayList();\n    }\n\n    \n    public String getDomainDescription() {\n        return this.domain;\n    }\n\n    \n    public void setDomainDescription(String description) {\n        String old = this.domain;\n        this.domain = description;\n        firePropertyChange(\"Domain\", old, description);\n    }\n\n    \n    public String getRangeDescription() {\n        return this.range;\n    }\n\n    \n    public void setRangeDescription(String description) {\n        String old = this.range;\n        this.range = description;\n        firePropertyChange(\"Range\", old, description);\n    }\n\n    \n    public int getItemCount() {\n        return this.data.size();\n    }\n\n    \n    public TimePeriodValue getDataItem(int index) {\n        return (TimePeriodValue) this.data.get(index);\n    }\n\n    \n    public TimePeriod getTimePeriod(int index) {\n        return getDataItem(index).getPeriod();\n    }\n\n    \n    public Number getValue(int index) {\n        return getDataItem(index).getValue();\n    }\n\n    \n    public void add(TimePeriodValue item) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null item not allowed.\");\n        }\n        this.data.add(item);\n        updateBounds(item.getPeriod(), this.data.size() - 1);\n        fireSeriesChanged();\n    }\n    \n    \n    private void updateBounds(TimePeriod period, int index) {\n        \n        long start = period.getStart().getTime();\n        long end = period.getEnd().getTime();\n        long middle = start + ((end - start) / 2);\n\n        if (this.minStartIndex >= 0) {\n            long minStart = getDataItem(this.minStartIndex).getPeriod()\n                .getStart().getTime();\n            if (start < minStart) {\n                this.minStartIndex = index;           \n            }\n        }\n        else {\n            this.minStartIndex = index;\n        }\n        \n        if (this.maxStartIndex >= 0) {\n            long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n                .getStart().getTime();\n            if (start > maxStart) {\n                this.maxStartIndex = index;           \n            }\n        }\n        else {\n            this.maxStartIndex = index;\n        }\n        \n        if (this.minMiddleIndex >= 0) {\n            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                .getTime();\n            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                .getTime();\n            long minMiddle = s + (e - s) / 2;\n            if (middle < minMiddle) {\n                this.minMiddleIndex = index;           \n            }\n        }\n        else {\n            this.minMiddleIndex = index;\n        }\n        \n        if (this.maxMiddleIndex >= 0) {\n            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                .getTime();\n            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                .getTime();\n            long maxMiddle = s + (e - s) / 2;\n            if (middle > maxMiddle) {\n                this.maxMiddleIndex = index;           \n            }\n        }\n        else {\n            this.maxMiddleIndex = index;\n        }\n        \n        if (this.minEndIndex >= 0) {\n            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n                .getTime();\n            if (end < minEnd) {\n                this.minEndIndex = index;           \n            }\n        }\n        else {\n            this.minEndIndex = index;\n        }\n       \n        if (this.maxEndIndex >= 0) {\n            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n                .getTime();\n            if (end > maxEnd) {\n                this.maxEndIndex = index;           \n            }\n        }\n        else {\n            this.maxEndIndex = index;\n        }\n        \n    }\n    \n    \n    private void recalculateBounds() {\n        this.minStartIndex = -1;\n        this.minMiddleIndex = -1;\n        this.minEndIndex = -1;\n        this.maxStartIndex = -1;\n        this.maxMiddleIndex = -1;\n        this.maxEndIndex = -1;\n        for (int i = 0; i < this.data.size(); i++) {\n            TimePeriodValue tpv = (TimePeriodValue) this.data.get(i);\n            updateBounds(tpv.getPeriod(), i);\n        }\n    }\n\n    \n    public void add(TimePeriod period, double value) {\n        TimePeriodValue item = new TimePeriodValue(period, value);\n        add(item);\n    }\n\n    \n    public void add(TimePeriod period, Number value) {\n        TimePeriodValue item = new TimePeriodValue(period, value);\n        add(item);\n    }\n\n    \n    public void update(int index, Number value) {\n        TimePeriodValue item = getDataItem(index);\n        item.setValue(value);\n        fireSeriesChanged();\n    }\n\n    \n    public void delete(int start, int end) {\n        for (int i = 0; i <= (end - start); i++) {\n            this.data.remove(start);\n        }\n        recalculateBounds();\n        fireSeriesChanged();\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TimePeriodValues)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        TimePeriodValues that = (TimePeriodValues) obj;\n        if (!ObjectUtilities.equal(this.getDomainDescription(), \n                that.getDomainDescription())) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.getRangeDescription(), \n                that.getRangeDescription())) {\n            return false;\n        }\n        int count = getItemCount();\n        if (count != that.getItemCount()) {\n            return false;\n        }\n        for (int i = 0; i < count; i++) {\n            if (!getDataItem(i).equals(that.getDataItem(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n    public int hashCode() {\n        int result;\n        result = (this.domain != null ? this.domain.hashCode() : 0);\n        result = 29 * result + (this.range != null ? this.range.hashCode() : 0);\n        result = 29 * result + this.data.hashCode();\n        result = 29 * result + this.minStartIndex;\n        result = 29 * result + this.maxStartIndex;\n        result = 29 * result + this.minMiddleIndex;\n        result = 29 * result + this.maxMiddleIndex;\n        result = 29 * result + this.minEndIndex;\n        result = 29 * result + this.maxEndIndex;\n        return result;\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        Object clone = createCopy(0, getItemCount() - 1);\n        return clone;\n    }\n\n    \n    public TimePeriodValues createCopy(int start, int end) throws CloneNotSupportedException {\n\n        TimePeriodValues copy = (TimePeriodValues) super.clone();\n\n        copy.data = new ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimePeriodValue item = (TimePeriodValue) this.data.get(index);\n                TimePeriodValue clone = (TimePeriodValue) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    System.err.println(\"Failed to add cloned item.\");\n                }\n            }\n        }\n        return copy;\n\n    }\n    \n    \n    public int getMinStartIndex() {\n        return this.minStartIndex;\n    }\n    \n    \n    public int getMaxStartIndex() {\n        return this.maxStartIndex;\n    }\n\n    \n    public int getMinMiddleIndex() {\n        return this.minMiddleIndex;\n    }\n    \n    \n    public int getMaxMiddleIndex() {\n        return this.maxMiddleIndex;\n    }\n\n    \n    public int getMinEndIndex() {\n        return this.minEndIndex;\n    }\n    \n    \n    public int getMaxEndIndex() {\n        return this.maxEndIndex;\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.jfree.data.time;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.data.general.Series;\nimport org.jfree.data.general.SeriesChangeEvent;\nimport org.jfree.data.general.SeriesException;\n\n\npublic class TimePeriodValues extends Series implements Serializable { static final long serialVersionUID = -2210593619794989709L; protected static final String DEFAULT_DOMAIN_DESCRIPTION = \"Time\"; protected static final String DEFAULT_RANGE_DESCRIPTION = \"Value\"; private String domain; private String range; private List data; private int minStartIndex = -1; private int maxStartIndex = -1; private int minMiddleIndex = -1; private int maxMiddleIndex = -1; private int minEndIndex = -1; private int maxEndIndex = -1; public TimePeriodValues(Comparable name) {\n        this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);\n    }\n\n    \n    public TimePeriodValues(Comparable name, String domain, String range) {\n        super(name);\n        this.domain = domain;\n        this.range = range;\n        this.data = new ArrayList();\n    }\n\n    \n    public String getDomainDescription() {\n        return this.domain;\n    }\n\n    \n    public void setDomainDescription(String description) {\n        String old = this.domain;\n        this.domain = description;\n        firePropertyChange(\"Domain\", old, description);\n    }\n\n    \n    public String getRangeDescription() {\n        return this.range;\n    }\n\n    \n    public void setRangeDescription(String description) {\n        String old = this.range;\n        this.range = description;\n        firePropertyChange(\"Range\", old, description);\n    }\n\n    \n    public int getItemCount() {\n        return this.data.size();\n    }\n\n    \n    public TimePeriodValue getDataItem(int index) {\n        return (TimePeriodValue) this.data.get(index);\n    }\n\n    \n    public TimePeriod getTimePeriod(int index) {\n        return getDataItem(index).getPeriod();\n    }\n\n    \n    public Number getValue(int index) {\n        return getDataItem(index).getValue();\n    }\n\n    \n    public void add(TimePeriodValue item) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null item not allowed.\");\n        }\n        this.data.add(item);\n        updateBounds(item.getPeriod(), this.data.size() - 1);\n        fireSeriesChanged();\n    }\n    \n    \n    private void updateBounds(TimePeriod period, int index) {\n        \n        long start = period.getStart().getTime();\n        long end = period.getEnd().getTime();\n        long middle = start + ((end - start) / 2);\n\n        if (this.minStartIndex >= 0) {\n            long minStart = getDataItem(this.minStartIndex).getPeriod()\n                .getStart().getTime();\n            if (start < minStart) {\n                this.minStartIndex = index;           \n            }\n        }\n        else {\n            this.minStartIndex = index;\n        }\n        \n        if (this.maxStartIndex >= 0) {\n            long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n                .getStart().getTime();\n            if (start > maxStart) {\n                this.maxStartIndex = index;           \n            }\n        }\n        else {\n            this.maxStartIndex = index;\n        }\n        \n        if (this.minMiddleIndex >= 0) {\n            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                .getTime();\n            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                .getTime();\n            long minMiddle = s + (e - s) / 2;\n            if (middle < minMiddle) {\n                this.minMiddleIndex = index;           \n            }\n        }\n        else {\n            this.minMiddleIndex = index;\n        }\n        \n        if (this.maxMiddleIndex >= 0) {\n            long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()\n                .getTime();\n            long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()\n                .getTime();\n            long maxMiddle = s + (e - s) / 2;\n            if (middle > maxMiddle) {\n                this.maxMiddleIndex = index;           \n            }\n        }\n        else {\n            this.maxMiddleIndex = index;\n        }\n        \n        if (this.minEndIndex >= 0) {\n            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n                .getTime();\n            if (end < minEnd) {\n                this.minEndIndex = index;           \n            }\n        }\n        else {\n            this.minEndIndex = index;\n        }\n       \n        if (this.maxEndIndex >= 0) {\n            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n                .getTime();\n            if (end > maxEnd) {\n                this.maxEndIndex = index;           \n            }\n        }\n        else {\n            this.maxEndIndex = index;\n        }\n        \n    }\n    \n    \n    private void recalculateBounds() {\n        this.minStartIndex = -1;\n        this.minMiddleIndex = -1;\n        this.minEndIndex = -1;\n        this.maxStartIndex = -1;\n        this.maxMiddleIndex = -1;\n        this.maxEndIndex = -1;\n        for (int i = 0; i < this.data.size(); i++) {\n            TimePeriodValue tpv = (TimePeriodValue) this.data.get(i);\n            updateBounds(tpv.getPeriod(), i);\n        }\n    }\n\n    \n    public void add(TimePeriod period, double value) {\n        TimePeriodValue item = new TimePeriodValue(period, value);\n        add(item);\n    }\n\n    \n    public void add(TimePeriod period, Number value) {\n        TimePeriodValue item = new TimePeriodValue(period, value);\n        add(item);\n    }\n\n    \n    public void update(int index, Number value) {\n        TimePeriodValue item = getDataItem(index);\n        item.setValue(value);\n        fireSeriesChanged();\n    }\n\n    \n    public void delete(int start, int end) {\n        for (int i = 0; i <= (end - start); i++) {\n            this.data.remove(start);\n        }\n        recalculateBounds();\n        fireSeriesChanged();\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TimePeriodValues)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        TimePeriodValues that = (TimePeriodValues) obj;\n        if (!ObjectUtilities.equal(this.getDomainDescription(), \n                that.getDomainDescription())) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.getRangeDescription(), \n                that.getRangeDescription())) {\n            return false;\n        }\n        int count = getItemCount();\n        if (count != that.getItemCount()) {\n            return false;\n        }\n        for (int i = 0; i < count; i++) {\n            if (!getDataItem(i).equals(that.getDataItem(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n    public int hashCode() {\n        int result;\n        result = (this.domain != null ? this.domain.hashCode() : 0);\n        result = 29 * result + (this.range != null ? this.range.hashCode() : 0);\n        result = 29 * result + this.data.hashCode();\n        result = 29 * result + this.minStartIndex;\n        result = 29 * result + this.maxStartIndex;\n        result = 29 * result + this.minMiddleIndex;\n        result = 29 * result + this.maxMiddleIndex;\n        result = 29 * result + this.minEndIndex;\n        result = 29 * result + this.maxEndIndex;\n        return result;\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        Object clone = createCopy(0, getItemCount() - 1);\n        return clone;\n    }\n\n    \n    public TimePeriodValues createCopy(int start, int end) throws CloneNotSupportedException {\n\n        TimePeriodValues copy = (TimePeriodValues) super.clone();\n\n        copy.data = new ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimePeriodValue item = (TimePeriodValue) this.data.get(index);\n                TimePeriodValue clone = (TimePeriodValue) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    System.err.println(\"Failed to add cloned item.\");\n                }\n            }\n        }\n        return copy;\n\n    }\n    \n    \n    public int getMinStartIndex() {\n        return this.minStartIndex;\n    }\n    \n    \n    public int getMaxStartIndex() {\n        return this.maxStartIndex;\n    }\n\n    \n    public int getMinMiddleIndex() {\n        return this.minMiddleIndex;\n    }\n    \n    \n    public int getMaxMiddleIndex() {\n        return this.maxMiddleIndex;\n    }\n\n    \n    public int getMinEndIndex() {\n        return this.minEndIndex;\n    }\n    \n    \n    public int getMaxEndIndex() {\n        return this.maxEndIndex;\n    }\n\n}\n",
      "buggy_signatures": [
        "public TimePeriodValues(Comparable name, String domain, String range)",
        "public String getDomainDescription()",
        "public void setDomainDescription(String description)",
        "public String getRangeDescription()",
        "public void setRangeDescription(String description)",
        "public int getItemCount()",
        "public TimePeriodValue getDataItem(int index)",
        "public TimePeriod getTimePeriod(int index)",
        "public Number getValue(int index)",
        "public void add(TimePeriodValue item)",
        "private void updateBounds(TimePeriod period, int index)",
        "private void recalculateBounds()",
        "public void add(TimePeriod period, double value)",
        "public void add(TimePeriod period, Number value)",
        "public void update(int index, Number value)",
        "public void delete(int start, int end)",
        "public boolean equals(Object obj)",
        "public int hashCode()",
        "public Object clone() throws CloneNotSupportedException",
        "public TimePeriodValues createCopy(int start, int end) throws CloneNotSupportedException",
        "public int getMinStartIndex()",
        "public int getMaxStartIndex()",
        "public int getMinMiddleIndex()",
        "public int getMaxMiddleIndex()",
        "public int getMinEndIndex()",
        "public int getMaxEndIndex()"
      ],
      "fixed_signatures": [
        "public TimePeriodValues(Comparable name, String domain, String range)",
        "public String getDomainDescription()",
        "public void setDomainDescription(String description)",
        "public String getRangeDescription()",
        "public void setRangeDescription(String description)",
        "public int getItemCount()",
        "public TimePeriodValue getDataItem(int index)",
        "public TimePeriod getTimePeriod(int index)",
        "public Number getValue(int index)",
        "public void add(TimePeriodValue item)",
        "private void updateBounds(TimePeriod period, int index)",
        "private void recalculateBounds()",
        "public void add(TimePeriod period, double value)",
        "public void add(TimePeriod period, Number value)",
        "public void update(int index, Number value)",
        "public void delete(int start, int end)",
        "public boolean equals(Object obj)",
        "public int hashCode()",
        "public Object clone() throws CloneNotSupportedException",
        "public TimePeriodValues createCopy(int start, int end) throws CloneNotSupportedException",
        "public int getMinStartIndex()",
        "public int getMaxStartIndex()",
        "public int getMinMiddleIndex()",
        "public int getMaxMiddleIndex()",
        "public int getMinEndIndex()",
        "public int getMaxEndIndex()"
      ],
      "methods": [
        {
          "buggy_method": "  private void updateBounds(TimePeriod period, int index) {\n  \n  long start = period.getStart().getTime();\n  long end = period.getEnd().getTime();\n  long middle = start + ((end - start) / 2);\n\n  if (this.minStartIndex >= 0) {\n  long minStart = getDataItem(this.minStartIndex).getPeriod()\n  .getStart().getTime();\n  if (start < minStart) {\n  this.minStartIndex = index;  \n  }\n  }\n  else {\n  this.minStartIndex = index;\n  }\n  \n  if (this.maxStartIndex >= 0) {\n  long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n  .getStart().getTime();\n  if (start > maxStart) {\n  this.maxStartIndex = index;  \n  }\n  }\n  else {\n  this.maxStartIndex = index;\n  }\n  \n  if (this.minMiddleIndex >= 0) {\n  long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n  .getTime();\n  long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n  .getTime();\n  long minMiddle = s + (e - s) / 2;\n  if (middle < minMiddle) {\n  this.minMiddleIndex = index;  \n  }\n  }\n  else {\n  this.minMiddleIndex = index;\n  }\n  \n  if (this.maxMiddleIndex >= 0) {\n  long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n  .getTime();\n  long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n  .getTime();\n  long maxMiddle = s + (e - s) / 2;\n  if (middle > maxMiddle) {\n  this.maxMiddleIndex = index;  \n  }\n  }\n  else {\n  this.maxMiddleIndex = index;\n  }\n  \n  if (this.minEndIndex >= 0) {\n  long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n  .getTime();\n  if (end < minEnd) {\n  this.minEndIndex = index;  \n  }\n  }\n  else {\n  this.minEndIndex = index;\n  }\n  \n  if (this.maxEndIndex >= 0) {\n  long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n  .getTime();\n  if (end > maxEnd) {\n  this.maxEndIndex = index;  \n  }\n  }\n  else {\n  this.maxEndIndex = index;\n  }\n  \n  }",
          "fixed_method": "  private void updateBounds(TimePeriod period, int index) {\n  \n  long start = period.getStart().getTime();\n  long end = period.getEnd().getTime();\n  long middle = start + ((end - start) / 2);\n\n  if (this.minStartIndex >= 0) {\n  long minStart = getDataItem(this.minStartIndex).getPeriod()\n  .getStart().getTime();\n  if (start < minStart) {\n  this.minStartIndex = index;  \n  }\n  }\n  else {\n  this.minStartIndex = index;\n  }\n  \n  if (this.maxStartIndex >= 0) {\n  long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n  .getStart().getTime();\n  if (start > maxStart) {\n  this.maxStartIndex = index;  \n  }\n  }\n  else {\n  this.maxStartIndex = index;\n  }\n  \n  if (this.minMiddleIndex >= 0) {\n  long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n  .getTime();\n  long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n  .getTime();\n  long minMiddle = s + (e - s) / 2;\n  if (middle < minMiddle) {\n  this.minMiddleIndex = index;  \n  }\n  }\n  else {\n  this.minMiddleIndex = index;\n  }\n  \n  if (this.maxMiddleIndex >= 0) {\n  long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()\n  .getTime();\n  long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()\n  .getTime();\n  long maxMiddle = s + (e - s) / 2;\n  if (middle > maxMiddle) {\n  this.maxMiddleIndex = index;  \n  }\n  }\n  else {\n  this.maxMiddleIndex = index;\n  }\n  \n  if (this.minEndIndex >= 0) {\n  long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n  .getTime();\n  if (end < minEnd) {\n  this.minEndIndex = index;  \n  }\n  }\n  else {\n  this.minEndIndex = index;\n  }\n  \n  if (this.maxEndIndex >= 0) {\n  long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n  .getTime();\n  if (end > maxEnd) {\n  this.maxEndIndex = index;  \n  }\n  }\n  else {\n  this.maxEndIndex = index;\n  }\n  \n  }",
          "diff": [
            "@@ -297,9 +297,9 @@",
            "         }\n",
            "         \n",
            "         if (this.maxMiddleIndex >= 0) {\n",
            "-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n",
            "+            long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()\n",
            "                 .getTime();\n",
            "-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n",
            "+            long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()\n",
            "                 .getTime();\n",
            "             long maxMiddle = s + (e - s) / 2;\n",
            "             if (middle > maxMiddle) {\n"
          ],
          "changed_lines": 4
        }
      ]
    }
  ]
}
