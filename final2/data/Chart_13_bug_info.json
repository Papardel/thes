{
  "bug_id": "13",
  "failed_tests": {
    "org.jfree.chart.block.junit.BorderArrangementTests": [
      {
        "methodName": "testSizingWithWidthConstraint",
        "error": "java.lang.IllegalArgumentException",
        "message": "Range(double, double): require lower (0.0) <= upper (-2.3000000000000007).",
        "fail_line": "        size = container.arrange(g2, constraint);",
        "test_source": "  public void testSizingWithWidthConstraint() {\n  RectangleConstraint constraint = new RectangleConstraint(\n  10.0, new Range(10.0, 10.0), LengthConstraintType.FIXED,\n  0.0, new Range(0.0, 0.0), LengthConstraintType.NONE\n  );\n  \n  BlockContainer container = new BlockContainer(new BorderArrangement());\n  BufferedImage image = new BufferedImage(\n  200, 100, BufferedImage.TYPE_INT_RGB\n  );\n  Graphics2D g2 = image.createGraphics();\n  \n  // TBLRC\n  // 00001 - center item only\n  container.add(new EmptyBlock(5.0, 6.0));\n  Size2D size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(6.0, size.height, EPSILON);\n  \n  container.clear();\n  container.add(new EmptyBlock(15.0, 16.0));\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(16.0, size.height, EPSILON);\n\n  // TBLRC\n  // 00010 - right item only\n  container.clear();\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(45.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 00011 - right and center items\n  container.clear();\n  container.add(new EmptyBlock(7.0, 20.0));\n  container.add(new EmptyBlock(8.0, 45.6), RectangleEdge.RIGHT);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(45.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 00100 - left item only\n  container.clear();\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(45.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 00101 - left and center items\n  container.clear();\n  container.add(new EmptyBlock(10.0, 20.0));\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(45.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 00110 - left and right items\n  container.clear();\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(45.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 00111 - left, right and center items\n  container.clear();\n  container.add(new EmptyBlock(10.0, 20.0));\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(45.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 01000 - bottom item only\n  container.clear();\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(45.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 01001 - bottom and center only\n  container.clear();\n  container.add(new EmptyBlock(10.0, 20.0));\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 01010 - bottom and right only\n  container.clear();\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 01011 - bottom, right and center\n  container.clear();\n  container.add(new EmptyBlock(21.0, 12.3));\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 01100\n  container.clear();\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 01101 - bottom, left and center\n  container.clear();\n  container.add(new EmptyBlock(21.0, 12.3));\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 01110 - bottom. left and right\n  container.clear();\n  container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 01111\n  container.clear();\n  container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n  container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(9.0, 10.0));\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(14.0, size.height, EPSILON);\n  \n  // TBLRC\n  // 10000 - top item only\n  container.clear();\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(45.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 10001 - top and center only\n  container.clear();\n  container.add(new EmptyBlock(10.0, 20.0));\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 10010 - right and top only\n  container.clear();\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 10011 - top, right and center\n  container.clear();\n  container.add(new EmptyBlock(21.0, 12.3));\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n\n  // TBLRC\n  // 10100 - top and left only\n  container.clear();\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 10101 - top, left and center\n  container.clear();\n  container.add(new EmptyBlock(21.0, 12.3));\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 10110 - top, left and right\n  container.clear();\n  container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 10111\n  container.clear();\n  container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(9.0, 10.0));\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(12.0, size.height, EPSILON);\n\n  // TBLRC\n  // 11000 - top and bottom only\n  container.clear();\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(65.6, size.height, EPSILON);\n  \n  // TBLRC\n  // 11001\n  container.clear();\n  container.add(new EmptyBlock(21.0, 12.3));\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(77.9, size.height, EPSILON);\n  \n  // TBLRC\n  // 11010 - top, bottom and right\n  container.clear();\n  container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(77.9, size.height, EPSILON);\n  \n  // TBLRC\n  // 11011\n  container.clear();\n  container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n  container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(9.0, 10.0));\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(16.0, size.height, EPSILON);\n  \n  // TBLRC\n  // 11100\n  container.clear();\n  container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(77.9, size.height, EPSILON);\n\n  // TBLRC\n  // 11101\n  container.clear();\n  container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n  container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(9.0, 10.0));\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(16.0, size.height, EPSILON);\n  \n  // TBLRC\n  // 11110\n  container.clear();\n  container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n  container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(14.0, size.height, EPSILON);\n  \n  // TBLRC\n  // 11111 - all\n  container.clear();\n  container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n  container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n  container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n  container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n  container.add(new EmptyBlock(9.0, 10.0));\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(16.0, size.height, EPSILON);\n\n  // TBLRC\n  // 00000 - no items\n  container.clear();\n  size = container.arrange(g2, constraint);\n  assertEquals(10.0, size.width, EPSILON);\n  assertEquals(0.0, size.height, EPSILON);\n  \n  }",
        "stack": [
          "Range.<init> line 87, BorderArrangement.arrangeFF line 455, BorderArrangement.arrange line 152, BorderArrangement.arrangeFN line 323, BorderArrangement.arrange line 149, BlockContainer.arrange line 182, BorderArrangementTests.testSizingWithWidthConstraint line 560"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/chart/block/BorderArrangement.java",
      "buggy_full_code": "\n\npackage org.jfree.chart.block;\n\nimport java.awt.Graphics2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.Serializable;\n\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.RectangleEdge;\nimport org.jfree.chart.util.Size2D;\nimport org.jfree.data.Range;\n\n\npublic class BorderArrangement implements Arrangement, Serializable { private static final long serialVersionUID = 506071142274883745L; private Block centerBlock; private Block topBlock; private Block bottomBlock; private Block leftBlock; private Block rightBlock; public BorderArrangement() {\n    }\n\n    \n    public void add(Block block, Object key) {\n\n        if (key == null) {\n            this.centerBlock = block;\n        }\n        else {\n            RectangleEdge edge = (RectangleEdge) key;\n            if (edge == RectangleEdge.TOP) {\n                this.topBlock = block;\n            }\n            else if (edge == RectangleEdge.BOTTOM) {\n                this.bottomBlock = block;\n            }\n            else if (edge == RectangleEdge.LEFT) {\n                this.leftBlock = block;\n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                this.rightBlock = block;\n            }\n        }\n    }\n\n    \n    public Size2D arrange(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {\n        RectangleConstraint contentConstraint\n                = container.toContentConstraint(constraint);\n        Size2D contentSize = null;\n        LengthConstraintType w = contentConstraint.getWidthConstraintType();\n        LengthConstraintType h = contentConstraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeNN(container, g2);\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeFN(container, g2, constraint.getWidth());\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                contentSize = arrangeFF(container, g2, constraint);\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeFR(container, g2, constraint);\n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeRR(container, constraint.getWidthRange(),\n                        constraint.getHeightRange(), g2);\n            }\n        }\n        return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),\n                container.calculateTotalHeight(contentSize.getHeight()));\n    }\n\n    \n    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(g2, RectangleConstraint.NONE);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(g2,\n                    RectangleConstraint.NONE);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(g2, RectangleConstraint.NONE);\n            w[2] = size.width;\n            h[2] = size.height;\n       }\n        if (this.rightBlock != null) {\n            Size2D size = this.rightBlock.arrange(g2, RectangleConstraint.NONE);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n\n        if (this.centerBlock != null) {\n            Size2D size = this.centerBlock.arrange(g2,\n                    RectangleConstraint.NONE);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\n        double centerHeight = Math.max(h[2], Math.max(h[3], h[4]));\n        double height = h[0] + h[1] + centerHeight;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,\n                    height - h[1], width, h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    centerHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],\n                    h[0], w[3], centerHeight));\n        }\n\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n                    width - w[2] - w[3], centerHeight));\n        }\n        return new Size2D(width, height);\n    }\n\n    \n    protected Size2D arrangeFR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {\n        Size2D size1 = arrangeFN(container, g2, constraint.getWidth());\n        if (constraint.getHeightRange().contains(size1.getHeight())) {\n            return size1;\n        }\n        else {\n            double h = constraint.getHeightRange().constrain(size1.getHeight());\n            RectangleConstraint c2 = constraint.toFixedHeight(h);\n            return arrange(container, g2, c2);\n        }\n    }\n\n    \n    protected Size2D arrangeFN(BlockContainer container, Graphics2D g2, double width) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        RectangleConstraint c1 = new RectangleConstraint(width, null,\n                LengthConstraintType.FIXED, 0.0, null,\n                LengthConstraintType.NONE);\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(g2, c1);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(g2, c1);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        RectangleConstraint c2 = new RectangleConstraint(0.0,\n                new Range(0.0, width), LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE);\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(g2, c2);\n            w[2] = size.width;\n            h[2] = size.height;\n        }\n        if (this.rightBlock != null) {\n            double maxW = Math.max(width - w[2], 0.0);\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(Math.min(w[2], maxW), maxW),\n                    LengthConstraintType.RANGE, 0.0, null,\n                    LengthConstraintType.NONE);\n            Size2D size = this.rightBlock.arrange(g2, c3);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n\n        if (this.centerBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n                    - w[3], null, LengthConstraintType.FIXED, 0.0, null,\n                    LengthConstraintType.NONE);\n            Size2D size = this.centerBlock.arrange(g2, c4);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n        return arrange(container, g2, new RectangleConstraint(width, height));\n    }\n\n    \n    protected Size2D arrangeRR(BlockContainer container, Range widthRange, Range heightRange, Graphics2D g2) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(widthRange,\n                    heightRange);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Range heightRange2 = Range.shift(heightRange, -h[0], false);\n            RectangleConstraint c2 = new RectangleConstraint(widthRange,\n                    heightRange2);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        Range heightRange3 = Range.shift(heightRange, -(h[0] + h[1]));\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(widthRange,\n                    heightRange3);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n            h[2] = size.height;\n        }\n        Range widthRange2 = Range.shift(widthRange, -w[2], false);\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(widthRange2,\n                    heightRange3);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n        Range widthRange3 = Range.shift(widthRange, -(w[2] + w[3]), false);\n        if (this.centerBlock != null) {\n            RectangleConstraint c5 = new RectangleConstraint(widthRange3,\n                    heightRange3);\n            \n            \n            \n            Size2D size = this.centerBlock.arrange(g2, c5);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\n        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,\n                    height - h[1], width, h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],\n                    h[0], w[3], h[3]));\n        }\n\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n                    width - w[2] - w[3], height - h[0] - h[1]));\n        }\n        return new Size2D(width, height);\n    }\n\n    \n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        h[2] = constraint.getHeight() - h[1] - h[0];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth() - w[2]),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        h[4] = h[2];\n        w[4] = constraint.getWidth() - w[3] - w[2];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                    w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                    w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                    h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }\n\n    \n    public void clear() {\n        this.centerBlock = null;\n        this.topBlock = null;\n        this.bottomBlock = null;\n        this.leftBlock = null;\n        this.rightBlock = null;\n    }\n\n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof BorderArrangement)) {\n            return false;\n        }\n        BorderArrangement that = (BorderArrangement) obj;\n        if (!ObjectUtilities.equal(this.topBlock, that.topBlock)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.bottomBlock, that.bottomBlock)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.leftBlock, that.leftBlock)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rightBlock, that.rightBlock)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.centerBlock, that.centerBlock)) {\n            return false;\n        }\n        return true;\n    }\n}\n",
      "fixed_full_code": "\n\npackage org.jfree.chart.block;\n\nimport java.awt.Graphics2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.Serializable;\n\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.RectangleEdge;\nimport org.jfree.chart.util.Size2D;\nimport org.jfree.data.Range;\n\n\npublic class BorderArrangement implements Arrangement, Serializable { private static final long serialVersionUID = 506071142274883745L; private Block centerBlock; private Block topBlock; private Block bottomBlock; private Block leftBlock; private Block rightBlock; public BorderArrangement() {\n    }\n\n    \n    public void add(Block block, Object key) {\n\n        if (key == null) {\n            this.centerBlock = block;\n        }\n        else {\n            RectangleEdge edge = (RectangleEdge) key;\n            if (edge == RectangleEdge.TOP) {\n                this.topBlock = block;\n            }\n            else if (edge == RectangleEdge.BOTTOM) {\n                this.bottomBlock = block;\n            }\n            else if (edge == RectangleEdge.LEFT) {\n                this.leftBlock = block;\n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                this.rightBlock = block;\n            }\n        }\n    }\n\n    \n    public Size2D arrange(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {\n        RectangleConstraint contentConstraint\n                = container.toContentConstraint(constraint);\n        Size2D contentSize = null;\n        LengthConstraintType w = contentConstraint.getWidthConstraintType();\n        LengthConstraintType h = contentConstraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeNN(container, g2);\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeFN(container, g2, constraint.getWidth());\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                contentSize = arrangeFF(container, g2, constraint);\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeFR(container, g2, constraint);\n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeRR(container, constraint.getWidthRange(),\n                        constraint.getHeightRange(), g2);\n            }\n        }\n        return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),\n                container.calculateTotalHeight(contentSize.getHeight()));\n    }\n\n    \n    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(g2, RectangleConstraint.NONE);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(g2,\n                    RectangleConstraint.NONE);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(g2, RectangleConstraint.NONE);\n            w[2] = size.width;\n            h[2] = size.height;\n       }\n        if (this.rightBlock != null) {\n            Size2D size = this.rightBlock.arrange(g2, RectangleConstraint.NONE);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n\n        if (this.centerBlock != null) {\n            Size2D size = this.centerBlock.arrange(g2,\n                    RectangleConstraint.NONE);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\n        double centerHeight = Math.max(h[2], Math.max(h[3], h[4]));\n        double height = h[0] + h[1] + centerHeight;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,\n                    height - h[1], width, h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    centerHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],\n                    h[0], w[3], centerHeight));\n        }\n\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n                    width - w[2] - w[3], centerHeight));\n        }\n        return new Size2D(width, height);\n    }\n\n    \n    protected Size2D arrangeFR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {\n        Size2D size1 = arrangeFN(container, g2, constraint.getWidth());\n        if (constraint.getHeightRange().contains(size1.getHeight())) {\n            return size1;\n        }\n        else {\n            double h = constraint.getHeightRange().constrain(size1.getHeight());\n            RectangleConstraint c2 = constraint.toFixedHeight(h);\n            return arrange(container, g2, c2);\n        }\n    }\n\n    \n    protected Size2D arrangeFN(BlockContainer container, Graphics2D g2, double width) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        RectangleConstraint c1 = new RectangleConstraint(width, null,\n                LengthConstraintType.FIXED, 0.0, null,\n                LengthConstraintType.NONE);\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(g2, c1);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(g2, c1);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        RectangleConstraint c2 = new RectangleConstraint(0.0,\n                new Range(0.0, width), LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE);\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(g2, c2);\n            w[2] = size.width;\n            h[2] = size.height;\n        }\n        if (this.rightBlock != null) {\n            double maxW = Math.max(width - w[2], 0.0);\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(Math.min(w[2], maxW), maxW),\n                    LengthConstraintType.RANGE, 0.0, null,\n                    LengthConstraintType.NONE);\n            Size2D size = this.rightBlock.arrange(g2, c3);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n\n        if (this.centerBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n                    - w[3], null, LengthConstraintType.FIXED, 0.0, null,\n                    LengthConstraintType.NONE);\n            Size2D size = this.centerBlock.arrange(g2, c4);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n        return arrange(container, g2, new RectangleConstraint(width, height));\n    }\n\n    \n    protected Size2D arrangeRR(BlockContainer container, Range widthRange, Range heightRange, Graphics2D g2) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(widthRange,\n                    heightRange);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Range heightRange2 = Range.shift(heightRange, -h[0], false);\n            RectangleConstraint c2 = new RectangleConstraint(widthRange,\n                    heightRange2);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        Range heightRange3 = Range.shift(heightRange, -(h[0] + h[1]));\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(widthRange,\n                    heightRange3);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n            h[2] = size.height;\n        }\n        Range widthRange2 = Range.shift(widthRange, -w[2], false);\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(widthRange2,\n                    heightRange3);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n        Range widthRange3 = Range.shift(widthRange, -(w[2] + w[3]), false);\n        if (this.centerBlock != null) {\n            RectangleConstraint c5 = new RectangleConstraint(widthRange3,\n                    heightRange3);\n            \n            \n            \n            Size2D size = this.centerBlock.arrange(g2, c5);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\n        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,\n                    height - h[1], width, h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],\n                    h[0], w[3], h[3]));\n        }\n\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n                    width - w[2] - w[3], height - h[0] - h[1]));\n        }\n        return new Size2D(width, height);\n    }\n\n    \n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        h[2] = constraint.getHeight() - h[1] - h[0];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        h[4] = h[2];\n        w[4] = constraint.getWidth() - w[3] - w[2];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                    w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                    w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                    h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }\n\n    \n    public void clear() {\n        this.centerBlock = null;\n        this.topBlock = null;\n        this.bottomBlock = null;\n        this.leftBlock = null;\n        this.rightBlock = null;\n    }\n\n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof BorderArrangement)) {\n            return false;\n        }\n        BorderArrangement that = (BorderArrangement) obj;\n        if (!ObjectUtilities.equal(this.topBlock, that.topBlock)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.bottomBlock, that.bottomBlock)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.leftBlock, that.leftBlock)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rightBlock, that.rightBlock)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.centerBlock, that.centerBlock)) {\n            return false;\n        }\n        return true;\n    }\n}\n",
      "buggy_signatures": [
        "public void add(Block block, Object key)",
        "public Size2D arrange(BlockContainer container, Graphics2D g2, RectangleConstraint constraint)",
        "protected Size2D arrangeNN(BlockContainer container, Graphics2D g2)",
        "protected Size2D arrangeFR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint)",
        "protected Size2D arrangeFN(BlockContainer container, Graphics2D g2, double width)",
        "protected Size2D arrangeRR(BlockContainer container, Range widthRange, Range heightRange, Graphics2D g2)",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint)",
        "public void clear()",
        "public boolean equals(Object obj)"
      ],
      "fixed_signatures": [
        "public void add(Block block, Object key)",
        "public Size2D arrange(BlockContainer container, Graphics2D g2, RectangleConstraint constraint)",
        "protected Size2D arrangeNN(BlockContainer container, Graphics2D g2)",
        "protected Size2D arrangeFR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint)",
        "protected Size2D arrangeFN(BlockContainer container, Graphics2D g2, double width)",
        "protected Size2D arrangeRR(BlockContainer container, Range widthRange, Range heightRange, Graphics2D g2)",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint)",
        "public void clear()",
        "public boolean equals(Object obj)"
      ],
      "methods": [
        {
          "buggy_method": "  protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {\n  double[] w = new double[5];\n  double[] h = new double[5];\n  w[0] = constraint.getWidth();\n  if (this.topBlock != null) {\n  RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n  LengthConstraintType.FIXED, 0.0,\n  new Range(0.0, constraint.getHeight()),\n  LengthConstraintType.RANGE);\n  Size2D size = this.topBlock.arrange(g2, c1);\n  h[0] = size.height;\n  }\n  w[1] = w[0];\n  if (this.bottomBlock != null) {\n  RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n  LengthConstraintType.FIXED, 0.0, new Range(0.0,\n  constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n  Size2D size = this.bottomBlock.arrange(g2, c2);\n  h[1] = size.height;\n  }\n  h[2] = constraint.getHeight() - h[1] - h[0];\n  if (this.leftBlock != null) {\n  RectangleConstraint c3 = new RectangleConstraint(0.0,\n  new Range(0.0, constraint.getWidth()),\n  LengthConstraintType.RANGE, h[2], null,\n  LengthConstraintType.FIXED);\n  Size2D size = this.leftBlock.arrange(g2, c3);\n  w[2] = size.width;\n  }\n  h[3] = h[2];\n  if (this.rightBlock != null) {\n  RectangleConstraint c4 = new RectangleConstraint(0.0,\n  new Range(0.0, constraint.getWidth() - w[2]),\n  LengthConstraintType.RANGE, h[2], null,\n  LengthConstraintType.FIXED);\n  Size2D size = this.rightBlock.arrange(g2, c4);\n  w[3] = size.width;\n  }\n  h[4] = h[2];\n  w[4] = constraint.getWidth() - w[3] - w[2];\n  RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n  if (this.centerBlock != null) {\n  this.centerBlock.arrange(g2, c5);\n  }\n\n  if (this.topBlock != null) {\n  this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n  h[0]));\n  }\n  if (this.bottomBlock != null) {\n  this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n  w[1], h[1]));\n  }\n  if (this.leftBlock != null) {\n  this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n  h[2]));\n  }\n  if (this.rightBlock != null) {\n  this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n  w[3], h[3]));\n  }\n  if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n  h[4]));\n  }\n  return new Size2D(constraint.getWidth(), constraint.getHeight());\n  }",
          "fixed_method": "  protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {\n  double[] w = new double[5];\n  double[] h = new double[5];\n  w[0] = constraint.getWidth();\n  if (this.topBlock != null) {\n  RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n  LengthConstraintType.FIXED, 0.0,\n  new Range(0.0, constraint.getHeight()),\n  LengthConstraintType.RANGE);\n  Size2D size = this.topBlock.arrange(g2, c1);\n  h[0] = size.height;\n  }\n  w[1] = w[0];\n  if (this.bottomBlock != null) {\n  RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n  LengthConstraintType.FIXED, 0.0, new Range(0.0,\n  constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n  Size2D size = this.bottomBlock.arrange(g2, c2);\n  h[1] = size.height;\n  }\n  h[2] = constraint.getHeight() - h[1] - h[0];\n  if (this.leftBlock != null) {\n  RectangleConstraint c3 = new RectangleConstraint(0.0,\n  new Range(0.0, constraint.getWidth()),\n  LengthConstraintType.RANGE, h[2], null,\n  LengthConstraintType.FIXED);\n  Size2D size = this.leftBlock.arrange(g2, c3);\n  w[2] = size.width;\n  }\n  h[3] = h[2];\n  if (this.rightBlock != null) {\n  RectangleConstraint c4 = new RectangleConstraint(0.0,\n  new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),\n  LengthConstraintType.RANGE, h[2], null,\n  LengthConstraintType.FIXED);\n  Size2D size = this.rightBlock.arrange(g2, c4);\n  w[3] = size.width;\n  }\n  h[4] = h[2];\n  w[4] = constraint.getWidth() - w[3] - w[2];\n  RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n  if (this.centerBlock != null) {\n  this.centerBlock.arrange(g2, c5);\n  }\n\n  if (this.topBlock != null) {\n  this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n  h[0]));\n  }\n  if (this.bottomBlock != null) {\n  this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n  w[1], h[1]));\n  }\n  if (this.leftBlock != null) {\n  this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n  h[2]));\n  }\n  if (this.rightBlock != null) {\n  this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n  w[3], h[3]));\n  }\n  if (this.centerBlock != null) {\n  this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n  h[4]));\n  }\n  return new Size2D(constraint.getWidth(), constraint.getHeight());\n  }",
          "diff": [
            "@@ -452,7 +452,7 @@",
            "         h[3] = h[2];\n",
            "         if (this.rightBlock != null) {\n",
            "             RectangleConstraint c4 = new RectangleConstraint(0.0,\n",
            "-                    new Range(0.0, constraint.getWidth() - w[2]),\n",
            "+                    new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),\n",
            "                     LengthConstraintType.RANGE, h[2], null,\n",
            "                     LengthConstraintType.FIXED);\n",
            "             Size2D size = this.rightBlock.arrange(g2, c4);\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
