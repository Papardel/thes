{
  "bug_id": "45",
  "failed_tests": {
    "org.apache.commons.lang.WordUtilsTest": [
      {
        "methodName": "testAbbreviate",
        "error": "java.lang.StringIndexOutOfBoundsException",
        "message": "begin 0, end 15, length 10",
        "fail_line": "        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 15, 20, null));",
        "test_source": "  public void testAbbreviate() {\n  // check null and empty are returned respectively\n  assertNull(WordUtils.abbreviate(null, 1,-1,\"\"));\n  assertEquals(StringUtils.EMPTY, WordUtils.abbreviate(\"\", 1,-1,\"\"));\n\n  // test upper limit\n  assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 0,5,\"\"));\n  assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"\"));\n  assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5,\"\"));\n  assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n  assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n\n  // test upper limit + append string\n  assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 0,5,\"-\"));\n  assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"-\"));\n  assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, null));\n  assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n  assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n\n  // test lower value\n  assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n  assertEquals(\"01234\", WordUtils.abbreviate(\"01234 56789\", 5, 10, null));\n  assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, null));\n  assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, null));\n  assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 15, 20, null));\n\n  // test lower value + append\n  assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n  assertEquals(\"01234-\", WordUtils.abbreviate(\"01234 56789\", 5, 10, \"-\"));\n  assertEquals(\"01 23 45 67abc\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, \"abc\"));\n  assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, \"\"));\n\n  // others\n  assertEquals(\"\", WordUtils.abbreviate(\"0123456790\", 0,0,\"\"));\n  assertEquals(\"\", WordUtils.abbreviate(\" 0123456790\", 0,-1,\"\"));\n  }",
        "stack": [
          "WordUtils.abbreviate line 629, WordUtilsTest.testAbbreviate line 390"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/lang/WordUtils.java",
      "buggy_full_code": "\npackage org.apache.commons.lang;\n\n\npublic class WordUtils { public WordUtils() {\n      super();\n    }\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n    \n    public static String wrap(String str, int wrapLength) {\n        return wrap(str, wrapLength, null, false);\n    }\n    \n    \n    public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords) {\n        if (str == null) {\n            return null;\n        }\n        if (newLineStr == null) {\n            newLineStr = SystemUtils.LINE_SEPARATOR;\n        }\n        if (wrapLength < 1) {\n            wrapLength = 1;\n        }\n        int inputLineLength = str.length();\n        int offset = 0;\n        StringBuffer wrappedLine = new StringBuffer(inputLineLength + 32);\n        \n        while ((inputLineLength - offset) > wrapLength) {\n            if (str.charAt(offset) == ' ') {\n                offset++;\n                continue;\n            }\n            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);\n\n            if (spaceToWrapAt >= offset) {\n                \n                wrappedLine.append(str.substring(offset, spaceToWrapAt));\n                wrappedLine.append(newLineStr);\n                offset = spaceToWrapAt + 1;\n                \n            } else {\n                \n                if (wrapLongWords) {\n                    \n                    wrappedLine.append(str.substring(offset, wrapLength + offset));\n                    wrappedLine.append(newLineStr);\n                    offset += wrapLength;\n                } else {\n                    \n                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);\n                    if (spaceToWrapAt >= 0) {\n                        wrappedLine.append(str.substring(offset, spaceToWrapAt));\n                        wrappedLine.append(newLineStr);\n                        offset = spaceToWrapAt + 1;\n                    } else {\n                        wrappedLine.append(str.substring(offset));\n                        offset = inputLineLength;\n                    }\n                }\n            }\n        }\n\n        \n        wrappedLine.append(str.substring(offset));\n\n        return wrappedLine.toString();\n    }\n\n    \n    \n    \n    public static String capitalize(String str) {\n        return capitalize(str, null);\n    }\n\n    \n    public static String capitalize(String str, char[] delimiters) {\n        int delimLen = (delimiters == null ? -1 : delimiters.length);\n        if (str == null || str.length() == 0 || delimLen == 0) {\n            return str;\n        }\n        int strLen = str.length();\n        StringBuffer buffer = new StringBuffer(strLen);\n        boolean capitalizeNext = true;\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n\n            if (isDelimiter(ch, delimiters)) {\n                buffer.append(ch);\n                capitalizeNext = true;\n            } else if (capitalizeNext) {\n                buffer.append(Character.toTitleCase(ch));\n                capitalizeNext = false;\n            } else {\n                buffer.append(ch);\n            }\n        }\n        return buffer.toString();\n    }\n\n    \n    \n    public static String capitalizeFully(String str) {\n        return capitalizeFully(str, null);\n    }\n\n    \n    public static String capitalizeFully(String str, char[] delimiters) {\n        int delimLen = (delimiters == null ? -1 : delimiters.length);\n        if (str == null || str.length() == 0 || delimLen == 0) {\n            return str;\n        }\n        str = str.toLowerCase();\n        return capitalize(str, delimiters);\n    }\n\n    \n    \n    public static String uncapitalize(String str) {\n        return uncapitalize(str, null);\n    }\n\n    \n    public static String uncapitalize(String str, char[] delimiters) {\n        int delimLen = (delimiters == null ? -1 : delimiters.length);\n        if (str == null || str.length() == 0 || delimLen == 0) {\n            return str;\n        }\n        int strLen = str.length();\n        StringBuffer buffer = new StringBuffer(strLen);\n        boolean uncapitalizeNext = true;\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n\n            if (isDelimiter(ch, delimiters)) {\n                buffer.append(ch);\n                uncapitalizeNext = true;\n            } else if (uncapitalizeNext) {\n                buffer.append(Character.toLowerCase(ch));\n                uncapitalizeNext = false;\n            } else {\n                buffer.append(ch);\n            }\n        }\n        return buffer.toString();\n    }\n\n    \n    \n    public static String swapCase(String str) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        StringBuffer buffer = new StringBuffer(strLen);\n\n        boolean whitespace = true;\n        char ch = 0;\n        char tmp = 0;\n\n        for (int i = 0; i < strLen; i++) {\n            ch = str.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                tmp = Character.toLowerCase(ch);\n            } else if (Character.isTitleCase(ch)) {\n                tmp = Character.toLowerCase(ch);\n            } else if (Character.isLowerCase(ch)) {\n                if (whitespace) {\n                    tmp = Character.toTitleCase(ch);\n                } else {\n                    tmp = Character.toUpperCase(ch);\n                }\n            } else {\n                tmp = ch;\n            }\n            buffer.append(tmp);\n            whitespace = Character.isWhitespace(ch);\n        }\n        return buffer.toString();\n    }\n\n    \n    \n    public static String initials(String str) {\n        return initials(str, null);\n    }\n\n    \n    public static String initials(String str, char[] delimiters) {\n        if (str == null || str.length() == 0) {\n            return str;\n        }\n        if (delimiters != null && delimiters.length == 0) {\n            return \"\";\n        }\n        int strLen = str.length();\n        char[] buf = new char[strLen / 2 + 1];\n        int count = 0;\n        boolean lastWasGap = true;\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n\n            if (isDelimiter(ch, delimiters)) {\n                lastWasGap = true;\n            } else if (lastWasGap) {\n                buf[count++] = ch;\n                lastWasGap = false;\n            } else {\n                \n            }\n        }\n        return new String(buf, 0, count);\n    }\n\n    \n    \n    private static boolean isDelimiter(char ch, char[] delimiters) {\n        if (delimiters == null) {\n            return Character.isWhitespace(ch);\n        }\n        for (int i = 0, isize = delimiters.length; i < isize; i++) {\n            if (ch == delimiters[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n    \n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        \n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        \n        \n        \n        \n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n        \n        if (upper < lower) {\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        int index = StringUtils.indexOf(str, \" \", lower);\n        if (index == -1) {\n            result.append(str.substring(0, upper));\n            \n            if (upper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > upper) {\n            result.append(str.substring(0, upper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            result.append(str.substring(0, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.lang;\n\n\npublic class WordUtils { public WordUtils() {\n      super();\n    }\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n    \n    public static String wrap(String str, int wrapLength) {\n        return wrap(str, wrapLength, null, false);\n    }\n    \n    \n    public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords) {\n        if (str == null) {\n            return null;\n        }\n        if (newLineStr == null) {\n            newLineStr = SystemUtils.LINE_SEPARATOR;\n        }\n        if (wrapLength < 1) {\n            wrapLength = 1;\n        }\n        int inputLineLength = str.length();\n        int offset = 0;\n        StringBuffer wrappedLine = new StringBuffer(inputLineLength + 32);\n        \n        while ((inputLineLength - offset) > wrapLength) {\n            if (str.charAt(offset) == ' ') {\n                offset++;\n                continue;\n            }\n            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);\n\n            if (spaceToWrapAt >= offset) {\n                \n                wrappedLine.append(str.substring(offset, spaceToWrapAt));\n                wrappedLine.append(newLineStr);\n                offset = spaceToWrapAt + 1;\n                \n            } else {\n                \n                if (wrapLongWords) {\n                    \n                    wrappedLine.append(str.substring(offset, wrapLength + offset));\n                    wrappedLine.append(newLineStr);\n                    offset += wrapLength;\n                } else {\n                    \n                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);\n                    if (spaceToWrapAt >= 0) {\n                        wrappedLine.append(str.substring(offset, spaceToWrapAt));\n                        wrappedLine.append(newLineStr);\n                        offset = spaceToWrapAt + 1;\n                    } else {\n                        wrappedLine.append(str.substring(offset));\n                        offset = inputLineLength;\n                    }\n                }\n            }\n        }\n\n        \n        wrappedLine.append(str.substring(offset));\n\n        return wrappedLine.toString();\n    }\n\n    \n    \n    \n    public static String capitalize(String str) {\n        return capitalize(str, null);\n    }\n\n    \n    public static String capitalize(String str, char[] delimiters) {\n        int delimLen = (delimiters == null ? -1 : delimiters.length);\n        if (str == null || str.length() == 0 || delimLen == 0) {\n            return str;\n        }\n        int strLen = str.length();\n        StringBuffer buffer = new StringBuffer(strLen);\n        boolean capitalizeNext = true;\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n\n            if (isDelimiter(ch, delimiters)) {\n                buffer.append(ch);\n                capitalizeNext = true;\n            } else if (capitalizeNext) {\n                buffer.append(Character.toTitleCase(ch));\n                capitalizeNext = false;\n            } else {\n                buffer.append(ch);\n            }\n        }\n        return buffer.toString();\n    }\n\n    \n    \n    public static String capitalizeFully(String str) {\n        return capitalizeFully(str, null);\n    }\n\n    \n    public static String capitalizeFully(String str, char[] delimiters) {\n        int delimLen = (delimiters == null ? -1 : delimiters.length);\n        if (str == null || str.length() == 0 || delimLen == 0) {\n            return str;\n        }\n        str = str.toLowerCase();\n        return capitalize(str, delimiters);\n    }\n\n    \n    \n    public static String uncapitalize(String str) {\n        return uncapitalize(str, null);\n    }\n\n    \n    public static String uncapitalize(String str, char[] delimiters) {\n        int delimLen = (delimiters == null ? -1 : delimiters.length);\n        if (str == null || str.length() == 0 || delimLen == 0) {\n            return str;\n        }\n        int strLen = str.length();\n        StringBuffer buffer = new StringBuffer(strLen);\n        boolean uncapitalizeNext = true;\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n\n            if (isDelimiter(ch, delimiters)) {\n                buffer.append(ch);\n                uncapitalizeNext = true;\n            } else if (uncapitalizeNext) {\n                buffer.append(Character.toLowerCase(ch));\n                uncapitalizeNext = false;\n            } else {\n                buffer.append(ch);\n            }\n        }\n        return buffer.toString();\n    }\n\n    \n    \n    public static String swapCase(String str) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        StringBuffer buffer = new StringBuffer(strLen);\n\n        boolean whitespace = true;\n        char ch = 0;\n        char tmp = 0;\n\n        for (int i = 0; i < strLen; i++) {\n            ch = str.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                tmp = Character.toLowerCase(ch);\n            } else if (Character.isTitleCase(ch)) {\n                tmp = Character.toLowerCase(ch);\n            } else if (Character.isLowerCase(ch)) {\n                if (whitespace) {\n                    tmp = Character.toTitleCase(ch);\n                } else {\n                    tmp = Character.toUpperCase(ch);\n                }\n            } else {\n                tmp = ch;\n            }\n            buffer.append(tmp);\n            whitespace = Character.isWhitespace(ch);\n        }\n        return buffer.toString();\n    }\n\n    \n    \n    public static String initials(String str) {\n        return initials(str, null);\n    }\n\n    \n    public static String initials(String str, char[] delimiters) {\n        if (str == null || str.length() == 0) {\n            return str;\n        }\n        if (delimiters != null && delimiters.length == 0) {\n            return \"\";\n        }\n        int strLen = str.length();\n        char[] buf = new char[strLen / 2 + 1];\n        int count = 0;\n        boolean lastWasGap = true;\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n\n            if (isDelimiter(ch, delimiters)) {\n                lastWasGap = true;\n            } else if (lastWasGap) {\n                buf[count++] = ch;\n                lastWasGap = false;\n            } else {\n                \n            }\n        }\n        return new String(buf, 0, count);\n    }\n\n    \n    \n    private static boolean isDelimiter(char ch, char[] delimiters) {\n        if (delimiters == null) {\n            return Character.isWhitespace(ch);\n        }\n        for (int i = 0, isize = delimiters.length; i < isize; i++) {\n            if (ch == delimiters[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n    \n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        \n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        \n        \n        if (lower > str.length()) {\n            lower = str.length();    \n        }\n        \n        \n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n        \n        if (upper < lower) {\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        int index = StringUtils.indexOf(str, \" \", lower);\n        if (index == -1) {\n            result.append(str.substring(0, upper));\n            \n            if (upper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > upper) {\n            result.append(str.substring(0, upper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            result.append(str.substring(0, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }\n\n}\n",
      "buggy_signatures": [
        "public class WordUtils { public WordUtils()",
        "public static String wrap(String str, int wrapLength)",
        "public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords)",
        "public static String capitalize(String str)",
        "public static String capitalize(String str, char[] delimiters)",
        "public static String capitalizeFully(String str)",
        "public static String capitalizeFully(String str, char[] delimiters)",
        "public static String uncapitalize(String str)",
        "public static String uncapitalize(String str, char[] delimiters)",
        "public static String swapCase(String str)",
        "public static String initials(String str)",
        "public static String initials(String str, char[] delimiters)",
        "private static boolean isDelimiter(char ch, char[] delimiters)",
        "public static String abbreviate(String str, int lower, int upper, String appendToEnd)"
      ],
      "fixed_signatures": [
        "public class WordUtils { public WordUtils()",
        "public static String wrap(String str, int wrapLength)",
        "public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords)",
        "public static String capitalize(String str)",
        "public static String capitalize(String str, char[] delimiters)",
        "public static String capitalizeFully(String str)",
        "public static String capitalizeFully(String str, char[] delimiters)",
        "public static String uncapitalize(String str)",
        "public static String uncapitalize(String str, char[] delimiters)",
        "public static String swapCase(String str)",
        "public static String initials(String str)",
        "public static String initials(String str, char[] delimiters)",
        "private static boolean isDelimiter(char ch, char[] delimiters)",
        "public static String abbreviate(String str, int lower, int upper, String appendToEnd)"
      ],
      "methods": [
        {
          "buggy_method": "  public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n  \n  if (str == null) {\n  return null;\n  }\n  if (str.length() == 0) {\n  return StringUtils.EMPTY;\n  }\n\n  \n  \n  \n  \n  if (upper == -1 || upper > str.length()) {\n  upper = str.length();\n  }\n  \n  if (upper < lower) {\n  upper = lower;\n  }\n\n  StringBuffer result = new StringBuffer();\n  int index = StringUtils.indexOf(str, \" \", lower);\n  if (index == -1) {\n  result.append(str.substring(0, upper));\n  \n  if (upper != str.length()) {\n  result.append(StringUtils.defaultString(appendToEnd));\n  }\n  } else if (index > upper) {\n  result.append(str.substring(0, upper));\n  result.append(StringUtils.defaultString(appendToEnd));\n  } else {\n  result.append(str.substring(0, index));\n  result.append(StringUtils.defaultString(appendToEnd));\n  }\n  return result.toString();\n  }",
          "fixed_method": "  public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n  \n  if (str == null) {\n  return null;\n  }\n  if (str.length() == 0) {\n  return StringUtils.EMPTY;\n  }\n\n  \n  \n  if (lower > str.length()) {\n  lower = str.length();  \n  }\n  \n  \n  if (upper == -1 || upper > str.length()) {\n  upper = str.length();\n  }\n  \n  if (upper < lower) {\n  upper = lower;\n  }\n\n  StringBuffer result = new StringBuffer();\n  int index = StringUtils.indexOf(str, \" \", lower);\n  if (index == -1) {\n  result.append(str.substring(0, upper));\n  \n  if (upper != str.length()) {\n  result.append(StringUtils.defaultString(appendToEnd));\n  }\n  } else if (index > upper) {\n  result.append(str.substring(0, upper));\n  result.append(StringUtils.defaultString(appendToEnd));\n  } else {\n  result.append(str.substring(0, index));\n  result.append(StringUtils.defaultString(appendToEnd));\n  }\n  return result.toString();\n  }",
          "diff": [
            "@@ -613,6 +613,9 @@",
            " \n",
            "         // if the lower value is greater than the length of the string,\n",
            "         // set to the length of the string\n",
            "+        if (lower > str.length()) {\n",
            "+            lower = str.length();    \n",
            "+        }\n",
            "         // if the upper value is -1 (i.e. no limit) or is greater\n",
            "         // than the length of the string, set to the length of the string\n",
            "         if (upper == -1 || upper > str.length()) {\n"
          ],
          "changed_lines": 3
        }
      ]
    }
  ]
}
