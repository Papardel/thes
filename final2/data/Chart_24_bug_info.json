{
  "bug_id": "24",
  "failed_tests": {
    "org.jfree.chart.renderer.junit.GrayPaintScaleTests": [
      {
        "methodName": "testGetPaint",
        "error": "java.lang.IllegalArgumentException",
        "message": "Color parameter outside of expected range: Red Green Blue",
        "fail_line": "        c = (Color) gps.getPaint(-0.5);",
        "test_source": "  public void testGetPaint() {\n  GrayPaintScale gps = new GrayPaintScale();\n  Color c = (Color) gps.getPaint(0.0);\n  assertTrue(c.equals(Color.black));\n  c = (Color) gps.getPaint(1.0);\n  assertTrue(c.equals(Color.white));\n  \n  // check lookup values that are outside the bounds - see bug report\n  // 1767315\n  c = (Color) gps.getPaint(-0.5);\n  assertTrue(c.equals(Color.black));\n  c = (Color) gps.getPaint(1.5);\n  assertTrue(c.equals(Color.white));\n  }",
        "stack": [
          "GrayPaintScale.getPaint line 128, GrayPaintScaleTests.testGetPaint line 107"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/chart/renderer/GrayPaintScale.java",
      "buggy_full_code": "\n\npackage org.jfree.chart.renderer;\n\nimport java.awt.Color;\nimport java.awt.Paint;\nimport java.io.Serializable;\n\nimport org.jfree.chart.util.PublicCloneable;\n\n\npublic class GrayPaintScale implements PaintScale, PublicCloneable, Serializable { private double lowerBound; private double upperBound; public GrayPaintScale() {\n        this(0.0, 1.0);\n    }\n    \n    \n    public GrayPaintScale(double lowerBound, double upperBound) {\n        if (lowerBound >= upperBound) {\n            throw new IllegalArgumentException(\n                    \"Requires lowerBound < upperBound.\");\n        }\n        this.lowerBound = lowerBound;\n        this.upperBound = upperBound;\n    }\n    \n    \n    public double getLowerBound() {\n        return this.lowerBound;\n    }\n\n    \n    public double getUpperBound() {\n        return this.upperBound;\n    }\n\n    \n    public Paint getPaint(double value) {\n        double v = Math.max(value, this.lowerBound);\n        v = Math.min(v, this.upperBound);\n        int g = (int) ((value - this.lowerBound) / (this.upperBound \n                - this.lowerBound) * 255.0);\n        return new Color(g, g, g);\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof GrayPaintScale)) {\n            return false;\n        }\n        GrayPaintScale that = (GrayPaintScale) obj;\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        return true;    \n    }\n    \n    \n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n    \n}\n",
      "fixed_full_code": "\n\npackage org.jfree.chart.renderer;\n\nimport java.awt.Color;\nimport java.awt.Paint;\nimport java.io.Serializable;\n\nimport org.jfree.chart.util.PublicCloneable;\n\n\npublic class GrayPaintScale implements PaintScale, PublicCloneable, Serializable { private double lowerBound; private double upperBound; public GrayPaintScale() {\n        this(0.0, 1.0);\n    }\n    \n    \n    public GrayPaintScale(double lowerBound, double upperBound) {\n        if (lowerBound >= upperBound) {\n            throw new IllegalArgumentException(\n                    \"Requires lowerBound < upperBound.\");\n        }\n        this.lowerBound = lowerBound;\n        this.upperBound = upperBound;\n    }\n    \n    \n    public double getLowerBound() {\n        return this.lowerBound;\n    }\n\n    \n    public double getUpperBound() {\n        return this.upperBound;\n    }\n\n    \n    public Paint getPaint(double value) {\n        double v = Math.max(value, this.lowerBound);\n        v = Math.min(v, this.upperBound);\n        int g = (int) ((v - this.lowerBound) / (this.upperBound \n                - this.lowerBound) * 255.0);\n        return new Color(g, g, g);\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof GrayPaintScale)) {\n            return false;\n        }\n        GrayPaintScale that = (GrayPaintScale) obj;\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        return true;    \n    }\n    \n    \n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n    \n}\n",
      "buggy_signatures": [
        "public class GrayPaintScale implements PaintScale, PublicCloneable, Serializable { private double lowerBound; private double upperBound; public GrayPaintScale()",
        "public GrayPaintScale(double lowerBound, double upperBound)",
        "public double getLowerBound()",
        "public double getUpperBound()",
        "public Paint getPaint(double value)",
        "public boolean equals(Object obj)",
        "public Object clone() throws CloneNotSupportedException"
      ],
      "fixed_signatures": [
        "public class GrayPaintScale implements PaintScale, PublicCloneable, Serializable { private double lowerBound; private double upperBound; public GrayPaintScale()",
        "public GrayPaintScale(double lowerBound, double upperBound)",
        "public double getLowerBound()",
        "public double getUpperBound()",
        "public Paint getPaint(double value)",
        "public boolean equals(Object obj)",
        "public Object clone() throws CloneNotSupportedException"
      ],
      "methods": [
        {
          "buggy_method": "  public Paint getPaint(double value) {\n  double v = Math.max(value, this.lowerBound);\n  v = Math.min(v, this.upperBound);\n  int g = (int) ((value - this.lowerBound) / (this.upperBound \n  - this.lowerBound) * 255.0);\n  return new Color(g, g, g);\n  }",
          "fixed_method": "  public Paint getPaint(double value) {\n  double v = Math.max(value, this.lowerBound);\n  v = Math.min(v, this.upperBound);\n  int g = (int) ((v - this.lowerBound) / (this.upperBound \n  - this.lowerBound) * 255.0);\n  return new Color(g, g, g);\n  }",
          "diff": [
            "@@ -123,7 +123,7 @@",
            "     public Paint getPaint(double value) {\n",
            "         double v = Math.max(value, this.lowerBound);\n",
            "         v = Math.min(v, this.upperBound);\n",
            "-        int g = (int) ((value - this.lowerBound) / (this.upperBound \n",
            "+        int g = (int) ((v - this.lowerBound) / (this.upperBound \n",
            "                 - this.lowerBound) * 255.0);\n",
            "         return new Color(g, g, g);\n",
            "     }\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
