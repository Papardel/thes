{
  "bug_id": "54",
  "failed_tests": {
    "org.apache.commons.lang.LocaleUtilsTest": [
      {
        "methodName": "testLang328",
        "error": "java.lang.IllegalArgumentException",
        "message": "Invalid locale format: fr__POSIX",
        "fail_line": "        assertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");",
        "test_source": "  public void testLang328() {\n  assertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");\n  }",
        "stack": [
          "LocaleUtils.toLocale line 116, LocaleUtilsTest.assertValidToLocale line 140, LocaleUtilsTest.testLang328 line 507"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/lang/LocaleUtils.java",
      "buggy_full_code": "\npackage org.apache.commons.lang;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\n\n\npublic class LocaleUtils { private static final List cAvailableLocaleList; private static Set cAvailableLocaleSet; private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap()); private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap()); static {\n        List list = Arrays.asList(Locale.getAvailableLocales());\n        cAvailableLocaleList = Collections.unmodifiableList(list);\n    }\n\n    \n    public LocaleUtils() {\n      super();\n    }\n\n    \n    \n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len != 2 && len != 5 && len < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                if (str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }\n\n    \n    \n    public static List localeLookupList(Locale locale) {\n        return localeLookupList(locale, locale);\n    }\n\n    \n    \n    public static List localeLookupList(Locale locale, Locale defaultLocale) {\n        List list = new ArrayList(4);\n        if (locale != null) {\n            list.add(locale);\n            if (locale.getVariant().length() > 0) {\n                list.add(new Locale(locale.getLanguage(), locale.getCountry()));\n            }\n            if (locale.getCountry().length() > 0) {\n                list.add(new Locale(locale.getLanguage(), \"\"));\n            }\n            if (list.contains(defaultLocale) == false) {\n                list.add(defaultLocale);\n            }\n        }\n        return Collections.unmodifiableList(list);\n    }\n\n    \n    \n    public static List availableLocaleList() {\n        return cAvailableLocaleList;\n    }\n\n    \n    \n    public static Set availableLocaleSet() {\n        Set set = cAvailableLocaleSet;\n        if (set == null) {\n            set = new HashSet(availableLocaleList());\n            set = Collections.unmodifiableSet(set);\n            cAvailableLocaleSet = set;\n        }\n        return set;\n    }\n\n    \n    \n    public static boolean isAvailableLocale(Locale locale) {\n        return availableLocaleList().contains(locale);\n    }\n\n    \n    \n    public static List languagesByCountry(String countryCode) {\n        List langs = (List) cLanguagesByCountry.get(countryCode);  \n        if (langs == null) {\n            if (countryCode != null) {\n                langs = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (countryCode.equals(locale.getCountry()) &&\n                            locale.getVariant().length() == 0) {\n                        langs.add(locale);\n                    }\n                }\n                langs = Collections.unmodifiableList(langs);\n            } else {\n                langs = Collections.EMPTY_LIST;\n            }\n            cLanguagesByCountry.put(countryCode, langs);  \n        }\n        return langs;\n    }\n\n    \n    \n    public static List countriesByLanguage(String languageCode) {\n        List countries = (List) cCountriesByLanguage.get(languageCode);  \n        if (countries == null) {\n            if (languageCode != null) {\n                countries = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (languageCode.equals(locale.getLanguage()) &&\n                            locale.getCountry().length() != 0 &&\n                            locale.getVariant().length() == 0) {\n                        countries.add(locale);\n                    }\n                }\n                countries = Collections.unmodifiableList(countries);\n            } else {\n                countries = Collections.EMPTY_LIST;\n            }\n            cCountriesByLanguage.put(languageCode, countries);  \n        }\n        return countries;\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.lang;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\n\n\npublic class LocaleUtils { private static final List cAvailableLocaleList; private static Set cAvailableLocaleSet; private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap()); private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap()); static {\n        List list = Arrays.asList(Locale.getAvailableLocales());\n        cAvailableLocaleList = Collections.unmodifiableList(list);\n    }\n\n    \n    public LocaleUtils() {\n      super();\n    }\n\n    \n    \n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len != 2 && len != 5 && len < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                if (str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }\n\n    \n    \n    public static List localeLookupList(Locale locale) {\n        return localeLookupList(locale, locale);\n    }\n\n    \n    \n    public static List localeLookupList(Locale locale, Locale defaultLocale) {\n        List list = new ArrayList(4);\n        if (locale != null) {\n            list.add(locale);\n            if (locale.getVariant().length() > 0) {\n                list.add(new Locale(locale.getLanguage(), locale.getCountry()));\n            }\n            if (locale.getCountry().length() > 0) {\n                list.add(new Locale(locale.getLanguage(), \"\"));\n            }\n            if (list.contains(defaultLocale) == false) {\n                list.add(defaultLocale);\n            }\n        }\n        return Collections.unmodifiableList(list);\n    }\n\n    \n    \n    public static List availableLocaleList() {\n        return cAvailableLocaleList;\n    }\n\n    \n    \n    public static Set availableLocaleSet() {\n        Set set = cAvailableLocaleSet;\n        if (set == null) {\n            set = new HashSet(availableLocaleList());\n            set = Collections.unmodifiableSet(set);\n            cAvailableLocaleSet = set;\n        }\n        return set;\n    }\n\n    \n    \n    public static boolean isAvailableLocale(Locale locale) {\n        return availableLocaleList().contains(locale);\n    }\n\n    \n    \n    public static List languagesByCountry(String countryCode) {\n        List langs = (List) cLanguagesByCountry.get(countryCode);  \n        if (langs == null) {\n            if (countryCode != null) {\n                langs = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (countryCode.equals(locale.getCountry()) &&\n                            locale.getVariant().length() == 0) {\n                        langs.add(locale);\n                    }\n                }\n                langs = Collections.unmodifiableList(langs);\n            } else {\n                langs = Collections.EMPTY_LIST;\n            }\n            cLanguagesByCountry.put(countryCode, langs);  \n        }\n        return langs;\n    }\n\n    \n    \n    public static List countriesByLanguage(String languageCode) {\n        List countries = (List) cCountriesByLanguage.get(languageCode);  \n        if (countries == null) {\n            if (languageCode != null) {\n                countries = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (languageCode.equals(locale.getLanguage()) &&\n                            locale.getCountry().length() != 0 &&\n                            locale.getVariant().length() == 0) {\n                        countries.add(locale);\n                    }\n                }\n                countries = Collections.unmodifiableList(countries);\n            } else {\n                countries = Collections.EMPTY_LIST;\n            }\n            cCountriesByLanguage.put(languageCode, countries);  \n        }\n        return countries;\n    }\n\n}\n",
      "buggy_signatures": [
        "public LocaleUtils()",
        "public static Locale toLocale(String str)",
        "public static List localeLookupList(Locale locale)",
        "public static List localeLookupList(Locale locale, Locale defaultLocale)",
        "public static List availableLocaleList()",
        "public static Set availableLocaleSet()",
        "public static boolean isAvailableLocale(Locale locale)",
        "public static List languagesByCountry(String countryCode)",
        "public static List countriesByLanguage(String languageCode)"
      ],
      "fixed_signatures": [
        "public LocaleUtils()",
        "public static Locale toLocale(String str)",
        "public static List localeLookupList(Locale locale)",
        "public static List localeLookupList(Locale locale, Locale defaultLocale)",
        "public static List availableLocaleList()",
        "public static Set availableLocaleSet()",
        "public static boolean isAvailableLocale(Locale locale)",
        "public static List languagesByCountry(String countryCode)",
        "public static List countriesByLanguage(String languageCode)"
      ],
      "methods": [
        {
          "buggy_method": "  public static Locale toLocale(String str) {\n  if (str == null) {\n  return null;\n  }\n  int len = str.length();\n  if (len != 2 && len != 5 && len < 7) {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  char ch0 = str.charAt(0);\n  char ch1 = str.charAt(1);\n  if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  if (len == 2) {\n  return new Locale(str, \"\");\n  } else {\n  if (str.charAt(2) != '_') {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  char ch3 = str.charAt(3);\n  char ch4 = str.charAt(4);\n  if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  if (len == 5) {\n  return new Locale(str.substring(0, 2), str.substring(3, 5));\n  } else {\n  if (str.charAt(5) != '_') {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n  }\n  }\n  }",
          "fixed_method": "  public static Locale toLocale(String str) {\n  if (str == null) {\n  return null;\n  }\n  int len = str.length();\n  if (len != 2 && len != 5 && len < 7) {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  char ch0 = str.charAt(0);\n  char ch1 = str.charAt(1);\n  if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  if (len == 2) {\n  return new Locale(str, \"\");\n  } else {\n  if (str.charAt(2) != '_') {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  char ch3 = str.charAt(3);\n  if (ch3 == '_') {\n  return new Locale(str.substring(0, 2), \"\", str.substring(4));\n  }\n  char ch4 = str.charAt(4);\n  if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  if (len == 5) {\n  return new Locale(str.substring(0, 2), str.substring(3, 5));\n  } else {\n  if (str.charAt(5) != '_') {\n  throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n  }\n  }\n  }",
          "diff": [
            "@@ -111,6 +111,9 @@",
            "                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n",
            "             }\n",
            "             char ch3 = str.charAt(3);\n",
            "+            if (ch3 == '_') {\n",
            "+                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n",
            "+            }\n",
            "             char ch4 = str.charAt(4);\n",
            "             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n",
            "                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n"
          ],
          "changed_lines": 3
        }
      ]
    }
  ]
}
