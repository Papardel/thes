{
  "bug_id": "51",
  "failed_tests": {
    "org.jsoup.parser.HtmlParserTest": [
      {
        "methodName": "testSupportsNonAsciiTags",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<[Yes]> but was:<[]>",
        "fail_line": "        assertEquals(\"Yes\", els.text());",
        "test_source": "",
        "stack": [
          "HtmlParserTest.testSupportsNonAsciiTags line 891"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jsoup/parser/CharacterReader.java",
      "buggy_full_code": "package org.jsoup.parser;\n\nimport org.jsoup.helper.Validate;\n\nimport java.util.Arrays;\nimport java.util.Locale;\n\n\nfinal class CharacterReader {\n    static final char EOF = (char) -1; private static final int maxCacheLen = 12; private final char[] input; private final int length; private int pos = 0; private int mark = 0; private final String[] stringCache = new String[512]; CharacterReader(String input) {\n        Validate.notNull(input);\n        this.input = input.toCharArray();\n        this.length = this.input.length;\n    }\n\n    int pos() {\n        return pos;\n    }\n\n    boolean isEmpty() {\n        return pos >= length;\n    }\n\n    char current() {\n        return pos >= length ? EOF : input[pos];\n    }\n\n    char consume() {\n        char val = pos >= length ? EOF : input[pos];\n        pos++;\n        return val;\n    }\n\n    void unconsume() {\n        pos--;\n    }\n\n    void advance() {\n        pos++;\n    }\n\n    void mark() {\n        mark = pos;\n    }\n\n    void rewindToMark() {\n        pos = mark;\n    }\n\n    String consumeAsString() {\n        return new String(input, pos++, 1);\n    }\n\n    \n    int nextIndexOf(char c) {\n        \n        for (int i = pos; i < length; i++) {\n            if (c == input[i])\n                return i - pos;\n        }\n        return -1;\n    }\n\n    \n    int nextIndexOf(CharSequence seq) {\n        \n        char startChar = seq.charAt(0);\n        for (int offset = pos; offset < length; offset++) {\n            \n            if (startChar != input[offset])\n                while(++offset < length && startChar != input[offset]) {  }\n            int i = offset + 1;\n            int last = i + seq.length()-1;\n            if (offset < length && last <= length) {\n                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) {  }\n                if (i == last) \n                    return offset - pos;\n            }\n        }\n        return -1;\n    }\n\n    String consumeTo(char c) {\n        int offset = nextIndexOf(c);\n        if (offset != -1) {\n            String consumed = cacheString(pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }\n\n    String consumeTo(String seq) {\n        int offset = nextIndexOf(seq);\n        if (offset != -1) {\n            String consumed = cacheString(pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }\n\n    String consumeToAny(final char... chars) {\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        OUTER: while (pos < remaining) {\n            for (char c : chars) {\n                if (val[pos] == c)\n                    break OUTER;\n            }\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeToAnySorted(final char... chars) {\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            if (Arrays.binarySearch(chars, val[pos]) >= 0)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeData() {\n        \n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            final char c = val[pos];\n            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeTagName() {\n        \n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            final char c = val[pos];\n            if (c == '\\t'|| c ==  '\\n'|| c ==  '\\r'|| c ==  '\\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c ==  TokeniserState.nullChar)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeToEnd() {\n        String data = cacheString(pos, length-pos);\n        pos = length;\n        return data;\n    }\n\n    String consumeLetterSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n\n        return cacheString(start, pos - start);\n    }\n\n    String consumeLetterThenDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n        while (!isEmpty()) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n\n        return cacheString(start, pos - start);\n    }\n\n    String consumeHexSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))\n                pos++;\n            else\n                break;\n        }\n        return cacheString(start, pos - start);\n    }\n\n    String consumeDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n        return cacheString(start, pos - start);\n    }\n\n    boolean matches(char c) {\n        return !isEmpty() && input[pos] == c;\n\n    }\n\n    boolean matches(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;\n        return true;\n    }\n\n    boolean matchesIgnoreCase(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++) {\n            char upScan = Character.toUpperCase(seq.charAt(offset));\n            char upTarget = Character.toUpperCase(input[pos + offset]);\n            if (upScan != upTarget)\n                return false;\n        }\n        return true;\n    }\n\n    boolean matchesAny(char... seq) {\n        if (isEmpty())\n            return false;\n\n        char c = input[pos];\n        for (char seek : seq) {\n            if (seek == c)\n                return true;\n        }\n        return false;\n    }\n\n    boolean matchesAnySorted(char[] seq) {\n        return !isEmpty() && Arrays.binarySearch(seq, input[pos]) >= 0;\n    }\n\n    boolean matchesLetter() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    }\n\n    boolean matchesDigit() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= '0' && c <= '9');\n    }\n\n    boolean matchConsume(String seq) {\n        if (matches(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    boolean matchConsumeIgnoreCase(String seq) {\n        if (matchesIgnoreCase(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    boolean containsIgnoreCase(String seq) {\n        \n        String loScan = seq.toLowerCase(Locale.ENGLISH);\n        String hiScan = seq.toUpperCase(Locale.ENGLISH);\n        return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);\n    }\n\n    @Override\n    public String toString() {\n        return new String(input, pos, length - pos);\n    }\n\n    \n    private String cacheString(final int start, final int count) {\n        final char[] val = input;\n        final String[] cache = stringCache;\n\n        \n        if (count > maxCacheLen)\n            return new String(val, start, count);\n\n        \n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + val[offset++];\n        }\n\n        \n        final int index = hash & cache.length - 1;\n        String cached = cache[index];\n\n        if (cached == null) { \n            cached = new String(val, start, count);\n            cache[index] = cached;\n        } else { \n            if (rangeEquals(start, count, cached)) { \n                return cached;\n            } else { \n                cached = new String(val, start, count);\n                cache[index] = cached; \n            }\n        }\n        return cached;\n    }\n\n    \n    boolean rangeEquals(final int start, int count, final String cached) {\n        if (count == cached.length()) {\n            char one[] = input;\n            int i = start;\n            int j = 0;\n            while (count-- != 0) {\n                if (one[i++] != cached.charAt(j++))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n",
      "fixed_full_code": "package org.jsoup.parser;\n\nimport org.jsoup.helper.Validate;\n\nimport java.util.Arrays;\nimport java.util.Locale;\n\n\nfinal class CharacterReader {\n    static final char EOF = (char) -1; private static final int maxCacheLen = 12; private final char[] input; private final int length; private int pos = 0; private int mark = 0; private final String[] stringCache = new String[512]; CharacterReader(String input) {\n        Validate.notNull(input);\n        this.input = input.toCharArray();\n        this.length = this.input.length;\n    }\n\n    int pos() {\n        return pos;\n    }\n\n    boolean isEmpty() {\n        return pos >= length;\n    }\n\n    char current() {\n        return pos >= length ? EOF : input[pos];\n    }\n\n    char consume() {\n        char val = pos >= length ? EOF : input[pos];\n        pos++;\n        return val;\n    }\n\n    void unconsume() {\n        pos--;\n    }\n\n    void advance() {\n        pos++;\n    }\n\n    void mark() {\n        mark = pos;\n    }\n\n    void rewindToMark() {\n        pos = mark;\n    }\n\n    String consumeAsString() {\n        return new String(input, pos++, 1);\n    }\n\n    \n    int nextIndexOf(char c) {\n        \n        for (int i = pos; i < length; i++) {\n            if (c == input[i])\n                return i - pos;\n        }\n        return -1;\n    }\n\n    \n    int nextIndexOf(CharSequence seq) {\n        \n        char startChar = seq.charAt(0);\n        for (int offset = pos; offset < length; offset++) {\n            \n            if (startChar != input[offset])\n                while(++offset < length && startChar != input[offset]) {  }\n            int i = offset + 1;\n            int last = i + seq.length()-1;\n            if (offset < length && last <= length) {\n                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) {  }\n                if (i == last) \n                    return offset - pos;\n            }\n        }\n        return -1;\n    }\n\n    String consumeTo(char c) {\n        int offset = nextIndexOf(c);\n        if (offset != -1) {\n            String consumed = cacheString(pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }\n\n    String consumeTo(String seq) {\n        int offset = nextIndexOf(seq);\n        if (offset != -1) {\n            String consumed = cacheString(pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }\n\n    String consumeToAny(final char... chars) {\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        OUTER: while (pos < remaining) {\n            for (char c : chars) {\n                if (val[pos] == c)\n                    break OUTER;\n            }\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeToAnySorted(final char... chars) {\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            if (Arrays.binarySearch(chars, val[pos]) >= 0)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeData() {\n        \n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            final char c = val[pos];\n            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeTagName() {\n        \n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            final char c = val[pos];\n            if (c == '\\t'|| c ==  '\\n'|| c ==  '\\r'|| c ==  '\\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c ==  TokeniserState.nullChar)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeToEnd() {\n        String data = cacheString(pos, length-pos);\n        pos = length;\n        return data;\n    }\n\n    String consumeLetterSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n\n        return cacheString(start, pos - start);\n    }\n\n    String consumeLetterThenDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n        while (!isEmpty()) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n\n        return cacheString(start, pos - start);\n    }\n\n    String consumeHexSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))\n                pos++;\n            else\n                break;\n        }\n        return cacheString(start, pos - start);\n    }\n\n    String consumeDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n        return cacheString(start, pos - start);\n    }\n\n    boolean matches(char c) {\n        return !isEmpty() && input[pos] == c;\n\n    }\n\n    boolean matches(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;\n        return true;\n    }\n\n    boolean matchesIgnoreCase(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++) {\n            char upScan = Character.toUpperCase(seq.charAt(offset));\n            char upTarget = Character.toUpperCase(input[pos + offset]);\n            if (upScan != upTarget)\n                return false;\n        }\n        return true;\n    }\n\n    boolean matchesAny(char... seq) {\n        if (isEmpty())\n            return false;\n\n        char c = input[pos];\n        for (char seek : seq) {\n            if (seek == c)\n                return true;\n        }\n        return false;\n    }\n\n    boolean matchesAnySorted(char[] seq) {\n        return !isEmpty() && Arrays.binarySearch(seq, input[pos]) >= 0;\n    }\n\n    boolean matchesLetter() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);\n    }\n\n    boolean matchesDigit() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= '0' && c <= '9');\n    }\n\n    boolean matchConsume(String seq) {\n        if (matches(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    boolean matchConsumeIgnoreCase(String seq) {\n        if (matchesIgnoreCase(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    boolean containsIgnoreCase(String seq) {\n        \n        String loScan = seq.toLowerCase(Locale.ENGLISH);\n        String hiScan = seq.toUpperCase(Locale.ENGLISH);\n        return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);\n    }\n\n    @Override\n    public String toString() {\n        return new String(input, pos, length - pos);\n    }\n\n    \n    private String cacheString(final int start, final int count) {\n        final char[] val = input;\n        final String[] cache = stringCache;\n\n        \n        if (count > maxCacheLen)\n            return new String(val, start, count);\n\n        \n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + val[offset++];\n        }\n\n        \n        final int index = hash & cache.length - 1;\n        String cached = cache[index];\n\n        if (cached == null) { \n            cached = new String(val, start, count);\n            cache[index] = cached;\n        } else { \n            if (rangeEquals(start, count, cached)) { \n                return cached;\n            } else { \n                cached = new String(val, start, count);\n                cache[index] = cached; \n            }\n        }\n        return cached;\n    }\n\n    \n    boolean rangeEquals(final int start, int count, final String cached) {\n        if (count == cached.length()) {\n            char one[] = input;\n            int i = start;\n            int j = 0;\n            while (count-- != 0) {\n                if (one[i++] != cached.charAt(j++))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n",
      "buggy_signatures": [
        "public String toString()",
        "private String cacheString(final int start, final int count)"
      ],
      "fixed_signatures": [
        "public String toString()",
        "private String cacheString(final int start, final int count)"
      ],
      "methods": [
        {
          "buggy_method": "  static final char EOF = (char) -1; private static final int maxCacheLen = 12; private final char[] input; private final int length; private int pos = 0; private int mark = 0; private final String[] stringCache = new String[512]; CharacterReader(String input) {\n  Validate.notNull(input);\n  this.input = input.toCharArray();\n  this.length = this.input.length;\n  }",
          "fixed_method": "  static final char EOF = (char) -1; private static final int maxCacheLen = 12; private final char[] input; private final int length; private int pos = 0; private int mark = 0; private final String[] stringCache = new String[512]; CharacterReader(String input) {\n  Validate.notNull(input);\n  this.input = input.toCharArray();\n  this.length = this.input.length;\n  }",
          "diff": [
            "@@ -297,7 +297,7 @@",
            "         if (isEmpty())\n",
            "             return false;\n",
            "         char c = input[pos];\n",
            "-        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n",
            "+        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);\n",
            "     }\n",
            " \n",
            "     boolean matchesDigit() {\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
