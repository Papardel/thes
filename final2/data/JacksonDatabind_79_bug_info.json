{
  "bug_id": "79",
  "failed_tests": {
    "com.fasterxml.jackson.databind.objectid.AlwaysAsReferenceFirstTest": [
      {
        "methodName": "testIssue1607",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<{\"alwaysClass\":[1],\"alwaysProp\":2}> but was:<{\"alwaysClass\":[{\"id\":1,\"value\":13}],\"alwaysProp\":2}>",
        "fail_line": "        assertEquals(aposToQuotes(\"{'alwaysClass':1,'alwaysProp':2}\"), json);",
        "test_source": "  public void testIssue1607() throws Exception {\n  String json = MAPPER.writeValueAsString(new ReallyAlwaysContainer());\n  assertEquals(aposToQuotes(\"{'alwaysClass':1,'alwaysProp':2}\"), json);\n  }",
        "stack": [
          "AlwaysAsReferenceFirstTest.testIssue1607 line 82"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.introspect;\n\nimport java.beans.ConstructorProperties;\nimport java.beans.Transient;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.*;\nimport com.fasterxml.jackson.core.Version;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.*;\nimport com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\nimport com.fasterxml.jackson.databind.cfg.MapperConfig;\nimport com.fasterxml.jackson.databind.jsontype.NamedType;\nimport com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\nimport com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\nimport com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter;\nimport com.fasterxml.jackson.databind.ser.std.RawSerializer;\nimport com.fasterxml.jackson.databind.util.*;\n\n\npublic class JacksonAnnotationIntrospector extends AnnotationIntrospector implements java.io.Serializable { private static final long serialVersionUID = 1L; @SuppressWarnings(\"unchecked\") private final static Class<? extends Annotation>[] ANNOTATIONS_TO_INFER_SER = (Class<? extends Annotation>[]) new Class<?>[] {\n        JsonSerialize.class,\n        JsonView.class,\n        JsonFormat.class,\n        JsonTypeInfo.class,\n        JsonRawValue.class,\n        JsonUnwrapped.class,\n        JsonBackReference.class,\n        JsonManagedReference.class\n    };\n\n    @SuppressWarnings(\"unchecked\")\n    private final static Class<? extends Annotation>[] ANNOTATIONS_TO_INFER_DESER = (Class<? extends Annotation>[]) new Class<?>[] {\n        JsonDeserialize.class,\n        JsonView.class,\n        JsonFormat.class,\n        JsonTypeInfo.class,\n        JsonUnwrapped.class,\n        JsonBackReference.class,\n        JsonManagedReference.class\n    };\n\n    private static final Java7Support _jdk7Helper; static { Java7Support x = null; try { x = Java7Support.class.newInstance(); } catch (Throwable t) {\n            \n            java.util.logging.Logger.getLogger(JacksonAnnotationIntrospector.class.getName())\n                .warning(\"Unable to load JDK7 annotation types; will have to skip\");\n        }\n        _jdk7Helper = x;\n    }\n    \n    \n    protected transient LRUMap<Class<?>,Boolean> _annotationsInside = new LRUMap<Class<?>,Boolean>(48, 48); protected boolean _cfgConstructorPropertiesImpliesCreator = true; public JacksonAnnotationIntrospector() { }\n\n    @Override\n    public Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }\n\n    protected Object readResolve() {\n        if (_annotationsInside == null) {\n            _annotationsInside = new LRUMap<Class<?>,Boolean>(48, 48);\n        }\n        return this;\n    }\n\n    \n\n    \n    public JacksonAnnotationIntrospector setConstructorPropertiesImpliesCreator(boolean b) {\n        _cfgConstructorPropertiesImpliesCreator = b;\n        return this;\n    }\n    \n    \n\n    \n    @Override\n    public boolean isAnnotationBundle(Annotation ann) {\n        \n        \n        \n        \n        Class<?> type = ann.annotationType();\n        Boolean b = _annotationsInside.get(type);\n        if (b == null) {\n            b = type.getAnnotation(JacksonAnnotationsInside.class) != null;\n            _annotationsInside.putIfAbsent(type, b);\n        }\n        return b.booleanValue();\n    }\n\n    \n\n    \n    @Override\n    public String findEnumValue(Enum<?> value) {\n        \n        \n        \n        try {\n            \n            Field f = value.getClass().getField(value.name());\n            if (f != null) {\n                JsonProperty prop = f.getAnnotation(JsonProperty.class);\n                if (prop != null) {\n                    String n = prop.value();\n                    if (n != null && !n.isEmpty()) {\n                        return n;\n                    }\n                }\n            }\n        } catch (SecurityException e) {\n            \n        } catch (NoSuchFieldException e) {\n            \n        }\n        return value.name();\n    }\n\n    @Override \n    public String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names) {\n        HashMap<String,String> expl = null;\n        for (Field f : ClassUtil.getDeclaredFields(enumType)) {\n            if (!f.isEnumConstant()) {\n                continue;\n            }\n            JsonProperty prop = f.getAnnotation(JsonProperty.class);\n            if (prop == null) {\n                continue;\n            }\n            String n = prop.value();\n            if (n.isEmpty()) {\n                continue;\n            }\n            if (expl == null) {\n                expl = new HashMap<String,String>();\n            }\n            expl.put(f.getName(), n);\n        }\n        \n        if (expl != null) {\n            for (int i = 0, end = enumValues.length; i < end; ++i) {\n                String defName = enumValues[i].name();\n                String explValue = expl.get(defName);\n                if (explValue != null) {\n                    names[i] = explValue;\n                }\n            }\n        }\n        return names;\n    }\n\n    \n\n    @Override\n    public PropertyName findRootName(AnnotatedClass ac) {\n        JsonRootName ann = _findAnnotation(ac, JsonRootName.class);\n        if (ann == null) {\n            return null;\n        }\n        String ns = ann.namespace();\n        if (ns != null && ns.length() == 0) {\n            ns = null;\n        }\n        return PropertyName.construct(ann.value(), ns);\n    }\n\n    @Override\n    @Deprecated \n    public String[] findPropertiesToIgnore(Annotated ac) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        return (ignore == null) ? null : ignore.value();\n    }\n\n    @Override \n    public String[] findPropertiesToIgnore(Annotated ac, boolean forSerialization) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        if (ignore == null) {\n            return null;\n        }\n        \n        if (forSerialization) {\n            if (ignore.allowGetters()) {\n                return null;\n            }\n        } else {\n            if (ignore.allowSetters()) {\n                return null;\n            }\n        }\n        return ignore.value();\n    }\n    \n    @Override\n    public Boolean findIgnoreUnknownProperties(AnnotatedClass ac) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        return (ignore == null) ? null : ignore.ignoreUnknown();\n    }\n\n    @Override\n    public Boolean isIgnorableType(AnnotatedClass ac) {\n        JsonIgnoreType ignore = _findAnnotation(ac, JsonIgnoreType.class);\n        return (ignore == null) ? null : ignore.value();\n    }\n \n    @Override\n    public Object findFilterId(Annotated a) {\n        JsonFilter ann = _findAnnotation(a, JsonFilter.class);\n        if (ann != null) {\n            String id = ann.value();\n            \n            if (id.length() > 0) {\n                return id;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findNamingStrategy(AnnotatedClass ac) {\n        JsonNaming ann = _findAnnotation(ac, JsonNaming.class);\n        return (ann == null) ? null : ann.value();\n    }\n\n    @Override\n    public String findClassDescription(AnnotatedClass ac) {\n        JsonClassDescription ann = _findAnnotation(ac, JsonClassDescription.class);\n        return (ann == null) ? null : ann.value();\n    }\n\n    \n\n    @Override\n    public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker) {\n        JsonAutoDetect ann = _findAnnotation(ac, JsonAutoDetect.class);\n        return (ann == null) ? checker : checker.with(ann);\n    }\n\n    \n\n    @Override\n    public String findImplicitPropertyName(AnnotatedMember m) {\n        PropertyName n = _findConstructorName(m);\n        return (n == null) ? null : n.getSimpleName();\n    }\n    \n    @Override\n    public boolean hasIgnoreMarker(AnnotatedMember m) {\n        return _isIgnorable(m);\n    }\n\n    @Override\n    public Boolean hasRequiredMarker(AnnotatedMember m) {\n        JsonProperty ann = _findAnnotation(m, JsonProperty.class);\n        if (ann != null) {\n            return ann.required();\n        }\n        return null;\n    }\n\n    @Override\n    public JsonProperty.Access findPropertyAccess(Annotated m) {\n        JsonProperty ann = _findAnnotation(m, JsonProperty.class);\n        if (ann != null) {\n            return ann.access();\n        }\n        return null;\n    }\n\n    @Override\n    public String findPropertyDescription(Annotated ann) {\n        JsonPropertyDescription desc = _findAnnotation(ann, JsonPropertyDescription.class);\n        return (desc == null) ? null : desc.value();\n    }\n\n    @Override\n    public Integer findPropertyIndex(Annotated ann) {\n        JsonProperty prop = _findAnnotation(ann, JsonProperty.class);\n        if (prop != null) {\n          int ix = prop.index();\n          if (ix != JsonProperty.INDEX_UNKNOWN) {\n               return Integer.valueOf(ix);\n          }\n        }\n        return null;\n    }\n    \n    @Override\n    public String findPropertyDefaultValue(Annotated ann) {\n        JsonProperty prop = _findAnnotation(ann, JsonProperty.class);\n        if (prop == null) {\n            return null;\n        }\n        String str = prop.defaultValue();\n        \n        return str.isEmpty() ? null : str;\n    }\n    \n    @Override\n    public JsonFormat.Value findFormat(Annotated ann) {\n        JsonFormat f = _findAnnotation(ann, JsonFormat.class);\n        return (f == null)  ? null : new JsonFormat.Value(f);\n    }\n\n    @Override        \n    public ReferenceProperty findReferenceType(AnnotatedMember member) {\n        JsonManagedReference ref1 = _findAnnotation(member, JsonManagedReference.class);\n        if (ref1 != null) {\n            return AnnotationIntrospector.ReferenceProperty.managed(ref1.value());\n        }\n        JsonBackReference ref2 = _findAnnotation(member, JsonBackReference.class);\n        if (ref2 != null) {\n            return AnnotationIntrospector.ReferenceProperty.back(ref2.value());\n        }\n        return null;\n    }\n\n    @Override\n    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) {\n        JsonUnwrapped ann = _findAnnotation(member, JsonUnwrapped.class);\n        \n        \n        if (ann == null || !ann.enabled()) {\n            return null;\n        }\n        String prefix = ann.prefix();\n        String suffix = ann.suffix();\n        return NameTransformer.simpleTransformer(prefix, suffix);\n    }\n\n    @Override\n    public Object findInjectableValueId(AnnotatedMember m) {\n        JacksonInject ann = _findAnnotation(m, JacksonInject.class);\n        if (ann == null) {\n            return null;\n        }\n        \n        String id = ann.value();\n        if (id.length() == 0) {\n            \n            if (!(m instanceof AnnotatedMethod)) {\n                return m.getRawType().getName();\n            }\n            AnnotatedMethod am = (AnnotatedMethod) m;\n            if (am.getParameterCount() == 0) {\n                return m.getRawType().getName();\n            }\n            return am.getRawParameterType(0).getName();\n        }\n        return id;\n    }\n\n    @Override\n    public Class<?>[] findViews(Annotated a) {\n        JsonView ann = _findAnnotation(a, JsonView.class);\n        return (ann == null) ? null : ann.value();\n    }\n\n    @Override \n    public AnnotatedMethod resolveSetterConflict(MapperConfig<?> config, AnnotatedMethod setter1, AnnotatedMethod setter2) {\n        Class<?> cls1 = setter1.getRawParameterType(0);\n        Class<?> cls2 = setter2.getRawParameterType(0);\n        \n        \n        \n        if (cls1.isPrimitive()) {\n            if (!cls2.isPrimitive()) {\n                return setter1;\n            }\n        } else if (cls2.isPrimitive()) {\n            return setter2;\n        }\n        \n        if (cls1 == String.class) {\n            if (cls2 != String.class) {\n                return setter1;\n            }\n        } else if (cls2 == String.class) {\n            return setter2;\n        }\n\n        return null;\n    }\n\n    \n\n    @Override\n    public TypeResolverBuilder<?> findTypeResolver(MapperConfig<?> config, AnnotatedClass ac, JavaType baseType) {\n        return _findTypeResolver(config, ac, baseType);\n    }\n\n    @Override\n    public TypeResolverBuilder<?> findPropertyTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType baseType) {\n        \n        \n        if (baseType.isContainerType() || baseType.isReferenceType()) {\n            return null;\n        }\n        \n        return _findTypeResolver(config, am, baseType);\n    }\n\n    @Override\n    public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType) {\n        \n        if (containerType.getContentType() == null) {\n            throw new IllegalArgumentException(\"Must call method with a container or reference type (got \"+containerType+\")\");\n        }\n        return _findTypeResolver(config, am, containerType);\n    }\n    \n    @Override\n    public List<NamedType> findSubtypes(Annotated a) {\n        JsonSubTypes t = _findAnnotation(a, JsonSubTypes.class);\n        if (t == null) return null;\n        JsonSubTypes.Type[] types = t.value();\n        ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);\n        for (JsonSubTypes.Type type : types) {\n            result.add(new NamedType(type.value(), type.name()));\n        }\n        return result;\n    }\n\n    @Override        \n    public String findTypeName(AnnotatedClass ac) {\n        JsonTypeName tn = _findAnnotation(ac, JsonTypeName.class);\n        return (tn == null) ? null : tn.value();\n    }\n\n    @Override\n    public Boolean isTypeId(AnnotatedMember member) {\n        return _hasAnnotation(member, JsonTypeId.class);\n    }\n\n    \n\n    @Override\n    public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n        JsonIdentityInfo info = _findAnnotation(ann, JsonIdentityInfo.class);\n        if (info == null || info.generator() == ObjectIdGenerators.None.class) {\n            return null;\n        }\n        \n        PropertyName name = PropertyName.construct(info.property());\n        return new ObjectIdInfo(name, info.scope(), info.generator(), info.resolver());\n    }\n\n    @Override\n    public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n        JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n        if (ref != null) {\n            objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n        }\n        return objectIdInfo;\n    }\n\n    \n\n    @Override\n    public Object findSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.using();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        \n        \n        JsonRawValue annRaw =  _findAnnotation(a, JsonRawValue.class);\n        if ((annRaw != null) && annRaw.value()) {\n            \n            Class<?> cls = a.getRawType();\n            return new RawSerializer<Object>(cls);\n        }       \n        return null;\n    }\n\n    @Override\n    public Object findKeySerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.keyUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findContentSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.contentUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findNullSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.nullsUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue) {\n        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n        if (inc != null) {\n            JsonInclude.Include v = inc.value();\n            if (v != JsonInclude.Include.USE_DEFAULTS) {\n                return v;\n            }\n        }\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            JsonSerialize.Inclusion i2 = ann.include();\n            switch (i2) {\n            case ALWAYS:\n                return JsonInclude.Include.ALWAYS;\n            case NON_NULL:\n                return JsonInclude.Include.NON_NULL;\n            case NON_DEFAULT:\n                return JsonInclude.Include.NON_DEFAULT;\n            case NON_EMPTY:\n                return JsonInclude.Include.NON_EMPTY;\n            case DEFAULT_INCLUSION: \n                break;\n            }\n        }\n        return defValue;\n    }\n\n    @Override\n    @Deprecated\n    public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue) {\n        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n        if (inc != null) {\n            JsonInclude.Include incl = inc.content();\n            if (incl != JsonInclude.Include.USE_DEFAULTS) {\n                return incl;\n            }\n        }\n        return defValue;\n    }\n\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public JsonInclude.Value findPropertyInclusion(Annotated a) {\n        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n        JsonInclude.Include valueIncl = (inc == null) ? JsonInclude.Include.USE_DEFAULTS : inc.value();\n        if (valueIncl == JsonInclude.Include.USE_DEFAULTS) {\n            JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n            if (ann != null) {\n                JsonSerialize.Inclusion i2 = ann.include();\n                switch (i2) {\n                case ALWAYS:\n                    valueIncl = JsonInclude.Include.ALWAYS;\n                    break;\n                case NON_NULL:\n                    valueIncl = JsonInclude.Include.NON_NULL;\n                    break;\n                case NON_DEFAULT:\n                    valueIncl = JsonInclude.Include.NON_DEFAULT;\n                    break;\n                case NON_EMPTY:\n                    valueIncl = JsonInclude.Include.NON_EMPTY;\n                    break;\n                case DEFAULT_INCLUSION:\n                default:\n                }\n            }\n        }\n        JsonInclude.Include contentIncl = (inc == null) ? JsonInclude.Include.USE_DEFAULTS : inc.content();\n        return JsonInclude.Value.construct(valueIncl, contentIncl);\n    }\n\n    @Override\n    @Deprecated\n    public Class<?> findSerializationType(Annotated am) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.as());\n    }\n\n    @Override\n    @Deprecated\n    public Class<?> findSerializationKeyType(Annotated am, JavaType baseType) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n    }\n\n    @Override\n    @Deprecated\n    public Class<?> findSerializationContentType(Annotated am, JavaType baseType) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n    }\n    \n    @Override\n    public JsonSerialize.Typing findSerializationTyping(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : ann.typing();\n    }\n\n    @Override\n    public Object findSerializationConverter(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n    }\n\n    @Override\n    public Object findSerializationContentConverter(AnnotatedMember a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n    }\n\n    \n\n    @Override\n    public String[] findSerializationPropertyOrder(AnnotatedClass ac) {\n        JsonPropertyOrder order = _findAnnotation(ac, JsonPropertyOrder.class);\n        return (order == null) ? null : order.value();\n    }\n\n    @Override\n    public Boolean findSerializationSortAlphabetically(Annotated ann) {\n        return _findSortAlpha(ann);\n    }\n\n    private final Boolean _findSortAlpha(Annotated ann) {\n        JsonPropertyOrder order = _findAnnotation(ann, JsonPropertyOrder.class);\n        \n        if ((order != null) && order.alphabetic()) {\n            return Boolean.TRUE;\n        }\n        return null;\n    }\n\n    @Override\n    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac, List<BeanPropertyWriter> properties) {\n        JsonAppend ann = _findAnnotation(ac, JsonAppend.class);\n        if (ann == null) {\n            return;\n        }\n        final boolean prepend = ann.prepend();\n        JavaType propType = null;\n\n        \n        JsonAppend.Attr[] attrs = ann.attrs();\n        for (int i = 0, len = attrs.length; i < len; ++i) {\n            if (propType == null) {\n                propType = config.constructType(Object.class);\n            }\n            BeanPropertyWriter bpw = _constructVirtualProperty(attrs[i],\n                    config, ac, propType);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n\n        \n        JsonAppend.Prop[] props = ann.props();\n        for (int i = 0, len = props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _constructVirtualProperty(props[i],\n                    config, ac);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n    }\n\n    protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr, MapperConfig<?> config, AnnotatedClass ac, JavaType type) {\n        PropertyMetadata metadata = attr.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        \n        String attrName = attr.value();\n\n        \n        PropertyName propName = _propertyName(attr.propName(), attr.propNamespace());\n        if (!propName.hasSimpleName()) {\n            propName = PropertyName.construct(attrName);\n        }\n        \n        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                attrName, type.getRawClass());\n        \n        SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, attr.include());\n        \n        return AttributePropertyWriter.construct(attrName, propDef,\n                ac.getAnnotations(), type);\n    }\n\n    protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac) {\n        PropertyMetadata metadata = prop.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        PropertyName propName = _propertyName(prop.name(), prop.namespace());\n        JavaType type = config.constructType(prop.type());\n        \n        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                propName.getSimpleName(), type.getRawClass());\n        \n        SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, prop.include());\n\n        Class<?> implClass = prop.value();\n\n        HandlerInstantiator hi = config.getHandlerInstantiator();\n        VirtualBeanPropertyWriter bpw = (hi == null) ? null\n                : hi.virtualPropertyWriterInstance(config, implClass);\n        if (bpw == null) {\n            bpw = (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass,\n                    config.canOverrideAccessModifiers());\n        }\n\n        \n        return bpw.withConfig(config, ac, propDef, type);\n    }\n\n    \n\n    @Override\n    public PropertyName findNameForSerialization(Annotated a) {\n        JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n        if (jg != null) {\n            return PropertyName.construct(jg.value());\n        }\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann != null) {\n            return PropertyName.construct(pann.value());\n        }\n        if (_hasOneOf(a, ANNOTATIONS_TO_INFER_SER)) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }\n\n    @Override\n    public boolean hasAsValueAnnotation(AnnotatedMethod am) {\n        JsonValue ann = _findAnnotation(am, JsonValue.class);\n        \n        return (ann != null && ann.value());\n    }\n\n    \n\n    @Override\n    public Object findDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonDeserializer> deserClass = ann.using();\n            if (deserClass != JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findKeyDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            Class<? extends KeyDeserializer> deserClass = ann.keyUsing();\n            if (deserClass != KeyDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findContentDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonDeserializer> deserClass = ann.contentUsing();\n            if (deserClass != JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findDeserializationConverter(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n    }\n\n    @Override\n    public Object findDeserializationContentConverter(AnnotatedMember a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n    }\n\n    \n\n    @Override\n    @Deprecated\n    public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n    }\n    \n    @Deprecated\n    @Override\n    public Class<?> findDeserializationType(Annotated am, JavaType baseType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.as());\n    }\n\n    @Override\n    @Deprecated\n    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n    }\n    \n    \n    \n    @Override\n    public Object findValueInstantiator(AnnotatedClass ac) {\n        JsonValueInstantiator ann = _findAnnotation(ac, JsonValueInstantiator.class);\n        \n        return (ann == null) ? null : ann.value();\n    }\n\n    @Override\n    public Class<?> findPOJOBuilder(AnnotatedClass ac) {\n        JsonDeserialize ann = _findAnnotation(ac, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.builder());\n    }\n\n    @Override\n    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {\n        JsonPOJOBuilder ann = _findAnnotation(ac, JsonPOJOBuilder.class);\n        return (ann == null) ? null : new JsonPOJOBuilder.Value(ann);\n    }\n    \n    \n\n    @Override\n    public PropertyName findNameForDeserialization(Annotated a) {\n        \n        \n        JsonSetter js = _findAnnotation(a, JsonSetter.class);\n        if (js != null) {\n            return PropertyName.construct(js.value());\n        }\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann != null) {\n            return PropertyName.construct(pann.value());\n        }\n        if (_hasOneOf(a, ANNOTATIONS_TO_INFER_DESER)) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }\n    \n    @Override\n    public boolean hasAnySetterAnnotation(AnnotatedMethod am) {\n        \n        return _hasAnnotation(am, JsonAnySetter.class);\n    }\n\n    @Override\n    public boolean hasAnyGetterAnnotation(AnnotatedMethod am) {\n        \n        return _hasAnnotation(am, JsonAnyGetter.class);\n    }\n\n    @Override\n    public boolean hasCreatorAnnotation(Annotated a) {\n        \n         JsonCreator ann = _findAnnotation(a, JsonCreator.class);\n         if (ann != null) {\n             return (ann.mode() != JsonCreator.Mode.DISABLED);\n         }\n         \n         \n         if (_cfgConstructorPropertiesImpliesCreator ) {\n             if (a instanceof AnnotatedConstructor) {\n                 if (_jdk7Helper != null) {\n                     Boolean b = _jdk7Helper.hasCreatorAnnotation(a);\n                     if (b != null) {\n                         return b.booleanValue();\n                     }\n                 }\n             }\n         }\n         return false;\n    }\n\n    @Override\n    public JsonCreator.Mode findCreatorBinding(Annotated a) {\n        JsonCreator ann = _findAnnotation(a, JsonCreator.class);\n        return (ann == null) ? null : ann.mode();\n    }\n\n    \n\n    protected boolean _isIgnorable(Annotated a) {\n        JsonIgnore ann = _findAnnotation(a, JsonIgnore.class);\n        if (ann != null) {\n            return ann.value();\n        }\n        if (_jdk7Helper != null) {\n            Boolean b = _jdk7Helper.findTransient(a);\n            if (b != null) {\n                return b.booleanValue();\n            }\n        }\n        return false;\n    }\n\n    protected Class<?> _classIfExplicit(Class<?> cls) {\n        if (cls == null || ClassUtil.isBogusClass(cls)) {\n            return null;\n        }\n        return cls;\n    }\n\n    protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {\n        cls = _classIfExplicit(cls);\n        return (cls == null || cls == implicit) ? null : cls;\n    }\n\n    protected PropertyName _propertyName(String localName, String namespace) {\n        if (localName.isEmpty()) {\n            return PropertyName.USE_DEFAULT;\n        }\n        if (namespace == null || namespace.isEmpty()) {\n            return PropertyName.construct(localName);\n        }\n        return PropertyName.construct(localName, namespace);\n    }\n\n    protected PropertyName _findConstructorName(Annotated a) {\n        if (a instanceof AnnotatedParameter) {\n            AnnotatedParameter p = (AnnotatedParameter) a;\n            AnnotatedWithParams ctor = p.getOwner();\n\n            if (ctor != null) {\n                if (_jdk7Helper != null) {\n                    PropertyName name = _jdk7Helper.findConstructorName(p);\n                    if (name != null) {\n                        return name;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    \n    @SuppressWarnings(\"deprecation\")\n    protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config, Annotated ann, JavaType baseType) {\n        \n        TypeResolverBuilder<?> b;\n        JsonTypeInfo info = _findAnnotation(ann, JsonTypeInfo.class);\n        JsonTypeResolver resAnn = _findAnnotation(ann, JsonTypeResolver.class);\n        \n        if (resAnn != null) {\n            if (info == null) {\n                return null;\n            }\n            \n            b = config.typeResolverBuilderInstance(ann, resAnn.value());\n        } else { \n            if (info == null) {\n                return null;\n            }\n            \n            if (info.use() == JsonTypeInfo.Id.NONE) {\n                return _constructNoTypeResolverBuilder();\n            }\n            b = _constructStdTypeResolverBuilder();\n        }\n        \n        JsonTypeIdResolver idResInfo = _findAnnotation(ann, JsonTypeIdResolver.class);\n        TypeIdResolver idRes = (idResInfo == null) ? null\n                : config.typeIdResolverInstance(ann, idResInfo.value());\n        if (idRes != null) {\n            idRes.init(baseType);\n        }\n        b = b.init(info.use(), idRes);\n        \n        JsonTypeInfo.As inclusion = info.include();\n        if (inclusion == JsonTypeInfo.As.EXTERNAL_PROPERTY && (ann instanceof AnnotatedClass)) {\n            inclusion = JsonTypeInfo.As.PROPERTY;\n        }\n        b = b.inclusion(inclusion);\n        b = b.typeProperty(info.property());\n        Class<?> defaultImpl = info.defaultImpl();\n\n        \n        \n        \n        \n        if (defaultImpl != JsonTypeInfo.None.class && !defaultImpl.isAnnotation()) {\n            b = b.defaultImpl(defaultImpl);\n        }\n        b = b.typeIdVisibility(info.visible());\n        return b;\n    }\n\n    \n    protected StdTypeResolverBuilder _constructStdTypeResolverBuilder() {\n        return new StdTypeResolverBuilder();\n    }\n\n    \n    protected StdTypeResolverBuilder _constructNoTypeResolverBuilder() {\n        return StdTypeResolverBuilder.noTypeInfoBuilder();\n    }\n\n    \n\n    \n    private static class Java7Support { @SuppressWarnings(\"unused\") private final Class<?> _bogus; @SuppressWarnings(\"unused\") public Java7Support() {\n            \n            Class<?> cls = Transient.class;\n            cls = ConstructorProperties.class;\n            _bogus = cls;\n        }\n        \n        public Boolean findTransient(Annotated a) {\n            Transient t = a.getAnnotation(Transient.class);\n            if (t != null) {\n                return t.value();\n            }\n            return null;\n        }\n\n        public Boolean hasCreatorAnnotation(Annotated a) {\n            ConstructorProperties props = a.getAnnotation(ConstructorProperties.class);\n            \n            \n            if (props != null) {\n                return Boolean.TRUE;\n            }\n            return null;\n        }\n\n        public PropertyName findConstructorName(AnnotatedParameter p) {\n            AnnotatedWithParams ctor = p.getOwner();\n            if (ctor != null) {\n                ConstructorProperties props = ctor.getAnnotation(ConstructorProperties.class);\n                if (props != null) {\n                    String[] names = props.value();\n                    int ix = p.getIndex();\n                    if (ix < names.length) {\n                        return PropertyName.construct(names[ix]);\n                    }\n                }\n            }\n            return null;\n        }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.introspect;\n\nimport java.beans.ConstructorProperties;\nimport java.beans.Transient;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.*;\nimport com.fasterxml.jackson.core.Version;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.*;\nimport com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\nimport com.fasterxml.jackson.databind.cfg.MapperConfig;\nimport com.fasterxml.jackson.databind.jsontype.NamedType;\nimport com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\nimport com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\nimport com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter;\nimport com.fasterxml.jackson.databind.ser.std.RawSerializer;\nimport com.fasterxml.jackson.databind.util.*;\n\n\npublic class JacksonAnnotationIntrospector extends AnnotationIntrospector implements java.io.Serializable { private static final long serialVersionUID = 1L; @SuppressWarnings(\"unchecked\") private final static Class<? extends Annotation>[] ANNOTATIONS_TO_INFER_SER = (Class<? extends Annotation>[]) new Class<?>[] {\n        JsonSerialize.class,\n        JsonView.class,\n        JsonFormat.class,\n        JsonTypeInfo.class,\n        JsonRawValue.class,\n        JsonUnwrapped.class,\n        JsonBackReference.class,\n        JsonManagedReference.class\n    };\n\n    @SuppressWarnings(\"unchecked\")\n    private final static Class<? extends Annotation>[] ANNOTATIONS_TO_INFER_DESER = (Class<? extends Annotation>[]) new Class<?>[] {\n        JsonDeserialize.class,\n        JsonView.class,\n        JsonFormat.class,\n        JsonTypeInfo.class,\n        JsonUnwrapped.class,\n        JsonBackReference.class,\n        JsonManagedReference.class\n    };\n\n    private static final Java7Support _jdk7Helper; static { Java7Support x = null; try { x = Java7Support.class.newInstance(); } catch (Throwable t) {\n            \n            java.util.logging.Logger.getLogger(JacksonAnnotationIntrospector.class.getName())\n                .warning(\"Unable to load JDK7 annotation types; will have to skip\");\n        }\n        _jdk7Helper = x;\n    }\n    \n    \n    protected transient LRUMap<Class<?>,Boolean> _annotationsInside = new LRUMap<Class<?>,Boolean>(48, 48); protected boolean _cfgConstructorPropertiesImpliesCreator = true; public JacksonAnnotationIntrospector() { }\n\n    @Override\n    public Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }\n\n    protected Object readResolve() {\n        if (_annotationsInside == null) {\n            _annotationsInside = new LRUMap<Class<?>,Boolean>(48, 48);\n        }\n        return this;\n    }\n\n    \n\n    \n    public JacksonAnnotationIntrospector setConstructorPropertiesImpliesCreator(boolean b) {\n        _cfgConstructorPropertiesImpliesCreator = b;\n        return this;\n    }\n    \n    \n\n    \n    @Override\n    public boolean isAnnotationBundle(Annotation ann) {\n        \n        \n        \n        \n        Class<?> type = ann.annotationType();\n        Boolean b = _annotationsInside.get(type);\n        if (b == null) {\n            b = type.getAnnotation(JacksonAnnotationsInside.class) != null;\n            _annotationsInside.putIfAbsent(type, b);\n        }\n        return b.booleanValue();\n    }\n\n    \n\n    \n    @Override\n    public String findEnumValue(Enum<?> value) {\n        \n        \n        \n        try {\n            \n            Field f = value.getClass().getField(value.name());\n            if (f != null) {\n                JsonProperty prop = f.getAnnotation(JsonProperty.class);\n                if (prop != null) {\n                    String n = prop.value();\n                    if (n != null && !n.isEmpty()) {\n                        return n;\n                    }\n                }\n            }\n        } catch (SecurityException e) {\n            \n        } catch (NoSuchFieldException e) {\n            \n        }\n        return value.name();\n    }\n\n    @Override \n    public String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names) {\n        HashMap<String,String> expl = null;\n        for (Field f : ClassUtil.getDeclaredFields(enumType)) {\n            if (!f.isEnumConstant()) {\n                continue;\n            }\n            JsonProperty prop = f.getAnnotation(JsonProperty.class);\n            if (prop == null) {\n                continue;\n            }\n            String n = prop.value();\n            if (n.isEmpty()) {\n                continue;\n            }\n            if (expl == null) {\n                expl = new HashMap<String,String>();\n            }\n            expl.put(f.getName(), n);\n        }\n        \n        if (expl != null) {\n            for (int i = 0, end = enumValues.length; i < end; ++i) {\n                String defName = enumValues[i].name();\n                String explValue = expl.get(defName);\n                if (explValue != null) {\n                    names[i] = explValue;\n                }\n            }\n        }\n        return names;\n    }\n\n    \n\n    @Override\n    public PropertyName findRootName(AnnotatedClass ac) {\n        JsonRootName ann = _findAnnotation(ac, JsonRootName.class);\n        if (ann == null) {\n            return null;\n        }\n        String ns = ann.namespace();\n        if (ns != null && ns.length() == 0) {\n            ns = null;\n        }\n        return PropertyName.construct(ann.value(), ns);\n    }\n\n    @Override\n    @Deprecated \n    public String[] findPropertiesToIgnore(Annotated ac) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        return (ignore == null) ? null : ignore.value();\n    }\n\n    @Override \n    public String[] findPropertiesToIgnore(Annotated ac, boolean forSerialization) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        if (ignore == null) {\n            return null;\n        }\n        \n        if (forSerialization) {\n            if (ignore.allowGetters()) {\n                return null;\n            }\n        } else {\n            if (ignore.allowSetters()) {\n                return null;\n            }\n        }\n        return ignore.value();\n    }\n    \n    @Override\n    public Boolean findIgnoreUnknownProperties(AnnotatedClass ac) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        return (ignore == null) ? null : ignore.ignoreUnknown();\n    }\n\n    @Override\n    public Boolean isIgnorableType(AnnotatedClass ac) {\n        JsonIgnoreType ignore = _findAnnotation(ac, JsonIgnoreType.class);\n        return (ignore == null) ? null : ignore.value();\n    }\n \n    @Override\n    public Object findFilterId(Annotated a) {\n        JsonFilter ann = _findAnnotation(a, JsonFilter.class);\n        if (ann != null) {\n            String id = ann.value();\n            \n            if (id.length() > 0) {\n                return id;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findNamingStrategy(AnnotatedClass ac) {\n        JsonNaming ann = _findAnnotation(ac, JsonNaming.class);\n        return (ann == null) ? null : ann.value();\n    }\n\n    @Override\n    public String findClassDescription(AnnotatedClass ac) {\n        JsonClassDescription ann = _findAnnotation(ac, JsonClassDescription.class);\n        return (ann == null) ? null : ann.value();\n    }\n\n    \n\n    @Override\n    public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker) {\n        JsonAutoDetect ann = _findAnnotation(ac, JsonAutoDetect.class);\n        return (ann == null) ? checker : checker.with(ann);\n    }\n\n    \n\n    @Override\n    public String findImplicitPropertyName(AnnotatedMember m) {\n        PropertyName n = _findConstructorName(m);\n        return (n == null) ? null : n.getSimpleName();\n    }\n    \n    @Override\n    public boolean hasIgnoreMarker(AnnotatedMember m) {\n        return _isIgnorable(m);\n    }\n\n    @Override\n    public Boolean hasRequiredMarker(AnnotatedMember m) {\n        JsonProperty ann = _findAnnotation(m, JsonProperty.class);\n        if (ann != null) {\n            return ann.required();\n        }\n        return null;\n    }\n\n    @Override\n    public JsonProperty.Access findPropertyAccess(Annotated m) {\n        JsonProperty ann = _findAnnotation(m, JsonProperty.class);\n        if (ann != null) {\n            return ann.access();\n        }\n        return null;\n    }\n\n    @Override\n    public String findPropertyDescription(Annotated ann) {\n        JsonPropertyDescription desc = _findAnnotation(ann, JsonPropertyDescription.class);\n        return (desc == null) ? null : desc.value();\n    }\n\n    @Override\n    public Integer findPropertyIndex(Annotated ann) {\n        JsonProperty prop = _findAnnotation(ann, JsonProperty.class);\n        if (prop != null) {\n          int ix = prop.index();\n          if (ix != JsonProperty.INDEX_UNKNOWN) {\n               return Integer.valueOf(ix);\n          }\n        }\n        return null;\n    }\n    \n    @Override\n    public String findPropertyDefaultValue(Annotated ann) {\n        JsonProperty prop = _findAnnotation(ann, JsonProperty.class);\n        if (prop == null) {\n            return null;\n        }\n        String str = prop.defaultValue();\n        \n        return str.isEmpty() ? null : str;\n    }\n    \n    @Override\n    public JsonFormat.Value findFormat(Annotated ann) {\n        JsonFormat f = _findAnnotation(ann, JsonFormat.class);\n        return (f == null)  ? null : new JsonFormat.Value(f);\n    }\n\n    @Override        \n    public ReferenceProperty findReferenceType(AnnotatedMember member) {\n        JsonManagedReference ref1 = _findAnnotation(member, JsonManagedReference.class);\n        if (ref1 != null) {\n            return AnnotationIntrospector.ReferenceProperty.managed(ref1.value());\n        }\n        JsonBackReference ref2 = _findAnnotation(member, JsonBackReference.class);\n        if (ref2 != null) {\n            return AnnotationIntrospector.ReferenceProperty.back(ref2.value());\n        }\n        return null;\n    }\n\n    @Override\n    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) {\n        JsonUnwrapped ann = _findAnnotation(member, JsonUnwrapped.class);\n        \n        \n        if (ann == null || !ann.enabled()) {\n            return null;\n        }\n        String prefix = ann.prefix();\n        String suffix = ann.suffix();\n        return NameTransformer.simpleTransformer(prefix, suffix);\n    }\n\n    @Override\n    public Object findInjectableValueId(AnnotatedMember m) {\n        JacksonInject ann = _findAnnotation(m, JacksonInject.class);\n        if (ann == null) {\n            return null;\n        }\n        \n        String id = ann.value();\n        if (id.length() == 0) {\n            \n            if (!(m instanceof AnnotatedMethod)) {\n                return m.getRawType().getName();\n            }\n            AnnotatedMethod am = (AnnotatedMethod) m;\n            if (am.getParameterCount() == 0) {\n                return m.getRawType().getName();\n            }\n            return am.getRawParameterType(0).getName();\n        }\n        return id;\n    }\n\n    @Override\n    public Class<?>[] findViews(Annotated a) {\n        JsonView ann = _findAnnotation(a, JsonView.class);\n        return (ann == null) ? null : ann.value();\n    }\n\n    @Override \n    public AnnotatedMethod resolveSetterConflict(MapperConfig<?> config, AnnotatedMethod setter1, AnnotatedMethod setter2) {\n        Class<?> cls1 = setter1.getRawParameterType(0);\n        Class<?> cls2 = setter2.getRawParameterType(0);\n        \n        \n        \n        if (cls1.isPrimitive()) {\n            if (!cls2.isPrimitive()) {\n                return setter1;\n            }\n        } else if (cls2.isPrimitive()) {\n            return setter2;\n        }\n        \n        if (cls1 == String.class) {\n            if (cls2 != String.class) {\n                return setter1;\n            }\n        } else if (cls2 == String.class) {\n            return setter2;\n        }\n\n        return null;\n    }\n\n    \n\n    @Override\n    public TypeResolverBuilder<?> findTypeResolver(MapperConfig<?> config, AnnotatedClass ac, JavaType baseType) {\n        return _findTypeResolver(config, ac, baseType);\n    }\n\n    @Override\n    public TypeResolverBuilder<?> findPropertyTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType baseType) {\n        \n        \n        if (baseType.isContainerType() || baseType.isReferenceType()) {\n            return null;\n        }\n        \n        return _findTypeResolver(config, am, baseType);\n    }\n\n    @Override\n    public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType) {\n        \n        if (containerType.getContentType() == null) {\n            throw new IllegalArgumentException(\"Must call method with a container or reference type (got \"+containerType+\")\");\n        }\n        return _findTypeResolver(config, am, containerType);\n    }\n    \n    @Override\n    public List<NamedType> findSubtypes(Annotated a) {\n        JsonSubTypes t = _findAnnotation(a, JsonSubTypes.class);\n        if (t == null) return null;\n        JsonSubTypes.Type[] types = t.value();\n        ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);\n        for (JsonSubTypes.Type type : types) {\n            result.add(new NamedType(type.value(), type.name()));\n        }\n        return result;\n    }\n\n    @Override        \n    public String findTypeName(AnnotatedClass ac) {\n        JsonTypeName tn = _findAnnotation(ac, JsonTypeName.class);\n        return (tn == null) ? null : tn.value();\n    }\n\n    @Override\n    public Boolean isTypeId(AnnotatedMember member) {\n        return _hasAnnotation(member, JsonTypeId.class);\n    }\n\n    \n\n    @Override\n    public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n        JsonIdentityInfo info = _findAnnotation(ann, JsonIdentityInfo.class);\n        if (info == null || info.generator() == ObjectIdGenerators.None.class) {\n            return null;\n        }\n        \n        PropertyName name = PropertyName.construct(info.property());\n        return new ObjectIdInfo(name, info.scope(), info.generator(), info.resolver());\n    }\n\n    @Override\n    public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n        JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n        if (ref == null) {\n            return objectIdInfo;\n        }\n        if (objectIdInfo == null) {\n            objectIdInfo = ObjectIdInfo.empty();\n        }\n        return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n    }\n\n    \n\n    @Override\n    public Object findSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.using();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        \n        \n        JsonRawValue annRaw =  _findAnnotation(a, JsonRawValue.class);\n        if ((annRaw != null) && annRaw.value()) {\n            \n            Class<?> cls = a.getRawType();\n            return new RawSerializer<Object>(cls);\n        }       \n        return null;\n    }\n\n    @Override\n    public Object findKeySerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.keyUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findContentSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.contentUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findNullSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.nullsUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue) {\n        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n        if (inc != null) {\n            JsonInclude.Include v = inc.value();\n            if (v != JsonInclude.Include.USE_DEFAULTS) {\n                return v;\n            }\n        }\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            JsonSerialize.Inclusion i2 = ann.include();\n            switch (i2) {\n            case ALWAYS:\n                return JsonInclude.Include.ALWAYS;\n            case NON_NULL:\n                return JsonInclude.Include.NON_NULL;\n            case NON_DEFAULT:\n                return JsonInclude.Include.NON_DEFAULT;\n            case NON_EMPTY:\n                return JsonInclude.Include.NON_EMPTY;\n            case DEFAULT_INCLUSION: \n                break;\n            }\n        }\n        return defValue;\n    }\n\n    @Override\n    @Deprecated\n    public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue) {\n        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n        if (inc != null) {\n            JsonInclude.Include incl = inc.content();\n            if (incl != JsonInclude.Include.USE_DEFAULTS) {\n                return incl;\n            }\n        }\n        return defValue;\n    }\n\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public JsonInclude.Value findPropertyInclusion(Annotated a) {\n        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n        JsonInclude.Include valueIncl = (inc == null) ? JsonInclude.Include.USE_DEFAULTS : inc.value();\n        if (valueIncl == JsonInclude.Include.USE_DEFAULTS) {\n            JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n            if (ann != null) {\n                JsonSerialize.Inclusion i2 = ann.include();\n                switch (i2) {\n                case ALWAYS:\n                    valueIncl = JsonInclude.Include.ALWAYS;\n                    break;\n                case NON_NULL:\n                    valueIncl = JsonInclude.Include.NON_NULL;\n                    break;\n                case NON_DEFAULT:\n                    valueIncl = JsonInclude.Include.NON_DEFAULT;\n                    break;\n                case NON_EMPTY:\n                    valueIncl = JsonInclude.Include.NON_EMPTY;\n                    break;\n                case DEFAULT_INCLUSION:\n                default:\n                }\n            }\n        }\n        JsonInclude.Include contentIncl = (inc == null) ? JsonInclude.Include.USE_DEFAULTS : inc.content();\n        return JsonInclude.Value.construct(valueIncl, contentIncl);\n    }\n\n    @Override\n    @Deprecated\n    public Class<?> findSerializationType(Annotated am) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.as());\n    }\n\n    @Override\n    @Deprecated\n    public Class<?> findSerializationKeyType(Annotated am, JavaType baseType) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n    }\n\n    @Override\n    @Deprecated\n    public Class<?> findSerializationContentType(Annotated am, JavaType baseType) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n    }\n    \n    @Override\n    public JsonSerialize.Typing findSerializationTyping(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : ann.typing();\n    }\n\n    @Override\n    public Object findSerializationConverter(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n    }\n\n    @Override\n    public Object findSerializationContentConverter(AnnotatedMember a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n    }\n\n    \n\n    @Override\n    public String[] findSerializationPropertyOrder(AnnotatedClass ac) {\n        JsonPropertyOrder order = _findAnnotation(ac, JsonPropertyOrder.class);\n        return (order == null) ? null : order.value();\n    }\n\n    @Override\n    public Boolean findSerializationSortAlphabetically(Annotated ann) {\n        return _findSortAlpha(ann);\n    }\n\n    private final Boolean _findSortAlpha(Annotated ann) {\n        JsonPropertyOrder order = _findAnnotation(ann, JsonPropertyOrder.class);\n        \n        if ((order != null) && order.alphabetic()) {\n            return Boolean.TRUE;\n        }\n        return null;\n    }\n\n    @Override\n    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac, List<BeanPropertyWriter> properties) {\n        JsonAppend ann = _findAnnotation(ac, JsonAppend.class);\n        if (ann == null) {\n            return;\n        }\n        final boolean prepend = ann.prepend();\n        JavaType propType = null;\n\n        \n        JsonAppend.Attr[] attrs = ann.attrs();\n        for (int i = 0, len = attrs.length; i < len; ++i) {\n            if (propType == null) {\n                propType = config.constructType(Object.class);\n            }\n            BeanPropertyWriter bpw = _constructVirtualProperty(attrs[i],\n                    config, ac, propType);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n\n        \n        JsonAppend.Prop[] props = ann.props();\n        for (int i = 0, len = props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _constructVirtualProperty(props[i],\n                    config, ac);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n    }\n\n    protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr, MapperConfig<?> config, AnnotatedClass ac, JavaType type) {\n        PropertyMetadata metadata = attr.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        \n        String attrName = attr.value();\n\n        \n        PropertyName propName = _propertyName(attr.propName(), attr.propNamespace());\n        if (!propName.hasSimpleName()) {\n            propName = PropertyName.construct(attrName);\n        }\n        \n        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                attrName, type.getRawClass());\n        \n        SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, attr.include());\n        \n        return AttributePropertyWriter.construct(attrName, propDef,\n                ac.getAnnotations(), type);\n    }\n\n    protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac) {\n        PropertyMetadata metadata = prop.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        PropertyName propName = _propertyName(prop.name(), prop.namespace());\n        JavaType type = config.constructType(prop.type());\n        \n        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                propName.getSimpleName(), type.getRawClass());\n        \n        SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, prop.include());\n\n        Class<?> implClass = prop.value();\n\n        HandlerInstantiator hi = config.getHandlerInstantiator();\n        VirtualBeanPropertyWriter bpw = (hi == null) ? null\n                : hi.virtualPropertyWriterInstance(config, implClass);\n        if (bpw == null) {\n            bpw = (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass,\n                    config.canOverrideAccessModifiers());\n        }\n\n        \n        return bpw.withConfig(config, ac, propDef, type);\n    }\n\n    \n\n    @Override\n    public PropertyName findNameForSerialization(Annotated a) {\n        JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n        if (jg != null) {\n            return PropertyName.construct(jg.value());\n        }\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann != null) {\n            return PropertyName.construct(pann.value());\n        }\n        if (_hasOneOf(a, ANNOTATIONS_TO_INFER_SER)) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }\n\n    @Override\n    public boolean hasAsValueAnnotation(AnnotatedMethod am) {\n        JsonValue ann = _findAnnotation(am, JsonValue.class);\n        \n        return (ann != null && ann.value());\n    }\n\n    \n\n    @Override\n    public Object findDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonDeserializer> deserClass = ann.using();\n            if (deserClass != JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findKeyDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            Class<? extends KeyDeserializer> deserClass = ann.keyUsing();\n            if (deserClass != KeyDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findContentDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonDeserializer> deserClass = ann.contentUsing();\n            if (deserClass != JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findDeserializationConverter(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n    }\n\n    @Override\n    public Object findDeserializationContentConverter(AnnotatedMember a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n    }\n\n    \n\n    @Override\n    @Deprecated\n    public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n    }\n    \n    @Deprecated\n    @Override\n    public Class<?> findDeserializationType(Annotated am, JavaType baseType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.as());\n    }\n\n    @Override\n    @Deprecated\n    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n    }\n    \n    \n    \n    @Override\n    public Object findValueInstantiator(AnnotatedClass ac) {\n        JsonValueInstantiator ann = _findAnnotation(ac, JsonValueInstantiator.class);\n        \n        return (ann == null) ? null : ann.value();\n    }\n\n    @Override\n    public Class<?> findPOJOBuilder(AnnotatedClass ac) {\n        JsonDeserialize ann = _findAnnotation(ac, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.builder());\n    }\n\n    @Override\n    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {\n        JsonPOJOBuilder ann = _findAnnotation(ac, JsonPOJOBuilder.class);\n        return (ann == null) ? null : new JsonPOJOBuilder.Value(ann);\n    }\n    \n    \n\n    @Override\n    public PropertyName findNameForDeserialization(Annotated a) {\n        \n        \n        JsonSetter js = _findAnnotation(a, JsonSetter.class);\n        if (js != null) {\n            return PropertyName.construct(js.value());\n        }\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann != null) {\n            return PropertyName.construct(pann.value());\n        }\n        if (_hasOneOf(a, ANNOTATIONS_TO_INFER_DESER)) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }\n    \n    @Override\n    public boolean hasAnySetterAnnotation(AnnotatedMethod am) {\n        \n        return _hasAnnotation(am, JsonAnySetter.class);\n    }\n\n    @Override\n    public boolean hasAnyGetterAnnotation(AnnotatedMethod am) {\n        \n        return _hasAnnotation(am, JsonAnyGetter.class);\n    }\n\n    @Override\n    public boolean hasCreatorAnnotation(Annotated a) {\n        \n         JsonCreator ann = _findAnnotation(a, JsonCreator.class);\n         if (ann != null) {\n             return (ann.mode() != JsonCreator.Mode.DISABLED);\n         }\n         \n         \n         if (_cfgConstructorPropertiesImpliesCreator ) {\n             if (a instanceof AnnotatedConstructor) {\n                 if (_jdk7Helper != null) {\n                     Boolean b = _jdk7Helper.hasCreatorAnnotation(a);\n                     if (b != null) {\n                         return b.booleanValue();\n                     }\n                 }\n             }\n         }\n         return false;\n    }\n\n    @Override\n    public JsonCreator.Mode findCreatorBinding(Annotated a) {\n        JsonCreator ann = _findAnnotation(a, JsonCreator.class);\n        return (ann == null) ? null : ann.mode();\n    }\n\n    \n\n    protected boolean _isIgnorable(Annotated a) {\n        JsonIgnore ann = _findAnnotation(a, JsonIgnore.class);\n        if (ann != null) {\n            return ann.value();\n        }\n        if (_jdk7Helper != null) {\n            Boolean b = _jdk7Helper.findTransient(a);\n            if (b != null) {\n                return b.booleanValue();\n            }\n        }\n        return false;\n    }\n\n    protected Class<?> _classIfExplicit(Class<?> cls) {\n        if (cls == null || ClassUtil.isBogusClass(cls)) {\n            return null;\n        }\n        return cls;\n    }\n\n    protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {\n        cls = _classIfExplicit(cls);\n        return (cls == null || cls == implicit) ? null : cls;\n    }\n\n    protected PropertyName _propertyName(String localName, String namespace) {\n        if (localName.isEmpty()) {\n            return PropertyName.USE_DEFAULT;\n        }\n        if (namespace == null || namespace.isEmpty()) {\n            return PropertyName.construct(localName);\n        }\n        return PropertyName.construct(localName, namespace);\n    }\n\n    protected PropertyName _findConstructorName(Annotated a) {\n        if (a instanceof AnnotatedParameter) {\n            AnnotatedParameter p = (AnnotatedParameter) a;\n            AnnotatedWithParams ctor = p.getOwner();\n\n            if (ctor != null) {\n                if (_jdk7Helper != null) {\n                    PropertyName name = _jdk7Helper.findConstructorName(p);\n                    if (name != null) {\n                        return name;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    \n    @SuppressWarnings(\"deprecation\")\n    protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config, Annotated ann, JavaType baseType) {\n        \n        TypeResolverBuilder<?> b;\n        JsonTypeInfo info = _findAnnotation(ann, JsonTypeInfo.class);\n        JsonTypeResolver resAnn = _findAnnotation(ann, JsonTypeResolver.class);\n        \n        if (resAnn != null) {\n            if (info == null) {\n                return null;\n            }\n            \n            b = config.typeResolverBuilderInstance(ann, resAnn.value());\n        } else { \n            if (info == null) {\n                return null;\n            }\n            \n            if (info.use() == JsonTypeInfo.Id.NONE) {\n                return _constructNoTypeResolverBuilder();\n            }\n            b = _constructStdTypeResolverBuilder();\n        }\n        \n        JsonTypeIdResolver idResInfo = _findAnnotation(ann, JsonTypeIdResolver.class);\n        TypeIdResolver idRes = (idResInfo == null) ? null\n                : config.typeIdResolverInstance(ann, idResInfo.value());\n        if (idRes != null) {\n            idRes.init(baseType);\n        }\n        b = b.init(info.use(), idRes);\n        \n        JsonTypeInfo.As inclusion = info.include();\n        if (inclusion == JsonTypeInfo.As.EXTERNAL_PROPERTY && (ann instanceof AnnotatedClass)) {\n            inclusion = JsonTypeInfo.As.PROPERTY;\n        }\n        b = b.inclusion(inclusion);\n        b = b.typeProperty(info.property());\n        Class<?> defaultImpl = info.defaultImpl();\n\n        \n        \n        \n        \n        if (defaultImpl != JsonTypeInfo.None.class && !defaultImpl.isAnnotation()) {\n            b = b.defaultImpl(defaultImpl);\n        }\n        b = b.typeIdVisibility(info.visible());\n        return b;\n    }\n\n    \n    protected StdTypeResolverBuilder _constructStdTypeResolverBuilder() {\n        return new StdTypeResolverBuilder();\n    }\n\n    \n    protected StdTypeResolverBuilder _constructNoTypeResolverBuilder() {\n        return StdTypeResolverBuilder.noTypeInfoBuilder();\n    }\n\n    \n\n    \n    private static class Java7Support { @SuppressWarnings(\"unused\") private final Class<?> _bogus; @SuppressWarnings(\"unused\") public Java7Support() {\n            \n            Class<?> cls = Transient.class;\n            cls = ConstructorProperties.class;\n            _bogus = cls;\n        }\n        \n        public Boolean findTransient(Annotated a) {\n            Transient t = a.getAnnotation(Transient.class);\n            if (t != null) {\n                return t.value();\n            }\n            return null;\n        }\n\n        public Boolean hasCreatorAnnotation(Annotated a) {\n            ConstructorProperties props = a.getAnnotation(ConstructorProperties.class);\n            \n            \n            if (props != null) {\n                return Boolean.TRUE;\n            }\n            return null;\n        }\n\n        public PropertyName findConstructorName(AnnotatedParameter p) {\n            AnnotatedWithParams ctor = p.getOwner();\n            if (ctor != null) {\n                ConstructorProperties props = ctor.getAnnotation(ConstructorProperties.class);\n                if (props != null) {\n                    String[] names = props.value();\n                    int ix = p.getIndex();\n                    if (ix < names.length) {\n                        return PropertyName.construct(names[ix]);\n                    }\n                }\n            }\n            return null;\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public Version version()",
        "protected Object readResolve()",
        "public JacksonAnnotationIntrospector setConstructorPropertiesImpliesCreator(boolean b)",
        "public boolean isAnnotationBundle(Annotation ann)",
        "public String findEnumValue(Enum<?> value)",
        "public String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names)",
        "public PropertyName findRootName(AnnotatedClass ac)",
        "public String[] findPropertiesToIgnore(Annotated ac)",
        "public String[] findPropertiesToIgnore(Annotated ac, boolean forSerialization)",
        "public Boolean findIgnoreUnknownProperties(AnnotatedClass ac)",
        "public Boolean isIgnorableType(AnnotatedClass ac)",
        "public Object findFilterId(Annotated a)",
        "public Object findNamingStrategy(AnnotatedClass ac)",
        "public String findClassDescription(AnnotatedClass ac)",
        "public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker)",
        "public String findImplicitPropertyName(AnnotatedMember m)",
        "public boolean hasIgnoreMarker(AnnotatedMember m)",
        "public Boolean hasRequiredMarker(AnnotatedMember m)",
        "public JsonProperty.Access findPropertyAccess(Annotated m)",
        "public String findPropertyDescription(Annotated ann)",
        "public Integer findPropertyIndex(Annotated ann)",
        "public String findPropertyDefaultValue(Annotated ann)",
        "public JsonFormat.Value findFormat(Annotated ann)",
        "public ReferenceProperty findReferenceType(AnnotatedMember member)",
        "public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member)",
        "public Object findInjectableValueId(AnnotatedMember m)",
        "public Class<?>[] findViews(Annotated a)",
        "public AnnotatedMethod resolveSetterConflict(MapperConfig<?> config, AnnotatedMethod setter1, AnnotatedMethod setter2)",
        "public TypeResolverBuilder<?> findTypeResolver(MapperConfig<?> config, AnnotatedClass ac, JavaType baseType)",
        "public TypeResolverBuilder<?> findPropertyTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType baseType)",
        "public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType)",
        "public List<NamedType> findSubtypes(Annotated a)",
        "public String findTypeName(AnnotatedClass ac)",
        "public Boolean isTypeId(AnnotatedMember member)",
        "public ObjectIdInfo findObjectIdInfo(Annotated ann)",
        "public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo)",
        "public Object findSerializer(Annotated a)",
        "public Object findKeySerializer(Annotated a)",
        "public Object findContentSerializer(Annotated a)",
        "public Object findNullSerializer(Annotated a)",
        "public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue)",
        "public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue)",
        "public JsonInclude.Value findPropertyInclusion(Annotated a)",
        "public Class<?> findSerializationType(Annotated am)",
        "public Class<?> findSerializationKeyType(Annotated am, JavaType baseType)",
        "public Class<?> findSerializationContentType(Annotated am, JavaType baseType)",
        "public JsonSerialize.Typing findSerializationTyping(Annotated a)",
        "public Object findSerializationConverter(Annotated a)",
        "public Object findSerializationContentConverter(AnnotatedMember a)",
        "public String[] findSerializationPropertyOrder(AnnotatedClass ac)",
        "public Boolean findSerializationSortAlphabetically(Annotated ann)",
        "private final Boolean _findSortAlpha(Annotated ann)",
        "public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac, List<BeanPropertyWriter> properties)",
        "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr, MapperConfig<?> config, AnnotatedClass ac, JavaType type)",
        "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac)",
        "public PropertyName findNameForSerialization(Annotated a)",
        "public boolean hasAsValueAnnotation(AnnotatedMethod am)",
        "public Object findDeserializer(Annotated a)",
        "public Object findKeyDeserializer(Annotated a)",
        "public Object findContentDeserializer(Annotated a)",
        "public Object findDeserializationConverter(Annotated a)",
        "public Object findDeserializationContentConverter(AnnotatedMember a)",
        "public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType)",
        "public Class<?> findDeserializationType(Annotated am, JavaType baseType)",
        "public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType)",
        "public Object findValueInstantiator(AnnotatedClass ac)",
        "public Class<?> findPOJOBuilder(AnnotatedClass ac)",
        "public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac)",
        "public PropertyName findNameForDeserialization(Annotated a)",
        "public boolean hasAnySetterAnnotation(AnnotatedMethod am)",
        "public boolean hasAnyGetterAnnotation(AnnotatedMethod am)",
        "public boolean hasCreatorAnnotation(Annotated a)",
        "public JsonCreator.Mode findCreatorBinding(Annotated a)",
        "protected boolean _isIgnorable(Annotated a)",
        "protected Class<?> _classIfExplicit(Class<?> cls)",
        "protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit)",
        "protected PropertyName _propertyName(String localName, String namespace)",
        "protected PropertyName _findConstructorName(Annotated a)",
        "protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config, Annotated ann, JavaType baseType)",
        "protected StdTypeResolverBuilder _constructStdTypeResolverBuilder()",
        "protected StdTypeResolverBuilder _constructNoTypeResolverBuilder()",
        "private static class Java7Support { @SuppressWarnings(\"unused\") private final Class<?> _bogus; @SuppressWarnings(\"unused\") public Java7Support()",
        "public Boolean findTransient(Annotated a)",
        "public Boolean hasCreatorAnnotation(Annotated a)",
        "public PropertyName findConstructorName(AnnotatedParameter p)"
      ],
      "fixed_signatures": [
        "public Version version()",
        "protected Object readResolve()",
        "public JacksonAnnotationIntrospector setConstructorPropertiesImpliesCreator(boolean b)",
        "public boolean isAnnotationBundle(Annotation ann)",
        "public String findEnumValue(Enum<?> value)",
        "public String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names)",
        "public PropertyName findRootName(AnnotatedClass ac)",
        "public String[] findPropertiesToIgnore(Annotated ac)",
        "public String[] findPropertiesToIgnore(Annotated ac, boolean forSerialization)",
        "public Boolean findIgnoreUnknownProperties(AnnotatedClass ac)",
        "public Boolean isIgnorableType(AnnotatedClass ac)",
        "public Object findFilterId(Annotated a)",
        "public Object findNamingStrategy(AnnotatedClass ac)",
        "public String findClassDescription(AnnotatedClass ac)",
        "public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker)",
        "public String findImplicitPropertyName(AnnotatedMember m)",
        "public boolean hasIgnoreMarker(AnnotatedMember m)",
        "public Boolean hasRequiredMarker(AnnotatedMember m)",
        "public JsonProperty.Access findPropertyAccess(Annotated m)",
        "public String findPropertyDescription(Annotated ann)",
        "public Integer findPropertyIndex(Annotated ann)",
        "public String findPropertyDefaultValue(Annotated ann)",
        "public JsonFormat.Value findFormat(Annotated ann)",
        "public ReferenceProperty findReferenceType(AnnotatedMember member)",
        "public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member)",
        "public Object findInjectableValueId(AnnotatedMember m)",
        "public Class<?>[] findViews(Annotated a)",
        "public AnnotatedMethod resolveSetterConflict(MapperConfig<?> config, AnnotatedMethod setter1, AnnotatedMethod setter2)",
        "public TypeResolverBuilder<?> findTypeResolver(MapperConfig<?> config, AnnotatedClass ac, JavaType baseType)",
        "public TypeResolverBuilder<?> findPropertyTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType baseType)",
        "public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType)",
        "public List<NamedType> findSubtypes(Annotated a)",
        "public String findTypeName(AnnotatedClass ac)",
        "public Boolean isTypeId(AnnotatedMember member)",
        "public ObjectIdInfo findObjectIdInfo(Annotated ann)",
        "public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo)",
        "public Object findSerializer(Annotated a)",
        "public Object findKeySerializer(Annotated a)",
        "public Object findContentSerializer(Annotated a)",
        "public Object findNullSerializer(Annotated a)",
        "public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue)",
        "public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue)",
        "public JsonInclude.Value findPropertyInclusion(Annotated a)",
        "public Class<?> findSerializationType(Annotated am)",
        "public Class<?> findSerializationKeyType(Annotated am, JavaType baseType)",
        "public Class<?> findSerializationContentType(Annotated am, JavaType baseType)",
        "public JsonSerialize.Typing findSerializationTyping(Annotated a)",
        "public Object findSerializationConverter(Annotated a)",
        "public Object findSerializationContentConverter(AnnotatedMember a)",
        "public String[] findSerializationPropertyOrder(AnnotatedClass ac)",
        "public Boolean findSerializationSortAlphabetically(Annotated ann)",
        "private final Boolean _findSortAlpha(Annotated ann)",
        "public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac, List<BeanPropertyWriter> properties)",
        "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr, MapperConfig<?> config, AnnotatedClass ac, JavaType type)",
        "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac)",
        "public PropertyName findNameForSerialization(Annotated a)",
        "public boolean hasAsValueAnnotation(AnnotatedMethod am)",
        "public Object findDeserializer(Annotated a)",
        "public Object findKeyDeserializer(Annotated a)",
        "public Object findContentDeserializer(Annotated a)",
        "public Object findDeserializationConverter(Annotated a)",
        "public Object findDeserializationContentConverter(AnnotatedMember a)",
        "public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType)",
        "public Class<?> findDeserializationType(Annotated am, JavaType baseType)",
        "public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType)",
        "public Object findValueInstantiator(AnnotatedClass ac)",
        "public Class<?> findPOJOBuilder(AnnotatedClass ac)",
        "public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac)",
        "public PropertyName findNameForDeserialization(Annotated a)",
        "public boolean hasAnySetterAnnotation(AnnotatedMethod am)",
        "public boolean hasAnyGetterAnnotation(AnnotatedMethod am)",
        "public boolean hasCreatorAnnotation(Annotated a)",
        "public JsonCreator.Mode findCreatorBinding(Annotated a)",
        "protected boolean _isIgnorable(Annotated a)",
        "protected Class<?> _classIfExplicit(Class<?> cls)",
        "protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit)",
        "protected PropertyName _propertyName(String localName, String namespace)",
        "protected PropertyName _findConstructorName(Annotated a)",
        "protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config, Annotated ann, JavaType baseType)",
        "protected StdTypeResolverBuilder _constructStdTypeResolverBuilder()",
        "protected StdTypeResolverBuilder _constructNoTypeResolverBuilder()",
        "private static class Java7Support { @SuppressWarnings(\"unused\") private final Class<?> _bogus; @SuppressWarnings(\"unused\") public Java7Support()",
        "public Boolean findTransient(Annotated a)",
        "public Boolean hasCreatorAnnotation(Annotated a)",
        "public PropertyName findConstructorName(AnnotatedParameter p)"
      ],
      "methods": [
        {
          "buggy_method": "  public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n  JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n  if (ref != null) {\n  objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n  }\n  return objectIdInfo;\n  }",
          "fixed_method": "  public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n  JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n  if (ref == null) {\n  return objectIdInfo;\n  }\n  if (objectIdInfo == null) {\n  objectIdInfo = ObjectIdInfo.empty();\n  }\n  return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n  }",
          "diff": [
            "@@ -576,10 +576,13 @@",
            "     @Override\n",
            "     public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n",
            "         JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n",
            "-        if (ref != null) {\n",
            "-            objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n",
            "-        }\n",
            "-        return objectIdInfo;\n",
            "+        if (ref == null) {\n",
            "+            return objectIdInfo;\n",
            "+        }\n",
            "+        if (objectIdInfo == null) {\n",
            "+            objectIdInfo = ObjectIdInfo.empty();\n",
            "+        }\n",
            "+        return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n",
            "     }\n",
            " \n",
            "     /*\n"
          ],
          "changed_lines": 11
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.introspect;\n\nimport com.fasterxml.jackson.annotation.JsonIdentityInfo;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator;\nimport com.fasterxml.jackson.annotation.ObjectIdResolver;\nimport com.fasterxml.jackson.annotation.SimpleObjectIdResolver;\nimport com.fasterxml.jackson.databind.PropertyName;\n\n\npublic class ObjectIdInfo { protected final PropertyName _propertyName; protected final Class<? extends ObjectIdGenerator<?>> _generator; protected final Class<? extends ObjectIdResolver> _resolver; protected final Class<?> _scope; protected final boolean _alwaysAsId; public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, Class<? extends ObjectIdResolver> resolver) {\n        this(name, scope, gen, false, resolver);\n    }\n\n    @Deprecated \n    public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen) {\n        this(name, scope, gen, false);\n    }\n\n    @Deprecated \n    public ObjectIdInfo(String name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen) {\n        this(new PropertyName(name), scope, gen, false);\n    }\n    \n    protected ObjectIdInfo(PropertyName prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, boolean alwaysAsId) {\n        this(prop, scope, gen, alwaysAsId, SimpleObjectIdResolver.class);\n\n    }\n\n    protected ObjectIdInfo(PropertyName prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, boolean alwaysAsId, Class<? extends ObjectIdResolver> resolver) {\n        _propertyName = prop;\n        _scope = scope;\n        _generator = gen;\n        _alwaysAsId = alwaysAsId;\n        if (resolver == null) {\n            resolver = SimpleObjectIdResolver.class;\n        }\n        _resolver = resolver;\n    }\n\n\n    public ObjectIdInfo withAlwaysAsId(boolean state) {\n        if (_alwaysAsId == state) {\n            return this;\n        }\n        return new ObjectIdInfo(_propertyName, _scope, _generator, state, _resolver);\n    }\n    \n    public PropertyName getPropertyName() { return _propertyName; }\n    public Class<?> getScope() { return _scope; }\n    public Class<? extends ObjectIdGenerator<?>> getGeneratorType() { return _generator; }\n    public Class<? extends ObjectIdResolver> getResolverType() { return _resolver; }\n    public boolean getAlwaysAsId() { return _alwaysAsId; }\n\n    @Override\n    public String toString() {\n        return \"ObjectIdInfo: propName=\"+_propertyName\n                +\", scope=\"+(_scope == null ? \"null\" : _scope.getName())\n                +\", generatorType=\"+(_generator == null ? \"null\" : _generator.getName())\n                +\", alwaysAsId=\"+_alwaysAsId;\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.introspect;\n\nimport com.fasterxml.jackson.annotation.JsonIdentityInfo;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator;\nimport com.fasterxml.jackson.annotation.ObjectIdResolver;\nimport com.fasterxml.jackson.annotation.SimpleObjectIdResolver;\nimport com.fasterxml.jackson.databind.PropertyName;\n\n\npublic class ObjectIdInfo { protected final PropertyName _propertyName; protected final Class<? extends ObjectIdGenerator<?>> _generator; protected final Class<? extends ObjectIdResolver> _resolver; protected final Class<?> _scope; protected final boolean _alwaysAsId; private final static ObjectIdInfo EMPTY = new ObjectIdInfo(PropertyName.NO_NAME, Object.class, null, false, null); public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, Class<? extends ObjectIdResolver> resolver) {\n        this(name, scope, gen, false, resolver);\n    }\n\n    @Deprecated \n    public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen) {\n        this(name, scope, gen, false);\n    }\n\n    @Deprecated \n    public ObjectIdInfo(String name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen) {\n        this(new PropertyName(name), scope, gen, false);\n    }\n    \n    protected ObjectIdInfo(PropertyName prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, boolean alwaysAsId) {\n        this(prop, scope, gen, alwaysAsId, SimpleObjectIdResolver.class);\n\n    }\n\n    protected ObjectIdInfo(PropertyName prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, boolean alwaysAsId, Class<? extends ObjectIdResolver> resolver) {\n        _propertyName = prop;\n        _scope = scope;\n        _generator = gen;\n        _alwaysAsId = alwaysAsId;\n        if (resolver == null) {\n            resolver = SimpleObjectIdResolver.class;\n        }\n        _resolver = resolver;\n    }\n\n    public static ObjectIdInfo empty() {\n        return EMPTY;\n    }\n\n    public ObjectIdInfo withAlwaysAsId(boolean state) {\n        if (_alwaysAsId == state) {\n            return this;\n        }\n        return new ObjectIdInfo(_propertyName, _scope, _generator, state, _resolver);\n    }\n    \n    public PropertyName getPropertyName() { return _propertyName; }\n    public Class<?> getScope() { return _scope; }\n    public Class<? extends ObjectIdGenerator<?>> getGeneratorType() { return _generator; }\n    public Class<? extends ObjectIdResolver> getResolverType() { return _resolver; }\n    public boolean getAlwaysAsId() { return _alwaysAsId; }\n\n    @Override\n    public String toString() {\n        return \"ObjectIdInfo: propName=\"+_propertyName\n                +\", scope=\"+(_scope == null ? \"null\" : _scope.getName())\n                +\", generatorType=\"+(_generator == null ? \"null\" : _generator.getName())\n                +\", alwaysAsId=\"+_alwaysAsId;\n    }\n}\n",
      "buggy_signatures": [
        "public class ObjectIdInfo { protected final PropertyName _propertyName; protected final Class<? extends ObjectIdGenerator<?>> _generator; protected final Class<? extends ObjectIdResolver> _resolver; protected final Class<?> _scope; protected final boolean _alwaysAsId; public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, Class<? extends ObjectIdResolver> resolver)",
        "public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen)",
        "public ObjectIdInfo(String name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen)",
        "protected ObjectIdInfo(PropertyName prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, boolean alwaysAsId)",
        "protected ObjectIdInfo(PropertyName prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, boolean alwaysAsId, Class<? extends ObjectIdResolver> resolver)",
        "public ObjectIdInfo withAlwaysAsId(boolean state)",
        "public PropertyName getPropertyName()",
        "public Class<?> getScope()",
        "public Class<? extends ObjectIdGenerator<?>> getGeneratorType()",
        "public Class<? extends ObjectIdResolver> getResolverType()",
        "public boolean getAlwaysAsId()",
        "public String toString()"
      ],
      "fixed_signatures": [
        "public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen)",
        "public ObjectIdInfo(String name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen)",
        "protected ObjectIdInfo(PropertyName prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, boolean alwaysAsId)",
        "protected ObjectIdInfo(PropertyName prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, boolean alwaysAsId, Class<? extends ObjectIdResolver> resolver)",
        "public static ObjectIdInfo empty()",
        "public ObjectIdInfo withAlwaysAsId(boolean state)",
        "public PropertyName getPropertyName()",
        "public Class<?> getScope()",
        "public Class<? extends ObjectIdGenerator<?>> getGeneratorType()",
        "public Class<? extends ObjectIdResolver> getResolverType()",
        "public boolean getAlwaysAsId()",
        "public String toString()"
      ],
      "methods": [
        {
          "buggy_method": "  public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, Class<? extends ObjectIdResolver> resolver) {\n  this(name, scope, gen, false, resolver);\n  }",
          "fixed_method": "  public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen, Class<? extends ObjectIdResolver> resolver) {\n  this(name, scope, gen, false, resolver);\n  }",
          "diff": [
            "@@ -22,6 +22,7 @@",
            "     /**\n",
            "      * @since 2.8.9\n",
            "      */\n",
            "+    private final static ObjectIdInfo EMPTY = new ObjectIdInfo(PropertyName.NO_NAME, Object.class, null, false, null);\n",
            " \n",
            "     public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen,\n",
            "             Class<? extends ObjectIdResolver> resolver)\n"
          ],
          "changed_lines": 1
        },
        {
          "buggy_method": "  public ObjectIdInfo withAlwaysAsId(boolean state) {\n  if (_alwaysAsId == state) {\n  return this;\n  }\n  return new ObjectIdInfo(_propertyName, _scope, _generator, state, _resolver);\n  }",
          "fixed_method": "  public static ObjectIdInfo empty() {\n  return EMPTY;\n  }",
          "diff": [
            "@@ -60,6 +61,9 @@",
            "         _resolver = resolver;\n",
            "     }\n",
            " \n",
            "+    public static ObjectIdInfo empty() {\n",
            "+        return EMPTY;\n",
            "+    }\n",
            " \n",
            "     public ObjectIdInfo withAlwaysAsId(boolean state) {\n",
            "         if (_alwaysAsId == state) {\n"
          ],
          "changed_lines": 3
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.ser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.introspect.Annotated;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\nimport com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema;\nimport com.fasterxml.jackson.databind.jsonschema.SchemaAware;\nimport com.fasterxml.jackson.databind.jsontype.TypeSerializer;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.ser.*;\nimport com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\nimport com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;\nimport com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\nimport com.fasterxml.jackson.databind.util.ArrayBuilders;\nimport com.fasterxml.jackson.databind.util.Converter;\nimport com.fasterxml.jackson.databind.util.NameTransformer;\n\n\n@SuppressWarnings(\"serial\")\npublic abstract class BeanSerializerBase extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware { protected final static PropertyName NAME_FOR_OBJECT_REF = new PropertyName(\"#object-ref\"); final protected static BeanPropertyWriter[] NO_PROPS = new BeanPropertyWriter[0]; final protected BeanPropertyWriter[] _props; final protected BeanPropertyWriter[] _filteredProps; final protected AnyGetterWriter _anyGetterWriter; final protected Object _propertyFilterId; final protected AnnotatedMember _typeId; final protected ObjectIdWriter _objectIdWriter; final protected JsonFormat.Shape _serializationShape; protected BeanSerializerBase(JavaType type, BeanSerializerBuilder builder, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) {\n        super(type);\n        _props = properties;\n        _filteredProps = filteredProperties;\n        if (builder == null) { \n            _typeId = null;\n            _anyGetterWriter = null;\n            _propertyFilterId = null;\n            _objectIdWriter = null;\n            _serializationShape = null;\n        } else {\n            _typeId = builder.getTypeId();\n            _anyGetterWriter = builder.getAnyGetter();\n            _propertyFilterId = builder.getFilterId();\n            _objectIdWriter = builder.getObjectIdWriter();\n            JsonFormat.Value format = builder.getBeanDescription().findExpectedFormat(null);\n            _serializationShape = (format == null) ? null : format.getShape();\n        }\n    }\n\n    public BeanSerializerBase(BeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) {\n        super(src._handledType);\n        _props = properties;\n        _filteredProps = filteredProperties;\n\n        _typeId = src._typeId;\n        _anyGetterWriter = src._anyGetterWriter;\n        _objectIdWriter = src._objectIdWriter;\n        _propertyFilterId = src._propertyFilterId;\n        _serializationShape = src._serializationShape;\n    }\n\n    protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter) {\n        this(src, objectIdWriter, src._propertyFilterId);\n    }\n    \n    \n    protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId) {\n        super(src._handledType);\n        _props = src._props;\n        _filteredProps = src._filteredProps;\n        \n        _typeId = src._typeId;\n        _anyGetterWriter = src._anyGetterWriter;\n        _objectIdWriter = objectIdWriter;\n        _propertyFilterId = filterId;\n        _serializationShape = src._serializationShape;\n    }\n\n    protected BeanSerializerBase(BeanSerializerBase src, String[] toIgnore) {\n        super(src._handledType);\n\n        \n        HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(toIgnore);\n        final BeanPropertyWriter[] propsIn = src._props;\n        final BeanPropertyWriter[] fpropsIn = src._filteredProps;\n        final int len = propsIn.length;\n\n        ArrayList<BeanPropertyWriter> propsOut = new ArrayList<BeanPropertyWriter>(len);\n        ArrayList<BeanPropertyWriter> fpropsOut = (fpropsIn == null) ? null : new ArrayList<BeanPropertyWriter>(len);\n\n        for (int i = 0; i < len; ++i) {\n            BeanPropertyWriter bpw = propsIn[i];\n            \n            if (ignoredSet.contains(bpw.getName())) {\n                continue;\n            }\n            propsOut.add(bpw);\n            if (fpropsIn != null) {\n                fpropsOut.add(fpropsIn[i]);\n            }\n        }\n        _props = propsOut.toArray(new BeanPropertyWriter[propsOut.size()]);\n        _filteredProps = (fpropsOut == null) ? null : fpropsOut.toArray(new BeanPropertyWriter[fpropsOut.size()]);\n        \n        _typeId = src._typeId;\n        _anyGetterWriter = src._anyGetterWriter;\n        _objectIdWriter = src._objectIdWriter;\n        _propertyFilterId = src._propertyFilterId;\n        _serializationShape = src._serializationShape;\n    }\n    \n    \n    public abstract BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter); protected abstract BeanSerializerBase withIgnorals(String[] toIgnore); protected abstract BeanSerializerBase asArraySerializer(); @Override public abstract BeanSerializerBase withFilterId(Object filterId); protected BeanSerializerBase(BeanSerializerBase src) {\n        this(src, src._props, src._filteredProps);\n    }\n\n    \n    protected BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper) {\n        this(src, rename(src._props, unwrapper), rename(src._filteredProps, unwrapper));\n    }\n    \n    private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props, NameTransformer transformer) {\n        if (props == null || props.length == 0 || transformer == null || transformer == NameTransformer.NOP) {\n            return props;\n        }\n        final int len = props.length;\n        BeanPropertyWriter[] result = new BeanPropertyWriter[len];\n        for (int i = 0; i < len; ++i) {\n            BeanPropertyWriter bpw = props[i];\n            if (bpw != null) {\n                result[i] = bpw.rename(transformer);\n            }\n        }\n        return result;\n    }\n\n    \n\n    \n    @Override\n    public void resolve(SerializerProvider provider) throws JsonMappingException {\n        int filteredCount = (_filteredProps == null) ? 0 : _filteredProps.length;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter prop = _props[i];\n            \n            if (!prop.willSuppressNulls() && !prop.hasNullSerializer()) {\n                JsonSerializer<Object> nullSer = provider.findNullValueSerializer(prop);\n                if (nullSer != null) {\n                    prop.assignNullSerializer(nullSer);\n                    \n                    if (i < filteredCount) {\n                        BeanPropertyWriter w2 = _filteredProps[i];\n                        if (w2 != null) {\n                            w2.assignNullSerializer(nullSer);\n                        }\n                    }\n                }\n            }\n            \n            if (prop.hasSerializer()) {\n                continue;\n            }\n            \n            JsonSerializer<Object> ser = findConvertingSerializer(provider, prop);\n            if (ser == null) {\n                \n                JavaType type = prop.getSerializationType();\n                \n                \n                \n                if (type == null) {\n                    \n\n                    \n                    type = prop.getType();\n                    if (!type.isFinal()) {\n                        if (type.isContainerType() || type.containedTypeCount() > 0) {\n                            prop.setNonTrivialBaseType(type);\n                        }\n                        continue;\n                    }\n                }\n                ser = provider.findValueSerializer(type, prop);\n                \n                if (type.isContainerType()) {\n                    TypeSerializer typeSer = type.getContentType().getTypeHandler();\n                    if (typeSer != null) {\n                        \n                        if (ser instanceof ContainerSerializer<?>) {\n                            \n                            @SuppressWarnings(\"unchecked\")\n                            JsonSerializer<Object> ser2 = (JsonSerializer<Object>)((ContainerSerializer<?>) ser).withValueTypeSerializer(typeSer);\n                            ser = ser2;\n                        }\n                    }\n                }\n            }\n            prop.assignSerializer(ser);\n            \n            if (i < filteredCount) {\n                BeanPropertyWriter w2 = _filteredProps[i];\n                if (w2 != null) {\n                    w2.assignSerializer(ser);\n                }\n            }\n        }\n\n        \n        if (_anyGetterWriter != null) {\n            \n            _anyGetterWriter.resolve(provider);\n        }\n    }\n\n    \n    protected JsonSerializer<Object> findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n        final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n        if (intr != null) {\n            AnnotatedMember m = prop.getMember();\n            if (m != null) {\n                Object convDef = intr.findSerializationConverter(m);\n                if (convDef != null) {\n                    Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);\n                    JavaType delegateType = conv.getOutputType(provider.getTypeFactory());\n                    \n                    JsonSerializer<?> ser = delegateType.isJavaLangObject() ? null\n                            : provider.findValueSerializer(delegateType, prop);\n                    return new StdDelegatingSerializer(conv, delegateType, ser);\n                }\n            }\n        }\n        return null;\n    }\n\n    @SuppressWarnings(\"incomplete-switch\")\n    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n        final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n        final AnnotatedMember accessor = (property == null || intr == null)\n                ? null : property.getMember();\n        final SerializationConfig config = provider.getConfig();\n        \n        \n        \n        JsonFormat.Shape shape = null;\n        if (accessor != null) {\n            JsonFormat.Value format = intr.findFormat((Annotated) accessor);\n\n            if (format != null) {\n                shape = format.getShape();\n                \n                if (shape != _serializationShape) {\n                    if (_handledType.isEnum()) {\n                        switch (shape) {\n                        case STRING:\n                        case NUMBER:\n                        case NUMBER_INT:\n                            \n                            \n                            BeanDescription desc = config.introspectClassAnnotations(_handledType);\n                            JsonSerializer<?> ser = EnumSerializer.construct(_handledType,\n                                    provider.getConfig(), desc, format);\n                            return provider.handlePrimaryContextualization(ser, property);\n                        }\n                    }\n                }\n            }\n        }\n\n        ObjectIdWriter oiw = _objectIdWriter;\n        String[] ignorals = null;\n        Object newFilterId = null;\n        \n        \n        if (accessor != null) {\n            ignorals = intr.findPropertiesToIgnore(accessor, true);\n            ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n            if (objectIdInfo == null) {\n                \n                if (oiw != null) {\n                    objectIdInfo = intr.findObjectReferenceInfo(accessor,\n                            new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n                        oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n                }\n            } else {\n                \n                \n                \n                \n                objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n                ObjectIdGenerator<?> gen;\n                Class<?> implClass = objectIdInfo.getGeneratorType();\n                JavaType type = provider.constructType(implClass);\n                JavaType idType = provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                \n                if (implClass == ObjectIdGenerators.PropertyGenerator.class) { \n                    String propName = objectIdInfo.getPropertyName().getSimpleName();\n                    BeanPropertyWriter idProp = null;\n\n                    for (int i = 0, len = _props.length ;; ++i) {\n                        if (i == len) {\n                            throw new IllegalArgumentException(\"Invalid Object Id definition for \"+_handledType.getName()\n                                    +\": can not find property with name '\"+propName+\"'\");\n                        }\n                        BeanPropertyWriter prop = _props[i];\n                        if (propName.equals(prop.getName())) {\n                            idProp = prop;\n                            \n                            if (i > 0) { \n                                System.arraycopy(_props, 0, _props, 1, i);\n                                _props[0] = idProp;\n                                if (_filteredProps != null) {\n                                    BeanPropertyWriter fp = _filteredProps[i];\n                                    System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                    _filteredProps[0] = fp;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    idType = idProp.getType();\n                    gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                    oiw = ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n                } else { \n                    gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                    oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n                            objectIdInfo.getAlwaysAsId());\n                }\n            }\n            \n            \n            Object filterId = intr.findFilterId(accessor);\n            if (filterId != null) {\n                \n                if (_propertyFilterId == null || !filterId.equals(_propertyFilterId)) {\n                    newFilterId = filterId;\n                }\n            }\n        }\n        \n        BeanSerializerBase contextual = this;\n        if (oiw != null) {\n            JsonSerializer<?> ser = provider.findValueSerializer(oiw.idType, property);\n            oiw = oiw.withSerializer(ser);\n            if (oiw != _objectIdWriter) {\n                contextual = contextual.withObjectIdWriter(oiw);\n            }\n        }\n        \n        if (ignorals != null && ignorals.length != 0) {\n            contextual = contextual.withIgnorals(ignorals);\n        }\n        if (newFilterId != null) {\n            contextual = contextual.withFilterId(newFilterId);\n        }\n        if (shape == null) {\n            shape = _serializationShape;\n        }\n        if (shape == JsonFormat.Shape.ARRAY) {\n            return contextual.asArraySerializer();\n        }\n        return contextual;\n    }\n\n    \n\n    @Override\n    public Iterator<PropertyWriter> properties() {\n        return Arrays.<PropertyWriter>asList(_props).iterator();\n    }\n\n    \n\n    @Override\n    public boolean usesObjectId() {\n        return (_objectIdWriter != null);\n    }\n    \n    \n    @Override\n    public abstract void serialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException; @Override public void serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n        if (_objectIdWriter != null) {\n            gen.setCurrentValue(bean); \n            _serializeWithObjectId(bean, gen, provider, typeSer);\n            return;\n        }\n\n        String typeStr = (_typeId == null) ? null : _customTypeId(bean);\n        if (typeStr == null) {\n            typeSer.writeTypePrefixForObject(bean, gen);\n        } else {\n            typeSer.writeCustomTypePrefixForObject(bean, gen, typeStr);\n        }\n        gen.setCurrentValue(bean); \n        if (_propertyFilterId != null) {\n            serializeFieldsFiltered(bean, gen, provider);\n        } else {\n            serializeFields(bean, gen, provider);\n        }\n        if (typeStr == null) {\n            typeSer.writeTypeSuffixForObject(bean, gen);\n        } else {\n            typeSer.writeCustomTypeSuffixForObject(bean, gen, typeStr);\n        }\n    }\n\n    protected final void _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, boolean startEndObject) throws IOException {\n        final ObjectIdWriter w = _objectIdWriter;\n        WritableObjectId objectId = provider.findObjectId(bean, w.generator);\n        \n        if (objectId.writeAsId(gen, provider, w)) {\n            return;\n        }\n        \n        Object id = objectId.generateId(bean);\n        if (w.alwaysAsId) {\n            w.serializer.serialize(id, gen, provider);\n            return;\n        }\n        if (startEndObject) {\n            gen.writeStartObject();\n        }\n        objectId.writeAsField(gen, provider, w);\n        if (_propertyFilterId != null) {\n            serializeFieldsFiltered(bean, gen, provider);\n        } else {\n            serializeFields(bean, gen, provider);\n        }\n        if (startEndObject) {\n            gen.writeEndObject();\n        }\n    }\n    \n    protected final void _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n        final ObjectIdWriter w = _objectIdWriter;\n        WritableObjectId objectId = provider.findObjectId(bean, w.generator);\n        \n        if (objectId.writeAsId(gen, provider, w)) {\n            return;\n        }\n        \n        Object id = objectId.generateId(bean);\n        if (w.alwaysAsId) {\n            w.serializer.serialize(id, gen, provider);\n            return;\n        }\n\n        _serializeObjectId(bean, gen, provider, typeSer, objectId);\n    }\n\n    protected void _serializeObjectId(Object bean, JsonGenerator gen,SerializerProvider provider, TypeSerializer typeSer, WritableObjectId objectId) throws IOException {\n        final ObjectIdWriter w = _objectIdWriter;\n        String typeStr = (_typeId == null) ? null :_customTypeId(bean);\n        if (typeStr == null) {\n            typeSer.writeTypePrefixForObject(bean, gen);\n        } else {\n            typeSer.writeCustomTypePrefixForObject(bean, gen, typeStr);\n        }\n        objectId.writeAsField(gen, provider, w);\n        if (_propertyFilterId != null) {\n            serializeFieldsFiltered(bean, gen, provider);\n        } else {\n            serializeFields(bean, gen, provider);\n        }\n        if (typeStr == null) {\n            typeSer.writeTypeSuffixForObject(bean, gen);\n        } else {\n            typeSer.writeCustomTypeSuffixForObject(bean, gen, typeStr);\n        }\n    }\n    \n    protected final String _customTypeId(Object bean) {\n        final Object typeId = _typeId.getValue(bean);\n        if (typeId == null) {\n            return \"\";\n        }\n        return (typeId instanceof String) ? (String) typeId : typeId.toString();\n    }\n    \n    \n\n    protected void serializeFields(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException {\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n        int i = 0;\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { \n                    prop.serializeAsField(bean, gen, provider);\n                }\n            }\n            if (_anyGetterWriter != null) {\n                _anyGetterWriter.getAndSerialize(bean, gen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) {\n            \n            \n            \n            JsonMappingException mapE = new JsonMappingException(gen, \"Infinite recursion (StackOverflowError)\", e);\n\n             String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }\n\n    \n    protected void serializeFieldsFiltered(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonGenerationException {\n        \n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n        final PropertyFilter filter = findPropertyFilter(provider, _propertyFilterId, bean);\n        \n        if (filter == null) {\n            serializeFields(bean, gen, provider);\n            return;\n        }\n        int i = 0;\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { \n                    filter.serializeAsField(bean, gen, provider, prop);\n                }\n            }\n            if (_anyGetterWriter != null) {\n                _anyGetterWriter.getAndFilter(bean, gen, provider, filter);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) {\n            \n            \n            JsonMappingException mapE = new JsonMappingException(gen, \"Infinite recursion (StackOverflowError)\", e);\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }\n\n    @Deprecated\n    @Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n        ObjectNode o = createSchemaNode(\"object\", true);\n        \n        \n        JsonSerializableSchema ann = _handledType.getAnnotation(JsonSerializableSchema.class);\n        if (ann != null) {\n            String id = ann.id();\n            if (id != null && id.length() > 0) {\n                o.put(\"id\", id);\n            }\n        }\n \n        \n        \n        ObjectNode propertiesNode = o.objectNode();\n        final PropertyFilter filter;\n        if (_propertyFilterId != null) {\n            filter = findPropertyFilter(provider, _propertyFilterId, null);\n        } else {\n            filter = null;\n        }\n        \t\t\n        for (int i = 0; i < _props.length; i++) {\n            BeanPropertyWriter prop = _props[i];\n            if (filter == null) {\n                prop.depositSchemaProperty(propertiesNode, provider);\n            } else {\n                filter.depositSchemaProperty(prop, propertiesNode, provider);\n            }\n\n        }\n        o.set(\"properties\", propertiesNode);\n        return o;\n    }\n    \n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        \n        if (visitor == null) {\n            return;\n        }\n        JsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n        if (objectVisitor == null) {\n            return;\n        }\n        final SerializerProvider provider = visitor.getProvider();\n        if (_propertyFilterId != null) {\n            PropertyFilter filter = findPropertyFilter(visitor.getProvider(),\n                    _propertyFilterId, null);\n            for (int i = 0, end = _props.length; i < end; ++i) {\n                filter.depositSchemaProperty(_props[i], objectVisitor, provider);\n            }\n        } else {\n            Class<?> view = ((_filteredProps == null) || (provider == null))\n                    ? null : provider.getActiveView();\n            final BeanPropertyWriter[] props;\n            if (view != null) {\n                props = _filteredProps;\n            } else {\n                props = _props;\n            }\n\n            for (int i = 0, end = props.length; i < end; ++i) {\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { \n                    prop.depositSchemaProperty(objectVisitor, provider);\n                }\n            }\n        }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.ser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.introspect.Annotated;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\nimport com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema;\nimport com.fasterxml.jackson.databind.jsonschema.SchemaAware;\nimport com.fasterxml.jackson.databind.jsontype.TypeSerializer;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.ser.*;\nimport com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\nimport com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;\nimport com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\nimport com.fasterxml.jackson.databind.util.ArrayBuilders;\nimport com.fasterxml.jackson.databind.util.Converter;\nimport com.fasterxml.jackson.databind.util.NameTransformer;\n\n\n@SuppressWarnings(\"serial\")\npublic abstract class BeanSerializerBase extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware { protected final static PropertyName NAME_FOR_OBJECT_REF = new PropertyName(\"#object-ref\"); final protected static BeanPropertyWriter[] NO_PROPS = new BeanPropertyWriter[0]; final protected BeanPropertyWriter[] _props; final protected BeanPropertyWriter[] _filteredProps; final protected AnyGetterWriter _anyGetterWriter; final protected Object _propertyFilterId; final protected AnnotatedMember _typeId; final protected ObjectIdWriter _objectIdWriter; final protected JsonFormat.Shape _serializationShape; protected BeanSerializerBase(JavaType type, BeanSerializerBuilder builder, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) {\n        super(type);\n        _props = properties;\n        _filteredProps = filteredProperties;\n        if (builder == null) { \n            _typeId = null;\n            _anyGetterWriter = null;\n            _propertyFilterId = null;\n            _objectIdWriter = null;\n            _serializationShape = null;\n        } else {\n            _typeId = builder.getTypeId();\n            _anyGetterWriter = builder.getAnyGetter();\n            _propertyFilterId = builder.getFilterId();\n            _objectIdWriter = builder.getObjectIdWriter();\n            JsonFormat.Value format = builder.getBeanDescription().findExpectedFormat(null);\n            _serializationShape = (format == null) ? null : format.getShape();\n        }\n    }\n\n    public BeanSerializerBase(BeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) {\n        super(src._handledType);\n        _props = properties;\n        _filteredProps = filteredProperties;\n\n        _typeId = src._typeId;\n        _anyGetterWriter = src._anyGetterWriter;\n        _objectIdWriter = src._objectIdWriter;\n        _propertyFilterId = src._propertyFilterId;\n        _serializationShape = src._serializationShape;\n    }\n\n    protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter) {\n        this(src, objectIdWriter, src._propertyFilterId);\n    }\n    \n    \n    protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId) {\n        super(src._handledType);\n        _props = src._props;\n        _filteredProps = src._filteredProps;\n        \n        _typeId = src._typeId;\n        _anyGetterWriter = src._anyGetterWriter;\n        _objectIdWriter = objectIdWriter;\n        _propertyFilterId = filterId;\n        _serializationShape = src._serializationShape;\n    }\n\n    protected BeanSerializerBase(BeanSerializerBase src, String[] toIgnore) {\n        super(src._handledType);\n\n        \n        HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(toIgnore);\n        final BeanPropertyWriter[] propsIn = src._props;\n        final BeanPropertyWriter[] fpropsIn = src._filteredProps;\n        final int len = propsIn.length;\n\n        ArrayList<BeanPropertyWriter> propsOut = new ArrayList<BeanPropertyWriter>(len);\n        ArrayList<BeanPropertyWriter> fpropsOut = (fpropsIn == null) ? null : new ArrayList<BeanPropertyWriter>(len);\n\n        for (int i = 0; i < len; ++i) {\n            BeanPropertyWriter bpw = propsIn[i];\n            \n            if (ignoredSet.contains(bpw.getName())) {\n                continue;\n            }\n            propsOut.add(bpw);\n            if (fpropsIn != null) {\n                fpropsOut.add(fpropsIn[i]);\n            }\n        }\n        _props = propsOut.toArray(new BeanPropertyWriter[propsOut.size()]);\n        _filteredProps = (fpropsOut == null) ? null : fpropsOut.toArray(new BeanPropertyWriter[fpropsOut.size()]);\n        \n        _typeId = src._typeId;\n        _anyGetterWriter = src._anyGetterWriter;\n        _objectIdWriter = src._objectIdWriter;\n        _propertyFilterId = src._propertyFilterId;\n        _serializationShape = src._serializationShape;\n    }\n    \n    \n    public abstract BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter); protected abstract BeanSerializerBase withIgnorals(String[] toIgnore); protected abstract BeanSerializerBase asArraySerializer(); @Override public abstract BeanSerializerBase withFilterId(Object filterId); protected BeanSerializerBase(BeanSerializerBase src) {\n        this(src, src._props, src._filteredProps);\n    }\n\n    \n    protected BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper) {\n        this(src, rename(src._props, unwrapper), rename(src._filteredProps, unwrapper));\n    }\n    \n    private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props, NameTransformer transformer) {\n        if (props == null || props.length == 0 || transformer == null || transformer == NameTransformer.NOP) {\n            return props;\n        }\n        final int len = props.length;\n        BeanPropertyWriter[] result = new BeanPropertyWriter[len];\n        for (int i = 0; i < len; ++i) {\n            BeanPropertyWriter bpw = props[i];\n            if (bpw != null) {\n                result[i] = bpw.rename(transformer);\n            }\n        }\n        return result;\n    }\n\n    \n\n    \n    @Override\n    public void resolve(SerializerProvider provider) throws JsonMappingException {\n        int filteredCount = (_filteredProps == null) ? 0 : _filteredProps.length;\n        for (int i = 0, len = _props.length; i < len; ++i) {\n            BeanPropertyWriter prop = _props[i];\n            \n            if (!prop.willSuppressNulls() && !prop.hasNullSerializer()) {\n                JsonSerializer<Object> nullSer = provider.findNullValueSerializer(prop);\n                if (nullSer != null) {\n                    prop.assignNullSerializer(nullSer);\n                    \n                    if (i < filteredCount) {\n                        BeanPropertyWriter w2 = _filteredProps[i];\n                        if (w2 != null) {\n                            w2.assignNullSerializer(nullSer);\n                        }\n                    }\n                }\n            }\n            \n            if (prop.hasSerializer()) {\n                continue;\n            }\n            \n            JsonSerializer<Object> ser = findConvertingSerializer(provider, prop);\n            if (ser == null) {\n                \n                JavaType type = prop.getSerializationType();\n                \n                \n                \n                if (type == null) {\n                    \n\n                    \n                    type = prop.getType();\n                    if (!type.isFinal()) {\n                        if (type.isContainerType() || type.containedTypeCount() > 0) {\n                            prop.setNonTrivialBaseType(type);\n                        }\n                        continue;\n                    }\n                }\n                ser = provider.findValueSerializer(type, prop);\n                \n                if (type.isContainerType()) {\n                    TypeSerializer typeSer = type.getContentType().getTypeHandler();\n                    if (typeSer != null) {\n                        \n                        if (ser instanceof ContainerSerializer<?>) {\n                            \n                            @SuppressWarnings(\"unchecked\")\n                            JsonSerializer<Object> ser2 = (JsonSerializer<Object>)((ContainerSerializer<?>) ser).withValueTypeSerializer(typeSer);\n                            ser = ser2;\n                        }\n                    }\n                }\n            }\n            prop.assignSerializer(ser);\n            \n            if (i < filteredCount) {\n                BeanPropertyWriter w2 = _filteredProps[i];\n                if (w2 != null) {\n                    w2.assignSerializer(ser);\n                }\n            }\n        }\n\n        \n        if (_anyGetterWriter != null) {\n            \n            _anyGetterWriter.resolve(provider);\n        }\n    }\n\n    \n    protected JsonSerializer<Object> findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n        final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n        if (intr != null) {\n            AnnotatedMember m = prop.getMember();\n            if (m != null) {\n                Object convDef = intr.findSerializationConverter(m);\n                if (convDef != null) {\n                    Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);\n                    JavaType delegateType = conv.getOutputType(provider.getTypeFactory());\n                    \n                    JsonSerializer<?> ser = delegateType.isJavaLangObject() ? null\n                            : provider.findValueSerializer(delegateType, prop);\n                    return new StdDelegatingSerializer(conv, delegateType, ser);\n                }\n            }\n        }\n        return null;\n    }\n\n    @SuppressWarnings(\"incomplete-switch\")\n    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n        final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n        final AnnotatedMember accessor = (property == null || intr == null)\n                ? null : property.getMember();\n        final SerializationConfig config = provider.getConfig();\n        \n        \n        \n        JsonFormat.Shape shape = null;\n        if (accessor != null) {\n            JsonFormat.Value format = intr.findFormat((Annotated) accessor);\n\n            if (format != null) {\n                shape = format.getShape();\n                \n                if (shape != _serializationShape) {\n                    if (_handledType.isEnum()) {\n                        switch (shape) {\n                        case STRING:\n                        case NUMBER:\n                        case NUMBER_INT:\n                            \n                            \n                            BeanDescription desc = config.introspectClassAnnotations(_handledType);\n                            JsonSerializer<?> ser = EnumSerializer.construct(_handledType,\n                                    provider.getConfig(), desc, format);\n                            return provider.handlePrimaryContextualization(ser, property);\n                        }\n                    }\n                }\n            }\n        }\n\n        ObjectIdWriter oiw = _objectIdWriter;\n        String[] ignorals = null;\n        Object newFilterId = null;\n        \n        \n        if (accessor != null) {\n            ignorals = intr.findPropertiesToIgnore(accessor, true);\n            ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n            if (objectIdInfo == null) {\n                \n                if (oiw != null) {\n                    objectIdInfo = intr.findObjectReferenceInfo(accessor, null);\n                    if (objectIdInfo != null) {\n                        oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n                    }\n                }\n            } else {\n                \n                \n                \n                \n                objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n                ObjectIdGenerator<?> gen;\n                Class<?> implClass = objectIdInfo.getGeneratorType();\n                JavaType type = provider.constructType(implClass);\n                JavaType idType = provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                \n                if (implClass == ObjectIdGenerators.PropertyGenerator.class) { \n                    String propName = objectIdInfo.getPropertyName().getSimpleName();\n                    BeanPropertyWriter idProp = null;\n\n                    for (int i = 0, len = _props.length ;; ++i) {\n                        if (i == len) {\n                            throw new IllegalArgumentException(\"Invalid Object Id definition for \"+_handledType.getName()\n                                    +\": can not find property with name '\"+propName+\"'\");\n                        }\n                        BeanPropertyWriter prop = _props[i];\n                        if (propName.equals(prop.getName())) {\n                            idProp = prop;\n                            \n                            if (i > 0) { \n                                System.arraycopy(_props, 0, _props, 1, i);\n                                _props[0] = idProp;\n                                if (_filteredProps != null) {\n                                    BeanPropertyWriter fp = _filteredProps[i];\n                                    System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                    _filteredProps[0] = fp;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    idType = idProp.getType();\n                    gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                    oiw = ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n                } else { \n                    gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                    oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n                            objectIdInfo.getAlwaysAsId());\n                }\n            }\n            \n            \n            Object filterId = intr.findFilterId(accessor);\n            if (filterId != null) {\n                \n                if (_propertyFilterId == null || !filterId.equals(_propertyFilterId)) {\n                    newFilterId = filterId;\n                }\n            }\n        }\n        \n        BeanSerializerBase contextual = this;\n        if (oiw != null) {\n            JsonSerializer<?> ser = provider.findValueSerializer(oiw.idType, property);\n            oiw = oiw.withSerializer(ser);\n            if (oiw != _objectIdWriter) {\n                contextual = contextual.withObjectIdWriter(oiw);\n            }\n        }\n        \n        if (ignorals != null && ignorals.length != 0) {\n            contextual = contextual.withIgnorals(ignorals);\n        }\n        if (newFilterId != null) {\n            contextual = contextual.withFilterId(newFilterId);\n        }\n        if (shape == null) {\n            shape = _serializationShape;\n        }\n        if (shape == JsonFormat.Shape.ARRAY) {\n            return contextual.asArraySerializer();\n        }\n        return contextual;\n    }\n\n    \n\n    @Override\n    public Iterator<PropertyWriter> properties() {\n        return Arrays.<PropertyWriter>asList(_props).iterator();\n    }\n\n    \n\n    @Override\n    public boolean usesObjectId() {\n        return (_objectIdWriter != null);\n    }\n    \n    \n    @Override\n    public abstract void serialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException; @Override public void serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n        if (_objectIdWriter != null) {\n            gen.setCurrentValue(bean); \n            _serializeWithObjectId(bean, gen, provider, typeSer);\n            return;\n        }\n\n        String typeStr = (_typeId == null) ? null : _customTypeId(bean);\n        if (typeStr == null) {\n            typeSer.writeTypePrefixForObject(bean, gen);\n        } else {\n            typeSer.writeCustomTypePrefixForObject(bean, gen, typeStr);\n        }\n        gen.setCurrentValue(bean); \n        if (_propertyFilterId != null) {\n            serializeFieldsFiltered(bean, gen, provider);\n        } else {\n            serializeFields(bean, gen, provider);\n        }\n        if (typeStr == null) {\n            typeSer.writeTypeSuffixForObject(bean, gen);\n        } else {\n            typeSer.writeCustomTypeSuffixForObject(bean, gen, typeStr);\n        }\n    }\n\n    protected final void _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, boolean startEndObject) throws IOException {\n        final ObjectIdWriter w = _objectIdWriter;\n        WritableObjectId objectId = provider.findObjectId(bean, w.generator);\n        \n        if (objectId.writeAsId(gen, provider, w)) {\n            return;\n        }\n        \n        Object id = objectId.generateId(bean);\n        if (w.alwaysAsId) {\n            w.serializer.serialize(id, gen, provider);\n            return;\n        }\n        if (startEndObject) {\n            gen.writeStartObject();\n        }\n        objectId.writeAsField(gen, provider, w);\n        if (_propertyFilterId != null) {\n            serializeFieldsFiltered(bean, gen, provider);\n        } else {\n            serializeFields(bean, gen, provider);\n        }\n        if (startEndObject) {\n            gen.writeEndObject();\n        }\n    }\n    \n    protected final void _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n        final ObjectIdWriter w = _objectIdWriter;\n        WritableObjectId objectId = provider.findObjectId(bean, w.generator);\n        \n        if (objectId.writeAsId(gen, provider, w)) {\n            return;\n        }\n        \n        Object id = objectId.generateId(bean);\n        if (w.alwaysAsId) {\n            w.serializer.serialize(id, gen, provider);\n            return;\n        }\n\n        _serializeObjectId(bean, gen, provider, typeSer, objectId);\n    }\n\n    protected void _serializeObjectId(Object bean, JsonGenerator gen,SerializerProvider provider, TypeSerializer typeSer, WritableObjectId objectId) throws IOException {\n        final ObjectIdWriter w = _objectIdWriter;\n        String typeStr = (_typeId == null) ? null :_customTypeId(bean);\n        if (typeStr == null) {\n            typeSer.writeTypePrefixForObject(bean, gen);\n        } else {\n            typeSer.writeCustomTypePrefixForObject(bean, gen, typeStr);\n        }\n        objectId.writeAsField(gen, provider, w);\n        if (_propertyFilterId != null) {\n            serializeFieldsFiltered(bean, gen, provider);\n        } else {\n            serializeFields(bean, gen, provider);\n        }\n        if (typeStr == null) {\n            typeSer.writeTypeSuffixForObject(bean, gen);\n        } else {\n            typeSer.writeCustomTypeSuffixForObject(bean, gen, typeStr);\n        }\n    }\n    \n    protected final String _customTypeId(Object bean) {\n        final Object typeId = _typeId.getValue(bean);\n        if (typeId == null) {\n            return \"\";\n        }\n        return (typeId instanceof String) ? (String) typeId : typeId.toString();\n    }\n    \n    \n\n    protected void serializeFields(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException {\n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n        int i = 0;\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { \n                    prop.serializeAsField(bean, gen, provider);\n                }\n            }\n            if (_anyGetterWriter != null) {\n                _anyGetterWriter.getAndSerialize(bean, gen, provider);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) {\n            \n            \n            \n            JsonMappingException mapE = new JsonMappingException(gen, \"Infinite recursion (StackOverflowError)\", e);\n\n             String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }\n\n    \n    protected void serializeFieldsFiltered(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonGenerationException {\n        \n        final BeanPropertyWriter[] props;\n        if (_filteredProps != null && provider.getActiveView() != null) {\n            props = _filteredProps;\n        } else {\n            props = _props;\n        }\n        final PropertyFilter filter = findPropertyFilter(provider, _propertyFilterId, bean);\n        \n        if (filter == null) {\n            serializeFields(bean, gen, provider);\n            return;\n        }\n        int i = 0;\n        try {\n            for (final int len = props.length; i < len; ++i) {\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { \n                    filter.serializeAsField(bean, gen, provider, prop);\n                }\n            }\n            if (_anyGetterWriter != null) {\n                _anyGetterWriter.getAndFilter(bean, gen, provider, filter);\n            }\n        } catch (Exception e) {\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            wrapAndThrow(provider, e, bean, name);\n        } catch (StackOverflowError e) {\n            \n            \n            JsonMappingException mapE = new JsonMappingException(gen, \"Infinite recursion (StackOverflowError)\", e);\n            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n            throw mapE;\n        }\n    }\n\n    @Deprecated\n    @Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n        ObjectNode o = createSchemaNode(\"object\", true);\n        \n        \n        JsonSerializableSchema ann = _handledType.getAnnotation(JsonSerializableSchema.class);\n        if (ann != null) {\n            String id = ann.id();\n            if (id != null && id.length() > 0) {\n                o.put(\"id\", id);\n            }\n        }\n \n        \n        \n        ObjectNode propertiesNode = o.objectNode();\n        final PropertyFilter filter;\n        if (_propertyFilterId != null) {\n            filter = findPropertyFilter(provider, _propertyFilterId, null);\n        } else {\n            filter = null;\n        }\n        \t\t\n        for (int i = 0; i < _props.length; i++) {\n            BeanPropertyWriter prop = _props[i];\n            if (filter == null) {\n                prop.depositSchemaProperty(propertiesNode, provider);\n            } else {\n                filter.depositSchemaProperty(prop, propertiesNode, provider);\n            }\n\n        }\n        o.set(\"properties\", propertiesNode);\n        return o;\n    }\n    \n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        \n        if (visitor == null) {\n            return;\n        }\n        JsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n        if (objectVisitor == null) {\n            return;\n        }\n        final SerializerProvider provider = visitor.getProvider();\n        if (_propertyFilterId != null) {\n            PropertyFilter filter = findPropertyFilter(visitor.getProvider(),\n                    _propertyFilterId, null);\n            for (int i = 0, end = _props.length; i < end; ++i) {\n                filter.depositSchemaProperty(_props[i], objectVisitor, provider);\n            }\n        } else {\n            Class<?> view = ((_filteredProps == null) || (provider == null))\n                    ? null : provider.getActiveView();\n            final BeanPropertyWriter[] props;\n            if (view != null) {\n                props = _filteredProps;\n            } else {\n                props = _props;\n            }\n\n            for (int i = 0, end = props.length; i < end; ++i) {\n                BeanPropertyWriter prop = props[i];\n                if (prop != null) { \n                    prop.depositSchemaProperty(objectVisitor, provider);\n                }\n            }\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public BeanSerializerBase(BeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)",
        "protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter)",
        "protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId)",
        "protected BeanSerializerBase(BeanSerializerBase src, String[] toIgnore)",
        "public abstract BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter); protected abstract BeanSerializerBase withIgnorals(String[] toIgnore); protected abstract BeanSerializerBase asArraySerializer(); @Override public abstract BeanSerializerBase withFilterId(Object filterId); protected BeanSerializerBase(BeanSerializerBase src)",
        "protected BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper)",
        "private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props, NameTransformer transformer)",
        "public void resolve(SerializerProvider provider) throws JsonMappingException",
        "protected JsonSerializer<Object> findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException",
        "public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException",
        "public Iterator<PropertyWriter> properties()",
        "public boolean usesObjectId()",
        "public abstract void serialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException; @Override public void serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException",
        "protected final void _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, boolean startEndObject) throws IOException",
        "protected final void _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException",
        "protected void _serializeObjectId(Object bean, JsonGenerator gen,SerializerProvider provider, TypeSerializer typeSer, WritableObjectId objectId) throws IOException",
        "protected final String _customTypeId(Object bean)",
        "protected void serializeFields(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException",
        "protected void serializeFieldsFiltered(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonGenerationException",
        "public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException",
        "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException"
      ],
      "fixed_signatures": [
        "public BeanSerializerBase(BeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)",
        "protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter)",
        "protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId)",
        "protected BeanSerializerBase(BeanSerializerBase src, String[] toIgnore)",
        "public abstract BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter); protected abstract BeanSerializerBase withIgnorals(String[] toIgnore); protected abstract BeanSerializerBase asArraySerializer(); @Override public abstract BeanSerializerBase withFilterId(Object filterId); protected BeanSerializerBase(BeanSerializerBase src)",
        "protected BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper)",
        "private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props, NameTransformer transformer)",
        "public void resolve(SerializerProvider provider) throws JsonMappingException",
        "protected JsonSerializer<Object> findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException",
        "public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException",
        "public Iterator<PropertyWriter> properties()",
        "public boolean usesObjectId()",
        "public abstract void serialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException; @Override public void serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException",
        "protected final void _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, boolean startEndObject) throws IOException",
        "protected final void _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException",
        "protected void _serializeObjectId(Object bean, JsonGenerator gen,SerializerProvider provider, TypeSerializer typeSer, WritableObjectId objectId) throws IOException",
        "protected final String _customTypeId(Object bean)",
        "protected void serializeFields(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException",
        "protected void serializeFieldsFiltered(Object bean, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonGenerationException",
        "public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException",
        "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException"
      ],
      "methods": [
        {
          "buggy_method": "  public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n  final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n  final AnnotatedMember accessor = (property == null || intr == null)\n  ? null : property.getMember();\n  final SerializationConfig config = provider.getConfig();\n  \n  \n  \n  JsonFormat.Shape shape = null;\n  if (accessor != null) {\n  JsonFormat.Value format = intr.findFormat((Annotated) accessor);\n\n  if (format != null) {\n  shape = format.getShape();\n  \n  if (shape != _serializationShape) {\n  if (_handledType.isEnum()) {\n  switch (shape) {\n  case STRING:\n  case NUMBER:\n  case NUMBER_INT:\n  \n  \n  BeanDescription desc = config.introspectClassAnnotations(_handledType);\n  JsonSerializer<?> ser = EnumSerializer.construct(_handledType,\n  provider.getConfig(), desc, format);\n  return provider.handlePrimaryContextualization(ser, property);\n  }\n  }\n  }\n  }\n  }\n\n  ObjectIdWriter oiw = _objectIdWriter;\n  String[] ignorals = null;\n  Object newFilterId = null;\n  \n  \n  if (accessor != null) {\n  ignorals = intr.findPropertiesToIgnore(accessor, true);\n  ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n  if (objectIdInfo == null) {\n  \n  if (oiw != null) {\n  objectIdInfo = intr.findObjectReferenceInfo(accessor,\n  new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n  oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n  }\n  } else {\n  \n  \n  \n  \n  objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n  ObjectIdGenerator<?> gen;\n  Class<?> implClass = objectIdInfo.getGeneratorType();\n  JavaType type = provider.constructType(implClass);\n  JavaType idType = provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n  \n  if (implClass == ObjectIdGenerators.PropertyGenerator.class) { \n  String propName = objectIdInfo.getPropertyName().getSimpleName();\n  BeanPropertyWriter idProp = null;\n\n  for (int i = 0, len = _props.length ;; ++i) {\n  if (i == len) {\n  throw new IllegalArgumentException(\"Invalid Object Id definition for \"+_handledType.getName()\n  +\": can not find property with name '\"+propName+\"'\");\n  }\n  BeanPropertyWriter prop = _props[i];\n  if (propName.equals(prop.getName())) {\n  idProp = prop;\n  \n  if (i > 0) { \n  System.arraycopy(_props, 0, _props, 1, i);\n  _props[0] = idProp;\n  if (_filteredProps != null) {\n  BeanPropertyWriter fp = _filteredProps[i];\n  System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n  _filteredProps[0] = fp;\n  }\n  }\n  break;\n  }\n  }\n  idType = idProp.getType();\n  gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n  oiw = ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n  } else { \n  gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n  oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n  objectIdInfo.getAlwaysAsId());\n  }\n  }\n  \n  \n  Object filterId = intr.findFilterId(accessor);\n  if (filterId != null) {\n  \n  if (_propertyFilterId == null || !filterId.equals(_propertyFilterId)) {\n  newFilterId = filterId;\n  }\n  }\n  }\n  \n  BeanSerializerBase contextual = this;\n  if (oiw != null) {\n  JsonSerializer<?> ser = provider.findValueSerializer(oiw.idType, property);\n  oiw = oiw.withSerializer(ser);\n  if (oiw != _objectIdWriter) {\n  contextual = contextual.withObjectIdWriter(oiw);\n  }\n  }\n  \n  if (ignorals != null && ignorals.length != 0) {\n  contextual = contextual.withIgnorals(ignorals);\n  }\n  if (newFilterId != null) {\n  contextual = contextual.withFilterId(newFilterId);\n  }\n  if (shape == null) {\n  shape = _serializationShape;\n  }\n  if (shape == JsonFormat.Shape.ARRAY) {\n  return contextual.asArraySerializer();\n  }\n  return contextual;\n  }",
          "fixed_method": "  public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n  final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n  final AnnotatedMember accessor = (property == null || intr == null)\n  ? null : property.getMember();\n  final SerializationConfig config = provider.getConfig();\n  \n  \n  \n  JsonFormat.Shape shape = null;\n  if (accessor != null) {\n  JsonFormat.Value format = intr.findFormat((Annotated) accessor);\n\n  if (format != null) {\n  shape = format.getShape();\n  \n  if (shape != _serializationShape) {\n  if (_handledType.isEnum()) {\n  switch (shape) {\n  case STRING:\n  case NUMBER:\n  case NUMBER_INT:\n  \n  \n  BeanDescription desc = config.introspectClassAnnotations(_handledType);\n  JsonSerializer<?> ser = EnumSerializer.construct(_handledType,\n  provider.getConfig(), desc, format);\n  return provider.handlePrimaryContextualization(ser, property);\n  }\n  }\n  }\n  }\n  }\n\n  ObjectIdWriter oiw = _objectIdWriter;\n  String[] ignorals = null;\n  Object newFilterId = null;\n  \n  \n  if (accessor != null) {\n  ignorals = intr.findPropertiesToIgnore(accessor, true);\n  ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n  if (objectIdInfo == null) {\n  \n  if (oiw != null) {\n  objectIdInfo = intr.findObjectReferenceInfo(accessor, null);\n  if (objectIdInfo != null) {\n  oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n  }\n  }\n  } else {\n  \n  \n  \n  \n  objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n  ObjectIdGenerator<?> gen;\n  Class<?> implClass = objectIdInfo.getGeneratorType();\n  JavaType type = provider.constructType(implClass);\n  JavaType idType = provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n  \n  if (implClass == ObjectIdGenerators.PropertyGenerator.class) { \n  String propName = objectIdInfo.getPropertyName().getSimpleName();\n  BeanPropertyWriter idProp = null;\n\n  for (int i = 0, len = _props.length ;; ++i) {\n  if (i == len) {\n  throw new IllegalArgumentException(\"Invalid Object Id definition for \"+_handledType.getName()\n  +\": can not find property with name '\"+propName+\"'\");\n  }\n  BeanPropertyWriter prop = _props[i];\n  if (propName.equals(prop.getName())) {\n  idProp = prop;\n  \n  if (i > 0) { \n  System.arraycopy(_props, 0, _props, 1, i);\n  _props[0] = idProp;\n  if (_filteredProps != null) {\n  BeanPropertyWriter fp = _filteredProps[i];\n  System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n  _filteredProps[0] = fp;\n  }\n  }\n  break;\n  }\n  }\n  idType = idProp.getType();\n  gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n  oiw = ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n  } else { \n  gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n  oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n  objectIdInfo.getAlwaysAsId());\n  }\n  }\n  \n  \n  Object filterId = intr.findFilterId(accessor);\n  if (filterId != null) {\n  \n  if (_propertyFilterId == null || !filterId.equals(_propertyFilterId)) {\n  newFilterId = filterId;\n  }\n  }\n  }\n  \n  BeanSerializerBase contextual = this;\n  if (oiw != null) {\n  JsonSerializer<?> ser = provider.findValueSerializer(oiw.idType, property);\n  oiw = oiw.withSerializer(ser);\n  if (oiw != _objectIdWriter) {\n  contextual = contextual.withObjectIdWriter(oiw);\n  }\n  }\n  \n  if (ignorals != null && ignorals.length != 0) {\n  contextual = contextual.withIgnorals(ignorals);\n  }\n  if (newFilterId != null) {\n  contextual = contextual.withFilterId(newFilterId);\n  }\n  if (shape == null) {\n  shape = _serializationShape;\n  }\n  if (shape == JsonFormat.Shape.ARRAY) {\n  return contextual.asArraySerializer();\n  }\n  return contextual;\n  }",
          "diff": [
            "@@ -429,9 +429,10 @@",
            "             if (objectIdInfo == null) {\n",
            "                 // no ObjectId override, but maybe ObjectIdRef?\n",
            "                 if (oiw != null) {\n",
            "-                    objectIdInfo = intr.findObjectReferenceInfo(accessor,\n",
            "-                            new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n",
            "+                    objectIdInfo = intr.findObjectReferenceInfo(accessor, null);\n",
            "+                    if (objectIdInfo != null) {\n",
            "                         oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n",
            "+                    }\n",
            "                 }\n",
            "             } else {\n",
            "                 // Ugh: mostly copied from BeanDeserializerBase: but can't easily change it\n"
          ],
          "changed_lines": 5
        }
      ]
    }
  ]
}
