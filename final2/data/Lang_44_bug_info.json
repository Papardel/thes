{
  "bug_id": "44",
  "failed_tests": {
    "org.apache.commons.lang.NumberUtilsTest": [
      {
        "methodName": "testLang457",
        "error": "java.lang.StringIndexOutOfBoundsException",
        "message": "String index out of range: 0",
        "fail_line": "                NumberUtils.createNumber(badInputs[i]);",
        "test_source": "  public void testLang457() {\n  String[] badInputs = new String[] { \"l\", \"L\", \"f\", \"F\", \"junk\", \"bobL\"};\n  for(int i=0; i<badInputs.length; i++) {\n  try {\n  NumberUtils.createNumber(badInputs[i]);\n  fail(\"NumberFormatException was expected for \" + badInputs[i]);\n  } catch (NumberFormatException e) {\n  return; // expected\n  }\n  }\n  }",
        "stack": [
          "NumberUtils.createNumber line 195, NumberUtilsTest.testLang457 line 528"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/lang/NumberUtils.java",
      "buggy_full_code": "\npackage org.apache.commons.lang;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\n\npublic final class NumberUtils { public NumberUtils() {\n      super();\n    }\n\n    \n    \n    \n    public static int stringToInt(String str) {\n        return stringToInt(str, 0);\n    }\n\n    \n    public static int stringToInt(String str, int defaultValue) {\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException nfe) {\n            return defaultValue;\n        }\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n    public static Number createNumber(String val) throws NumberFormatException {\n        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.startsWith(\"--\")) {\n            \n            \n            \n            \n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }   \n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = val.indexOf('.');\n        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                dec = val.substring(decPos + 1, expPos);\n            } else {\n                dec = val.substring(decPos + 1);\n            }\n            mant = val.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                mant = val.substring(0, expPos);\n            } else {\n                mant = val;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar)) {\n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length() - 1);\n            } else {\n                exp = null;\n            }\n            \n            String numeric = val.substring(0, val.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            \n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            \n                            \n                            return f;\n                        }\n\n                    } catch (NumberFormatException e) {\n                        \n                    }\n                    \n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        \n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        \n                    }\n                    \n                default :\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n\n            }\n        } else {\n            \n            \n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                \n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException nfe) {\n                    \n                }\n                try {\n                    return createLong(val);\n                } catch (NumberFormatException nfe) {\n                    \n                }\n                return createBigInteger(val);\n\n            } else {\n                \n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(val);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    \n                }\n                try {\n                    Double d = createDouble(val);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    \n                }\n\n                return createBigDecimal(val);\n\n            }\n\n        }\n    }\n\n    \n    private static boolean isAllZeros(String s) {\n        if (s == null) {\n            return true;\n        }\n        for (int i = s.length() - 1; i >= 0; i--) {\n            if (s.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return s.length() > 0;\n    }\n\n    \n    \n    \n    public static Float createFloat(String val) {\n        return Float.valueOf(val);\n    }\n\n    \n    public static Double createDouble(String val) {\n        return Double.valueOf(val);\n    }\n\n    \n    public static Integer createInteger(String val) {\n        \n        return Integer.decode(val);\n    }\n\n    \n    public static Long createLong(String val) {\n        return Long.valueOf(val);\n    }\n\n    \n    public static BigInteger createBigInteger(String val) {\n        BigInteger bi = new BigInteger(val);\n        return bi;\n    }\n\n    \n    public static BigDecimal createBigDecimal(String val) {\n        BigDecimal bd = new BigDecimal(val);\n        return bd;\n    }\n\n    \n    \n    \n    public static long minimum(long a, long b, long c) {\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }\n\n    \n    public static int minimum(int a, int b, int c) {\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }\n\n    \n    public static long maximum(long a, long b, long c) {\n        if (b > a) {\n            a = b;\n        }\n        if (c > a) {\n            a = c;\n        }\n        return a;\n    }\n\n    \n    public static int maximum(int a, int b, int c) {\n        if (b > a) {\n            a = b;\n        }\n        if (c > a) {\n            a = c;\n        }\n        return a;\n    }\n\n    \n    \n    \n    public static int compare(double lhs, double rhs) {\n        if (lhs < rhs) {\n            return -1;\n        }\n        if (lhs > rhs) {\n            return +1;\n        }\n        \n        \n        \n        \n        long lhsBits = Double.doubleToLongBits(lhs);\n        long rhsBits = Double.doubleToLongBits(rhs);\n        if (lhsBits == rhsBits) {\n            return 0;\n        }\n        \n        \n        \n        \n        \n        \n        if (lhsBits < rhsBits) {\n            return -1;\n        } else {\n            return +1;\n        }\n    }\n    \n    \n    public static int compare(float lhs, float rhs) {\n        if (lhs < rhs) {\n            return -1;\n        }\n        if (lhs > rhs) {\n            return +1;\n        }\n        \n        \n        \n        \n        int lhsBits = Float.floatToIntBits(lhs);\n        int rhsBits = Float.floatToIntBits(rhs);\n        if (lhsBits == rhsBits) {\n            return 0;\n        }\n        \n        \n        \n        \n        \n        \n        if (lhsBits < rhsBits) {\n            return -1;\n        } else {\n            return +1;\n        }\n    }\n    \n    \n    \n    \n    public static boolean isDigits(String str) {\n        if ((str == null) || (str.length() == 0)) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n    public static boolean isNumber(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        int sz = chars.length;\n        boolean hasExp = false;\n        boolean hasDecPoint = false;\n        boolean allowSigns = false;\n        boolean foundDigit = false;\n        \n        int start = (chars[0] == '-') ? 1 : 0;\n        if (sz > start + 1) {\n            if (chars[start] == '0' && chars[start + 1] == 'x') {\n                int i = start + 2;\n                if (i == sz) {\n                    return false; \n                }\n                \n                for (; i < chars.length; i++) {\n                    if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F')) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        sz--; \n              \n        int i = start;\n        \n        \n        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                foundDigit = true;\n                allowSigns = false;\n\n            } else if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                    \n                    return false;\n                }\n                hasDecPoint = true;\n            } else if (chars[i] == 'e' || chars[i] == 'E') {\n                \n                if (hasExp) {\n                    \n                    return false;\n                }\n                if (!foundDigit) {\n                    return false;\n                }\n                hasExp = true;\n                allowSigns = true;\n            } else if (chars[i] == '+' || chars[i] == '-') {\n                if (!allowSigns) {\n                    return false;\n                }\n                allowSigns = false;\n                foundDigit = false; \n            } else {\n                return false;\n            }\n            i++;\n        }\n        if (i < chars.length) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                \n                return true;\n            }\n            if (chars[i] == 'e' || chars[i] == 'E') {\n                \n                return false;\n            }\n            if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F')) {\n                return foundDigit;\n            }\n            if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                \n                return foundDigit && !hasExp;\n            }\n            \n            return false;\n        }\n        \n        \n        return !allowSigns && foundDigit;\n    }\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.lang;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\n\npublic final class NumberUtils { public NumberUtils() {\n      super();\n    }\n\n    \n    \n    \n    public static int stringToInt(String str) {\n        return stringToInt(str, 0);\n    }\n\n    \n    public static int stringToInt(String str, int defaultValue) {\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException nfe) {\n            return defaultValue;\n        }\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n    public static Number createNumber(String val) throws NumberFormatException {\n        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        if (val.startsWith(\"--\")) {\n            \n            \n            \n            \n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }   \n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = val.indexOf('.');\n        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                dec = val.substring(decPos + 1, expPos);\n            } else {\n                dec = val.substring(decPos + 1);\n            }\n            mant = val.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                mant = val.substring(0, expPos);\n            } else {\n                mant = val;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar)) {\n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length() - 1);\n            } else {\n                exp = null;\n            }\n            \n            String numeric = val.substring(0, val.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            \n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            \n                            \n                            return f;\n                        }\n\n                    } catch (NumberFormatException e) {\n                        \n                    }\n                    \n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        \n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        \n                    }\n                    \n                default :\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n\n            }\n        } else {\n            \n            \n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                \n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException nfe) {\n                    \n                }\n                try {\n                    return createLong(val);\n                } catch (NumberFormatException nfe) {\n                    \n                }\n                return createBigInteger(val);\n\n            } else {\n                \n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(val);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    \n                }\n                try {\n                    Double d = createDouble(val);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    \n                }\n\n                return createBigDecimal(val);\n\n            }\n\n        }\n    }\n\n    \n    private static boolean isAllZeros(String s) {\n        if (s == null) {\n            return true;\n        }\n        for (int i = s.length() - 1; i >= 0; i--) {\n            if (s.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return s.length() > 0;\n    }\n\n    \n    \n    \n    public static Float createFloat(String val) {\n        return Float.valueOf(val);\n    }\n\n    \n    public static Double createDouble(String val) {\n        return Double.valueOf(val);\n    }\n\n    \n    public static Integer createInteger(String val) {\n        \n        return Integer.decode(val);\n    }\n\n    \n    public static Long createLong(String val) {\n        return Long.valueOf(val);\n    }\n\n    \n    public static BigInteger createBigInteger(String val) {\n        BigInteger bi = new BigInteger(val);\n        return bi;\n    }\n\n    \n    public static BigDecimal createBigDecimal(String val) {\n        BigDecimal bd = new BigDecimal(val);\n        return bd;\n    }\n\n    \n    \n    \n    public static long minimum(long a, long b, long c) {\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }\n\n    \n    public static int minimum(int a, int b, int c) {\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }\n\n    \n    public static long maximum(long a, long b, long c) {\n        if (b > a) {\n            a = b;\n        }\n        if (c > a) {\n            a = c;\n        }\n        return a;\n    }\n\n    \n    public static int maximum(int a, int b, int c) {\n        if (b > a) {\n            a = b;\n        }\n        if (c > a) {\n            a = c;\n        }\n        return a;\n    }\n\n    \n    \n    \n    public static int compare(double lhs, double rhs) {\n        if (lhs < rhs) {\n            return -1;\n        }\n        if (lhs > rhs) {\n            return +1;\n        }\n        \n        \n        \n        \n        long lhsBits = Double.doubleToLongBits(lhs);\n        long rhsBits = Double.doubleToLongBits(rhs);\n        if (lhsBits == rhsBits) {\n            return 0;\n        }\n        \n        \n        \n        \n        \n        \n        if (lhsBits < rhsBits) {\n            return -1;\n        } else {\n            return +1;\n        }\n    }\n    \n    \n    public static int compare(float lhs, float rhs) {\n        if (lhs < rhs) {\n            return -1;\n        }\n        if (lhs > rhs) {\n            return +1;\n        }\n        \n        \n        \n        \n        int lhsBits = Float.floatToIntBits(lhs);\n        int rhsBits = Float.floatToIntBits(rhs);\n        if (lhsBits == rhsBits) {\n            return 0;\n        }\n        \n        \n        \n        \n        \n        \n        if (lhsBits < rhsBits) {\n            return -1;\n        } else {\n            return +1;\n        }\n    }\n    \n    \n    \n    \n    public static boolean isDigits(String str) {\n        if ((str == null) || (str.length() == 0)) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n    public static boolean isNumber(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        int sz = chars.length;\n        boolean hasExp = false;\n        boolean hasDecPoint = false;\n        boolean allowSigns = false;\n        boolean foundDigit = false;\n        \n        int start = (chars[0] == '-') ? 1 : 0;\n        if (sz > start + 1) {\n            if (chars[start] == '0' && chars[start + 1] == 'x') {\n                int i = start + 2;\n                if (i == sz) {\n                    return false; \n                }\n                \n                for (; i < chars.length; i++) {\n                    if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F')) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        sz--; \n              \n        int i = start;\n        \n        \n        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                foundDigit = true;\n                allowSigns = false;\n\n            } else if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                    \n                    return false;\n                }\n                hasDecPoint = true;\n            } else if (chars[i] == 'e' || chars[i] == 'E') {\n                \n                if (hasExp) {\n                    \n                    return false;\n                }\n                if (!foundDigit) {\n                    return false;\n                }\n                hasExp = true;\n                allowSigns = true;\n            } else if (chars[i] == '+' || chars[i] == '-') {\n                if (!allowSigns) {\n                    return false;\n                }\n                allowSigns = false;\n                foundDigit = false; \n            } else {\n                return false;\n            }\n            i++;\n        }\n        if (i < chars.length) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                \n                return true;\n            }\n            if (chars[i] == 'e' || chars[i] == 'E') {\n                \n                return false;\n            }\n            if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F')) {\n                return foundDigit;\n            }\n            if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                \n                return foundDigit && !hasExp;\n            }\n            \n            return false;\n        }\n        \n        \n        return !allowSigns && foundDigit;\n    }\n}\n",
      "buggy_signatures": [
        "public final class NumberUtils { public NumberUtils()",
        "public static int stringToInt(String str)",
        "public static int stringToInt(String str, int defaultValue)",
        "public static Number createNumber(String val) throws NumberFormatException",
        "private static boolean isAllZeros(String s)",
        "public static Float createFloat(String val)",
        "public static Double createDouble(String val)",
        "public static Integer createInteger(String val)",
        "public static Long createLong(String val)",
        "public static BigInteger createBigInteger(String val)",
        "public static BigDecimal createBigDecimal(String val)",
        "public static long minimum(long a, long b, long c)",
        "public static int minimum(int a, int b, int c)",
        "public static long maximum(long a, long b, long c)",
        "public static int maximum(int a, int b, int c)",
        "public static int compare(double lhs, double rhs)",
        "public static int compare(float lhs, float rhs)",
        "public static boolean isDigits(String str)",
        "public static boolean isNumber(String str)"
      ],
      "fixed_signatures": [
        "public final class NumberUtils { public NumberUtils()",
        "public static int stringToInt(String str)",
        "public static int stringToInt(String str, int defaultValue)",
        "public static Number createNumber(String val) throws NumberFormatException",
        "private static boolean isAllZeros(String s)",
        "public static Float createFloat(String val)",
        "public static Double createDouble(String val)",
        "public static Integer createInteger(String val)",
        "public static Long createLong(String val)",
        "public static BigInteger createBigInteger(String val)",
        "public static BigDecimal createBigDecimal(String val)",
        "public static long minimum(long a, long b, long c)",
        "public static int minimum(int a, int b, int c)",
        "public static long maximum(long a, long b, long c)",
        "public static int maximum(int a, int b, int c)",
        "public static int compare(double lhs, double rhs)",
        "public static int compare(float lhs, float rhs)",
        "public static boolean isDigits(String str)",
        "public static boolean isNumber(String str)"
      ],
      "methods": [
        {
          "buggy_method": "  public static Number createNumber(String val) throws NumberFormatException {\n  if (val == null) {\n  return null;\n  }\n  if (val.length() == 0) {\n  throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n  }\n  if (val.startsWith(\"--\")) {\n  \n  \n  \n  \n  return null;\n  }\n  if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n  return createInteger(val);\n  }  \n  char lastChar = val.charAt(val.length() - 1);\n  String mant;\n  String dec;\n  String exp;\n  int decPos = val.indexOf('.');\n  int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n  if (decPos > -1) {\n\n  if (expPos > -1) {\n  if (expPos < decPos) {\n  throw new NumberFormatException(val + \" is not a valid number.\");\n  }\n  dec = val.substring(decPos + 1, expPos);\n  } else {\n  dec = val.substring(decPos + 1);\n  }\n  mant = val.substring(0, decPos);\n  } else {\n  if (expPos > -1) {\n  mant = val.substring(0, expPos);\n  } else {\n  mant = val;\n  }\n  dec = null;\n  }\n  if (!Character.isDigit(lastChar)) {\n  if (expPos > -1 && expPos < val.length() - 1) {\n  exp = val.substring(expPos + 1, val.length() - 1);\n  } else {\n  exp = null;\n  }\n  \n  String numeric = val.substring(0, val.length() - 1);\n  boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n  switch (lastChar) {\n  case 'l' :\n  case 'L' :\n  if (dec == null\n  && exp == null\n  && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n  try {\n  return createLong(numeric);\n  } catch (NumberFormatException nfe) {\n  \n  }\n  return createBigInteger(numeric);\n\n  }\n  throw new NumberFormatException(val + \" is not a valid number.\");\n  case 'f' :\n  case 'F' :\n  try {\n  Float f = NumberUtils.createFloat(numeric);\n  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  \n  \n  return f;\n  }\n\n  } catch (NumberFormatException e) {\n  \n  }\n  \n  case 'd' :\n  case 'D' :\n  try {\n  Double d = NumberUtils.createDouble(numeric);\n  if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n  }\n  } catch (NumberFormatException nfe) {\n  \n  }\n  try {\n  return createBigDecimal(numeric);\n  } catch (NumberFormatException e) {\n  \n  }\n  \n  default :\n  throw new NumberFormatException(val + \" is not a valid number.\");\n\n  }\n  } else {\n  \n  \n  if (expPos > -1 && expPos < val.length() - 1) {\n  exp = val.substring(expPos + 1, val.length());\n  } else {\n  exp = null;\n  }\n  if (dec == null && exp == null) {\n  \n  try {\n  return createInteger(val);\n  } catch (NumberFormatException nfe) {\n  \n  }\n  try {\n  return createLong(val);\n  } catch (NumberFormatException nfe) {\n  \n  }\n  return createBigInteger(val);\n\n  } else {\n  \n  boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n  try {\n  Float f = createFloat(val);\n  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n  }\n  } catch (NumberFormatException nfe) {\n  \n  }\n  try {\n  Double d = createDouble(val);\n  if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n  }\n  } catch (NumberFormatException nfe) {\n  \n  }\n\n  return createBigDecimal(val);\n\n  }\n\n  }\n  }",
          "fixed_method": "  public static Number createNumber(String val) throws NumberFormatException {\n  if (val == null) {\n  return null;\n  }\n  if (val.length() == 0) {\n  throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n  }\n  if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {\n  throw new NumberFormatException(val + \" is not a valid number.\");\n  }\n  if (val.startsWith(\"--\")) {\n  \n  \n  \n  \n  return null;\n  }\n  if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n  return createInteger(val);\n  }  \n  char lastChar = val.charAt(val.length() - 1);\n  String mant;\n  String dec;\n  String exp;\n  int decPos = val.indexOf('.');\n  int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n  if (decPos > -1) {\n\n  if (expPos > -1) {\n  if (expPos < decPos) {\n  throw new NumberFormatException(val + \" is not a valid number.\");\n  }\n  dec = val.substring(decPos + 1, expPos);\n  } else {\n  dec = val.substring(decPos + 1);\n  }\n  mant = val.substring(0, decPos);\n  } else {\n  if (expPos > -1) {\n  mant = val.substring(0, expPos);\n  } else {\n  mant = val;\n  }\n  dec = null;\n  }\n  if (!Character.isDigit(lastChar)) {\n  if (expPos > -1 && expPos < val.length() - 1) {\n  exp = val.substring(expPos + 1, val.length() - 1);\n  } else {\n  exp = null;\n  }\n  \n  String numeric = val.substring(0, val.length() - 1);\n  boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n  switch (lastChar) {\n  case 'l' :\n  case 'L' :\n  if (dec == null\n  && exp == null\n  && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n  try {\n  return createLong(numeric);\n  } catch (NumberFormatException nfe) {\n  \n  }\n  return createBigInteger(numeric);\n\n  }\n  throw new NumberFormatException(val + \" is not a valid number.\");\n  case 'f' :\n  case 'F' :\n  try {\n  Float f = NumberUtils.createFloat(numeric);\n  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  \n  \n  return f;\n  }\n\n  } catch (NumberFormatException e) {\n  \n  }\n  \n  case 'd' :\n  case 'D' :\n  try {\n  Double d = NumberUtils.createDouble(numeric);\n  if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n  return d;\n  }\n  } catch (NumberFormatException nfe) {\n  \n  }\n  try {\n  return createBigDecimal(numeric);\n  } catch (NumberFormatException e) {\n  \n  }\n  \n  default :\n  throw new NumberFormatException(val + \" is not a valid number.\");\n\n  }\n  } else {\n  \n  \n  if (expPos > -1 && expPos < val.length() - 1) {\n  exp = val.substring(expPos + 1, val.length());\n  } else {\n  exp = null;\n  }\n  if (dec == null && exp == null) {\n  \n  try {\n  return createInteger(val);\n  } catch (NumberFormatException nfe) {\n  \n  }\n  try {\n  return createLong(val);\n  } catch (NumberFormatException nfe) {\n  \n  }\n  return createBigInteger(val);\n\n  } else {\n  \n  boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n  try {\n  Float f = createFloat(val);\n  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n  return f;\n  }\n  } catch (NumberFormatException nfe) {\n  \n  }\n  try {\n  Double d = createDouble(val);\n  if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n  return d;\n  }\n  } catch (NumberFormatException nfe) {\n  \n  }\n\n  return createBigDecimal(val);\n\n  }\n\n  }\n  }",
          "diff": [
            "@@ -142,6 +142,9 @@",
            "         if (val.length() == 0) {\n",
            "             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n",
            "         }\n",
            "+        if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {\n",
            "+            throw new NumberFormatException(val + \" is not a valid number.\");\n",
            "+        }\n",
            "         if (val.startsWith(\"--\")) {\n",
            "             // this is protection for poorness in java.lang.BigDecimal.\n",
            "             // it accepts this as a legal value, but it does not appear \n"
          ],
          "changed_lines": 3
        }
      ]
    }
  ]
}
