{
  "bug_id": "102",
  "failed_tests": {
    "org.apache.commons.math.stat.inference.ChiSquareFactoryTest": [
      {
        "methodName": "testChiSquareLargeTestStatistic",
        "error": "junit.framework.AssertionFailedError",
        "message": "chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>",
        "fail_line": "",
        "test_source": "",
        "stack": [
          "ChiSquareTestTest.testChiSquareLargeTestStatistic line 183"
        ]
      },
      {
        "methodName": "testChiSquare",
        "error": "junit.framework.AssertionFailedError",
        "message": "chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>",
        "fail_line": "",
        "test_source": "",
        "stack": [
          "ChiSquareTestTest.testChiSquare line 60"
        ]
      }
    ],
    "org.apache.commons.math.stat.inference.ChiSquareTestTest": [
      {
        "methodName": "testChiSquareLargeTestStatistic",
        "error": "junit.framework.AssertionFailedError",
        "message": "chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>",
        "fail_line": "        assertEquals( \"chi-square test statistic\", ",
        "test_source": "  public void testChiSquareLargeTestStatistic() throws Exception {\n  double[] exp = new double[] {\n  3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n  232921.0, 437665.75\n  };\n\n  long[] obs = new long[] {\n  2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n  };\n  org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n  new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n  double cst = csti.chiSquareTest(exp, obs); \n  assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n  assertEquals( \"chi-square test statistic\", \n  114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);\n  }",
        "stack": [
          "ChiSquareTestTest.testChiSquareLargeTestStatistic line 183"
        ]
      },
      {
        "methodName": "testChiSquare",
        "error": "junit.framework.AssertionFailedError",
        "message": "chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>",
        "fail_line": "        assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);",
        "test_source": "  public void testChiSquare() throws Exception {\n \n  // Target values computed using R version 1.8.1 \n  // Some assembly required ;-)  \n  //  Use sum((obs - exp)^2/exp) for the chi-square statistic and\n  //  1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n  \n  long[] observed = {10, 9, 11};\n  double[] expected = {10, 10, 10};\n  assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);\n  assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);\n  \n  long[] observed1 = { 500, 623, 72, 70, 31 };\n  double[] expected1 = { 485, 541, 82, 61, 37 };\n  assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);\n  assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);\n  assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));\n  assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));\n\n  try {\n  testStatistic.chiSquareTest(expected1, observed1, 95);\n  fail(\"alpha out of range, IllegalArgumentException expected\");\n  } catch (IllegalArgumentException ex) {\n  // expected\n  }  \n  \n  long[] tooShortObs = { 0 };\n  double[] tooShortEx = { 1 };\n  try {\n  testStatistic.chiSquare(tooShortEx, tooShortObs);\n  fail(\"arguments too short, IllegalArgumentException expected\");\n  } catch (IllegalArgumentException ex) {\n  // expected\n  }\n\n  // unmatched arrays\n  long[] unMatchedObs = { 0, 1, 2, 3 };\n  double[] unMatchedEx = { 1, 1, 2 };\n  try {\n  testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n  fail(\"arrays have different lengths, IllegalArgumentException expected\");\n  } catch (IllegalArgumentException ex) {\n  // expected\n  }\n  \n  // 0 expected count\n  expected[0] = 0;\n  try {\n  testStatistic.chiSquareTest(expected, observed, .01);\n  fail(\"bad expected count, IllegalArgumentException expected\");\n  } catch (IllegalArgumentException ex) {\n  // expected\n  } \n  \n  // negative observed count\n  expected[0] = 1;\n  observed[0] = -1;\n  try {\n  testStatistic.chiSquareTest(expected, observed, .01);\n  fail(\"bad expected count, IllegalArgumentException expected\");\n  } catch (IllegalArgumentException ex) {\n  // expected\n  } \n  \n  }",
        "stack": [
          "ChiSquareTestTest.testChiSquare line 60"
        ]
      }
    ],
    "org.apache.commons.math.stat.inference.TestUtilsTest": [
      {
        "methodName": "testChiSquareLargeTestStatistic",
        "error": "junit.framework.AssertionFailedError",
        "message": "chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>",
        "fail_line": "        assertEquals( \"chi-square test statistic\", ",
        "test_source": "  public void testChiSquareLargeTestStatistic() throws Exception {\n  double[] exp = new double[] {\n  3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n  232921.0, 437665.75\n  };\n\n  long[] obs = new long[] {\n  2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n  };\n  org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n  new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n  double cst = csti.chiSquareTest(exp, obs); \n  assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n  assertEquals( \"chi-square test statistic\", \n  114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);\n  }",
        "stack": [
          "TestUtilsTest.testChiSquareLargeTestStatistic line 181"
        ]
      },
      {
        "methodName": "testChiSquare",
        "error": "junit.framework.AssertionFailedError",
        "message": "chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>",
        "fail_line": "        assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);",
        "test_source": "  public void testChiSquare() throws Exception {\n  \n  // Target values computed using R version 1.8.1 \n  // Some assembly required ;-)  \n  //  Use sum((obs - exp)^2/exp) for the chi-square statistic and\n  //  1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n  \n  long[] observed = {10, 9, 11};\n  double[] expected = {10, 10, 10};\n  assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);\n  assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);\n  \n  long[] observed1 = { 500, 623, 72, 70, 31 };\n  double[] expected1 = { 485, 541, 82, 61, 37 };\n  assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);\n  assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);\n  assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));\n  assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));\n\n  try {\n  TestUtils.chiSquareTest(expected1, observed1, 95);\n  fail(\"alpha out of range, IllegalArgumentException expected\");\n  } catch (IllegalArgumentException ex) {\n  // expected\n  }  \n  \n  long[] tooShortObs = { 0 };\n  double[] tooShortEx = { 1 };\n  try {\n  TestUtils.chiSquare(tooShortEx, tooShortObs);\n  fail(\"arguments too short, IllegalArgumentException expected\");\n  } catch (IllegalArgumentException ex) {\n  // expected\n  }\n\n  // unmatched arrays\n  long[] unMatchedObs = { 0, 1, 2, 3 };\n  double[] unMatchedEx = { 1, 1, 2 };\n  try {\n  TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n  fail(\"arrays have different lengths, IllegalArgumentException expected\");\n  } catch (IllegalArgumentException ex) {\n  // expected\n  }\n  \n  // 0 expected count\n  expected[0] = 0;\n  try {\n  TestUtils.chiSquareTest(expected, observed, .01);\n  fail(\"bad expected count, IllegalArgumentException expected\");\n  } catch (IllegalArgumentException ex) {\n  // expected\n  } \n  \n  // negative observed count\n  expected[0] = 1;\n  observed[0] = -1;\n  try {\n  TestUtils.chiSquareTest(expected, observed, .01);\n  fail(\"bad expected count, IllegalArgumentException expected\");\n  } catch (IllegalArgumentException ex) {\n  // expected\n  } \n  \n  }",
        "stack": [
          "TestUtilsTest.testChiSquare line 58"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
      "buggy_full_code": "\npackage org.apache.commons.math.stat.inference;\n\nimport org.apache.commons.math.MathException;\nimport org.apache.commons.math.distribution.ChiSquaredDistribution;\nimport org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\nimport org.apache.commons.math.distribution.DistributionFactory;\n\n\npublic class ChiSquareTestImpl implements UnknownDistributionChiSquareTest { private ChiSquaredDistribution distribution; public ChiSquareTestImpl() {\n        this(new ChiSquaredDistributionImpl(1.0));\n    }\n\n    \n    public ChiSquareTestImpl(ChiSquaredDistribution x) {\n        super();\n        setDistribution(x);\n    }\n     \n    public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n\n    \n    public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException {\n        distribution.setDegreesOfFreedom(expected.length - 1.0);\n        return 1.0 - distribution.cumulativeProbability(\n            chiSquare(expected, observed));\n    }\n\n    \n    public boolean chiSquareTest(double[] expected, long[] observed, double alpha) throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);\n        }\n        return (chiSquareTest(expected, observed) < alpha);\n    }\n    \n    \n    public double chiSquare(long[][] counts) throws IllegalArgumentException {\n        \n        checkArray(counts);\n        int nRows = counts.length;\n        int nCols = counts[0].length;\n        \n        \n        double[] rowSum = new double[nRows];\n        double[] colSum = new double[nCols];\n        double total = 0.0d;\n        for (int row = 0; row < nRows; row++) {\n            for (int col = 0; col < nCols; col++) {\n                rowSum[row] += (double) counts[row][col];\n                colSum[col] += (double) counts[row][col];\n                total += (double) counts[row][col];\n            }\n        }\n        \n        \n        double sumSq = 0.0d;\n        double expected = 0.0d;\n        for (int row = 0; row < nRows; row++) {\n            for (int col = 0; col < nCols; col++) {\n                expected = (rowSum[row] * colSum[col]) / total;\n                sumSq += (((double) counts[row][col] - expected) * \n                        ((double) counts[row][col] - expected)) / expected; \n            }\n        } \n        return sumSq;\n    }\n\n    \n    public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException {\n        checkArray(counts);\n        double df = ((double) counts.length -1) * ((double) counts[0].length - 1);\n        distribution.setDegreesOfFreedom(df);\n        return 1 - distribution.cumulativeProbability(chiSquare(counts));\n    }\n\n    \n    public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n        }\n        return (chiSquareTest(counts) < alpha);\n    }\n    \n    \n    public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {\n        \n        \n        if ((observed1.length < 2) || (observed1.length != observed2.length)) {\n            throw new IllegalArgumentException(\n                    \"oberved1, observed2 array lengths incorrect\");\n        }\n        \n        if (!isNonNegative(observed1) || !isNonNegative(observed2)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative\");\n        }\n        \n        long countSum1 = 0;\n        long countSum2 = 0;\n        boolean unequalCounts = false;\n        double weight = 0.0;\n        for (int i = 0; i < observed1.length; i++) {\n            countSum1 += observed1[i];\n            countSum2 += observed2[i];   \n        }\n        \n        if (countSum1 * countSum2 == 0) {\n            throw new IllegalArgumentException(\n             \"observed counts cannot all be 0\"); \n        }\n        \n        unequalCounts = (countSum1 != countSum2);\n        if (unequalCounts) {\n            weight = Math.sqrt((double) countSum1 / (double) countSum2);\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        double obs1 = 0.0d;\n        double obs2 = 0.0d;\n        for (int i = 0; i < observed1.length; i++) {\n            if (observed1[i] == 0 && observed2[i] == 0) {\n                throw new IllegalArgumentException(\n                        \"observed counts must not both be zero\");\n            } else {\n                obs1 = (double) observed1[i];\n                obs2 = (double) observed2[i];\n                if (unequalCounts) { \n                    dev = obs1/weight - obs2 * weight;\n                } else {\n                    dev = obs1 - obs2;\n                }\n                sumSq += (dev * dev) / (obs1 + obs2);\n            }\n        }\n        return sumSq;\n    }\n\n    \n    public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException, MathException {\n        distribution.setDegreesOfFreedom((double) observed1.length - 1);\n        return 1 - distribution.cumulativeProbability(\n                chiSquareDataSetsComparison(observed1, observed2));\n    }\n\n    \n    public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);\n        }\n        return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);\n    }\n\n    \n    private void checkArray(long[][] in) throws IllegalArgumentException {\n        \n        if (in.length < 2) {\n            throw new IllegalArgumentException(\"Input table must have at least two rows\");\n        }\n        \n        if (in[0].length < 2) {\n            throw new IllegalArgumentException(\"Input table must have at least two columns\");\n        }    \n        \n        if (!isRectangular(in)) {\n            throw new IllegalArgumentException(\"Input table must be rectangular\");\n        }\n        \n        if (!isNonNegative(in)) {\n            throw new IllegalArgumentException(\"All entries in input 2-way table must be non-negative\");\n        }\n        \n    }\n    \n    \n    \n    protected DistributionFactory getDistributionFactory() {\n        return DistributionFactory.newInstance();\n    }\n    \n    \n    \n    \n    private boolean isRectangular(long[][] in) {\n        for (int i = 1; i < in.length; i++) {\n            if (in[i].length != in[0].length) {\n                return false;\n            }\n        }  \n        return true;\n    }\n    \n    \n    private boolean isPositive(double[] in) {\n        for (int i = 0; i < in.length; i ++) {\n            if (in[i] <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    \n    private boolean isNonNegative(long[] in) {\n        for (int i = 0; i < in.length; i ++) {\n            if (in[i] < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    \n    private boolean isNonNegative(long[][] in) {\n        for (int i = 0; i < in.length; i ++) {\n            for (int j = 0; j < in[i].length; j++) {\n                if (in[i][j] < 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n \n    \n    public void setDistribution(ChiSquaredDistribution value) {\n        distribution = value;\n    }\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.math.stat.inference;\n\nimport org.apache.commons.math.MathException;\nimport org.apache.commons.math.distribution.ChiSquaredDistribution;\nimport org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\nimport org.apache.commons.math.distribution.DistributionFactory;\n\n\npublic class ChiSquareTestImpl implements UnknownDistributionChiSquareTest { private ChiSquaredDistribution distribution; public ChiSquareTestImpl() {\n        this(new ChiSquaredDistributionImpl(1.0));\n    }\n\n    \n    public ChiSquareTestImpl(ChiSquaredDistribution x) {\n        super();\n        setDistribution(x);\n    }\n     \n    public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumExpected = 0d;\n        double sumObserved = 0d;\n        for (int i = 0; i < observed.length; i++) {\n            sumExpected += expected[i];\n            sumObserved += observed[i];\n        }\n        double ratio = 1.0d;\n        boolean rescale = false;\n        if (Math.abs(sumExpected - sumObserved) > 10E-6) {\n            ratio = sumObserved / sumExpected;\n            rescale = true;\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            if (rescale) {\n                dev = ((double) observed[i] - ratio * expected[i]);\n                sumSq += dev * dev / (ratio * expected[i]);\n            } else {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n            }\n        }\n        return sumSq;\n    }\n\n    \n    public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException {\n        distribution.setDegreesOfFreedom(expected.length - 1.0);\n        return 1.0 - distribution.cumulativeProbability(\n            chiSquare(expected, observed));\n    }\n\n    \n    public boolean chiSquareTest(double[] expected, long[] observed, double alpha) throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);\n        }\n        return (chiSquareTest(expected, observed) < alpha);\n    }\n    \n    \n    public double chiSquare(long[][] counts) throws IllegalArgumentException {\n        \n        checkArray(counts);\n        int nRows = counts.length;\n        int nCols = counts[0].length;\n        \n        \n        double[] rowSum = new double[nRows];\n        double[] colSum = new double[nCols];\n        double total = 0.0d;\n        for (int row = 0; row < nRows; row++) {\n            for (int col = 0; col < nCols; col++) {\n                rowSum[row] += (double) counts[row][col];\n                colSum[col] += (double) counts[row][col];\n                total += (double) counts[row][col];\n            }\n        }\n        \n        \n        double sumSq = 0.0d;\n        double expected = 0.0d;\n        for (int row = 0; row < nRows; row++) {\n            for (int col = 0; col < nCols; col++) {\n                expected = (rowSum[row] * colSum[col]) / total;\n                sumSq += (((double) counts[row][col] - expected) * \n                        ((double) counts[row][col] - expected)) / expected; \n            }\n        } \n        return sumSq;\n    }\n\n    \n    public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException {\n        checkArray(counts);\n        double df = ((double) counts.length -1) * ((double) counts[0].length - 1);\n        distribution.setDegreesOfFreedom(df);\n        return 1 - distribution.cumulativeProbability(chiSquare(counts));\n    }\n\n    \n    public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n        }\n        return (chiSquareTest(counts) < alpha);\n    }\n    \n    \n    public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException {\n        \n        \n        if ((observed1.length < 2) || (observed1.length != observed2.length)) {\n            throw new IllegalArgumentException(\n                    \"oberved1, observed2 array lengths incorrect\");\n        }\n        \n        if (!isNonNegative(observed1) || !isNonNegative(observed2)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative\");\n        }\n        \n        long countSum1 = 0;\n        long countSum2 = 0;\n        boolean unequalCounts = false;\n        double weight = 0.0;\n        for (int i = 0; i < observed1.length; i++) {\n            countSum1 += observed1[i];\n            countSum2 += observed2[i];   \n        }\n        \n        if (countSum1 * countSum2 == 0) {\n            throw new IllegalArgumentException(\n             \"observed counts cannot all be 0\"); \n        }\n        \n        unequalCounts = (countSum1 != countSum2);\n        if (unequalCounts) {\n            weight = Math.sqrt((double) countSum1 / (double) countSum2);\n        }\n        \n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        double obs1 = 0.0d;\n        double obs2 = 0.0d;\n        for (int i = 0; i < observed1.length; i++) {\n            if (observed1[i] == 0 && observed2[i] == 0) {\n                throw new IllegalArgumentException(\n                        \"observed counts must not both be zero\");\n            } else {\n                obs1 = (double) observed1[i];\n                obs2 = (double) observed2[i];\n                if (unequalCounts) { \n                    dev = obs1/weight - obs2 * weight;\n                } else {\n                    dev = obs1 - obs2;\n                }\n                sumSq += (dev * dev) / (obs1 + obs2);\n            }\n        }\n        return sumSq;\n    }\n\n    \n    public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException, MathException {\n        distribution.setDegreesOfFreedom((double) observed1.length - 1);\n        return 1 - distribution.cumulativeProbability(\n                chiSquareDataSetsComparison(observed1, observed2));\n    }\n\n    \n    public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);\n        }\n        return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);\n    }\n\n    \n    private void checkArray(long[][] in) throws IllegalArgumentException {\n        \n        if (in.length < 2) {\n            throw new IllegalArgumentException(\"Input table must have at least two rows\");\n        }\n        \n        if (in[0].length < 2) {\n            throw new IllegalArgumentException(\"Input table must have at least two columns\");\n        }    \n        \n        if (!isRectangular(in)) {\n            throw new IllegalArgumentException(\"Input table must be rectangular\");\n        }\n        \n        if (!isNonNegative(in)) {\n            throw new IllegalArgumentException(\"All entries in input 2-way table must be non-negative\");\n        }\n        \n    }\n    \n    \n    \n    protected DistributionFactory getDistributionFactory() {\n        return DistributionFactory.newInstance();\n    }\n    \n    \n    \n    \n    private boolean isRectangular(long[][] in) {\n        for (int i = 1; i < in.length; i++) {\n            if (in[i].length != in[0].length) {\n                return false;\n            }\n        }  \n        return true;\n    }\n    \n    \n    private boolean isPositive(double[] in) {\n        for (int i = 0; i < in.length; i ++) {\n            if (in[i] <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    \n    private boolean isNonNegative(long[] in) {\n        for (int i = 0; i < in.length; i ++) {\n            if (in[i] < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    \n    private boolean isNonNegative(long[][] in) {\n        for (int i = 0; i < in.length; i ++) {\n            for (int j = 0; j < in[i].length; j++) {\n                if (in[i][j] < 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n \n    \n    public void setDistribution(ChiSquaredDistribution value) {\n        distribution = value;\n    }\n}\n",
      "buggy_signatures": [
        "public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest { private ChiSquaredDistribution distribution; public ChiSquareTestImpl()",
        "public ChiSquareTestImpl(ChiSquaredDistribution x)",
        "public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException",
        "public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException",
        "public boolean chiSquareTest(double[] expected, long[] observed, double alpha) throws IllegalArgumentException, MathException",
        "public double chiSquare(long[][] counts) throws IllegalArgumentException",
        "public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException",
        "public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException",
        "public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException",
        "public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException, MathException",
        "public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException",
        "private void checkArray(long[][] in) throws IllegalArgumentException",
        "protected DistributionFactory getDistributionFactory()",
        "private boolean isRectangular(long[][] in)",
        "private boolean isPositive(double[] in)",
        "private boolean isNonNegative(long[] in)",
        "private boolean isNonNegative(long[][] in)",
        "public void setDistribution(ChiSquaredDistribution value)"
      ],
      "fixed_signatures": [
        "public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest { private ChiSquaredDistribution distribution; public ChiSquareTestImpl()",
        "public ChiSquareTestImpl(ChiSquaredDistribution x)",
        "public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException",
        "public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException",
        "public boolean chiSquareTest(double[] expected, long[] observed, double alpha) throws IllegalArgumentException, MathException",
        "public double chiSquare(long[][] counts) throws IllegalArgumentException",
        "public double chiSquareTest(long[][] counts) throws IllegalArgumentException, MathException",
        "public boolean chiSquareTest(long[][] counts, double alpha) throws IllegalArgumentException, MathException",
        "public double chiSquareDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException",
        "public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2) throws IllegalArgumentException, MathException",
        "public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha) throws IllegalArgumentException, MathException",
        "private void checkArray(long[][] in) throws IllegalArgumentException",
        "protected DistributionFactory getDistributionFactory()",
        "private boolean isRectangular(long[][] in)",
        "private boolean isPositive(double[] in)",
        "private boolean isNonNegative(long[] in)",
        "private boolean isNonNegative(long[][] in)",
        "public void setDistribution(ChiSquaredDistribution value)"
      ],
      "methods": [
        {
          "buggy_method": "  public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n  if ((expected.length < 2) || (expected.length != observed.length)) {\n  throw new IllegalArgumentException(\n  \"observed, expected array lengths incorrect\");\n  }\n  if (!isPositive(expected) || !isNonNegative(observed)) {\n  throw new IllegalArgumentException(\n  \"observed counts must be non-negative and expected counts must be postive\");\n  }\n  double sumSq = 0.0d;\n  double dev = 0.0d;\n  for (int i = 0; i < observed.length; i++) {\n  dev = ((double) observed[i] - expected[i]);\n  sumSq += dev * dev / expected[i];\n  }\n  return sumSq;\n  }",
          "fixed_method": "  public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n  if ((expected.length < 2) || (expected.length != observed.length)) {\n  throw new IllegalArgumentException(\n  \"observed, expected array lengths incorrect\");\n  }\n  if (!isPositive(expected) || !isNonNegative(observed)) {\n  throw new IllegalArgumentException(\n  \"observed counts must be non-negative and expected counts must be postive\");\n  }\n  double sumExpected = 0d;\n  double sumObserved = 0d;\n  for (int i = 0; i < observed.length; i++) {\n  sumExpected += expected[i];\n  sumObserved += observed[i];\n  }\n  double ratio = 1.0d;\n  boolean rescale = false;\n  if (Math.abs(sumExpected - sumObserved) > 10E-6) {\n  ratio = sumObserved / sumExpected;\n  rescale = true;\n  }\n  double sumSq = 0.0d;\n  double dev = 0.0d;\n  for (int i = 0; i < observed.length; i++) {\n  if (rescale) {\n  dev = ((double) observed[i] - ratio * expected[i]);\n  sumSq += dev * dev / (ratio * expected[i]);\n  } else {\n  dev = ((double) observed[i] - expected[i]);\n  sumSq += dev * dev / expected[i];\n  }\n  }\n  return sumSq;\n  }",
          "diff": [
            "@@ -71,11 +71,28 @@",
            "             throw new IllegalArgumentException(\n",
            "                 \"observed counts must be non-negative and expected counts must be postive\");\n",
            "         }\n",
            "+        double sumExpected = 0d;\n",
            "+        double sumObserved = 0d;\n",
            "+        for (int i = 0; i < observed.length; i++) {\n",
            "+            sumExpected += expected[i];\n",
            "+            sumObserved += observed[i];\n",
            "+        }\n",
            "+        double ratio = 1.0d;\n",
            "+        boolean rescale = false;\n",
            "+        if (Math.abs(sumExpected - sumObserved) > 10E-6) {\n",
            "+            ratio = sumObserved / sumExpected;\n",
            "+            rescale = true;\n",
            "+        }\n",
            "         double sumSq = 0.0d;\n",
            "         double dev = 0.0d;\n",
            "         for (int i = 0; i < observed.length; i++) {\n",
            "+            if (rescale) {\n",
            "+                dev = ((double) observed[i] - ratio * expected[i]);\n",
            "+                sumSq += dev * dev / (ratio * expected[i]);\n",
            "+            } else {\n",
            "                 dev = ((double) observed[i] - expected[i]);\n",
            "                 sumSq += dev * dev / expected[i];\n",
            "+            }\n",
            "         }\n",
            "         return sumSq;\n",
            "     }\n"
          ],
          "changed_lines": 17
        }
      ]
    }
  ]
}
