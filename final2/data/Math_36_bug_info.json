{
  "bug_id": "36",
  "failed_tests": {
    "org.apache.commons.math.fraction.BigFractionTest": [
      {
        "methodName": "testFloatValueForLargeNumeratorAndDenominator",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<5.0> but was:<NaN>",
        "fail_line": "        Assert.assertEquals(5, large.floatValue(), 1e-15);",
        "test_source": "  public void testFloatValueForLargeNumeratorAndDenominator() {\n  final BigInteger pow400 = BigInteger.TEN.pow(400);\n  final BigInteger pow401 = BigInteger.TEN.pow(401);\n  final BigInteger two = new BigInteger(\"2\");\n  final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n  pow400.multiply(two));\n\n  Assert.assertEquals(5, large.floatValue(), 1e-15);\n  }",
        "stack": [
          "BigFractionTest.testFloatValueForLargeNumeratorAndDenominator line 222"
        ]
      },
      {
        "methodName": "testDoubleValueForLargeNumeratorAndDenominator",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<5.0> but was:<NaN>",
        "fail_line": "        Assert.assertEquals(5, large.doubleValue(), 1e-15);",
        "test_source": "  public void testDoubleValueForLargeNumeratorAndDenominator() {\n  final BigInteger pow400 = BigInteger.TEN.pow(400);\n  final BigInteger pow401 = BigInteger.TEN.pow(401);\n  final BigInteger two = new BigInteger(\"2\");\n  final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n  pow400.multiply(two));\n\n  Assert.assertEquals(5, large.doubleValue(), 1e-15);\n  }",
        "stack": [
          "BigFractionTest.testDoubleValueForLargeNumeratorAndDenominator line 210"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/math/fraction/BigFraction.java",
      "buggy_full_code": "\npackage org.apache.commons.math.fraction;\n\nimport java.io.Serializable;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\nimport org.apache.commons.math.FieldElement;\nimport org.apache.commons.math.exception.MathIllegalArgumentException;\nimport org.apache.commons.math.exception.NullArgumentException;\nimport org.apache.commons.math.exception.ZeroException;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.util.FastMath;\nimport org.apache.commons.math.util.MathUtils;\nimport org.apache.commons.math.util.ArithmeticUtils;\n\n\npublic class BigFraction extends Number implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable { public static final BigFraction TWO = new BigFraction(2); public static final BigFraction ONE = new BigFraction(1); public static final BigFraction ZERO = new BigFraction(0); public static final BigFraction MINUS_ONE = new BigFraction(-1); public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5); public static final BigFraction ONE_FIFTH = new BigFraction(1, 5); public static final BigFraction ONE_HALF = new BigFraction(1, 2); public static final BigFraction ONE_QUARTER = new BigFraction(1, 4); public static final BigFraction ONE_THIRD = new BigFraction(1, 3); public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5); public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4); public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5); public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4); public static final BigFraction TWO_THIRDS = new BigFraction(2, 3); private static final long serialVersionUID = -5630213147331578515L; private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100); private final BigInteger numerator; private final BigInteger denominator; public BigFraction(final BigInteger num) {\n        this(num, BigInteger.ONE);\n    }\n\n    \n    public BigFraction(BigInteger num, BigInteger den) {\n        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);\n        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);\n        if (BigInteger.ZERO.equals(den)) {\n            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);\n        }\n        if (BigInteger.ZERO.equals(num)) {\n            numerator   = BigInteger.ZERO;\n            denominator = BigInteger.ONE;\n        } else {\n\n            \n            final BigInteger gcd = num.gcd(den);\n            if (BigInteger.ONE.compareTo(gcd) < 0) {\n                num = num.divide(gcd);\n                den = den.divide(gcd);\n            }\n\n            \n            if (BigInteger.ZERO.compareTo(den) > 0) {\n                num = num.negate();\n                den = den.negate();\n            }\n\n            \n            numerator   = num;\n            denominator = den;\n\n        }\n    }\n\n    \n    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        \n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            \n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) {\n            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }\n\n    \n    public BigFraction(final double value, final double epsilon, final int maxIterations) throws FractionConversionException {\n        this(value, epsilon, Integer.MAX_VALUE, maxIterations);\n    }\n\n    \n    private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long) FastMath.floor(r0);\n        if (a0 > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        \n        \n        if (FastMath.abs(a0 - value) < epsilon) {\n            numerator = BigInteger.valueOf(a0);\n            denominator = BigInteger.ONE;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            final double r1 = 1.0 / (r0 - a0);\n            final long a1 = (long) FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n            if ((p2 > overflow) || (q2 > overflow)) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            final double convergent = (double) p2 / (double) q2;\n            if ((n < maxIterations) &&\n                (FastMath.abs(convergent - value) > epsilon) &&\n                (q2 < maxDenominator)) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2 < maxDenominator) {\n            numerator   = BigInteger.valueOf(p2);\n            denominator = BigInteger.valueOf(q2);\n        } else {\n            numerator   = BigInteger.valueOf(p1);\n            denominator = BigInteger.valueOf(q1);\n        }\n    }\n\n    \n    public BigFraction(final double value, final int maxDenominator) throws FractionConversionException {\n        this(value, 0, maxDenominator, 100);\n    }\n\n    \n    public BigFraction(final int num) {\n        this(BigInteger.valueOf(num), BigInteger.ONE);\n    }\n\n    \n    public BigFraction(final int num, final int den) {\n        this(BigInteger.valueOf(num), BigInteger.valueOf(den));\n    }\n\n    \n    public BigFraction(final long num) {\n        this(BigInteger.valueOf(num), BigInteger.ONE);\n    }\n\n    \n    public BigFraction(final long num, final long den) {\n        this(BigInteger.valueOf(num), BigInteger.valueOf(den));\n    }\n\n    \n    public static BigFraction getReducedFraction(final int numerator, final int denominator) {\n        if (numerator == 0) {\n            return ZERO; \n        }\n\n        return new BigFraction(numerator, denominator);\n    }\n\n    \n    public BigFraction abs() {\n        return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();\n    }\n\n    \n    public BigFraction add(final BigInteger bg) throws NullArgumentException {\n        MathUtils.checkNotNull(bg);\n        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);\n    }\n\n    \n    public BigFraction add(final int i) {\n        return add(BigInteger.valueOf(i));\n    }\n\n    \n    public BigFraction add(final long l) {\n        return add(BigInteger.valueOf(l));\n    }\n\n    \n    public BigFraction add(final BigFraction fraction) {\n        if (fraction == null) {\n            throw new NullArgumentException(LocalizedFormats.FRACTION);\n        }\n        if (ZERO.equals(fraction)) {\n            return this;\n        }\n\n        BigInteger num = null;\n        BigInteger den = null;\n\n        if (denominator.equals(fraction.denominator)) {\n            num = numerator.add(fraction.numerator);\n            den = denominator;\n        } else {\n            num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));\n            den = denominator.multiply(fraction.denominator);\n        }\n        return new BigFraction(num, den);\n\n    }\n\n    \n    public BigDecimal bigDecimalValue() {\n        return new BigDecimal(numerator).divide(new BigDecimal(denominator));\n    }\n\n    \n    public BigDecimal bigDecimalValue(final int roundingMode) {\n        return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);\n    }\n\n    \n    public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {\n        return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);\n    }\n\n    \n    public int compareTo(final BigFraction object) {\n        BigInteger nOd = numerator.multiply(object.denominator);\n        BigInteger dOn = denominator.multiply(object.numerator);\n        return nOd.compareTo(dOn);\n    }\n\n    \n    public BigFraction divide(final BigInteger bg) {\n        if (BigInteger.ZERO.equals(bg)) {\n            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);\n        }\n        return new BigFraction(numerator, denominator.multiply(bg));\n    }\n\n    \n    public BigFraction divide(final int i) {\n        return divide(BigInteger.valueOf(i));\n    }\n\n    \n    public BigFraction divide(final long l) {\n        return divide(BigInteger.valueOf(l));\n    }\n\n    \n    public BigFraction divide(final BigFraction fraction) {\n        if (fraction == null) {\n            throw new NullArgumentException(LocalizedFormats.FRACTION);\n        }\n        if (BigInteger.ZERO.equals(fraction.numerator)) {\n            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);\n        }\n\n        return multiply(fraction.reciprocal());\n    }\n\n    \n    @Override\n    public double doubleValue() {\n        double result = numerator.doubleValue() / denominator.doubleValue();\n            \n            \n        return result;\n    }\n\n    \n    @Override\n    public boolean equals(final Object other) {\n        boolean ret = false;\n\n        if (this == other) {\n            ret = true;\n        } else if (other instanceof BigFraction) {\n            BigFraction rhs = ((BigFraction) other).reduce();\n            BigFraction thisOne = this.reduce();\n            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);\n        }\n\n        return ret;\n    }\n\n    \n    @Override\n    public float floatValue() {\n        float result = numerator.floatValue() / denominator.floatValue();\n            \n            \n        return result;\n    }\n\n    \n    public BigInteger getDenominator() {\n        return denominator;\n    }\n\n    \n    public int getDenominatorAsInt() {\n        return denominator.intValue();\n    }\n\n    \n    public long getDenominatorAsLong() {\n        return denominator.longValue();\n    }\n\n    \n    public BigInteger getNumerator() {\n        return numerator;\n    }\n\n    \n    public int getNumeratorAsInt() {\n        return numerator.intValue();\n    }\n\n    \n    public long getNumeratorAsLong() {\n        return numerator.longValue();\n    }\n\n    \n    @Override\n    public int hashCode() {\n        return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();\n    }\n\n    \n    @Override\n    public int intValue() {\n        return numerator.divide(denominator).intValue();\n    }\n\n    \n    @Override\n    public long longValue() {\n        return numerator.divide(denominator).longValue();\n    }\n\n    \n    public BigFraction multiply(final BigInteger bg) {\n        if (bg == null) {\n            throw new NullArgumentException();\n        }\n        return new BigFraction(bg.multiply(numerator), denominator);\n    }\n\n    \n    public BigFraction multiply(final int i) {\n        return multiply(BigInteger.valueOf(i));\n    }\n\n    \n    public BigFraction multiply(final long l) {\n        return multiply(BigInteger.valueOf(l));\n    }\n\n    \n    public BigFraction multiply(final BigFraction fraction) {\n        if (fraction == null) {\n            throw new NullArgumentException(LocalizedFormats.FRACTION);\n        }\n        if (numerator.equals(BigInteger.ZERO) ||\n            fraction.numerator.equals(BigInteger.ZERO)) {\n            return ZERO;\n        }\n        return new BigFraction(numerator.multiply(fraction.numerator),\n                               denominator.multiply(fraction.denominator));\n    }\n\n    \n    public BigFraction negate() {\n        return new BigFraction(numerator.negate(), denominator);\n    }\n\n    \n    public double percentageValue() {\n        return multiply(ONE_HUNDRED).doubleValue();\n    }\n\n    \n    public BigFraction pow(final int exponent) {\n        if (exponent < 0) {\n            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));\n        }\n        return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));\n    }\n\n    \n    public BigFraction pow(final long exponent) {\n        if (exponent < 0) {\n            return new BigFraction(ArithmeticUtils.pow(denominator, -exponent),\n                                   ArithmeticUtils.pow(numerator,   -exponent));\n        }\n        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),\n                               ArithmeticUtils.pow(denominator, exponent));\n    }\n\n    \n    public BigFraction pow(final BigInteger exponent) {\n        if (exponent.compareTo(BigInteger.ZERO) < 0) {\n            final BigInteger eNeg = exponent.negate();\n            return new BigFraction(ArithmeticUtils.pow(denominator, eNeg),\n                                   ArithmeticUtils.pow(numerator,   eNeg));\n        }\n        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),\n                               ArithmeticUtils.pow(denominator, exponent));\n    }\n\n    \n    public double pow(final double exponent) {\n        return FastMath.pow(numerator.doubleValue(),   exponent) /\n               FastMath.pow(denominator.doubleValue(), exponent);\n    }\n\n    \n    public BigFraction reciprocal() {\n        return new BigFraction(denominator, numerator);\n    }\n\n    \n    public BigFraction reduce() {\n        final BigInteger gcd = numerator.gcd(denominator);\n        return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));\n    }\n\n    \n    public BigFraction subtract(final BigInteger bg) {\n        if (bg == null) {\n            throw new NullArgumentException();\n        }\n        return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);\n    }\n\n    \n    public BigFraction subtract(final int i) {\n        return subtract(BigInteger.valueOf(i));\n    }\n\n    \n    public BigFraction subtract(final long l) {\n        return subtract(BigInteger.valueOf(l));\n    }\n\n    \n    public BigFraction subtract(final BigFraction fraction) {\n        if (fraction == null) {\n            throw new NullArgumentException(LocalizedFormats.FRACTION);\n        }\n        if (ZERO.equals(fraction)) {\n            return this;\n        }\n\n        BigInteger num = null;\n        BigInteger den = null;\n        if (denominator.equals(fraction.denominator)) {\n            num = numerator.subtract(fraction.numerator);\n            den = denominator;\n        } else {\n            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));\n            den = denominator.multiply(fraction.denominator);\n        }\n        return new BigFraction(num, den);\n\n    }\n\n    \n    @Override\n    public String toString() {\n        String str = null;\n        if (BigInteger.ONE.equals(denominator)) {\n            str = numerator.toString();\n        } else if (BigInteger.ZERO.equals(numerator)) {\n            str = \"0\";\n        } else {\n            str = numerator + \" / \" + denominator;\n        }\n        return str;\n    }\n\n    \n    public BigFractionField getField() {\n        return BigFractionField.getInstance();\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.math.fraction;\n\nimport java.io.Serializable;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\nimport org.apache.commons.math.FieldElement;\nimport org.apache.commons.math.exception.MathIllegalArgumentException;\nimport org.apache.commons.math.exception.NullArgumentException;\nimport org.apache.commons.math.exception.ZeroException;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.util.FastMath;\nimport org.apache.commons.math.util.MathUtils;\nimport org.apache.commons.math.util.ArithmeticUtils;\n\n\npublic class BigFraction extends Number implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable { public static final BigFraction TWO = new BigFraction(2); public static final BigFraction ONE = new BigFraction(1); public static final BigFraction ZERO = new BigFraction(0); public static final BigFraction MINUS_ONE = new BigFraction(-1); public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5); public static final BigFraction ONE_FIFTH = new BigFraction(1, 5); public static final BigFraction ONE_HALF = new BigFraction(1, 2); public static final BigFraction ONE_QUARTER = new BigFraction(1, 4); public static final BigFraction ONE_THIRD = new BigFraction(1, 3); public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5); public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4); public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5); public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4); public static final BigFraction TWO_THIRDS = new BigFraction(2, 3); private static final long serialVersionUID = -5630213147331578515L; private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100); private final BigInteger numerator; private final BigInteger denominator; public BigFraction(final BigInteger num) {\n        this(num, BigInteger.ONE);\n    }\n\n    \n    public BigFraction(BigInteger num, BigInteger den) {\n        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);\n        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);\n        if (BigInteger.ZERO.equals(den)) {\n            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);\n        }\n        if (BigInteger.ZERO.equals(num)) {\n            numerator   = BigInteger.ZERO;\n            denominator = BigInteger.ONE;\n        } else {\n\n            \n            final BigInteger gcd = num.gcd(den);\n            if (BigInteger.ONE.compareTo(gcd) < 0) {\n                num = num.divide(gcd);\n                den = den.divide(gcd);\n            }\n\n            \n            if (BigInteger.ZERO.compareTo(den) > 0) {\n                num = num.negate();\n                den = den.negate();\n            }\n\n            \n            numerator   = num;\n            denominator = den;\n\n        }\n    }\n\n    \n    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        \n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            \n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) {\n            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }\n\n    \n    public BigFraction(final double value, final double epsilon, final int maxIterations) throws FractionConversionException {\n        this(value, epsilon, Integer.MAX_VALUE, maxIterations);\n    }\n\n    \n    private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long) FastMath.floor(r0);\n        if (a0 > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        \n        \n        if (FastMath.abs(a0 - value) < epsilon) {\n            numerator = BigInteger.valueOf(a0);\n            denominator = BigInteger.ONE;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            final double r1 = 1.0 / (r0 - a0);\n            final long a1 = (long) FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n            if ((p2 > overflow) || (q2 > overflow)) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            final double convergent = (double) p2 / (double) q2;\n            if ((n < maxIterations) &&\n                (FastMath.abs(convergent - value) > epsilon) &&\n                (q2 < maxDenominator)) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2 < maxDenominator) {\n            numerator   = BigInteger.valueOf(p2);\n            denominator = BigInteger.valueOf(q2);\n        } else {\n            numerator   = BigInteger.valueOf(p1);\n            denominator = BigInteger.valueOf(q1);\n        }\n    }\n\n    \n    public BigFraction(final double value, final int maxDenominator) throws FractionConversionException {\n        this(value, 0, maxDenominator, 100);\n    }\n\n    \n    public BigFraction(final int num) {\n        this(BigInteger.valueOf(num), BigInteger.ONE);\n    }\n\n    \n    public BigFraction(final int num, final int den) {\n        this(BigInteger.valueOf(num), BigInteger.valueOf(den));\n    }\n\n    \n    public BigFraction(final long num) {\n        this(BigInteger.valueOf(num), BigInteger.ONE);\n    }\n\n    \n    public BigFraction(final long num, final long den) {\n        this(BigInteger.valueOf(num), BigInteger.valueOf(den));\n    }\n\n    \n    public static BigFraction getReducedFraction(final int numerator, final int denominator) {\n        if (numerator == 0) {\n            return ZERO; \n        }\n\n        return new BigFraction(numerator, denominator);\n    }\n\n    \n    public BigFraction abs() {\n        return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();\n    }\n\n    \n    public BigFraction add(final BigInteger bg) throws NullArgumentException {\n        MathUtils.checkNotNull(bg);\n        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);\n    }\n\n    \n    public BigFraction add(final int i) {\n        return add(BigInteger.valueOf(i));\n    }\n\n    \n    public BigFraction add(final long l) {\n        return add(BigInteger.valueOf(l));\n    }\n\n    \n    public BigFraction add(final BigFraction fraction) {\n        if (fraction == null) {\n            throw new NullArgumentException(LocalizedFormats.FRACTION);\n        }\n        if (ZERO.equals(fraction)) {\n            return this;\n        }\n\n        BigInteger num = null;\n        BigInteger den = null;\n\n        if (denominator.equals(fraction.denominator)) {\n            num = numerator.add(fraction.numerator);\n            den = denominator;\n        } else {\n            num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));\n            den = denominator.multiply(fraction.denominator);\n        }\n        return new BigFraction(num, den);\n\n    }\n\n    \n    public BigDecimal bigDecimalValue() {\n        return new BigDecimal(numerator).divide(new BigDecimal(denominator));\n    }\n\n    \n    public BigDecimal bigDecimalValue(final int roundingMode) {\n        return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);\n    }\n\n    \n    public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {\n        return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);\n    }\n\n    \n    public int compareTo(final BigFraction object) {\n        BigInteger nOd = numerator.multiply(object.denominator);\n        BigInteger dOn = denominator.multiply(object.numerator);\n        return nOd.compareTo(dOn);\n    }\n\n    \n    public BigFraction divide(final BigInteger bg) {\n        if (BigInteger.ZERO.equals(bg)) {\n            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);\n        }\n        return new BigFraction(numerator, denominator.multiply(bg));\n    }\n\n    \n    public BigFraction divide(final int i) {\n        return divide(BigInteger.valueOf(i));\n    }\n\n    \n    public BigFraction divide(final long l) {\n        return divide(BigInteger.valueOf(l));\n    }\n\n    \n    public BigFraction divide(final BigFraction fraction) {\n        if (fraction == null) {\n            throw new NullArgumentException(LocalizedFormats.FRACTION);\n        }\n        if (BigInteger.ZERO.equals(fraction.numerator)) {\n            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);\n        }\n\n        return multiply(fraction.reciprocal());\n    }\n\n    \n    @Override\n    public double doubleValue() {\n        double result = numerator.doubleValue() / denominator.doubleValue();\n        if (Double.isNaN(result)) {\n            \n            \n            int shift = Math.max(numerator.bitLength(),\n                                 denominator.bitLength()) - Double.MAX_EXPONENT;\n            result = numerator.shiftRight(shift).doubleValue() /\n                denominator.shiftRight(shift).doubleValue();\n        }\n        return result;\n    }\n\n    \n    @Override\n    public boolean equals(final Object other) {\n        boolean ret = false;\n\n        if (this == other) {\n            ret = true;\n        } else if (other instanceof BigFraction) {\n            BigFraction rhs = ((BigFraction) other).reduce();\n            BigFraction thisOne = this.reduce();\n            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);\n        }\n\n        return ret;\n    }\n\n    \n    @Override\n    public float floatValue() {\n        float result = numerator.floatValue() / denominator.floatValue();\n        if (Double.isNaN(result)) {\n            \n            \n            int shift = Math.max(numerator.bitLength(),\n                                 denominator.bitLength()) - Float.MAX_EXPONENT;\n            result = numerator.shiftRight(shift).floatValue() /\n                denominator.shiftRight(shift).floatValue();\n        }\n        return result;\n    }\n\n    \n    public BigInteger getDenominator() {\n        return denominator;\n    }\n\n    \n    public int getDenominatorAsInt() {\n        return denominator.intValue();\n    }\n\n    \n    public long getDenominatorAsLong() {\n        return denominator.longValue();\n    }\n\n    \n    public BigInteger getNumerator() {\n        return numerator;\n    }\n\n    \n    public int getNumeratorAsInt() {\n        return numerator.intValue();\n    }\n\n    \n    public long getNumeratorAsLong() {\n        return numerator.longValue();\n    }\n\n    \n    @Override\n    public int hashCode() {\n        return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();\n    }\n\n    \n    @Override\n    public int intValue() {\n        return numerator.divide(denominator).intValue();\n    }\n\n    \n    @Override\n    public long longValue() {\n        return numerator.divide(denominator).longValue();\n    }\n\n    \n    public BigFraction multiply(final BigInteger bg) {\n        if (bg == null) {\n            throw new NullArgumentException();\n        }\n        return new BigFraction(bg.multiply(numerator), denominator);\n    }\n\n    \n    public BigFraction multiply(final int i) {\n        return multiply(BigInteger.valueOf(i));\n    }\n\n    \n    public BigFraction multiply(final long l) {\n        return multiply(BigInteger.valueOf(l));\n    }\n\n    \n    public BigFraction multiply(final BigFraction fraction) {\n        if (fraction == null) {\n            throw new NullArgumentException(LocalizedFormats.FRACTION);\n        }\n        if (numerator.equals(BigInteger.ZERO) ||\n            fraction.numerator.equals(BigInteger.ZERO)) {\n            return ZERO;\n        }\n        return new BigFraction(numerator.multiply(fraction.numerator),\n                               denominator.multiply(fraction.denominator));\n    }\n\n    \n    public BigFraction negate() {\n        return new BigFraction(numerator.negate(), denominator);\n    }\n\n    \n    public double percentageValue() {\n        return multiply(ONE_HUNDRED).doubleValue();\n    }\n\n    \n    public BigFraction pow(final int exponent) {\n        if (exponent < 0) {\n            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));\n        }\n        return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));\n    }\n\n    \n    public BigFraction pow(final long exponent) {\n        if (exponent < 0) {\n            return new BigFraction(ArithmeticUtils.pow(denominator, -exponent),\n                                   ArithmeticUtils.pow(numerator,   -exponent));\n        }\n        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),\n                               ArithmeticUtils.pow(denominator, exponent));\n    }\n\n    \n    public BigFraction pow(final BigInteger exponent) {\n        if (exponent.compareTo(BigInteger.ZERO) < 0) {\n            final BigInteger eNeg = exponent.negate();\n            return new BigFraction(ArithmeticUtils.pow(denominator, eNeg),\n                                   ArithmeticUtils.pow(numerator,   eNeg));\n        }\n        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),\n                               ArithmeticUtils.pow(denominator, exponent));\n    }\n\n    \n    public double pow(final double exponent) {\n        return FastMath.pow(numerator.doubleValue(),   exponent) /\n               FastMath.pow(denominator.doubleValue(), exponent);\n    }\n\n    \n    public BigFraction reciprocal() {\n        return new BigFraction(denominator, numerator);\n    }\n\n    \n    public BigFraction reduce() {\n        final BigInteger gcd = numerator.gcd(denominator);\n        return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));\n    }\n\n    \n    public BigFraction subtract(final BigInteger bg) {\n        if (bg == null) {\n            throw new NullArgumentException();\n        }\n        return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);\n    }\n\n    \n    public BigFraction subtract(final int i) {\n        return subtract(BigInteger.valueOf(i));\n    }\n\n    \n    public BigFraction subtract(final long l) {\n        return subtract(BigInteger.valueOf(l));\n    }\n\n    \n    public BigFraction subtract(final BigFraction fraction) {\n        if (fraction == null) {\n            throw new NullArgumentException(LocalizedFormats.FRACTION);\n        }\n        if (ZERO.equals(fraction)) {\n            return this;\n        }\n\n        BigInteger num = null;\n        BigInteger den = null;\n        if (denominator.equals(fraction.denominator)) {\n            num = numerator.subtract(fraction.numerator);\n            den = denominator;\n        } else {\n            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));\n            den = denominator.multiply(fraction.denominator);\n        }\n        return new BigFraction(num, den);\n\n    }\n\n    \n    @Override\n    public String toString() {\n        String str = null;\n        if (BigInteger.ONE.equals(denominator)) {\n            str = numerator.toString();\n        } else if (BigInteger.ZERO.equals(numerator)) {\n            str = \"0\";\n        } else {\n            str = numerator + \" / \" + denominator;\n        }\n        return str;\n    }\n\n    \n    public BigFractionField getField() {\n        return BigFractionField.getInstance();\n    }\n\n}\n",
      "buggy_signatures": [
        "public BigFraction(BigInteger num, BigInteger den)",
        "public BigFraction(final double value) throws MathIllegalArgumentException",
        "public BigFraction(final double value, final double epsilon, final int maxIterations) throws FractionConversionException",
        "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException",
        "public BigFraction(final double value, final int maxDenominator) throws FractionConversionException",
        "public BigFraction(final int num)",
        "public BigFraction(final int num, final int den)",
        "public BigFraction(final long num)",
        "public BigFraction(final long num, final long den)",
        "public static BigFraction getReducedFraction(final int numerator, final int denominator)",
        "public BigFraction abs()",
        "public BigFraction add(final BigInteger bg) throws NullArgumentException",
        "public BigFraction add(final int i)",
        "public BigFraction add(final long l)",
        "public BigFraction add(final BigFraction fraction)",
        "public BigDecimal bigDecimalValue()",
        "public BigDecimal bigDecimalValue(final int roundingMode)",
        "public BigDecimal bigDecimalValue(final int scale, final int roundingMode)",
        "public int compareTo(final BigFraction object)",
        "public BigFraction divide(final BigInteger bg)",
        "public BigFraction divide(final int i)",
        "public BigFraction divide(final long l)",
        "public BigFraction divide(final BigFraction fraction)",
        "public double doubleValue()",
        "public boolean equals(final Object other)",
        "public float floatValue()",
        "public BigInteger getDenominator()",
        "public int getDenominatorAsInt()",
        "public long getDenominatorAsLong()",
        "public BigInteger getNumerator()",
        "public int getNumeratorAsInt()",
        "public long getNumeratorAsLong()",
        "public int hashCode()",
        "public int intValue()",
        "public long longValue()",
        "public BigFraction multiply(final BigInteger bg)",
        "public BigFraction multiply(final int i)",
        "public BigFraction multiply(final long l)",
        "public BigFraction multiply(final BigFraction fraction)",
        "public BigFraction negate()",
        "public double percentageValue()",
        "public BigFraction pow(final int exponent)",
        "public BigFraction pow(final long exponent)",
        "public BigFraction pow(final BigInteger exponent)",
        "public double pow(final double exponent)",
        "public BigFraction reciprocal()",
        "public BigFraction reduce()",
        "public BigFraction subtract(final BigInteger bg)",
        "public BigFraction subtract(final int i)",
        "public BigFraction subtract(final long l)",
        "public BigFraction subtract(final BigFraction fraction)",
        "public String toString()",
        "public BigFractionField getField()"
      ],
      "fixed_signatures": [
        "public BigFraction(BigInteger num, BigInteger den)",
        "public BigFraction(final double value) throws MathIllegalArgumentException",
        "public BigFraction(final double value, final double epsilon, final int maxIterations) throws FractionConversionException",
        "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException",
        "public BigFraction(final double value, final int maxDenominator) throws FractionConversionException",
        "public BigFraction(final int num)",
        "public BigFraction(final int num, final int den)",
        "public BigFraction(final long num)",
        "public BigFraction(final long num, final long den)",
        "public static BigFraction getReducedFraction(final int numerator, final int denominator)",
        "public BigFraction abs()",
        "public BigFraction add(final BigInteger bg) throws NullArgumentException",
        "public BigFraction add(final int i)",
        "public BigFraction add(final long l)",
        "public BigFraction add(final BigFraction fraction)",
        "public BigDecimal bigDecimalValue()",
        "public BigDecimal bigDecimalValue(final int roundingMode)",
        "public BigDecimal bigDecimalValue(final int scale, final int roundingMode)",
        "public int compareTo(final BigFraction object)",
        "public BigFraction divide(final BigInteger bg)",
        "public BigFraction divide(final int i)",
        "public BigFraction divide(final long l)",
        "public BigFraction divide(final BigFraction fraction)",
        "public double doubleValue()",
        "public boolean equals(final Object other)",
        "public float floatValue()",
        "public BigInteger getDenominator()",
        "public int getDenominatorAsInt()",
        "public long getDenominatorAsLong()",
        "public BigInteger getNumerator()",
        "public int getNumeratorAsInt()",
        "public long getNumeratorAsLong()",
        "public int hashCode()",
        "public int intValue()",
        "public long longValue()",
        "public BigFraction multiply(final BigInteger bg)",
        "public BigFraction multiply(final int i)",
        "public BigFraction multiply(final long l)",
        "public BigFraction multiply(final BigFraction fraction)",
        "public BigFraction negate()",
        "public double percentageValue()",
        "public BigFraction pow(final int exponent)",
        "public BigFraction pow(final long exponent)",
        "public BigFraction pow(final BigInteger exponent)",
        "public double pow(final double exponent)",
        "public BigFraction reciprocal()",
        "public BigFraction reduce()",
        "public BigFraction subtract(final BigInteger bg)",
        "public BigFraction subtract(final int i)",
        "public BigFraction subtract(final long l)",
        "public BigFraction subtract(final BigFraction fraction)",
        "public String toString()",
        "public BigFractionField getField()"
      ],
      "methods": [
        {
          "buggy_method": "  public double doubleValue() {\n  double result = numerator.doubleValue() / denominator.doubleValue();\n  \n  \n  return result;\n  }",
          "fixed_method": "  public double doubleValue() {\n  double result = numerator.doubleValue() / denominator.doubleValue();\n  if (Double.isNaN(result)) {\n  \n  \n  int shift = Math.max(numerator.bitLength(),\n  denominator.bitLength()) - Double.MAX_EXPONENT;\n  result = numerator.shiftRight(shift).doubleValue() /\n  denominator.shiftRight(shift).doubleValue();\n  }\n  return result;\n  }",
          "diff": [
            "@@ -683,8 +683,14 @@",
            "     @Override\n",
            "     public double doubleValue() {\n",
            "         double result = numerator.doubleValue() / denominator.doubleValue();\n",
            "+        if (Double.isNaN(result)) {\n",
            "             // Numerator and/or denominator must be out of range:\n",
            "             // Calculate how far to shift them to put them in range.\n",
            "+            int shift = Math.max(numerator.bitLength(),\n",
            "+                                 denominator.bitLength()) - Double.MAX_EXPONENT;\n",
            "+            result = numerator.shiftRight(shift).doubleValue() /\n",
            "+                denominator.shiftRight(shift).doubleValue();\n",
            "+        }\n",
            "         return result;\n",
            "     }\n",
            " \n"
          ],
          "changed_lines": 6
        },
        {
          "buggy_method": "  public float floatValue() {\n  float result = numerator.floatValue() / denominator.floatValue();\n  \n  \n  return result;\n  }",
          "fixed_method": "  public float floatValue() {\n  float result = numerator.floatValue() / denominator.floatValue();\n  if (Double.isNaN(result)) {\n  \n  \n  int shift = Math.max(numerator.bitLength(),\n  denominator.bitLength()) - Float.MAX_EXPONENT;\n  result = numerator.shiftRight(shift).floatValue() /\n  denominator.shiftRight(shift).floatValue();\n  }\n  return result;\n  }",
          "diff": [
            "@@ -730,8 +736,14 @@",
            "     @Override\n",
            "     public float floatValue() {\n",
            "         float result = numerator.floatValue() / denominator.floatValue();\n",
            "+        if (Double.isNaN(result)) {\n",
            "             // Numerator and/or denominator must be out of range:\n",
            "             // Calculate how far to shift them to put them in range.\n",
            "+            int shift = Math.max(numerator.bitLength(),\n",
            "+                                 denominator.bitLength()) - Float.MAX_EXPONENT;\n",
            "+            result = numerator.shiftRight(shift).floatValue() /\n",
            "+                denominator.shiftRight(shift).floatValue();\n",
            "+        }\n",
            "         return result;\n",
            "     }\n",
            " \n"
          ],
          "changed_lines": 6
        }
      ]
    }
  ]
}
