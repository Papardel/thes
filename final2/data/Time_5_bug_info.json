{
  "bug_id": "5",
  "failed_tests": {
    "org.joda.time.TestPeriod_Basics": [
      {
        "methodName": "testNormalizedStandard_periodType_months1",
        "error": "java.lang.UnsupportedOperationException",
        "message": "Field is not supported",
        "fail_line": "        Period result = test.normalizedStandard(PeriodType.months());",
        "test_source": "  public void testNormalizedStandard_periodType_months1() {\n  Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n  Period result = test.normalizedStandard(PeriodType.months());\n  assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n  assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n  }",
        "stack": [
          "PeriodType.setIndexedField line 690, Period.withYears line 896, Period.normalizedStandard line 1631, TestPeriod_Basics.testNormalizedStandard_periodType_months1 line 1522"
        ]
      },
      {
        "methodName": "testNormalizedStandard_periodType_months2",
        "error": "java.lang.UnsupportedOperationException",
        "message": "Field is not supported",
        "fail_line": "        Period result = test.normalizedStandard(PeriodType.months());",
        "test_source": "  public void testNormalizedStandard_periodType_months2() {\n  Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);\n  Period result = test.normalizedStandard(PeriodType.months());\n  assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);\n  assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n  }",
        "stack": [
          "PeriodType.setIndexedField line 690, Period.withYears line 896, Period.normalizedStandard line 1631, TestPeriod_Basics.testNormalizedStandard_periodType_months2 line 1529"
        ]
      },
      {
        "methodName": "testNormalizedStandard_periodType_monthsWeeks",
        "error": "java.lang.UnsupportedOperationException",
        "message": "Field is not supported",
        "fail_line": "        Period result = test.normalizedStandard(type);",
        "test_source": "  public void testNormalizedStandard_periodType_monthsWeeks() {\n  PeriodType type = PeriodType.forFields(new DurationFieldType[]{\n  DurationFieldType.months(),\n  DurationFieldType.weeks(),\n  DurationFieldType.days()});\n  Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\n  Period result = test.normalizedStandard(type);\n  assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);\n  assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);\n  }",
        "stack": [
          "PeriodType.setIndexedField line 690, Period.withYears line 896, Period.normalizedStandard line 1631, TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks line 1557"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/joda/time/Period.java",
      "buggy_full_code": "\npackage org.joda.time;\n\nimport java.io.Serializable;\n\nimport org.joda.convert.FromString;\nimport org.joda.time.base.BasePeriod;\nimport org.joda.time.chrono.ISOChronology;\nimport org.joda.time.field.FieldUtils;\nimport org.joda.time.format.ISOPeriodFormat;\nimport org.joda.time.format.PeriodFormatter;\n\n\npublic final class Period extends BasePeriod implements ReadablePeriod, Serializable { public static final Period ZERO = new Period(); private static final long serialVersionUID = 741052353876488155L; @FromString public static Period parse(String str) {\n        return parse(str, ISOPeriodFormat.standard());\n    }\n\n    \n    public static Period parse(String str, PeriodFormatter formatter) {\n        return formatter.parsePeriod(str);\n    }\n\n    \n    \n    public static Period years(int years) {\n        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period months(int months) {\n        return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period weeks(int weeks) {\n        return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period days(int days) {\n        return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period hours(int hours) {\n        return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period minutes(int minutes) {\n        return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period seconds(int seconds) {\n        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period millis(int millis) {\n        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());\n    }\n\n    \n    \n    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\n            if (i > 0 && types[i - 1] == types[i]) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }\n\n    \n    \n    public Period() {\n        super(0L, null, null);\n    }\n\n    \n    public Period(int hours, int minutes, int seconds, int millis) {\n        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());\n    }\n\n    \n    public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis) {\n        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n    }\n\n    \n    public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis, PeriodType type) {\n        super(years, months, weeks, days, hours, minutes, seconds, millis, type);\n    }\n\n    \n    public Period(long duration) {\n        super(duration);\n    }\n\n    \n    public Period(long duration, PeriodType type) {\n        super(duration, type, null);\n    }\n\n    \n    public Period(long duration, Chronology chronology) {\n        super(duration, null, chronology);\n    }\n\n    \n    public Period(long duration, PeriodType type, Chronology chronology) {\n        super(duration, type, chronology);\n    }\n\n    \n    public Period(long startInstant, long endInstant) {\n        super(startInstant, endInstant, null, null);\n    }\n\n    \n    public Period(long startInstant, long endInstant, PeriodType type) {\n        super(startInstant, endInstant, type, null);\n    }\n\n    \n    public Period(long startInstant, long endInstant, Chronology chrono) {\n        super(startInstant, endInstant, null, chrono);\n    }\n\n    \n    public Period(long startInstant, long endInstant, PeriodType type, Chronology chrono) {\n        super(startInstant, endInstant, type, chrono);\n    }\n\n    \n    public Period(ReadableInstant startInstant, ReadableInstant endInstant) {\n        super(startInstant, endInstant, null);\n    }\n\n    \n    public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type) {\n        super(startInstant, endInstant, type);\n    }\n\n    \n    public Period(ReadablePartial start, ReadablePartial end) {\n        super(start, end, null);\n    }\n\n    \n    public Period(ReadablePartial start, ReadablePartial end, PeriodType type) {\n        super(start, end, type);\n    }\n\n    \n    public Period(ReadableInstant startInstant, ReadableDuration duration) {\n        super(startInstant, duration, null);\n    }\n\n    \n    public Period(ReadableInstant startInstant, ReadableDuration duration, PeriodType type) {\n        super(startInstant, duration, type);\n    }\n\n    \n    public Period(ReadableDuration duration, ReadableInstant endInstant) {\n        super(duration, endInstant, null);\n    }\n\n    \n    public Period(ReadableDuration duration, ReadableInstant endInstant, PeriodType type) {\n        super(duration, endInstant, type);\n    }\n\n    \n    public Period(Object period) {\n        super(period, null, null);\n    }\n\n    \n    public Period(Object period, PeriodType type) {\n        super(period, type, null);\n    }\n\n    \n    public Period(Object period, Chronology chrono) {\n        super(period, null, chrono);\n    }\n\n    \n    public Period(Object period, PeriodType type, Chronology chrono) {\n        super(period, type, chrono);\n    }\n\n    \n    private Period(int[] values, PeriodType type) {\n        super(values, type);\n    }\n\n    \n    \n    public Period toPeriod() {\n        return this;\n    }\n\n    \n    \n    public int getYears() {\n        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n    }\n\n    \n    public int getMonths() {\n        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n    }\n\n    \n    public int getWeeks() {\n        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n    }\n\n    \n    public int getDays() {\n        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n    }\n\n    \n    \n    public int getHours() {\n        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n    }\n\n    \n    public int getMinutes() {\n        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n    }\n\n    \n    public int getSeconds() {\n        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n    }\n\n    \n    public int getMillis() {\n        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n    }\n\n    \n    \n    public Period withPeriodType(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        if (type.equals(getPeriodType())) {\n            return this;\n        }\n        return new Period(this, type);\n    }\n\n    \n    public Period withFields(ReadablePeriod period) {\n        if (period == null) {\n            return this;\n        }\n        int[] newValues = getValues();  \n        newValues = super.mergePeriodInto(newValues, period);\n        return new Period(newValues, getPeriodType());\n    }\n\n    \n    \n    public Period withField(DurationFieldType field, int value) {\n        if (field == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        int[] newValues = getValues();  \n        super.setFieldInto(newValues, field, value);\n        return new Period(newValues, getPeriodType());\n    }\n\n    \n    public Period withFieldAdded(DurationFieldType field, int value) {\n        if (field == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        if (value == 0) {\n            return this;\n        }\n        int[] newValues = getValues();  \n        super.addFieldInto(newValues, field, value);\n        return new Period(newValues, getPeriodType());\n    }\n\n    \n    \n    public Period withYears(int years) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withMonths(int months) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withWeeks(int weeks) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withDays(int days) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withHours(int hours) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withMinutes(int minutes) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withSeconds(int seconds) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withMillis(int millis) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    \n    public Period plus(ReadablePeriod period) {\n        if (period == null) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE));\n        return new Period(values, getPeriodType());\n    }\n\n    \n    \n    public Period plusYears(int years) {\n        if (years == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusMonths(int months) {\n        if (months == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusWeeks(int weeks) {\n        if (weeks == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusDays(int days) {\n        if (days == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusHours(int hours) {\n        if (hours == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusMinutes(int minutes) {\n        if (minutes == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusSeconds(int seconds) {\n        if (seconds == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusMillis(int millis) {\n        if (millis == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    \n    public Period minus(ReadablePeriod period) {\n        if (period == null) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE));\n        return new Period(values, getPeriodType());\n    }\n\n    \n    \n    public Period minusYears(int years) {\n        return plusYears(-years);\n    }\n\n    \n    public Period minusMonths(int months) {\n        return plusMonths(-months);\n    }\n\n    \n    public Period minusWeeks(int weeks) {\n        return plusWeeks(-weeks);\n    }\n\n    \n    public Period minusDays(int days) {\n        return plusDays(-days);\n    }\n\n    \n    public Period minusHours(int hours) {\n        return plusHours(-hours);\n    }\n\n    \n    public Period minusMinutes(int minutes) {\n        return plusMinutes(-minutes);\n    }\n\n    \n    public Period minusSeconds(int seconds) {\n        return plusSeconds(-seconds);\n    }\n\n    \n    public Period minusMillis(int millis) {\n        return plusMillis(-millis);\n    }\n\n    \n    \n    public Period multipliedBy(int scalar) {\n        if (this == ZERO || scalar == 1) {\n            return this;\n        }\n        int[] values = getValues();  \n        for (int i = 0; i < values.length; i++) {\n            values[i] = FieldUtils.safeMultiply(values[i], scalar);\n        }\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period negated() {\n        return multipliedBy(-1);\n    }\n\n    \n    \n    public Weeks toStandardWeeks() {\n        checkYearsAndMonths(\"Weeks\");\n        long millis = getMillis();  \n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n        long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;\n        return Weeks.weeks(FieldUtils.safeToInt(weeks));\n    }\n\n    \n    public Days toStandardDays() {\n        checkYearsAndMonths(\"Days\");\n        long millis = getMillis();  \n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n        long days = millis / DateTimeConstants.MILLIS_PER_DAY;\n        days = FieldUtils.safeAdd(days, getDays());\n        days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));\n        return Days.days(FieldUtils.safeToInt(days));\n    }\n\n    \n    public Hours toStandardHours() {\n        checkYearsAndMonths(\"Hours\");\n        long millis = getMillis();  \n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;\n        hours = FieldUtils.safeAdd(hours, getHours());\n        hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));\n        hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));\n        return Hours.hours(FieldUtils.safeToInt(hours));\n    }\n\n    \n    public Minutes toStandardMinutes() {\n        checkYearsAndMonths(\"Minutes\");\n        long millis = getMillis();  \n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;\n        minutes = FieldUtils.safeAdd(minutes, getMinutes());\n        minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));\n        minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));\n        minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));\n        return Minutes.minutes(FieldUtils.safeToInt(minutes));\n    }\n\n    \n    public Seconds toStandardSeconds() {\n        checkYearsAndMonths(\"Seconds\");\n        long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;\n        seconds = FieldUtils.safeAdd(seconds, getSeconds());\n        seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));\n        seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));\n        seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));\n        seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));\n        return Seconds.seconds(FieldUtils.safeToInt(seconds));\n    }\n\n    \n    \n    public Duration toStandardDuration() {\n        checkYearsAndMonths(\"Duration\");\n        long millis = getMillis();  \n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        return new Duration(millis);\n    }\n\n    \n    private void checkYearsAndMonths(String destintionType) {\n        if (getMonths() != 0) {\n            throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\");\n        }\n        if (getYears() != 0) {\n            throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\");\n        }\n    }\n\n    \n    \n    public Period normalizedStandard() {\n        return normalizedStandard(PeriodType.standard());\n    }\n\n    \n    \n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  \n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n        return result;\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.joda.time;\n\nimport java.io.Serializable;\n\nimport org.joda.convert.FromString;\nimport org.joda.time.base.BasePeriod;\nimport org.joda.time.chrono.ISOChronology;\nimport org.joda.time.field.FieldUtils;\nimport org.joda.time.format.ISOPeriodFormat;\nimport org.joda.time.format.PeriodFormatter;\n\n\npublic final class Period extends BasePeriod implements ReadablePeriod, Serializable { public static final Period ZERO = new Period(); private static final long serialVersionUID = 741052353876488155L; @FromString public static Period parse(String str) {\n        return parse(str, ISOPeriodFormat.standard());\n    }\n\n    \n    public static Period parse(String str, PeriodFormatter formatter) {\n        return formatter.parsePeriod(str);\n    }\n\n    \n    \n    public static Period years(int years) {\n        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period months(int months) {\n        return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period weeks(int weeks) {\n        return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period days(int days) {\n        return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period hours(int hours) {\n        return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period minutes(int minutes) {\n        return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period seconds(int seconds) {\n        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());\n    }\n\n    \n    public static Period millis(int millis) {\n        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());\n    }\n\n    \n    \n    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\n            if (i > 0 && types[i - 1] == types[i]) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }\n\n    \n    \n    public Period() {\n        super(0L, null, null);\n    }\n\n    \n    public Period(int hours, int minutes, int seconds, int millis) {\n        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());\n    }\n\n    \n    public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis) {\n        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n    }\n\n    \n    public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis, PeriodType type) {\n        super(years, months, weeks, days, hours, minutes, seconds, millis, type);\n    }\n\n    \n    public Period(long duration) {\n        super(duration);\n    }\n\n    \n    public Period(long duration, PeriodType type) {\n        super(duration, type, null);\n    }\n\n    \n    public Period(long duration, Chronology chronology) {\n        super(duration, null, chronology);\n    }\n\n    \n    public Period(long duration, PeriodType type, Chronology chronology) {\n        super(duration, type, chronology);\n    }\n\n    \n    public Period(long startInstant, long endInstant) {\n        super(startInstant, endInstant, null, null);\n    }\n\n    \n    public Period(long startInstant, long endInstant, PeriodType type) {\n        super(startInstant, endInstant, type, null);\n    }\n\n    \n    public Period(long startInstant, long endInstant, Chronology chrono) {\n        super(startInstant, endInstant, null, chrono);\n    }\n\n    \n    public Period(long startInstant, long endInstant, PeriodType type, Chronology chrono) {\n        super(startInstant, endInstant, type, chrono);\n    }\n\n    \n    public Period(ReadableInstant startInstant, ReadableInstant endInstant) {\n        super(startInstant, endInstant, null);\n    }\n\n    \n    public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type) {\n        super(startInstant, endInstant, type);\n    }\n\n    \n    public Period(ReadablePartial start, ReadablePartial end) {\n        super(start, end, null);\n    }\n\n    \n    public Period(ReadablePartial start, ReadablePartial end, PeriodType type) {\n        super(start, end, type);\n    }\n\n    \n    public Period(ReadableInstant startInstant, ReadableDuration duration) {\n        super(startInstant, duration, null);\n    }\n\n    \n    public Period(ReadableInstant startInstant, ReadableDuration duration, PeriodType type) {\n        super(startInstant, duration, type);\n    }\n\n    \n    public Period(ReadableDuration duration, ReadableInstant endInstant) {\n        super(duration, endInstant, null);\n    }\n\n    \n    public Period(ReadableDuration duration, ReadableInstant endInstant, PeriodType type) {\n        super(duration, endInstant, type);\n    }\n\n    \n    public Period(Object period) {\n        super(period, null, null);\n    }\n\n    \n    public Period(Object period, PeriodType type) {\n        super(period, type, null);\n    }\n\n    \n    public Period(Object period, Chronology chrono) {\n        super(period, null, chrono);\n    }\n\n    \n    public Period(Object period, PeriodType type, Chronology chrono) {\n        super(period, type, chrono);\n    }\n\n    \n    private Period(int[] values, PeriodType type) {\n        super(values, type);\n    }\n\n    \n    \n    public Period toPeriod() {\n        return this;\n    }\n\n    \n    \n    public int getYears() {\n        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n    }\n\n    \n    public int getMonths() {\n        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n    }\n\n    \n    public int getWeeks() {\n        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n    }\n\n    \n    public int getDays() {\n        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n    }\n\n    \n    \n    public int getHours() {\n        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n    }\n\n    \n    public int getMinutes() {\n        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n    }\n\n    \n    public int getSeconds() {\n        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n    }\n\n    \n    public int getMillis() {\n        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n    }\n\n    \n    \n    public Period withPeriodType(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        if (type.equals(getPeriodType())) {\n            return this;\n        }\n        return new Period(this, type);\n    }\n\n    \n    public Period withFields(ReadablePeriod period) {\n        if (period == null) {\n            return this;\n        }\n        int[] newValues = getValues();  \n        newValues = super.mergePeriodInto(newValues, period);\n        return new Period(newValues, getPeriodType());\n    }\n\n    \n    \n    public Period withField(DurationFieldType field, int value) {\n        if (field == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        int[] newValues = getValues();  \n        super.setFieldInto(newValues, field, value);\n        return new Period(newValues, getPeriodType());\n    }\n\n    \n    public Period withFieldAdded(DurationFieldType field, int value) {\n        if (field == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        if (value == 0) {\n            return this;\n        }\n        int[] newValues = getValues();  \n        super.addFieldInto(newValues, field, value);\n        return new Period(newValues, getPeriodType());\n    }\n\n    \n    \n    public Period withYears(int years) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withMonths(int months) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withWeeks(int weeks) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withDays(int days) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withHours(int hours) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withMinutes(int minutes) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withSeconds(int seconds) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period withMillis(int millis) {\n        int[] values = getValues();  \n        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    \n    public Period plus(ReadablePeriod period) {\n        if (period == null) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE));\n        return new Period(values, getPeriodType());\n    }\n\n    \n    \n    public Period plusYears(int years) {\n        if (years == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusMonths(int months) {\n        if (months == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusWeeks(int weeks) {\n        if (weeks == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusDays(int days) {\n        if (days == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusHours(int hours) {\n        if (hours == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusMinutes(int minutes) {\n        if (minutes == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusSeconds(int seconds) {\n        if (seconds == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period plusMillis(int millis) {\n        if (millis == 0) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n        return new Period(values, getPeriodType());\n    }\n\n    \n    \n    public Period minus(ReadablePeriod period) {\n        if (period == null) {\n            return this;\n        }\n        int[] values = getValues();  \n        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE));\n        return new Period(values, getPeriodType());\n    }\n\n    \n    \n    public Period minusYears(int years) {\n        return plusYears(-years);\n    }\n\n    \n    public Period minusMonths(int months) {\n        return plusMonths(-months);\n    }\n\n    \n    public Period minusWeeks(int weeks) {\n        return plusWeeks(-weeks);\n    }\n\n    \n    public Period minusDays(int days) {\n        return plusDays(-days);\n    }\n\n    \n    public Period minusHours(int hours) {\n        return plusHours(-hours);\n    }\n\n    \n    public Period minusMinutes(int minutes) {\n        return plusMinutes(-minutes);\n    }\n\n    \n    public Period minusSeconds(int seconds) {\n        return plusSeconds(-seconds);\n    }\n\n    \n    public Period minusMillis(int millis) {\n        return plusMillis(-millis);\n    }\n\n    \n    \n    public Period multipliedBy(int scalar) {\n        if (this == ZERO || scalar == 1) {\n            return this;\n        }\n        int[] values = getValues();  \n        for (int i = 0; i < values.length; i++) {\n            values[i] = FieldUtils.safeMultiply(values[i], scalar);\n        }\n        return new Period(values, getPeriodType());\n    }\n\n    \n    public Period negated() {\n        return multipliedBy(-1);\n    }\n\n    \n    \n    public Weeks toStandardWeeks() {\n        checkYearsAndMonths(\"Weeks\");\n        long millis = getMillis();  \n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n        long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;\n        return Weeks.weeks(FieldUtils.safeToInt(weeks));\n    }\n\n    \n    public Days toStandardDays() {\n        checkYearsAndMonths(\"Days\");\n        long millis = getMillis();  \n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n        long days = millis / DateTimeConstants.MILLIS_PER_DAY;\n        days = FieldUtils.safeAdd(days, getDays());\n        days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));\n        return Days.days(FieldUtils.safeToInt(days));\n    }\n\n    \n    public Hours toStandardHours() {\n        checkYearsAndMonths(\"Hours\");\n        long millis = getMillis();  \n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;\n        hours = FieldUtils.safeAdd(hours, getHours());\n        hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));\n        hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));\n        return Hours.hours(FieldUtils.safeToInt(hours));\n    }\n\n    \n    public Minutes toStandardMinutes() {\n        checkYearsAndMonths(\"Minutes\");\n        long millis = getMillis();  \n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;\n        minutes = FieldUtils.safeAdd(minutes, getMinutes());\n        minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));\n        minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));\n        minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));\n        return Minutes.minutes(FieldUtils.safeToInt(minutes));\n    }\n\n    \n    public Seconds toStandardSeconds() {\n        checkYearsAndMonths(\"Seconds\");\n        long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;\n        seconds = FieldUtils.safeAdd(seconds, getSeconds());\n        seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));\n        seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));\n        seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));\n        seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));\n        return Seconds.seconds(FieldUtils.safeToInt(seconds));\n    }\n\n    \n    \n    public Duration toStandardDuration() {\n        checkYearsAndMonths(\"Duration\");\n        long millis = getMillis();  \n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        return new Duration(millis);\n    }\n\n    \n    private void checkYearsAndMonths(String destintionType) {\n        if (getMonths() != 0) {\n            throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\");\n        }\n        if (getYears() != 0) {\n            throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\");\n        }\n    }\n\n    \n    \n    public Period normalizedStandard() {\n        return normalizedStandard(PeriodType.standard());\n    }\n\n    \n    \n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  \n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            long totalMonths = years * 12L + months;\n            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {\n                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);\n                result = result.withYears(normalizedYears);\n                totalMonths = totalMonths - (normalizedYears * 12);\n            }\n            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {\n                int normalizedMonths = FieldUtils.safeToInt(totalMonths);\n                result = result.withMonths(normalizedMonths);\n                totalMonths = totalMonths - normalizedMonths;\n            }\n            if (totalMonths != 0) {\n                throw new UnsupportedOperationException(\"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \" + toString());\n            }\n        }\n        return result;\n    }\n\n}\n",
      "buggy_signatures": [
        "public static Period parse(String str, PeriodFormatter formatter)",
        "public static Period years(int years)",
        "public static Period months(int months)",
        "public static Period weeks(int weeks)",
        "public static Period days(int days)",
        "public static Period hours(int hours)",
        "public static Period minutes(int minutes)",
        "public static Period seconds(int seconds)",
        "public static Period millis(int millis)",
        "public static Period fieldDifference(ReadablePartial start, ReadablePartial end)",
        "public Period()",
        "public Period(int hours, int minutes, int seconds, int millis)",
        "public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis)",
        "public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis, PeriodType type)",
        "public Period(long duration)",
        "public Period(long duration, PeriodType type)",
        "public Period(long duration, Chronology chronology)",
        "public Period(long duration, PeriodType type, Chronology chronology)",
        "public Period(long startInstant, long endInstant)",
        "public Period(long startInstant, long endInstant, PeriodType type)",
        "public Period(long startInstant, long endInstant, Chronology chrono)",
        "public Period(long startInstant, long endInstant, PeriodType type, Chronology chrono)",
        "public Period(ReadableInstant startInstant, ReadableInstant endInstant)",
        "public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type)",
        "public Period(ReadablePartial start, ReadablePartial end)",
        "public Period(ReadablePartial start, ReadablePartial end, PeriodType type)",
        "public Period(ReadableInstant startInstant, ReadableDuration duration)",
        "public Period(ReadableInstant startInstant, ReadableDuration duration, PeriodType type)",
        "public Period(ReadableDuration duration, ReadableInstant endInstant)",
        "public Period(ReadableDuration duration, ReadableInstant endInstant, PeriodType type)",
        "public Period(Object period)",
        "public Period(Object period, PeriodType type)",
        "public Period(Object period, Chronology chrono)",
        "public Period(Object period, PeriodType type, Chronology chrono)",
        "private Period(int[] values, PeriodType type)",
        "public Period toPeriod()",
        "public int getYears()",
        "public int getMonths()",
        "public int getWeeks()",
        "public int getDays()",
        "public int getHours()",
        "public int getMinutes()",
        "public int getSeconds()",
        "public int getMillis()",
        "public Period withPeriodType(PeriodType type)",
        "public Period withFields(ReadablePeriod period)",
        "public Period withField(DurationFieldType field, int value)",
        "public Period withFieldAdded(DurationFieldType field, int value)",
        "public Period withYears(int years)",
        "public Period withMonths(int months)",
        "public Period withWeeks(int weeks)",
        "public Period withDays(int days)",
        "public Period withHours(int hours)",
        "public Period withMinutes(int minutes)",
        "public Period withSeconds(int seconds)",
        "public Period withMillis(int millis)",
        "public Period plus(ReadablePeriod period)",
        "public Period plusYears(int years)",
        "public Period plusMonths(int months)",
        "public Period plusWeeks(int weeks)",
        "public Period plusDays(int days)",
        "public Period plusHours(int hours)",
        "public Period plusMinutes(int minutes)",
        "public Period plusSeconds(int seconds)",
        "public Period plusMillis(int millis)",
        "public Period minus(ReadablePeriod period)",
        "public Period minusYears(int years)",
        "public Period minusMonths(int months)",
        "public Period minusWeeks(int weeks)",
        "public Period minusDays(int days)",
        "public Period minusHours(int hours)",
        "public Period minusMinutes(int minutes)",
        "public Period minusSeconds(int seconds)",
        "public Period minusMillis(int millis)",
        "public Period multipliedBy(int scalar)",
        "public Period negated()",
        "public Weeks toStandardWeeks()",
        "public Days toStandardDays()",
        "public Hours toStandardHours()",
        "public Minutes toStandardMinutes()",
        "public Seconds toStandardSeconds()",
        "public Duration toStandardDuration()",
        "private void checkYearsAndMonths(String destintionType)",
        "public Period normalizedStandard()",
        "public Period normalizedStandard(PeriodType type)"
      ],
      "fixed_signatures": [
        "public static Period parse(String str, PeriodFormatter formatter)",
        "public static Period years(int years)",
        "public static Period months(int months)",
        "public static Period weeks(int weeks)",
        "public static Period days(int days)",
        "public static Period hours(int hours)",
        "public static Period minutes(int minutes)",
        "public static Period seconds(int seconds)",
        "public static Period millis(int millis)",
        "public static Period fieldDifference(ReadablePartial start, ReadablePartial end)",
        "public Period()",
        "public Period(int hours, int minutes, int seconds, int millis)",
        "public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis)",
        "public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis, PeriodType type)",
        "public Period(long duration)",
        "public Period(long duration, PeriodType type)",
        "public Period(long duration, Chronology chronology)",
        "public Period(long duration, PeriodType type, Chronology chronology)",
        "public Period(long startInstant, long endInstant)",
        "public Period(long startInstant, long endInstant, PeriodType type)",
        "public Period(long startInstant, long endInstant, Chronology chrono)",
        "public Period(long startInstant, long endInstant, PeriodType type, Chronology chrono)",
        "public Period(ReadableInstant startInstant, ReadableInstant endInstant)",
        "public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type)",
        "public Period(ReadablePartial start, ReadablePartial end)",
        "public Period(ReadablePartial start, ReadablePartial end, PeriodType type)",
        "public Period(ReadableInstant startInstant, ReadableDuration duration)",
        "public Period(ReadableInstant startInstant, ReadableDuration duration, PeriodType type)",
        "public Period(ReadableDuration duration, ReadableInstant endInstant)",
        "public Period(ReadableDuration duration, ReadableInstant endInstant, PeriodType type)",
        "public Period(Object period)",
        "public Period(Object period, PeriodType type)",
        "public Period(Object period, Chronology chrono)",
        "public Period(Object period, PeriodType type, Chronology chrono)",
        "private Period(int[] values, PeriodType type)",
        "public Period toPeriod()",
        "public int getYears()",
        "public int getMonths()",
        "public int getWeeks()",
        "public int getDays()",
        "public int getHours()",
        "public int getMinutes()",
        "public int getSeconds()",
        "public int getMillis()",
        "public Period withPeriodType(PeriodType type)",
        "public Period withFields(ReadablePeriod period)",
        "public Period withField(DurationFieldType field, int value)",
        "public Period withFieldAdded(DurationFieldType field, int value)",
        "public Period withYears(int years)",
        "public Period withMonths(int months)",
        "public Period withWeeks(int weeks)",
        "public Period withDays(int days)",
        "public Period withHours(int hours)",
        "public Period withMinutes(int minutes)",
        "public Period withSeconds(int seconds)",
        "public Period withMillis(int millis)",
        "public Period plus(ReadablePeriod period)",
        "public Period plusYears(int years)",
        "public Period plusMonths(int months)",
        "public Period plusWeeks(int weeks)",
        "public Period plusDays(int days)",
        "public Period plusHours(int hours)",
        "public Period plusMinutes(int minutes)",
        "public Period plusSeconds(int seconds)",
        "public Period plusMillis(int millis)",
        "public Period minus(ReadablePeriod period)",
        "public Period minusYears(int years)",
        "public Period minusMonths(int months)",
        "public Period minusWeeks(int weeks)",
        "public Period minusDays(int days)",
        "public Period minusHours(int hours)",
        "public Period minusMinutes(int minutes)",
        "public Period minusSeconds(int seconds)",
        "public Period minusMillis(int millis)",
        "public Period multipliedBy(int scalar)",
        "public Period negated()",
        "public Weeks toStandardWeeks()",
        "public Days toStandardDays()",
        "public Hours toStandardHours()",
        "public Minutes toStandardMinutes()",
        "public Seconds toStandardSeconds()",
        "public Duration toStandardDuration()",
        "private void checkYearsAndMonths(String destintionType)",
        "public Period normalizedStandard()",
        "public Period normalizedStandard(PeriodType type)"
      ],
      "methods": [
        {
          "buggy_method": "  public Period normalizedStandard(PeriodType type) {\n  type = DateTimeUtils.getPeriodType(type);\n  long millis = getMillis();  \n  millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n  millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n  millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n  millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n  millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n  Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n  int years = getYears();\n  int months = getMonths();\n  if (years != 0 || months != 0) {\n  years = FieldUtils.safeAdd(years, months / 12);\n  months = months % 12;\n  if (years != 0) {\n  result = result.withYears(years);\n  }\n  if (months != 0) {\n  result = result.withMonths(months);\n  }\n  }\n  return result;\n  }",
          "fixed_method": "  public Period normalizedStandard(PeriodType type) {\n  type = DateTimeUtils.getPeriodType(type);\n  long millis = getMillis();  \n  millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n  millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n  millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n  millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n  millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n  Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n  int years = getYears();\n  int months = getMonths();\n  if (years != 0 || months != 0) {\n  long totalMonths = years * 12L + months;\n  if (type.isSupported(DurationFieldType.YEARS_TYPE)) {\n  int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);\n  result = result.withYears(normalizedYears);\n  totalMonths = totalMonths - (normalizedYears * 12);\n  }\n  if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {\n  int normalizedMonths = FieldUtils.safeToInt(totalMonths);\n  result = result.withMonths(normalizedMonths);\n  totalMonths = totalMonths - normalizedMonths;\n  }\n  if (totalMonths != 0) {\n  throw new UnsupportedOperationException(\"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \" + toString());\n  }\n  }\n  return result;\n  }",
          "diff": [
            "@@ -1625,14 +1625,20 @@",
            "         int years = getYears();\n",
            "         int months = getMonths();\n",
            "         if (years != 0 || months != 0) {\n",
            "-            years = FieldUtils.safeAdd(years, months / 12);\n",
            "-            months = months % 12;\n",
            "-            if (years != 0) {\n",
            "-                result = result.withYears(years);\n",
            "+            long totalMonths = years * 12L + months;\n",
            "+            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {\n",
            "+                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);\n",
            "+                result = result.withYears(normalizedYears);\n",
            "+                totalMonths = totalMonths - (normalizedYears * 12);\n",
            "             }\n",
            "-            if (months != 0) {\n",
            "-                result = result.withMonths(months);\n",
            "+            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {\n",
            "+                int normalizedMonths = FieldUtils.safeToInt(totalMonths);\n",
            "+                result = result.withMonths(normalizedMonths);\n",
            "+                totalMonths = totalMonths - normalizedMonths;\n",
            "             }\n",
            "+            if (totalMonths != 0) {\n",
            "+                throw new UnsupportedOperationException(\"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \" + toString());\n",
            "+            }\n",
            "         }\n",
            "         return result;\n",
            "     }\n"
          ],
          "changed_lines": 18
        }
      ]
    }
  ]
}
