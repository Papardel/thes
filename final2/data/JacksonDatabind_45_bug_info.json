{
  "bug_id": "45",
  "failed_tests": {
    "com.fasterxml.jackson.databind.ser.DateSerializationTest": [
      {
        "methodName": "testDateDefaultShape",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<{\"date\":[\"1970-01-01\"]}> but was:<{\"date\":[0]}>",
        "fail_line": "        assertEquals(aposToQuotes(\"{'date':'1970-01-01'}\"), json);",
        "test_source": "  public void testDateDefaultShape() throws Exception {\n  ObjectMapper mapper = new ObjectMapper();\n  // No @JsonFormat => default to user config\n  mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  String json = mapper.writeValueAsString(new DateAsDefaultBean(0L));\n  assertEquals(aposToQuotes(\"{'date':0}\"), json);\n  mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  json = mapper.writeValueAsString(new DateAsDefaultBean(0L));\n  assertEquals(aposToQuotes(\"{'date':'1970-01-01T00:00:00.000+0000'}\"), json);\n\n  // Empty @JsonFormat => default to user config\n  mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  json = mapper.writeValueAsString(new DateAsDefaultBeanWithEmptyJsonFormat(0L));\n  assertEquals(aposToQuotes(\"{'date':0}\"), json);\n  mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  json = mapper.writeValueAsString(new DateAsDefaultBeanWithEmptyJsonFormat(0L));\n  assertEquals(aposToQuotes(\"{'date':'1970-01-01T00:00:00.000+0000'}\"), json);\n\n  // @JsonFormat with Shape.ANY and pattern => STRING shape, regardless of user config\n  mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  json = mapper.writeValueAsString(new DateAsDefaultBeanWithPattern(0L));\n  assertEquals(aposToQuotes(\"{'date':'1970-01-01'}\"), json);\n  mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  json = mapper.writeValueAsString(new DateAsDefaultBeanWithPattern(0L));\n  assertEquals(aposToQuotes(\"{'date':'1970-01-01'}\"), json);\n\n  // @JsonFormat with Shape.ANY and locale => STRING shape, regardless of user config\n  mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  json = mapper.writeValueAsString(new DateAsDefaultBeanWithLocale(0L));\n  assertEquals(aposToQuotes(\"{'date':'1970-01-01T00:00:00.000+0000'}\"), json);\n  mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  json = mapper.writeValueAsString(new DateAsDefaultBeanWithLocale(0L));\n  assertEquals(aposToQuotes(\"{'date':'1970-01-01T00:00:00.000+0000'}\"), json);\n\n  // @JsonFormat with Shape.ANY and timezone => STRING shape, regardless of user config\n  mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  json = mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));\n  assertEquals(aposToQuotes(\"{'date':'1970-01-01T01:00:00.000+0100'}\"), json);\n  mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  json = mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));\n  assertEquals(aposToQuotes(\"{'date':'1970-01-01T01:00:00.000+0100'}\"), json);\n  }",
        "stack": [
          "DateSerializationTest.testDateDefaultShape line 288"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.ser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.introspect.Annotated;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.*;\nimport com.fasterxml.jackson.databind.ser.ContextualSerializer;\nimport com.fasterxml.jackson.databind.util.StdDateFormat;\n\n@SuppressWarnings(\"serial\")\npublic abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat) {\n        super(type);\n        _useTimestamp = useTimestamp;\n        _customFormat = customFormat;\n    }\n\n    public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n        if (property != null) {\n            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n            if (format != null) {\n\n            \t\n                JsonFormat.Shape shape = format.getShape();\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                if (format.getShape() == JsonFormat.Shape.STRING) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n            }\n        }\n        return this;\n    }\n\n    \n\n    @Deprecated\n    @Override\n    public boolean isEmpty(T value) {\n        \n        return (value == null) || (_timestamp(value) == 0L);\n    }\n\n    @Override\n    public boolean isEmpty(SerializerProvider serializers, T value) {\n        \n        return (value == null) || (_timestamp(value) == 0L);\n    }\n    \n    protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint) {\n        \n        return createSchemaNode(_asTimestamp(serializers) ? \"number\" : \"string\", true);\n    }\n\n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        _acceptJsonFormatVisitor(visitor, typeHint, _asTimestamp(visitor.getProvider()));\n    }\n\n    \n\n    @Override\n    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers) {\n        if (_useTimestamp != null) {\n            return _useTimestamp.booleanValue();\n        }\n        if (_customFormat == null) {\n            if (serializers != null) {\n                return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n            }\n            \n            throw new IllegalArgumentException(\"Null SerializerProvider passed for \"+handledType().getName());\n        }\n        return false;\n    }\n\n    protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException {\n        if (asNumber) {\n            visitIntFormat(visitor, typeHint,\n                    JsonParser.NumberType.LONG, JsonValueFormat.UTC_MILLISEC);\n        } else {\n            visitStringFormat(visitor, typeHint, JsonValueFormat.DATE_TIME);\n        }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.ser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.introspect.Annotated;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.*;\nimport com.fasterxml.jackson.databind.ser.ContextualSerializer;\nimport com.fasterxml.jackson.databind.util.StdDateFormat;\n\n@SuppressWarnings(\"serial\")\npublic abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat) {\n        super(type);\n        _useTimestamp = useTimestamp;\n        _customFormat = customFormat;\n    }\n\n    public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n        if (property != null) {\n            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n            if (format != null) {\n\n            \t\n                JsonFormat.Shape shape = format.getShape();\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                                || format.hasLocale() || format.hasTimeZone()) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n            }\n        }\n        return this;\n    }\n\n    \n\n    @Deprecated\n    @Override\n    public boolean isEmpty(T value) {\n        \n        return (value == null) || (_timestamp(value) == 0L);\n    }\n\n    @Override\n    public boolean isEmpty(SerializerProvider serializers, T value) {\n        \n        return (value == null) || (_timestamp(value) == 0L);\n    }\n    \n    protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint) {\n        \n        return createSchemaNode(_asTimestamp(serializers) ? \"number\" : \"string\", true);\n    }\n\n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        _acceptJsonFormatVisitor(visitor, typeHint, _asTimestamp(visitor.getProvider()));\n    }\n\n    \n\n    @Override\n    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers) {\n        if (_useTimestamp != null) {\n            return _useTimestamp.booleanValue();\n        }\n        if (_customFormat == null) {\n            if (serializers != null) {\n                return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n            }\n            \n            throw new IllegalArgumentException(\"Null SerializerProvider passed for \"+handledType().getName());\n        }\n        return false;\n    }\n\n    protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException {\n        if (asNumber) {\n            visitIntFormat(visitor, typeHint,\n                    JsonParser.NumberType.LONG, JsonValueFormat.UTC_MILLISEC);\n        } else {\n            visitStringFormat(visitor, typeHint, JsonValueFormat.DATE_TIME);\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat)",
        "public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException",
        "public boolean isEmpty(T value)",
        "public boolean isEmpty(SerializerProvider serializers, T value)",
        "protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint)",
        "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
        "public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers)",
        "protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException"
      ],
      "fixed_signatures": [
        "public abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat)",
        "public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException",
        "public boolean isEmpty(T value)",
        "public boolean isEmpty(SerializerProvider serializers, T value)",
        "protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint)",
        "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
        "public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers)",
        "protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException"
      ],
      "methods": [
        {
          "buggy_method": "  public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n  if (property != null) {\n  JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n  if (format != null) {\n\n  \t\n  JsonFormat.Shape shape = format.getShape();\n  if (shape.isNumeric()) {\n  return withFormat(Boolean.TRUE, null);\n  }\n\n  if (format.getShape() == JsonFormat.Shape.STRING) {\n  TimeZone tz = format.getTimeZone();\n  final String pattern = format.hasPattern()\n  ? format.getPattern()\n  : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n  final Locale loc = format.hasLocale()\n  ? format.getLocale()\n  : serializers.getLocale();\n  SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n  if (tz == null) {\n  tz = serializers.getTimeZone();\n  }\n  df.setTimeZone(tz);\n  return withFormat(Boolean.FALSE, df);\n  }\n  }\n  }\n  return this;\n  }",
          "fixed_method": "  public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n  if (property != null) {\n  JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n  if (format != null) {\n\n  \t\n  JsonFormat.Shape shape = format.getShape();\n  if (shape.isNumeric()) {\n  return withFormat(Boolean.TRUE, null);\n  }\n\n  if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n  || format.hasLocale() || format.hasTimeZone()) {\n  TimeZone tz = format.getTimeZone();\n  final String pattern = format.hasPattern()\n  ? format.getPattern()\n  : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n  final Locale loc = format.hasLocale()\n  ? format.getLocale()\n  : serializers.getLocale();\n  SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n  if (tz == null) {\n  tz = serializers.getTimeZone();\n  }\n  df.setTimeZone(tz);\n  return withFormat(Boolean.FALSE, df);\n  }\n  }\n  }\n  return this;\n  }",
          "diff": [
            "@@ -60,7 +60,8 @@",
            "                     return withFormat(Boolean.TRUE, null);\n",
            "                 }\n",
            " \n",
            "-                if (format.getShape() == JsonFormat.Shape.STRING) {\n",
            "+                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n",
            "+                                || format.hasLocale() || format.hasTimeZone()) {\n",
            "                     TimeZone tz = format.getTimeZone();\n",
            "                     final String pattern = format.hasPattern()\n",
            "                                     ? format.getPattern()\n"
          ],
          "changed_lines": 3
        }
      ]
    }
  ]
}
