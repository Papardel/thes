{
  "bug_id": "21",
  "failed_tests": {
    "com.fasterxml.jackson.databind.deser.TestEnumDeserialization": [
      {
        "methodName": "testEnumWithJsonPropertyRename",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<[\"[b\",\"a]\"]> but was:<[\"[B\",\"A]\"]>",
        "fail_line": "        assertEquals(\"[\\\"b\\\",\\\"a\\\"]\", json);",
        "test_source": "  public void testEnumWithJsonPropertyRename() throws Exception {\n  String json = MAPPER.writeValueAsString(new EnumWithPropertyAnno[] {\n  EnumWithPropertyAnno.B, EnumWithPropertyAnno.A\n  });\n  assertEquals(\"[\\\"b\\\",\\\"a\\\"]\", json);\n\n  // and while not really proper place, let's also verify deser while we're at it\n  EnumWithPropertyAnno[] result = MAPPER.readValue(json, EnumWithPropertyAnno[].class);\n  assertNotNull(result);\n  assertEquals(2, result.length);\n  assertSame(EnumWithPropertyAnno.B, result[0]);\n  assertSame(EnumWithPropertyAnno.A, result[1]);\n  }",
        "stack": [
          "TestEnumDeserialization.testEnumWithJsonPropertyRename line 475"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.introspect;\n\nimport java.lang.annotation.Annotation;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.*;\nimport com.fasterxml.jackson.core.Version;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.*;\nimport com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\nimport com.fasterxml.jackson.databind.cfg.MapperConfig;\nimport com.fasterxml.jackson.databind.jsontype.NamedType;\nimport com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\nimport com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\nimport com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter;\nimport com.fasterxml.jackson.databind.ser.std.RawSerializer;\nimport com.fasterxml.jackson.databind.util.*;\n\n\npublic class JacksonAnnotationIntrospector extends AnnotationIntrospector implements java.io.Serializable { private static final long serialVersionUID = 1L; public JacksonAnnotationIntrospector() { }\n\n    @Override\n    public Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }\n\n    \n\n    \n    @Override\n    public boolean isAnnotationBundle(Annotation ann) {\n        return ann.annotationType().getAnnotation(JacksonAnnotationsInside.class) != null;\n    }\n\n    \n\n    \n        \n        \n        \n            \n            \n\n    \n\n    @Override\n    public PropertyName findRootName(AnnotatedClass ac) {\n        JsonRootName ann = _findAnnotation(ac, JsonRootName.class);\n        if (ann == null) {\n            return null;\n        }\n        String ns = ann.namespace();\n        if (ns != null && ns.length() == 0) {\n            ns = null;\n        }\n        return PropertyName.construct(ann.value(), ns);\n    }\n\n    @Override\n    @Deprecated \n    public String[] findPropertiesToIgnore(Annotated ac) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        return (ignore == null) ? null : ignore.value();\n    }\n\n    @Override \n    public String[] findPropertiesToIgnore(Annotated ac, boolean forSerialization) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        if (ignore == null) {\n            return null;\n        }\n        \n        if (forSerialization) {\n            if (ignore.allowGetters()) {\n                return null;\n            }\n        } else {\n            if (ignore.allowSetters()) {\n                return null;\n            }\n        }\n        return ignore.value();\n    }\n    \n    @Override\n    public Boolean findIgnoreUnknownProperties(AnnotatedClass ac) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        return (ignore == null) ? null : ignore.ignoreUnknown();\n    }\n\n    @Override\n    public Boolean isIgnorableType(AnnotatedClass ac) {\n        JsonIgnoreType ignore = _findAnnotation(ac, JsonIgnoreType.class);\n        return (ignore == null) ? null : ignore.value();\n    }\n\n    \n    @Deprecated\n    @Override\n    public Object findFilterId(AnnotatedClass ac) {\n        return _findFilterId(ac);\n    }\n    \n    @Override\n    public Object findFilterId(Annotated a) {\n        return _findFilterId(a);\n    }\n\n    protected final Object _findFilterId(Annotated a) {\n        JsonFilter ann = _findAnnotation(a, JsonFilter.class);\n        if (ann != null) {\n            String id = ann.value();\n            \n            if (id.length() > 0) {\n                return id;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findNamingStrategy(AnnotatedClass ac) {\n        JsonNaming ann = _findAnnotation(ac, JsonNaming.class);\n        return (ann == null) ? null : ann.value();\n    } \n\n    \n    \n    @Override\n    public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker) {\n        JsonAutoDetect ann = _findAnnotation(ac, JsonAutoDetect.class);\n        return (ann == null) ? checker : checker.with(ann);\n    }\n\n    \n\n    @Override\n    public String findImplicitPropertyName(AnnotatedMember param) {\n        \n        \n        return null;\n    }\n    \n    @Override\n    public boolean hasIgnoreMarker(AnnotatedMember m) {\n        return _isIgnorable(m);\n    }\n\n    @Override\n    public Boolean hasRequiredMarker(AnnotatedMember m) {\n        JsonProperty ann = _findAnnotation(m, JsonProperty.class);\n        if (ann != null) {\n            return ann.required();\n        }\n        return null;\n    }\n\n    @Override\n    public JsonProperty.Access findPropertyAccess(Annotated m) {\n        JsonProperty ann = _findAnnotation(m, JsonProperty.class);\n        if (ann != null) {\n            return ann.access();\n        }\n        return null;\n    }\n\n    @Override\n    public String findPropertyDescription(Annotated ann) {\n        JsonPropertyDescription desc = _findAnnotation(ann, JsonPropertyDescription.class);\n        return (desc == null) ? null : desc.value();\n    }\n\n    @Override\n    public Integer findPropertyIndex(Annotated ann) {\n        JsonProperty prop = _findAnnotation(ann, JsonProperty.class);\n        if (prop != null) {\n          int ix = prop.index();\n          if (ix != JsonProperty.INDEX_UNKNOWN) {\n               return Integer.valueOf(ix);\n          }\n        }\n        return null;\n    }\n    \n    @Override\n    public String findPropertyDefaultValue(Annotated ann) {\n        JsonProperty prop = _findAnnotation(ann, JsonProperty.class);\n        if (prop == null) {\n            return null;\n        }\n        String str = prop.defaultValue();\n        \n        return str.isEmpty() ? null : str;\n    }\n    \n    @Override\n    public JsonFormat.Value findFormat(Annotated ann) {\n        JsonFormat f = _findAnnotation(ann, JsonFormat.class);\n        return (f == null)  ? null : new JsonFormat.Value(f);\n    }\n\n    @Override        \n    public ReferenceProperty findReferenceType(AnnotatedMember member) {\n        JsonManagedReference ref1 = _findAnnotation(member, JsonManagedReference.class);\n        if (ref1 != null) {\n            return AnnotationIntrospector.ReferenceProperty.managed(ref1.value());\n        }\n        JsonBackReference ref2 = _findAnnotation(member, JsonBackReference.class);\n        if (ref2 != null) {\n            return AnnotationIntrospector.ReferenceProperty.back(ref2.value());\n        }\n        return null;\n    }\n\n    @Override\n    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) {\n        JsonUnwrapped ann = _findAnnotation(member, JsonUnwrapped.class);\n        \n        \n        if (ann == null || !ann.enabled()) {\n            return null;\n        }\n        String prefix = ann.prefix();\n        String suffix = ann.suffix();\n        return NameTransformer.simpleTransformer(prefix, suffix);\n    }\n\n    @Override\n    public Object findInjectableValueId(AnnotatedMember m) {\n        JacksonInject ann = _findAnnotation(m, JacksonInject.class);\n        if (ann == null) {\n            return null;\n        }\n        \n        String id = ann.value();\n        if (id.length() == 0) {\n            \n            if (!(m instanceof AnnotatedMethod)) {\n                return m.getRawType().getName();\n            }\n            AnnotatedMethod am = (AnnotatedMethod) m;\n            if (am.getParameterCount() == 0) {\n                return m.getRawType().getName();\n            }\n            return am.getRawParameterType(0).getName();\n        }\n        return id;\n    }\n\n    @Override\n    public Class<?>[] findViews(Annotated a) {\n        JsonView ann = _findAnnotation(a, JsonView.class);\n        return (ann == null) ? null : ann.value();\n    }\n\n    \n\n    @Override\n    public TypeResolverBuilder<?> findTypeResolver(MapperConfig<?> config, AnnotatedClass ac, JavaType baseType) {\n        return _findTypeResolver(config, ac, baseType);\n    }\n\n    @Override\n    public TypeResolverBuilder<?> findPropertyTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType baseType) {\n        \n        if (baseType.isContainerType()) return null;\n        \n        return _findTypeResolver(config, am, baseType);\n    }\n\n    @Override\n    public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType) {\n        \n        if (!containerType.isContainerType()) {\n            throw new IllegalArgumentException(\"Must call method with a container type (got \"+containerType+\")\");\n        }\n        return _findTypeResolver(config, am, containerType);\n    }\n    \n    @Override\n    public List<NamedType> findSubtypes(Annotated a) {\n        JsonSubTypes t = _findAnnotation(a, JsonSubTypes.class);\n        if (t == null) return null;\n        JsonSubTypes.Type[] types = t.value();\n        ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);\n        for (JsonSubTypes.Type type : types) {\n            result.add(new NamedType(type.value(), type.name()));\n        }\n        return result;\n    }\n\n    @Override        \n    public String findTypeName(AnnotatedClass ac) {\n        JsonTypeName tn = _findAnnotation(ac, JsonTypeName.class);\n        return (tn == null) ? null : tn.value();\n    }\n\n    @Override\n    public Boolean isTypeId(AnnotatedMember member) {\n        return _hasAnnotation(member, JsonTypeId.class);\n    }\n\n    \n\n    @Override\n    public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n        JsonIdentityInfo info = _findAnnotation(ann, JsonIdentityInfo.class);\n        if (info == null || info.generator() == ObjectIdGenerators.None.class) {\n            return null;\n        }\n        \n        PropertyName name = PropertyName.construct(info.property());\n        return new ObjectIdInfo(name, info.scope(), info.generator(), info.resolver());\n    }\n\n    @Override\n    public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n        JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n        if (ref != null) {\n            objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n        }\n        return objectIdInfo;\n    }\n\n    \n\n    @Override\n    public Object findSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.using();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        \n        \n        JsonRawValue annRaw =  _findAnnotation(a, JsonRawValue.class);\n        if ((annRaw != null) && annRaw.value()) {\n            \n            Class<?> cls = a.getRawType();\n            return new RawSerializer<Object>(cls);\n        }       \n        return null;\n    }\n\n    @Override\n    public Object findKeySerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.keyUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findContentSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.contentUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findNullSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.nullsUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue) {\n        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n        if (inc != null) {\n            return inc.value();\n        }\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            JsonSerialize.Inclusion i2 = ann.include();\n            switch (i2) {\n            case ALWAYS:\n                return JsonInclude.Include.ALWAYS;\n            case NON_NULL:\n                return JsonInclude.Include.NON_NULL;\n            case NON_DEFAULT:\n                return JsonInclude.Include.NON_DEFAULT;\n            case NON_EMPTY:\n                return JsonInclude.Include.NON_EMPTY;\n            case DEFAULT_INCLUSION: \n                break;\n            }\n        }\n        return defValue;\n    }\n\n    @Override\n    public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue) {\n        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n        return (inc == null) ? defValue : inc.content();\n    }\n\n    @Override\n    public Class<?> findSerializationType(Annotated am) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.as());\n    }\n    \n    @Override\n    public Class<?> findSerializationKeyType(Annotated am, JavaType baseType) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n    }\n\n    @Override\n    public Class<?> findSerializationContentType(Annotated am, JavaType baseType) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n    }\n    \n    @Override\n    public JsonSerialize.Typing findSerializationTyping(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : ann.typing();\n    }\n\n    @Override\n    public Object findSerializationConverter(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n    }\n\n    @Override\n    public Object findSerializationContentConverter(AnnotatedMember a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n    }\n\n    \n\n    @Override\n    public String[] findSerializationPropertyOrder(AnnotatedClass ac) {\n        JsonPropertyOrder order = _findAnnotation(ac, JsonPropertyOrder.class);\n        return (order == null) ? null : order.value();\n    }\n\n    @Override\n    public Boolean findSerializationSortAlphabetically(Annotated ann) {\n        return _findSortAlpha(ann);\n    }\n\n    @Override\n    @Deprecated\n    public Boolean findSerializationSortAlphabetically(AnnotatedClass ac) {\n        return _findSortAlpha(ac);\n    }\n\n    private final Boolean _findSortAlpha(Annotated ann) {\n        JsonPropertyOrder order = _findAnnotation(ann, JsonPropertyOrder.class);\n        return (order == null) ? null : order.alphabetic();\n    }\n\n    @Override\n    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac, List<BeanPropertyWriter> properties) {\n        JsonAppend ann = _findAnnotation(ac, JsonAppend.class);\n        if (ann == null) {\n            return;\n        }\n        final boolean prepend = ann.prepend();\n        JavaType propType = null;\n\n        \n        JsonAppend.Attr[] attrs = ann.attrs();\n        for (int i = 0, len = attrs.length; i < len; ++i) {\n            if (propType == null) {\n                propType = config.constructType(Object.class);\n            }\n            BeanPropertyWriter bpw = _constructVirtualProperty(attrs[i],\n                    config, ac, propType);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n\n        \n        JsonAppend.Prop[] props = ann.props();\n        for (int i = 0, len = props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _constructVirtualProperty(props[i],\n                    config, ac);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n    }\n\n    protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr, MapperConfig<?> config, AnnotatedClass ac, JavaType type) {\n        PropertyMetadata metadata = attr.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        \n        String attrName = attr.value();\n\n        \n        PropertyName propName = _propertyName(attr.propName(), attr.propNamespace());\n        if (!propName.hasSimpleName()) {\n            propName = PropertyName.construct(attrName);\n        }\n        \n        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                attrName, type.getRawClass());\n        \n        SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, attr.include());\n        \n        return AttributePropertyWriter.construct(attrName, propDef,\n                ac.getAnnotations(), type);\n    }\n\n    protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac) {\n        PropertyMetadata metadata = prop.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        PropertyName propName = _propertyName(prop.name(), prop.namespace());\n        JavaType type = config.constructType(prop.type());\n        \n        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                propName.getSimpleName(), type.getRawClass());\n        \n        SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, prop.include());\n\n        Class<?> implClass = prop.value();\n\n        HandlerInstantiator hi = config.getHandlerInstantiator();\n        VirtualBeanPropertyWriter bpw = (hi == null) ? null\n                : hi.virtualPropertyWriterInstance(config, implClass);\n        if (bpw == null) {\n            bpw = (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass,\n                    config.canOverrideAccessModifiers());\n        }\n\n        \n        return bpw.withConfig(config, ac, propDef, type);\n    }\n\n    \n\n    @Override\n    public PropertyName findNameForSerialization(Annotated a) {\n        String name = null;\n\n        JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n        if (jg != null) {\n            name = jg.value();\n        } else {\n            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n            if (pann != null) {\n                name = pann.value();\n            } else if (_hasAnnotation(a, JsonSerialize.class)\n                    || _hasAnnotation(a, JsonView.class)\n                    || _hasAnnotation(a, JsonRawValue.class)) {\n                name = \"\";\n            } else {\n                return null;\n            }\n        }\n        return PropertyName.construct(name);\n    }\n\n    @Override\n    public boolean hasAsValueAnnotation(AnnotatedMethod am) {\n        JsonValue ann = _findAnnotation(am, JsonValue.class);\n        \n        return (ann != null && ann.value());\n    }\n\n    \n\n    @Override\n    public Object findDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonDeserializer> deserClass = ann.using();\n            if (deserClass != JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findKeyDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            Class<? extends KeyDeserializer> deserClass = ann.keyUsing();\n            if (deserClass != KeyDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findContentDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonDeserializer> deserClass = ann.contentUsing();\n            if (deserClass != JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Class<?> findDeserializationType(Annotated am, JavaType baseType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.as());\n    }\n\n    @Override\n    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n    }\n\n    @Override\n    public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n    }\n\n    @Override\n    public Object findDeserializationConverter(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n    }\n\n    @Override\n    public Object findDeserializationContentConverter(AnnotatedMember a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n    }\n\n    \n    \n    @Override\n    public Object findValueInstantiator(AnnotatedClass ac) {\n        JsonValueInstantiator ann = _findAnnotation(ac, JsonValueInstantiator.class);\n        \n        return (ann == null) ? null : ann.value();\n    }\n\n    @Override\n    public Class<?> findPOJOBuilder(AnnotatedClass ac) {\n        JsonDeserialize ann = _findAnnotation(ac, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.builder());\n    }\n\n    @Override\n    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {\n        JsonPOJOBuilder ann = _findAnnotation(ac, JsonPOJOBuilder.class);\n        return (ann == null) ? null : new JsonPOJOBuilder.Value(ann);\n    }\n    \n    \n\n    @Override\n    public PropertyName findNameForDeserialization(Annotated a) {\n        String name;\n\n        \n        \n        JsonSetter js = _findAnnotation(a, JsonSetter.class);\n        if (js != null) {\n            name = js.value();\n        } else {\n            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n            if (pann != null) {\n                name = pann.value();\n                \n            } else if (_hasAnnotation(a, JsonDeserialize.class)\n                    || _hasAnnotation(a, JsonView.class)\n                    || _hasAnnotation(a, JsonUnwrapped.class) \n                    || _hasAnnotation(a, JsonBackReference.class)\n                    || _hasAnnotation(a, JsonManagedReference.class)) {\n                    name = \"\";\n            } else {\n                return null;\n            }\n        }\n        return PropertyName.construct(name);\n    }\n    \n    @Override\n    public boolean hasAnySetterAnnotation(AnnotatedMethod am) {\n        \n        return _hasAnnotation(am, JsonAnySetter.class);\n    }\n\n    @Override\n    public boolean hasAnyGetterAnnotation(AnnotatedMethod am) {\n        \n        return _hasAnnotation(am, JsonAnyGetter.class);\n    }\n\n    @Override\n    public boolean hasCreatorAnnotation(Annotated a) {\n        \n         JsonCreator ann = _findAnnotation(a, JsonCreator.class);\n         return (ann != null && ann.mode() != JsonCreator.Mode.DISABLED);\n    }\n\n    @Override\n    public JsonCreator.Mode findCreatorBinding(Annotated a) {\n        JsonCreator ann = _findAnnotation(a, JsonCreator.class);\n        return (ann == null) ? null : ann.mode();\n    }\n\n    \n\n    protected boolean _isIgnorable(Annotated a) {\n        JsonIgnore ann = _findAnnotation(a, JsonIgnore.class);\n        return (ann != null && ann.value());\n    }\n\n    protected Class<?> _classIfExplicit(Class<?> cls) {\n        if (cls == null || ClassUtil.isBogusClass(cls)) {\n            return null;\n        }\n        return cls;\n    }\n\n    protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {\n        cls = _classIfExplicit(cls);\n        return (cls == null || cls == implicit) ? null : cls;\n    }\n\n    protected PropertyName _propertyName(String localName, String namespace) {\n        if (localName.isEmpty()) {\n            return PropertyName.USE_DEFAULT;\n        }\n        if (namespace == null || namespace.isEmpty()) {\n            return PropertyName.construct(localName);\n        }\n        return PropertyName.construct(localName, namespace);\n    }\n\n    \n    @SuppressWarnings(\"deprecation\")\n    protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config, Annotated ann, JavaType baseType) {\n        \n        TypeResolverBuilder<?> b;\n        JsonTypeInfo info = _findAnnotation(ann, JsonTypeInfo.class);\n        JsonTypeResolver resAnn = _findAnnotation(ann, JsonTypeResolver.class);\n        \n        if (resAnn != null) {\n            if (info == null) {\n                return null;\n            }\n            \n            b = config.typeResolverBuilderInstance(ann, resAnn.value());\n        } else { \n            if (info == null) {\n                return null;\n            }\n            \n            if (info.use() == JsonTypeInfo.Id.NONE) {\n                return _constructNoTypeResolverBuilder();\n            }\n            b = _constructStdTypeResolverBuilder();\n        }\n        \n        JsonTypeIdResolver idResInfo = _findAnnotation(ann, JsonTypeIdResolver.class);\n        TypeIdResolver idRes = (idResInfo == null) ? null\n                : config.typeIdResolverInstance(ann, idResInfo.value());\n        if (idRes != null) { \n            idRes.init(baseType);\n        }\n        b = b.init(info.use(), idRes);\n        \n        JsonTypeInfo.As inclusion = info.include();\n        if (inclusion == JsonTypeInfo.As.EXTERNAL_PROPERTY && (ann instanceof AnnotatedClass)) {\n            inclusion = JsonTypeInfo.As.PROPERTY;\n        }\n        b = b.inclusion(inclusion);\n        b = b.typeProperty(info.property());\n        Class<?> defaultImpl = info.defaultImpl();\n\n        \n        \n        \n        \n        if (defaultImpl != JsonTypeInfo.None.class && !defaultImpl.isAnnotation()) {\n            b = b.defaultImpl(defaultImpl);\n        }\n        b = b.typeIdVisibility(info.visible());\n        return b;\n    }\n\n    \n    protected StdTypeResolverBuilder _constructStdTypeResolverBuilder() {\n        return new StdTypeResolverBuilder();\n    }\n\n    \n    protected StdTypeResolverBuilder _constructNoTypeResolverBuilder() {\n        return StdTypeResolverBuilder.noTypeInfoBuilder();\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.introspect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.*;\nimport com.fasterxml.jackson.core.Version;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.*;\nimport com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\nimport com.fasterxml.jackson.databind.cfg.MapperConfig;\nimport com.fasterxml.jackson.databind.jsontype.NamedType;\nimport com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\nimport com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\nimport com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter;\nimport com.fasterxml.jackson.databind.ser.std.RawSerializer;\nimport com.fasterxml.jackson.databind.util.*;\n\n\npublic class JacksonAnnotationIntrospector extends AnnotationIntrospector implements java.io.Serializable { private static final long serialVersionUID = 1L; public JacksonAnnotationIntrospector() { }\n\n    @Override\n    public Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }\n\n    \n\n    \n    @Override\n    public boolean isAnnotationBundle(Annotation ann) {\n        return ann.annotationType().getAnnotation(JacksonAnnotationsInside.class) != null;\n    }\n\n    \n\n    \n    @Override\n    public String findEnumValue(Enum<?> value) {\n        \n        \n        \n        try {\n            \n            Field f = value.getClass().getField(value.name());\n            if (f != null) {\n                JsonProperty prop = f.getAnnotation(JsonProperty.class);\n                String n = prop.value();\n                if (n != null && !n.isEmpty()) {\n                    return n;\n                }\n            }\n        } catch (Exception e) {\n            \n        }\n        return value.name();\n    }\n\n    \n\n    @Override\n    public PropertyName findRootName(AnnotatedClass ac) {\n        JsonRootName ann = _findAnnotation(ac, JsonRootName.class);\n        if (ann == null) {\n            return null;\n        }\n        String ns = ann.namespace();\n        if (ns != null && ns.length() == 0) {\n            ns = null;\n        }\n        return PropertyName.construct(ann.value(), ns);\n    }\n\n    @Override\n    @Deprecated \n    public String[] findPropertiesToIgnore(Annotated ac) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        return (ignore == null) ? null : ignore.value();\n    }\n\n    @Override \n    public String[] findPropertiesToIgnore(Annotated ac, boolean forSerialization) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        if (ignore == null) {\n            return null;\n        }\n        \n        if (forSerialization) {\n            if (ignore.allowGetters()) {\n                return null;\n            }\n        } else {\n            if (ignore.allowSetters()) {\n                return null;\n            }\n        }\n        return ignore.value();\n    }\n    \n    @Override\n    public Boolean findIgnoreUnknownProperties(AnnotatedClass ac) {\n        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n        return (ignore == null) ? null : ignore.ignoreUnknown();\n    }\n\n    @Override\n    public Boolean isIgnorableType(AnnotatedClass ac) {\n        JsonIgnoreType ignore = _findAnnotation(ac, JsonIgnoreType.class);\n        return (ignore == null) ? null : ignore.value();\n    }\n\n    \n    @Deprecated\n    @Override\n    public Object findFilterId(AnnotatedClass ac) {\n        return _findFilterId(ac);\n    }\n    \n    @Override\n    public Object findFilterId(Annotated a) {\n        return _findFilterId(a);\n    }\n\n    protected final Object _findFilterId(Annotated a) {\n        JsonFilter ann = _findAnnotation(a, JsonFilter.class);\n        if (ann != null) {\n            String id = ann.value();\n            \n            if (id.length() > 0) {\n                return id;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findNamingStrategy(AnnotatedClass ac) {\n        JsonNaming ann = _findAnnotation(ac, JsonNaming.class);\n        return (ann == null) ? null : ann.value();\n    } \n\n    \n    \n    @Override\n    public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker) {\n        JsonAutoDetect ann = _findAnnotation(ac, JsonAutoDetect.class);\n        return (ann == null) ? checker : checker.with(ann);\n    }\n\n    \n\n    @Override\n    public String findImplicitPropertyName(AnnotatedMember param) {\n        \n        \n        return null;\n    }\n    \n    @Override\n    public boolean hasIgnoreMarker(AnnotatedMember m) {\n        return _isIgnorable(m);\n    }\n\n    @Override\n    public Boolean hasRequiredMarker(AnnotatedMember m) {\n        JsonProperty ann = _findAnnotation(m, JsonProperty.class);\n        if (ann != null) {\n            return ann.required();\n        }\n        return null;\n    }\n\n    @Override\n    public JsonProperty.Access findPropertyAccess(Annotated m) {\n        JsonProperty ann = _findAnnotation(m, JsonProperty.class);\n        if (ann != null) {\n            return ann.access();\n        }\n        return null;\n    }\n\n    @Override\n    public String findPropertyDescription(Annotated ann) {\n        JsonPropertyDescription desc = _findAnnotation(ann, JsonPropertyDescription.class);\n        return (desc == null) ? null : desc.value();\n    }\n\n    @Override\n    public Integer findPropertyIndex(Annotated ann) {\n        JsonProperty prop = _findAnnotation(ann, JsonProperty.class);\n        if (prop != null) {\n          int ix = prop.index();\n          if (ix != JsonProperty.INDEX_UNKNOWN) {\n               return Integer.valueOf(ix);\n          }\n        }\n        return null;\n    }\n    \n    @Override\n    public String findPropertyDefaultValue(Annotated ann) {\n        JsonProperty prop = _findAnnotation(ann, JsonProperty.class);\n        if (prop == null) {\n            return null;\n        }\n        String str = prop.defaultValue();\n        \n        return str.isEmpty() ? null : str;\n    }\n    \n    @Override\n    public JsonFormat.Value findFormat(Annotated ann) {\n        JsonFormat f = _findAnnotation(ann, JsonFormat.class);\n        return (f == null)  ? null : new JsonFormat.Value(f);\n    }\n\n    @Override        \n    public ReferenceProperty findReferenceType(AnnotatedMember member) {\n        JsonManagedReference ref1 = _findAnnotation(member, JsonManagedReference.class);\n        if (ref1 != null) {\n            return AnnotationIntrospector.ReferenceProperty.managed(ref1.value());\n        }\n        JsonBackReference ref2 = _findAnnotation(member, JsonBackReference.class);\n        if (ref2 != null) {\n            return AnnotationIntrospector.ReferenceProperty.back(ref2.value());\n        }\n        return null;\n    }\n\n    @Override\n    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) {\n        JsonUnwrapped ann = _findAnnotation(member, JsonUnwrapped.class);\n        \n        \n        if (ann == null || !ann.enabled()) {\n            return null;\n        }\n        String prefix = ann.prefix();\n        String suffix = ann.suffix();\n        return NameTransformer.simpleTransformer(prefix, suffix);\n    }\n\n    @Override\n    public Object findInjectableValueId(AnnotatedMember m) {\n        JacksonInject ann = _findAnnotation(m, JacksonInject.class);\n        if (ann == null) {\n            return null;\n        }\n        \n        String id = ann.value();\n        if (id.length() == 0) {\n            \n            if (!(m instanceof AnnotatedMethod)) {\n                return m.getRawType().getName();\n            }\n            AnnotatedMethod am = (AnnotatedMethod) m;\n            if (am.getParameterCount() == 0) {\n                return m.getRawType().getName();\n            }\n            return am.getRawParameterType(0).getName();\n        }\n        return id;\n    }\n\n    @Override\n    public Class<?>[] findViews(Annotated a) {\n        JsonView ann = _findAnnotation(a, JsonView.class);\n        return (ann == null) ? null : ann.value();\n    }\n\n    \n\n    @Override\n    public TypeResolverBuilder<?> findTypeResolver(MapperConfig<?> config, AnnotatedClass ac, JavaType baseType) {\n        return _findTypeResolver(config, ac, baseType);\n    }\n\n    @Override\n    public TypeResolverBuilder<?> findPropertyTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType baseType) {\n        \n        if (baseType.isContainerType()) return null;\n        \n        return _findTypeResolver(config, am, baseType);\n    }\n\n    @Override\n    public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType) {\n        \n        if (!containerType.isContainerType()) {\n            throw new IllegalArgumentException(\"Must call method with a container type (got \"+containerType+\")\");\n        }\n        return _findTypeResolver(config, am, containerType);\n    }\n    \n    @Override\n    public List<NamedType> findSubtypes(Annotated a) {\n        JsonSubTypes t = _findAnnotation(a, JsonSubTypes.class);\n        if (t == null) return null;\n        JsonSubTypes.Type[] types = t.value();\n        ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);\n        for (JsonSubTypes.Type type : types) {\n            result.add(new NamedType(type.value(), type.name()));\n        }\n        return result;\n    }\n\n    @Override        \n    public String findTypeName(AnnotatedClass ac) {\n        JsonTypeName tn = _findAnnotation(ac, JsonTypeName.class);\n        return (tn == null) ? null : tn.value();\n    }\n\n    @Override\n    public Boolean isTypeId(AnnotatedMember member) {\n        return _hasAnnotation(member, JsonTypeId.class);\n    }\n\n    \n\n    @Override\n    public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n        JsonIdentityInfo info = _findAnnotation(ann, JsonIdentityInfo.class);\n        if (info == null || info.generator() == ObjectIdGenerators.None.class) {\n            return null;\n        }\n        \n        PropertyName name = PropertyName.construct(info.property());\n        return new ObjectIdInfo(name, info.scope(), info.generator(), info.resolver());\n    }\n\n    @Override\n    public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n        JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n        if (ref != null) {\n            objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n        }\n        return objectIdInfo;\n    }\n\n    \n\n    @Override\n    public Object findSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.using();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        \n        \n        JsonRawValue annRaw =  _findAnnotation(a, JsonRawValue.class);\n        if ((annRaw != null) && annRaw.value()) {\n            \n            Class<?> cls = a.getRawType();\n            return new RawSerializer<Object>(cls);\n        }       \n        return null;\n    }\n\n    @Override\n    public Object findKeySerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.keyUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findContentSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.contentUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findNullSerializer(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonSerializer> serClass = ann.nullsUsing();\n            if (serClass != JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue) {\n        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n        if (inc != null) {\n            return inc.value();\n        }\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        if (ann != null) {\n            JsonSerialize.Inclusion i2 = ann.include();\n            switch (i2) {\n            case ALWAYS:\n                return JsonInclude.Include.ALWAYS;\n            case NON_NULL:\n                return JsonInclude.Include.NON_NULL;\n            case NON_DEFAULT:\n                return JsonInclude.Include.NON_DEFAULT;\n            case NON_EMPTY:\n                return JsonInclude.Include.NON_EMPTY;\n            case DEFAULT_INCLUSION: \n                break;\n            }\n        }\n        return defValue;\n    }\n\n    @Override\n    public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue) {\n        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n        return (inc == null) ? defValue : inc.content();\n    }\n\n    @Override\n    public Class<?> findSerializationType(Annotated am) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.as());\n    }\n    \n    @Override\n    public Class<?> findSerializationKeyType(Annotated am, JavaType baseType) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n    }\n\n    @Override\n    public Class<?> findSerializationContentType(Annotated am, JavaType baseType) {\n        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n    }\n    \n    @Override\n    public JsonSerialize.Typing findSerializationTyping(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : ann.typing();\n    }\n\n    @Override\n    public Object findSerializationConverter(Annotated a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n    }\n\n    @Override\n    public Object findSerializationContentConverter(AnnotatedMember a) {\n        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n    }\n\n    \n\n    @Override\n    public String[] findSerializationPropertyOrder(AnnotatedClass ac) {\n        JsonPropertyOrder order = _findAnnotation(ac, JsonPropertyOrder.class);\n        return (order == null) ? null : order.value();\n    }\n\n    @Override\n    public Boolean findSerializationSortAlphabetically(Annotated ann) {\n        return _findSortAlpha(ann);\n    }\n\n    @Override\n    @Deprecated\n    public Boolean findSerializationSortAlphabetically(AnnotatedClass ac) {\n        return _findSortAlpha(ac);\n    }\n\n    private final Boolean _findSortAlpha(Annotated ann) {\n        JsonPropertyOrder order = _findAnnotation(ann, JsonPropertyOrder.class);\n        return (order == null) ? null : order.alphabetic();\n    }\n\n    @Override\n    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac, List<BeanPropertyWriter> properties) {\n        JsonAppend ann = _findAnnotation(ac, JsonAppend.class);\n        if (ann == null) {\n            return;\n        }\n        final boolean prepend = ann.prepend();\n        JavaType propType = null;\n\n        \n        JsonAppend.Attr[] attrs = ann.attrs();\n        for (int i = 0, len = attrs.length; i < len; ++i) {\n            if (propType == null) {\n                propType = config.constructType(Object.class);\n            }\n            BeanPropertyWriter bpw = _constructVirtualProperty(attrs[i],\n                    config, ac, propType);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n\n        \n        JsonAppend.Prop[] props = ann.props();\n        for (int i = 0, len = props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _constructVirtualProperty(props[i],\n                    config, ac);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n    }\n\n    protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr, MapperConfig<?> config, AnnotatedClass ac, JavaType type) {\n        PropertyMetadata metadata = attr.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        \n        String attrName = attr.value();\n\n        \n        PropertyName propName = _propertyName(attr.propName(), attr.propNamespace());\n        if (!propName.hasSimpleName()) {\n            propName = PropertyName.construct(attrName);\n        }\n        \n        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                attrName, type.getRawClass());\n        \n        SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, attr.include());\n        \n        return AttributePropertyWriter.construct(attrName, propDef,\n                ac.getAnnotations(), type);\n    }\n\n    protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac) {\n        PropertyMetadata metadata = prop.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        PropertyName propName = _propertyName(prop.name(), prop.namespace());\n        JavaType type = config.constructType(prop.type());\n        \n        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                propName.getSimpleName(), type.getRawClass());\n        \n        SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, prop.include());\n\n        Class<?> implClass = prop.value();\n\n        HandlerInstantiator hi = config.getHandlerInstantiator();\n        VirtualBeanPropertyWriter bpw = (hi == null) ? null\n                : hi.virtualPropertyWriterInstance(config, implClass);\n        if (bpw == null) {\n            bpw = (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass,\n                    config.canOverrideAccessModifiers());\n        }\n\n        \n        return bpw.withConfig(config, ac, propDef, type);\n    }\n\n    \n\n    @Override\n    public PropertyName findNameForSerialization(Annotated a) {\n        String name = null;\n\n        JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n        if (jg != null) {\n            name = jg.value();\n        } else {\n            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n            if (pann != null) {\n                name = pann.value();\n            } else if (_hasAnnotation(a, JsonSerialize.class)\n                    || _hasAnnotation(a, JsonView.class)\n                    || _hasAnnotation(a, JsonRawValue.class)) {\n                name = \"\";\n            } else {\n                return null;\n            }\n        }\n        return PropertyName.construct(name);\n    }\n\n    @Override\n    public boolean hasAsValueAnnotation(AnnotatedMethod am) {\n        JsonValue ann = _findAnnotation(am, JsonValue.class);\n        \n        return (ann != null && ann.value());\n    }\n\n    \n\n    @Override\n    public Object findDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonDeserializer> deserClass = ann.using();\n            if (deserClass != JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findKeyDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            Class<? extends KeyDeserializer> deserClass = ann.keyUsing();\n            if (deserClass != KeyDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object findContentDeserializer(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        if (ann != null) {\n            @SuppressWarnings(\"rawtypes\")\n            Class<? extends JsonDeserializer> deserClass = ann.contentUsing();\n            if (deserClass != JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Class<?> findDeserializationType(Annotated am, JavaType baseType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.as());\n    }\n\n    @Override\n    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n    }\n\n    @Override\n    public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType) {\n        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n    }\n\n    @Override\n    public Object findDeserializationConverter(Annotated a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n    }\n\n    @Override\n    public Object findDeserializationContentConverter(AnnotatedMember a) {\n        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n    }\n\n    \n    \n    @Override\n    public Object findValueInstantiator(AnnotatedClass ac) {\n        JsonValueInstantiator ann = _findAnnotation(ac, JsonValueInstantiator.class);\n        \n        return (ann == null) ? null : ann.value();\n    }\n\n    @Override\n    public Class<?> findPOJOBuilder(AnnotatedClass ac) {\n        JsonDeserialize ann = _findAnnotation(ac, JsonDeserialize.class);\n        return (ann == null) ? null : _classIfExplicit(ann.builder());\n    }\n\n    @Override\n    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {\n        JsonPOJOBuilder ann = _findAnnotation(ac, JsonPOJOBuilder.class);\n        return (ann == null) ? null : new JsonPOJOBuilder.Value(ann);\n    }\n    \n    \n\n    @Override\n    public PropertyName findNameForDeserialization(Annotated a) {\n        String name;\n\n        \n        \n        JsonSetter js = _findAnnotation(a, JsonSetter.class);\n        if (js != null) {\n            name = js.value();\n        } else {\n            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n            if (pann != null) {\n                name = pann.value();\n                \n            } else if (_hasAnnotation(a, JsonDeserialize.class)\n                    || _hasAnnotation(a, JsonView.class)\n                    || _hasAnnotation(a, JsonUnwrapped.class) \n                    || _hasAnnotation(a, JsonBackReference.class)\n                    || _hasAnnotation(a, JsonManagedReference.class)) {\n                    name = \"\";\n            } else {\n                return null;\n            }\n        }\n        return PropertyName.construct(name);\n    }\n    \n    @Override\n    public boolean hasAnySetterAnnotation(AnnotatedMethod am) {\n        \n        return _hasAnnotation(am, JsonAnySetter.class);\n    }\n\n    @Override\n    public boolean hasAnyGetterAnnotation(AnnotatedMethod am) {\n        \n        return _hasAnnotation(am, JsonAnyGetter.class);\n    }\n\n    @Override\n    public boolean hasCreatorAnnotation(Annotated a) {\n        \n         JsonCreator ann = _findAnnotation(a, JsonCreator.class);\n         return (ann != null && ann.mode() != JsonCreator.Mode.DISABLED);\n    }\n\n    @Override\n    public JsonCreator.Mode findCreatorBinding(Annotated a) {\n        JsonCreator ann = _findAnnotation(a, JsonCreator.class);\n        return (ann == null) ? null : ann.mode();\n    }\n\n    \n\n    protected boolean _isIgnorable(Annotated a) {\n        JsonIgnore ann = _findAnnotation(a, JsonIgnore.class);\n        return (ann != null && ann.value());\n    }\n\n    protected Class<?> _classIfExplicit(Class<?> cls) {\n        if (cls == null || ClassUtil.isBogusClass(cls)) {\n            return null;\n        }\n        return cls;\n    }\n\n    protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {\n        cls = _classIfExplicit(cls);\n        return (cls == null || cls == implicit) ? null : cls;\n    }\n\n    protected PropertyName _propertyName(String localName, String namespace) {\n        if (localName.isEmpty()) {\n            return PropertyName.USE_DEFAULT;\n        }\n        if (namespace == null || namespace.isEmpty()) {\n            return PropertyName.construct(localName);\n        }\n        return PropertyName.construct(localName, namespace);\n    }\n\n    \n    @SuppressWarnings(\"deprecation\")\n    protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config, Annotated ann, JavaType baseType) {\n        \n        TypeResolverBuilder<?> b;\n        JsonTypeInfo info = _findAnnotation(ann, JsonTypeInfo.class);\n        JsonTypeResolver resAnn = _findAnnotation(ann, JsonTypeResolver.class);\n        \n        if (resAnn != null) {\n            if (info == null) {\n                return null;\n            }\n            \n            b = config.typeResolverBuilderInstance(ann, resAnn.value());\n        } else { \n            if (info == null) {\n                return null;\n            }\n            \n            if (info.use() == JsonTypeInfo.Id.NONE) {\n                return _constructNoTypeResolverBuilder();\n            }\n            b = _constructStdTypeResolverBuilder();\n        }\n        \n        JsonTypeIdResolver idResInfo = _findAnnotation(ann, JsonTypeIdResolver.class);\n        TypeIdResolver idRes = (idResInfo == null) ? null\n                : config.typeIdResolverInstance(ann, idResInfo.value());\n        if (idRes != null) { \n            idRes.init(baseType);\n        }\n        b = b.init(info.use(), idRes);\n        \n        JsonTypeInfo.As inclusion = info.include();\n        if (inclusion == JsonTypeInfo.As.EXTERNAL_PROPERTY && (ann instanceof AnnotatedClass)) {\n            inclusion = JsonTypeInfo.As.PROPERTY;\n        }\n        b = b.inclusion(inclusion);\n        b = b.typeProperty(info.property());\n        Class<?> defaultImpl = info.defaultImpl();\n\n        \n        \n        \n        \n        if (defaultImpl != JsonTypeInfo.None.class && !defaultImpl.isAnnotation()) {\n            b = b.defaultImpl(defaultImpl);\n        }\n        b = b.typeIdVisibility(info.visible());\n        return b;\n    }\n\n    \n    protected StdTypeResolverBuilder _constructStdTypeResolverBuilder() {\n        return new StdTypeResolverBuilder();\n    }\n\n    \n    protected StdTypeResolverBuilder _constructNoTypeResolverBuilder() {\n        return StdTypeResolverBuilder.noTypeInfoBuilder();\n    }\n}\n",
      "buggy_signatures": [
        "public Version version()",
        "public boolean isAnnotationBundle(Annotation ann)",
        "public PropertyName findRootName(AnnotatedClass ac)",
        "public String[] findPropertiesToIgnore(Annotated ac)",
        "public String[] findPropertiesToIgnore(Annotated ac, boolean forSerialization)",
        "public Boolean findIgnoreUnknownProperties(AnnotatedClass ac)",
        "public Boolean isIgnorableType(AnnotatedClass ac)",
        "public Object findFilterId(AnnotatedClass ac)",
        "public Object findFilterId(Annotated a)",
        "protected final Object _findFilterId(Annotated a)",
        "public Object findNamingStrategy(AnnotatedClass ac)",
        "public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker)",
        "public String findImplicitPropertyName(AnnotatedMember param)",
        "public boolean hasIgnoreMarker(AnnotatedMember m)",
        "public Boolean hasRequiredMarker(AnnotatedMember m)",
        "public JsonProperty.Access findPropertyAccess(Annotated m)",
        "public String findPropertyDescription(Annotated ann)",
        "public Integer findPropertyIndex(Annotated ann)",
        "public String findPropertyDefaultValue(Annotated ann)",
        "public JsonFormat.Value findFormat(Annotated ann)",
        "public ReferenceProperty findReferenceType(AnnotatedMember member)",
        "public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member)",
        "public Object findInjectableValueId(AnnotatedMember m)",
        "public Class<?>[] findViews(Annotated a)",
        "public TypeResolverBuilder<?> findTypeResolver(MapperConfig<?> config, AnnotatedClass ac, JavaType baseType)",
        "public TypeResolverBuilder<?> findPropertyTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType baseType)",
        "public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType)",
        "public List<NamedType> findSubtypes(Annotated a)",
        "public String findTypeName(AnnotatedClass ac)",
        "public Boolean isTypeId(AnnotatedMember member)",
        "public ObjectIdInfo findObjectIdInfo(Annotated ann)",
        "public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo)",
        "public Object findSerializer(Annotated a)",
        "public Object findKeySerializer(Annotated a)",
        "public Object findContentSerializer(Annotated a)",
        "public Object findNullSerializer(Annotated a)",
        "public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue)",
        "public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue)",
        "public Class<?> findSerializationType(Annotated am)",
        "public Class<?> findSerializationKeyType(Annotated am, JavaType baseType)",
        "public Class<?> findSerializationContentType(Annotated am, JavaType baseType)",
        "public JsonSerialize.Typing findSerializationTyping(Annotated a)",
        "public Object findSerializationConverter(Annotated a)",
        "public Object findSerializationContentConverter(AnnotatedMember a)",
        "public String[] findSerializationPropertyOrder(AnnotatedClass ac)",
        "public Boolean findSerializationSortAlphabetically(Annotated ann)",
        "public Boolean findSerializationSortAlphabetically(AnnotatedClass ac)",
        "private final Boolean _findSortAlpha(Annotated ann)",
        "public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac, List<BeanPropertyWriter> properties)",
        "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr, MapperConfig<?> config, AnnotatedClass ac, JavaType type)",
        "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac)",
        "public PropertyName findNameForSerialization(Annotated a)",
        "public boolean hasAsValueAnnotation(AnnotatedMethod am)",
        "public Object findDeserializer(Annotated a)",
        "public Object findKeyDeserializer(Annotated a)",
        "public Object findContentDeserializer(Annotated a)",
        "public Class<?> findDeserializationType(Annotated am, JavaType baseType)",
        "public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType)",
        "public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType)",
        "public Object findDeserializationConverter(Annotated a)",
        "public Object findDeserializationContentConverter(AnnotatedMember a)",
        "public Object findValueInstantiator(AnnotatedClass ac)",
        "public Class<?> findPOJOBuilder(AnnotatedClass ac)",
        "public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac)",
        "public PropertyName findNameForDeserialization(Annotated a)",
        "public boolean hasAnySetterAnnotation(AnnotatedMethod am)",
        "public boolean hasAnyGetterAnnotation(AnnotatedMethod am)",
        "public boolean hasCreatorAnnotation(Annotated a)",
        "public JsonCreator.Mode findCreatorBinding(Annotated a)",
        "protected boolean _isIgnorable(Annotated a)",
        "protected Class<?> _classIfExplicit(Class<?> cls)",
        "protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit)",
        "protected PropertyName _propertyName(String localName, String namespace)",
        "protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config, Annotated ann, JavaType baseType)",
        "protected StdTypeResolverBuilder _constructStdTypeResolverBuilder()",
        "protected StdTypeResolverBuilder _constructNoTypeResolverBuilder()"
      ],
      "fixed_signatures": [
        "public Version version()",
        "public boolean isAnnotationBundle(Annotation ann)",
        "public String findEnumValue(Enum<?> value)",
        "public PropertyName findRootName(AnnotatedClass ac)",
        "public String[] findPropertiesToIgnore(Annotated ac)",
        "public String[] findPropertiesToIgnore(Annotated ac, boolean forSerialization)",
        "public Boolean findIgnoreUnknownProperties(AnnotatedClass ac)",
        "public Boolean isIgnorableType(AnnotatedClass ac)",
        "public Object findFilterId(AnnotatedClass ac)",
        "public Object findFilterId(Annotated a)",
        "protected final Object _findFilterId(Annotated a)",
        "public Object findNamingStrategy(AnnotatedClass ac)",
        "public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker)",
        "public String findImplicitPropertyName(AnnotatedMember param)",
        "public boolean hasIgnoreMarker(AnnotatedMember m)",
        "public Boolean hasRequiredMarker(AnnotatedMember m)",
        "public JsonProperty.Access findPropertyAccess(Annotated m)",
        "public String findPropertyDescription(Annotated ann)",
        "public Integer findPropertyIndex(Annotated ann)",
        "public String findPropertyDefaultValue(Annotated ann)",
        "public JsonFormat.Value findFormat(Annotated ann)",
        "public ReferenceProperty findReferenceType(AnnotatedMember member)",
        "public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member)",
        "public Object findInjectableValueId(AnnotatedMember m)",
        "public Class<?>[] findViews(Annotated a)",
        "public TypeResolverBuilder<?> findTypeResolver(MapperConfig<?> config, AnnotatedClass ac, JavaType baseType)",
        "public TypeResolverBuilder<?> findPropertyTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType baseType)",
        "public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType)",
        "public List<NamedType> findSubtypes(Annotated a)",
        "public String findTypeName(AnnotatedClass ac)",
        "public Boolean isTypeId(AnnotatedMember member)",
        "public ObjectIdInfo findObjectIdInfo(Annotated ann)",
        "public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo)",
        "public Object findSerializer(Annotated a)",
        "public Object findKeySerializer(Annotated a)",
        "public Object findContentSerializer(Annotated a)",
        "public Object findNullSerializer(Annotated a)",
        "public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue)",
        "public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue)",
        "public Class<?> findSerializationType(Annotated am)",
        "public Class<?> findSerializationKeyType(Annotated am, JavaType baseType)",
        "public Class<?> findSerializationContentType(Annotated am, JavaType baseType)",
        "public JsonSerialize.Typing findSerializationTyping(Annotated a)",
        "public Object findSerializationConverter(Annotated a)",
        "public Object findSerializationContentConverter(AnnotatedMember a)",
        "public String[] findSerializationPropertyOrder(AnnotatedClass ac)",
        "public Boolean findSerializationSortAlphabetically(Annotated ann)",
        "public Boolean findSerializationSortAlphabetically(AnnotatedClass ac)",
        "private final Boolean _findSortAlpha(Annotated ann)",
        "public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac, List<BeanPropertyWriter> properties)",
        "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr, MapperConfig<?> config, AnnotatedClass ac, JavaType type)",
        "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac)",
        "public PropertyName findNameForSerialization(Annotated a)",
        "public boolean hasAsValueAnnotation(AnnotatedMethod am)",
        "public Object findDeserializer(Annotated a)",
        "public Object findKeyDeserializer(Annotated a)",
        "public Object findContentDeserializer(Annotated a)",
        "public Class<?> findDeserializationType(Annotated am, JavaType baseType)",
        "public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType)",
        "public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType)",
        "public Object findDeserializationConverter(Annotated a)",
        "public Object findDeserializationContentConverter(AnnotatedMember a)",
        "public Object findValueInstantiator(AnnotatedClass ac)",
        "public Class<?> findPOJOBuilder(AnnotatedClass ac)",
        "public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac)",
        "public PropertyName findNameForDeserialization(Annotated a)",
        "public boolean hasAnySetterAnnotation(AnnotatedMethod am)",
        "public boolean hasAnyGetterAnnotation(AnnotatedMethod am)",
        "public boolean hasCreatorAnnotation(Annotated a)",
        "public JsonCreator.Mode findCreatorBinding(Annotated a)",
        "protected boolean _isIgnorable(Annotated a)",
        "protected Class<?> _classIfExplicit(Class<?> cls)",
        "protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit)",
        "protected PropertyName _propertyName(String localName, String namespace)",
        "protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config, Annotated ann, JavaType baseType)",
        "protected StdTypeResolverBuilder _constructStdTypeResolverBuilder()",
        "protected StdTypeResolverBuilder _constructNoTypeResolverBuilder()"
      ],
      "methods": [
        {
          "buggy_method": "",
          "fixed_method": "",
          "diff": [
            "@@ -1,6 +1,7 @@",
            " package com.fasterxml.jackson.databind.introspect;\n",
            " \n",
            " import java.lang.annotation.Annotation;\n",
            "+import java.lang.reflect.Field;\n",
            " import java.util.*;\n",
            " \n",
            " import com.fasterxml.jackson.annotation.*;\n"
          ],
          "changed_lines": 1
        },
        {
          "buggy_method": "  public boolean isAnnotationBundle(Annotation ann) {\n  return ann.annotationType().getAnnotation(JacksonAnnotationsInside.class) != null;\n  }",
          "fixed_method": "  public String findEnumValue(Enum<?> value) {\n  \n  \n  \n  try {\n  \n  Field f = value.getClass().getField(value.name());\n  if (f != null) {\n  JsonProperty prop = f.getAnnotation(JsonProperty.class);\n  String n = prop.value();\n  if (n != null && !n.isEmpty()) {\n  return n;\n  }\n  }\n  } catch (Exception e) {\n  \n  }\n  return value.name();\n  }",
          "diff": [
            "@@ -61,11 +62,27 @@",
            "      * Since 2.6, we have supported use of {@link JsonProperty} for specifying\n",
            "      * explicit serialized name\n",
            "      */\n",
            "+    @Override\n",
            "+    public String findEnumValue(Enum<?> value)\n",
            "+    {\n",
            "         // 11-Jun-2015, tatu: As per [databind#677], need to allow explicit naming.\n",
            "         //   Unfortunately can not quite use standard AnnotatedClass here (due to various\n",
            "         //   reasons, including odd representation JVM uses); has to do for now\n",
            "+        try {\n",
            "             // We know that values are actually static fields with matching name so:\n",
            "+            Field f = value.getClass().getField(value.name());\n",
            "+            if (f != null) {\n",
            "+                JsonProperty prop = f.getAnnotation(JsonProperty.class);\n",
            "+                String n = prop.value();\n",
            "+                if (n != null && !n.isEmpty()) {\n",
            "+                    return n;\n",
            "+                }\n",
            "+            }\n",
            "+        } catch (Exception e) {\n",
            "             // no such field, or access; neither which we can do much about\n",
            "+        }\n",
            "+        return value.name();\n",
            "+    }\n",
            " \n",
            "     /*\n",
            "     /**********************************************************\n"
          ],
          "changed_lines": 16
        }
      ]
    }
  ]
}
