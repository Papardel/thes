{
  "bug_id": "76",
  "failed_tests": {
    "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest": [
      {
        "methodName": "testWithUnwrappedAndCreatorSingleParameterAtBeginning",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<John> but was:<null>",
        "fail_line": "        assertEquals(\"John\", person.getName().getFirst());",
        "test_source": "  public void testWithUnwrappedAndCreatorSingleParameterAtBeginning() throws Exception {\n  final String json = aposToQuotes(\"{'person_id':1234,'first_name':'John','last_name':'Doe','years_old':30,'living':true}\");\n\n  final ObjectMapper mapper = new ObjectMapper();\n  Person person = mapper.readValue(json, Person.class);\n  assertEquals(1234, person.getId());\n  assertNotNull(person.getName());\n  assertEquals(\"John\", person.getName().getFirst());\n  assertEquals(\"Doe\", person.getName().getLast());\n  assertEquals(30, person.getAge());\n  assertEquals(true, person.isAlive());\n  }",
        "stack": [
          "BuilderWithUnwrappedTest.testWithUnwrappedAndCreatorSingleParameterAtBeginning line 176"
        ]
      },
      {
        "methodName": "testWithUnwrappedAndCreatorMultipleParametersAtBeginning",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<John> but was:<null>",
        "fail_line": "        assertEquals(\"John\", animal.getName().getFirst());",
        "test_source": "  public void testWithUnwrappedAndCreatorMultipleParametersAtBeginning() throws Exception {\n  final String json = aposToQuotes(\"{'animal_id':1234,'living':true,'first_name':'John','last_name':'Doe','years_old':30}\");\n\n  final ObjectMapper mapper = new ObjectMapper();\n  Animal animal = mapper.readValue(json, Animal.class);\n  assertEquals(1234, animal.getId());\n  assertNotNull(animal.getName());\n  assertEquals(\"John\", animal.getName().getFirst());\n  assertEquals(\"Doe\", animal.getName().getLast());\n  assertEquals(30, animal.getAge());\n  assertEquals(true, animal.isAlive());\n  }",
        "stack": [
          "BuilderWithUnwrappedTest.testWithUnwrappedAndCreatorMultipleParametersAtBeginning line 215"
        ]
      },
      {
        "methodName": "testWithUnwrappedAndCreatorSingleParameterInMiddle",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<30> but was:<0>",
        "fail_line": "        assertEquals(30, person.getAge());",
        "test_source": "  public void testWithUnwrappedAndCreatorSingleParameterInMiddle() throws Exception {\n  final String json = aposToQuotes(\"{'first_name':'John','last_name':'Doe','person_id':1234,'years_old':30,'living':true}\");\n\n  final ObjectMapper mapper = new ObjectMapper();\n  Person person = mapper.readValue(json, Person.class);\n  assertEquals(1234, person.getId());\n  assertNotNull(person.getName());\n  assertEquals(\"John\", person.getName().getFirst());\n  assertEquals(\"Doe\", person.getName().getLast());\n  assertEquals(30, person.getAge());\n  assertEquals(true, person.isAlive());\n  }",
        "stack": [
          "BuilderWithUnwrappedTest.testWithUnwrappedAndCreatorSingleParameterInMiddle line 191"
        ]
      },
      {
        "methodName": "testWithUnwrappedAndCreatorMultipleParametersInMiddle",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<30> but was:<0>",
        "fail_line": "        assertEquals(30, animal.getAge());",
        "test_source": "  public void testWithUnwrappedAndCreatorMultipleParametersInMiddle() throws Exception {\n  final String json = aposToQuotes(\"{'first_name':'John','animal_id':1234,'last_name':'Doe','living':true,'years_old':30}\");\n\n  final ObjectMapper mapper = new ObjectMapper();\n  Animal animal = mapper.readValue(json, Animal.class);\n  assertEquals(1234, animal.getId());\n  assertNotNull(animal.getName());\n  assertEquals(\"John\", animal.getName().getFirst());\n  assertEquals(\"Doe\", animal.getName().getLast());\n  assertEquals(30, animal.getAge());\n  assertEquals(true, animal.isAlive());\n  }",
        "stack": [
          "BuilderWithUnwrappedTest.testWithUnwrappedAndCreatorMultipleParametersInMiddle line 230"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.impl.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\nimport com.fasterxml.jackson.databind.util.NameTransformer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class BuilderBasedDeserializer extends BeanDeserializerBase { private static final long serialVersionUID = 1L; protected final AnnotatedMethod _buildMethod; public BuilderBasedDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, Set<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) {\n        super(builder, beanDesc, properties, backRefs,\n                ignorableProps, ignoreAllUnknown, hasViews);\n        _buildMethod = builder.getBuildMethod();\n        \n        if (_objectIdReader != null) {\n            throw new IllegalArgumentException(\"Can not use Object Id with Builder-based deserialization (type \"\n                    +beanDesc.getType()+\")\");\n        }\n    }\n\n    \n    protected BuilderBasedDeserializer(BuilderBasedDeserializer src) {\n        this(src, src._ignoreAllUnknown);\n    }\n\n    protected BuilderBasedDeserializer(BuilderBasedDeserializer src, boolean ignoreAllUnknown) {\n        super(src, ignoreAllUnknown);\n        _buildMethod = src._buildMethod;\n    }\n\n    protected BuilderBasedDeserializer(BuilderBasedDeserializer src, NameTransformer unwrapper) {\n        super(src, unwrapper);\n        _buildMethod = src._buildMethod;\n    }\n\n    public BuilderBasedDeserializer(BuilderBasedDeserializer src, ObjectIdReader oir) {\n        super(src, oir);\n        _buildMethod = src._buildMethod;\n    }\n\n    public BuilderBasedDeserializer(BuilderBasedDeserializer src, Set<String> ignorableProps) {\n        super(src, ignorableProps);\n        _buildMethod = src._buildMethod;\n    }\n\n    public BuilderBasedDeserializer(BuilderBasedDeserializer src, BeanPropertyMap props) {\n        super(src, props);\n        _buildMethod = src._buildMethod;\n    }\n\n    @Override\n    public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper) {\n        \n        return new BuilderBasedDeserializer(this, unwrapper);\n    }\n\n    @Override\n    public BeanDeserializerBase withObjectIdReader(ObjectIdReader oir) {\n        return new BuilderBasedDeserializer(this, oir);\n    }\n\n    @Override\n    public BeanDeserializerBase withIgnorableProperties(Set<String> ignorableProps) {\n        return new BuilderBasedDeserializer(this, ignorableProps);\n    }\n\n    @Override\n    public BeanDeserializerBase withBeanProperties(BeanPropertyMap props) {\n        return new BuilderBasedDeserializer(this, props);\n    }\n\n    @Override\n    protected BeanDeserializerBase asArrayDeserializer() {\n        SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n        return new BeanAsArrayBuilderDeserializer(this, props, _buildMethod);\n    }\n\n    \n\n    protected final Object finishBuild(DeserializationContext ctxt, Object builder) throws IOException {\n        \n        if (null == _buildMethod) {\n            return builder;\n        }\n        try {\n            return _buildMethod.getMember().invoke(builder);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n\n    \n    @Override\n    public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        JsonToken t = p.getCurrentToken();\n\n        \n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n            if (_vanillaProcessing) {\n            \treturn finishBuild(ctxt, vanillaDeserialize(p, ctxt, t));\n            }\n            Object builder = deserializeFromObject(p, ctxt);\n            return finishBuild(ctxt, builder);\n        }\n        \n        if (t != null) {\n            switch (t) {\n            case VALUE_STRING:\n                return finishBuild(ctxt, deserializeFromString(p, ctxt));\n            case VALUE_NUMBER_INT:\n                return finishBuild(ctxt, deserializeFromNumber(p, ctxt));\n            case VALUE_NUMBER_FLOAT:\n            \treturn finishBuild(ctxt, deserializeFromDouble(p, ctxt));\n            case VALUE_EMBEDDED_OBJECT:\n                return p.getEmbeddedObject();\n            case VALUE_TRUE:\n            case VALUE_FALSE:\n                return finishBuild(ctxt, deserializeFromBoolean(p, ctxt));\n            case START_ARRAY:\n                \n                return finishBuild(ctxt, deserializeFromArray(p, ctxt));\n            case FIELD_NAME:\n            case END_OBJECT:\n                return finishBuild(ctxt, deserializeFromObject(p, ctxt));\n            default:\n            }\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt, Object builder) throws IOException {\n        \n        return finishBuild(ctxt, _deserialize(p, ctxt, builder));\n    }\n\n    \n\n    protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, Object builder) throws IOException, JsonProcessingException {\n        if (_injectables != null) {\n            injectValues(ctxt, builder);\n        }\n        if (_unwrappedPropertyHandler != null) {\n            return deserializeWithUnwrapped(p, ctxt, builder);\n        }\n        if (_externalTypeIdHandler != null) {\n            return deserializeWithExternalTypeId(p, ctxt, builder);\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, builder, view);\n            }\n        }\n        JsonToken t = p.getCurrentToken();\n        \n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            \n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n\n            if (prop != null) { \n                try {\n                    builder = prop.deserializeSetAndReturn(p, ctxt, builder);\n                } catch (Exception e) {\n                    wrapAndThrow(e, builder, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, handledType(), propName);\n        }\n        return builder;\n    }\n\n    \n    private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException, JsonProcessingException {\n        Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        for (; p.getCurrentToken() != JsonToken.END_OBJECT; p.nextToken()) {\n            String propName = p.getCurrentName();\n            \n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n            } else {\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            }\n        }\n        return bean;\n    }\n\n    \n    @Override\n    public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        if (_nonStandardCreation) {\n            if (_unwrappedPropertyHandler != null) {\n                return deserializeWithUnwrapped(p, ctxt);\n            }\n            if (_externalTypeIdHandler != null) {\n                return deserializeWithExternalTypeId(p, ctxt);\n            }\n            return deserializeFromObjectUsingNonDefault(p, ctxt);\n        }\n        Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        for (; p.getCurrentToken() != JsonToken.END_OBJECT; p.nextToken()) {\n            String propName = p.getCurrentName();\n            \n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    @SuppressWarnings(\"resource\")\n    protected final Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        \n        TokenBuffer unknown = null;\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue; \n                    }\n                    \n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        return handlePolymorphic(p, ctxt, bean, unknown);\n                    }\n                    if (unknown != null) { \n                        bean = handleUnknownProperties(ctxt, bean, unknown);\n                    }\n                    \n                    return _deserialize(p, ctxt, bean);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            \n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                continue;\n            }\n            \n            if (unknown == null) {\n                unknown = new TokenBuffer(p, ctxt);\n            }\n            unknown.writeFieldName(propName);\n            unknown.copyCurrentStructure(p);\n        }\n\n        \n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            bean = wrapInstantiationProblem(e, ctxt);\n        }\n        if (unknown != null) {\n            \n            if (bean.getClass() != _beanType.getRawClass()) {\n                return handlePolymorphic(null, ctxt, bean, unknown);\n            }\n            \n            return handleUnknownProperties(ctxt, bean, unknown);\n        }\n        return bean;\n    }\n\n    \n\n    protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException, JsonProcessingException {\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            \n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                if (!prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        }\n        return bean;\n    }\n\n    \n\n    \n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\n        }\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        Object bean = _valueInstantiator.createUsingDefault(ctxt);\n\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n\n        for (; p.getCurrentToken() != JsonToken.END_OBJECT; p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException {\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            p.nextToken();\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    t = p.nextToken();\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue;\n                    }\n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken();\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n\n        \n        Object bean;\n        \n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    \n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\n        }\n        return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\n    }\n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException {\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n\n        for (JsonToken t = p.getCurrentToken(); t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            t = p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                \n                if (t.isScalarValue()) {\n                    ext.handleTypePropertyValue(p, ctxt, propName, bean);\n                }\n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            if (ext.handlePropertyValue(p, ctxt, propName, bean)) {\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n            } else {\n                \n                handleUnknownProperty(p, ctxt, bean, propName);\n            }\n        }\n        \n        return ext.complete(p, ctxt, bean);\n    }\n\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        \n        throw new IllegalStateException(\"Deserialization with Builder, External type id, @JsonCreator not yet implemented\");\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.impl.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\nimport com.fasterxml.jackson.databind.util.NameTransformer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class BuilderBasedDeserializer extends BeanDeserializerBase { private static final long serialVersionUID = 1L; protected final AnnotatedMethod _buildMethod; public BuilderBasedDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, Set<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) {\n        super(builder, beanDesc, properties, backRefs,\n                ignorableProps, ignoreAllUnknown, hasViews);\n        _buildMethod = builder.getBuildMethod();\n        \n        if (_objectIdReader != null) {\n            throw new IllegalArgumentException(\"Can not use Object Id with Builder-based deserialization (type \"\n                    +beanDesc.getType()+\")\");\n        }\n    }\n\n    \n    protected BuilderBasedDeserializer(BuilderBasedDeserializer src) {\n        this(src, src._ignoreAllUnknown);\n    }\n\n    protected BuilderBasedDeserializer(BuilderBasedDeserializer src, boolean ignoreAllUnknown) {\n        super(src, ignoreAllUnknown);\n        _buildMethod = src._buildMethod;\n    }\n\n    protected BuilderBasedDeserializer(BuilderBasedDeserializer src, NameTransformer unwrapper) {\n        super(src, unwrapper);\n        _buildMethod = src._buildMethod;\n    }\n\n    public BuilderBasedDeserializer(BuilderBasedDeserializer src, ObjectIdReader oir) {\n        super(src, oir);\n        _buildMethod = src._buildMethod;\n    }\n\n    public BuilderBasedDeserializer(BuilderBasedDeserializer src, Set<String> ignorableProps) {\n        super(src, ignorableProps);\n        _buildMethod = src._buildMethod;\n    }\n\n    public BuilderBasedDeserializer(BuilderBasedDeserializer src, BeanPropertyMap props) {\n        super(src, props);\n        _buildMethod = src._buildMethod;\n    }\n\n    @Override\n    public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper) {\n        \n        return new BuilderBasedDeserializer(this, unwrapper);\n    }\n\n    @Override\n    public BeanDeserializerBase withObjectIdReader(ObjectIdReader oir) {\n        return new BuilderBasedDeserializer(this, oir);\n    }\n\n    @Override\n    public BeanDeserializerBase withIgnorableProperties(Set<String> ignorableProps) {\n        return new BuilderBasedDeserializer(this, ignorableProps);\n    }\n\n    @Override\n    public BeanDeserializerBase withBeanProperties(BeanPropertyMap props) {\n        return new BuilderBasedDeserializer(this, props);\n    }\n\n    @Override\n    protected BeanDeserializerBase asArrayDeserializer() {\n        SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n        return new BeanAsArrayBuilderDeserializer(this, props, _buildMethod);\n    }\n\n    \n\n    protected final Object finishBuild(DeserializationContext ctxt, Object builder) throws IOException {\n        \n        if (null == _buildMethod) {\n            return builder;\n        }\n        try {\n            return _buildMethod.getMember().invoke(builder);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n\n    \n    @Override\n    public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        JsonToken t = p.getCurrentToken();\n\n        \n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n            if (_vanillaProcessing) {\n            \treturn finishBuild(ctxt, vanillaDeserialize(p, ctxt, t));\n            }\n            Object builder = deserializeFromObject(p, ctxt);\n            return finishBuild(ctxt, builder);\n        }\n        \n        if (t != null) {\n            switch (t) {\n            case VALUE_STRING:\n                return finishBuild(ctxt, deserializeFromString(p, ctxt));\n            case VALUE_NUMBER_INT:\n                return finishBuild(ctxt, deserializeFromNumber(p, ctxt));\n            case VALUE_NUMBER_FLOAT:\n            \treturn finishBuild(ctxt, deserializeFromDouble(p, ctxt));\n            case VALUE_EMBEDDED_OBJECT:\n                return p.getEmbeddedObject();\n            case VALUE_TRUE:\n            case VALUE_FALSE:\n                return finishBuild(ctxt, deserializeFromBoolean(p, ctxt));\n            case START_ARRAY:\n                \n                return finishBuild(ctxt, deserializeFromArray(p, ctxt));\n            case FIELD_NAME:\n            case END_OBJECT:\n                return finishBuild(ctxt, deserializeFromObject(p, ctxt));\n            default:\n            }\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt, Object builder) throws IOException {\n        \n        return finishBuild(ctxt, _deserialize(p, ctxt, builder));\n    }\n\n    \n\n    protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, Object builder) throws IOException, JsonProcessingException {\n        if (_injectables != null) {\n            injectValues(ctxt, builder);\n        }\n        if (_unwrappedPropertyHandler != null) {\n            return deserializeWithUnwrapped(p, ctxt, builder);\n        }\n        if (_externalTypeIdHandler != null) {\n            return deserializeWithExternalTypeId(p, ctxt, builder);\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, builder, view);\n            }\n        }\n        JsonToken t = p.getCurrentToken();\n        \n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            \n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n\n            if (prop != null) { \n                try {\n                    builder = prop.deserializeSetAndReturn(p, ctxt, builder);\n                } catch (Exception e) {\n                    wrapAndThrow(e, builder, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, handledType(), propName);\n        }\n        return builder;\n    }\n\n    \n    private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException, JsonProcessingException {\n        Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        for (; p.getCurrentToken() != JsonToken.END_OBJECT; p.nextToken()) {\n            String propName = p.getCurrentName();\n            \n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n            } else {\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            }\n        }\n        return bean;\n    }\n\n    \n    @Override\n    public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        if (_nonStandardCreation) {\n            if (_unwrappedPropertyHandler != null) {\n                return deserializeWithUnwrapped(p, ctxt);\n            }\n            if (_externalTypeIdHandler != null) {\n                return deserializeWithExternalTypeId(p, ctxt);\n            }\n            return deserializeFromObjectUsingNonDefault(p, ctxt);\n        }\n        Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        for (; p.getCurrentToken() != JsonToken.END_OBJECT; p.nextToken()) {\n            String propName = p.getCurrentName();\n            \n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    @SuppressWarnings(\"resource\")\n    protected final Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        \n        TokenBuffer unknown = null;\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue; \n                    }\n                    \n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        return handlePolymorphic(p, ctxt, bean, unknown);\n                    }\n                    if (unknown != null) { \n                        bean = handleUnknownProperties(ctxt, bean, unknown);\n                    }\n                    \n                    return _deserialize(p, ctxt, bean);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            \n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                continue;\n            }\n            \n            if (unknown == null) {\n                unknown = new TokenBuffer(p, ctxt);\n            }\n            unknown.writeFieldName(propName);\n            unknown.copyCurrentStructure(p);\n        }\n\n        \n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            bean = wrapInstantiationProblem(e, ctxt);\n        }\n        if (unknown != null) {\n            \n            if (bean.getClass() != _beanType.getRawClass()) {\n                return handlePolymorphic(null, ctxt, bean, unknown);\n            }\n            \n            return handleUnknownProperties(ctxt, bean, unknown);\n        }\n        return bean;\n    }\n\n    \n\n    protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException, JsonProcessingException {\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            \n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                if (!prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        }\n        return bean;\n    }\n\n    \n\n    \n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\n        }\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        Object bean = _valueInstantiator.createUsingDefault(ctxt);\n\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n\n        for (; p.getCurrentToken() != JsonToken.END_OBJECT; p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException {\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            p.nextToken();\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n\n        \n        Object bean;\n        \n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    \n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\n        }\n        return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\n    }\n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException {\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n\n        for (JsonToken t = p.getCurrentToken(); t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            t = p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                \n                if (t.isScalarValue()) {\n                    ext.handleTypePropertyValue(p, ctxt, propName, bean);\n                }\n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            if (ext.handlePropertyValue(p, ctxt, propName, bean)) {\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n            } else {\n                \n                handleUnknownProperty(p, ctxt, bean, propName);\n            }\n        }\n        \n        return ext.complete(p, ctxt, bean);\n    }\n\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        \n        throw new IllegalStateException(\"Deserialization with Builder, External type id, @JsonCreator not yet implemented\");\n    }\n}\n",
      "buggy_signatures": [
        "protected BuilderBasedDeserializer(BuilderBasedDeserializer src)",
        "protected BuilderBasedDeserializer(BuilderBasedDeserializer src, boolean ignoreAllUnknown)",
        "protected BuilderBasedDeserializer(BuilderBasedDeserializer src, NameTransformer unwrapper)",
        "public BuilderBasedDeserializer(BuilderBasedDeserializer src, ObjectIdReader oir)",
        "public BuilderBasedDeserializer(BuilderBasedDeserializer src, Set<String> ignorableProps)",
        "public BuilderBasedDeserializer(BuilderBasedDeserializer src, BeanPropertyMap props)",
        "public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)",
        "public BeanDeserializerBase withObjectIdReader(ObjectIdReader oir)",
        "public BeanDeserializerBase withIgnorableProperties(Set<String> ignorableProps)",
        "public BeanDeserializerBase withBeanProperties(BeanPropertyMap props)",
        "protected BeanDeserializerBase asArrayDeserializer()",
        "protected final Object finishBuild(DeserializationContext ctxt, Object builder) throws IOException",
        "public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserialize(JsonParser p, DeserializationContext ctxt, Object builder) throws IOException",
        "protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, Object builder) throws IOException, JsonProcessingException",
        "private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException, JsonProcessingException",
        "public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException",
        "protected final Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException",
        "protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException, JsonProcessingException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException",
        "protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException",
        "protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException"
      ],
      "fixed_signatures": [
        "protected BuilderBasedDeserializer(BuilderBasedDeserializer src)",
        "protected BuilderBasedDeserializer(BuilderBasedDeserializer src, boolean ignoreAllUnknown)",
        "protected BuilderBasedDeserializer(BuilderBasedDeserializer src, NameTransformer unwrapper)",
        "public BuilderBasedDeserializer(BuilderBasedDeserializer src, ObjectIdReader oir)",
        "public BuilderBasedDeserializer(BuilderBasedDeserializer src, Set<String> ignorableProps)",
        "public BuilderBasedDeserializer(BuilderBasedDeserializer src, BeanPropertyMap props)",
        "public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)",
        "public BeanDeserializerBase withObjectIdReader(ObjectIdReader oir)",
        "public BeanDeserializerBase withIgnorableProperties(Set<String> ignorableProps)",
        "public BeanDeserializerBase withBeanProperties(BeanPropertyMap props)",
        "protected BeanDeserializerBase asArrayDeserializer()",
        "protected final Object finishBuild(DeserializationContext ctxt, Object builder) throws IOException",
        "public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserialize(JsonParser p, DeserializationContext ctxt, Object builder) throws IOException",
        "protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, Object builder) throws IOException, JsonProcessingException",
        "private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException, JsonProcessingException",
        "public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException",
        "protected final Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException",
        "protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException, JsonProcessingException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException",
        "protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException",
        "protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException"
      ],
      "methods": [
        {
          "buggy_method": "  protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n  final PropertyBasedCreator creator = _propertyBasedCreator;\n  PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n  TokenBuffer tokens = new TokenBuffer(p, ctxt);\n  tokens.writeStartObject();\n\n  JsonToken t = p.getCurrentToken();\n  for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n  String propName = p.getCurrentName();\n  p.nextToken(); \n  \n  SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n  if (creatorProp != null) {\n  if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n  t = p.nextToken();\n  Object bean;\n  try {\n  bean = creator.build(ctxt, buffer);\n  } catch (Exception e) {\n  wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n  continue;\n  }\n  while (t == JsonToken.FIELD_NAME) {\n  p.nextToken();\n  tokens.copyCurrentStructure(p);\n  t = p.nextToken();\n  }\n  tokens.writeEndObject();\n  if (bean.getClass() != _beanType.getRawClass()) {\n  ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n  return null;\n  }\n  return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n  }\n  continue;\n  }\n  \n  if (buffer.readIdProperty(propName)) {\n  continue;\n  }\n  \n  SettableBeanProperty prop = _beanProperties.find(propName);\n  if (prop != null) {\n  buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n  continue;\n  }\n  if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n  handleIgnoredProperty(p, ctxt, handledType(), propName);\n  continue;\n  }\n  tokens.writeFieldName(propName);\n  tokens.copyCurrentStructure(p);\n  \n  if (_anySetter != null) {\n  buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n  }\n  }\n\n  \n  Object bean;\n  \n  try {\n  bean = creator.build(ctxt, buffer);\n  } catch (Exception e) {\n  return wrapInstantiationProblem(e, ctxt);\n  }\n  return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n  }",
          "fixed_method": "  protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n  final PropertyBasedCreator creator = _propertyBasedCreator;\n  PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n  TokenBuffer tokens = new TokenBuffer(p, ctxt);\n  tokens.writeStartObject();\n\n  JsonToken t = p.getCurrentToken();\n  for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n  String propName = p.getCurrentName();\n  p.nextToken(); \n  \n  SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n  if (creatorProp != null) {\n  buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n  continue;\n  }\n  \n  if (buffer.readIdProperty(propName)) {\n  continue;\n  }\n  \n  SettableBeanProperty prop = _beanProperties.find(propName);\n  if (prop != null) {\n  buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n  continue;\n  }\n  if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n  handleIgnoredProperty(p, ctxt, handledType(), propName);\n  continue;\n  }\n  tokens.writeFieldName(propName);\n  tokens.copyCurrentStructure(p);\n  \n  if (_anySetter != null) {\n  buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n  }\n  }\n\n  \n  Object bean;\n  \n  try {\n  bean = creator.build(ctxt, buffer);\n  } catch (Exception e) {\n  return wrapInstantiationProblem(e, ctxt);\n  }\n  return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n  }",
          "diff": [
            "@@ -580,27 +580,7 @@",
            "             // creator property?\n",
            "             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n",
            "             if (creatorProp != null) {\n",
            "-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n",
            "-                    t = p.nextToken();\n",
            "-                    Object bean;\n",
            "-                    try {\n",
            "-                        bean = creator.build(ctxt, buffer);\n",
            "-                    } catch (Exception e) {\n",
            "-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n",
            "-                        continue;\n",
            "-                    }\n",
            "-                    while (t == JsonToken.FIELD_NAME) {\n",
            "-                        p.nextToken();\n",
            "-                        tokens.copyCurrentStructure(p);\n",
            "-                        t = p.nextToken();\n",
            "-                    }\n",
            "-                    tokens.writeEndObject();\n",
            "-                    if (bean.getClass() != _beanType.getRawClass()) {\n",
            "-                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n",
            "-                        return null;\n",
            "-                    }\n",
            "-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n",
            "-                }\n",
            "+                buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n",
            "                 continue;\n",
            "             }\n",
            "             // Object Id property?\n"
          ],
          "changed_lines": 22
        }
      ]
    }
  ]
}
