{
  "bug_id": "32",
  "failed_tests": {
    "org.apache.commons.cli.HelpFormatterTest": [
      {
        "methodName": "testRenderWrappedTextWordCut",
        "error": "java.lang.StringIndexOutOfBoundsException",
        "message": "String index out of range: 12",
        "fail_line": "        new HelpFormatter().renderWrappedText(sb, width, padding, text);",
        "test_source": "  public void testRenderWrappedTextWordCut() {\n  int width = 7;\n  int padding = 0;\n  String text = \"Thisisatest.\";\n  String expected = \"Thisisa\" + EOL + \n  \"test.\";\n  \n  StringBuffer sb = new StringBuffer();\n  new HelpFormatter().renderWrappedText(sb, width, padding, text);\n  assertEquals(\"cut and wrap\", expected, sb.toString());\n  }",
        "stack": [
          "HelpFormatter.findWrapPos line 937, HelpFormatter.renderWrappedText line 848, HelpFormatterTest.testRenderWrappedTextWordCut line 68"
        ]
      },
      {
        "methodName": "testFindWrapPos",
        "error": "junit.framework.AssertionFailedError",
        "message": "wrap position 3 expected:<3> but was:<4>",
        "fail_line": "        assertEquals(\"wrap position 3\", 3, hf.findWrapPos(text, 3, 0));",
        "test_source": "  public void testFindWrapPos() throws Exception {\n  HelpFormatter hf = new HelpFormatter();\n\n  String text = \"This is a test.\";\n  // text width should be max 8; the wrap position is 7\n  assertEquals(\"wrap position\", 7, hf.findWrapPos(text, 8, 0));\n  \n  // starting from 8 must give -1 - the wrap pos is after end\n  assertEquals(\"wrap position 2\", -1, hf.findWrapPos(text, 8, 8));\n  \n  // words longer than the width are cut\n  text = \"aaaa aa\";\n  assertEquals(\"wrap position 3\", 3, hf.findWrapPos(text, 3, 0));\n  \n  // last word length is equal to the width\n  text = \"aaaaaa aaaaaa\";\n  assertEquals(\"wrap position 4\", 6, hf.findWrapPos(text, 6, 0));\n  assertEquals(\"wrap position 4\", -1, hf.findWrapPos(text, 6, 7));\n  }",
        "stack": [
          "HelpFormatterTest.testFindWrapPos line 51"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/cli/HelpFormatter.java",
      "buggy_full_code": "\n\npackage org.apache.commons.cli;\n\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\n\n\npublic class HelpFormatter { public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \"; public static final String DEFAULT_OPT_PREFIX = \"-\"; public static final String DEFAULT_LONG_OPT_PREFIX = \"--\"; public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \"; public static final String DEFAULT_ARG_NAME = \"arg\"; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(\"line.separator\"); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); public void setWidth(int width) {\n        this.defaultWidth = width;\n    }\n\n    \n    public int getWidth() {\n        return defaultWidth;\n    }\n\n    \n    public void setLeftPadding(int padding) {\n        this.defaultLeftPad = padding;\n    }\n\n    \n    public int getLeftPadding() {\n        return defaultLeftPad;\n    }\n\n    \n    public void setDescPadding(int padding) {\n        this.defaultDescPad = padding;\n    }\n\n    \n    public int getDescPadding() {\n        return defaultDescPad;\n    }\n\n    \n    public void setSyntaxPrefix(String prefix) {\n        this.defaultSyntaxPrefix = prefix;\n    }\n\n    \n    public String getSyntaxPrefix() {\n        return defaultSyntaxPrefix;\n    }\n\n    \n    public void setNewLine(String newline) {\n        this.defaultNewLine = newline;\n    }\n\n    \n    public String getNewLine() {\n        return defaultNewLine;\n    }\n\n    \n    public void setOptPrefix(String prefix) {\n        this.defaultOptPrefix = prefix;\n    }\n\n    \n    public String getOptPrefix() {\n        return defaultOptPrefix;\n    }\n\n    \n    public void setLongOptPrefix(String prefix) {\n        this.defaultLongOptPrefix = prefix;\n    }\n\n    \n    public String getLongOptPrefix() {\n        return defaultLongOptPrefix;\n    }\n\n    \n    public void setLongOptSeparator(String longOptSeparator) {\n        this.longOptSeparator = longOptSeparator;\n    }\n\n    \n    public String getLongOptSeparator() {\n        return longOptSeparator;\n    }\n\n    \n    public void setArgName(String name) {\n        this.defaultArgName = name;\n    }\n\n    \n    public String getArgName() {\n        return defaultArgName;\n    }\n\n    \n    public Comparator getOptionComparator() {\n        return optionComparator;\n    }\n\n    \n    public void setOptionComparator(Comparator comparator) {\n        if (comparator == null)\n        {\n            this.optionComparator = new OptionComparator();\n        }\n        else\n        {\n            this.optionComparator = comparator;\n        }\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, Options options) {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {\n        printHelp(cmdLineSyntax, header, options, footer, false);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\n        printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);\n    }\n\n    \n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {\n        printHelp(width, cmdLineSyntax, header, options, footer, false);\n    }\n\n    \n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\n        PrintWriter pw = new PrintWriter(System.out);\n\n        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);\n        pw.flush();\n    }\n\n    \n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {\n        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);\n    }\n\n\n    \n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) {\n        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))\n        {\n            throw new IllegalArgumentException(\"cmdLineSyntax not provided\");\n        }\n\n        if (autoUsage)\n        {\n            printUsage(pw, width, cmdLineSyntax, options);\n        }\n        else\n        {\n            printUsage(pw, width, cmdLineSyntax);\n        }\n\n        if ((header != null) && (header.trim().length() > 0))\n        {\n            printWrapped(pw, width, header);\n        }\n\n        printOptions(pw, width, options, leftPad, descPad);\n\n        if ((footer != null) && (footer.trim().length() > 0))\n        {\n            printWrapped(pw, width, footer);\n        }\n    }\n\n    \n    public void printUsage(PrintWriter pw, int width, String app, Options options) {\n        \n        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\n\n        \n        final Collection processedGroups = new ArrayList();\n\n        \n        Option option;\n\n        List optList = new ArrayList(options.getOptions());\n        Collections.sort(optList, getOptionComparator());\n        \n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            \n            option = (Option) i.next();\n\n            \n            OptionGroup group = options.getOptionGroup(option);\n\n            \n            if (group != null)\n            {\n                \n                if (!processedGroups.contains(group))\n                {\n                    \n                    processedGroups.add(group);\n\n\n                    \n                    appendOptionGroup(buff, group);\n                }\n\n                \n                \n            }\n\n            \n            else\n            {\n                appendOption(buff, option, option.isRequired());\n            }\n\n            if (i.hasNext())\n            {\n                buff.append(\" \");\n            }\n        }\n\n\n        \n        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\n    }\n\n    \n    private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\n        if (!group.isRequired())\n        {\n            buff.append(\"[\");\n        }\n\n        List optList = new ArrayList(group.getOptions());\n        Collections.sort(optList, getOptionComparator());\n        \n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            \n            appendOption(buff, (Option) i.next(), true);\n\n            if (i.hasNext())\n            {\n                buff.append(\" | \");\n            }\n        }\n\n        if (!group.isRequired())\n        {\n            buff.append(\"]\");\n        }\n    }\n\n    \n    private void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n        if (!required)\n        {\n            buff.append(\"[\");\n        }\n\n        if (option.getOpt() != null)\n        {\n            buff.append(\"-\").append(option.getOpt());\n        }\n        else\n        {\n            buff.append(\"--\").append(option.getLongOpt());\n        }\n        \n        \n        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))\n        {\n            buff.append(option.getOpt() == null ? longOptSeparator : \" \");\n            buff.append(\"<\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\">\");\n        }\n        \n        \n        if (!required)\n        {\n            buff.append(\"]\");\n        }\n    }\n    \n    \n    public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {\n        int argPos = cmdLineSyntax.indexOf(' ') + 1;\n\n        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);\n    }\n\n    \n    public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) {\n        StringBuffer sb = new StringBuffer();\n\n        renderOptions(sb, width, options, leftPad, descPad);\n        pw.println(sb.toString());\n    }\n\n    \n    public void printWrapped(PrintWriter pw, int width, String text) {\n        printWrapped(pw, width, 0, text);\n    }\n\n    \n    public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) {\n        StringBuffer sb = new StringBuffer(text.length());\n\n        renderWrappedText(sb, width, nextLineTabStop, text);\n        pw.println(sb.toString());\n    }\n\n    \n\n    \n    protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n        final String lpad = createPadding(leftPad);\n        final String dpad = createPadding(descPad);\n\n        \n        \n        \n        \n        int max = 0;\n        StringBuffer optBuf;\n        List prefixList = new ArrayList();\n\n        List optList = options.helpOptions();\n\n        Collections.sort(optList, getOptionComparator());\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            Option option = (Option) i.next();\n            optBuf = new StringBuffer();\n            \n            if (option.getOpt() == null)\n            {\n                optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n            }\n            else\n            {\n                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n\n                if (option.hasLongOpt())\n                {\n                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\n                }\n            }\n\n            if (option.hasArg())\n            {\n                String argName = option.getArgName();\n                if (argName != null && argName.length() == 0)\n                {\n                    \n                    optBuf.append(' ');\n                }\n                else\n                {\n                    optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\n                    optBuf.append(\"<\").append(argName != null ? option.getArgName() : getArgName()).append(\">\");\n                }\n            }\n\n            prefixList.add(optBuf);\n            max = (optBuf.length() > max) ? optBuf.length() : max;\n        }\n\n        int x = 0;\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            Option option = (Option) i.next();\n            optBuf = new StringBuffer(prefixList.get(x++).toString());\n\n            if (optBuf.length() < max)\n            {\n                optBuf.append(createPadding(max - optBuf.length()));\n            }\n\n            optBuf.append(dpad);\n\n            int nextLineTabStop = max + descPad;\n\n            if (option.getDescription() != null)\n            {\n                optBuf.append(option.getDescription());\n            }\n\n            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n\n            if (i.hasNext())\n            {\n                sb.append(defaultNewLine);\n            }\n        }\n\n        return sb;\n    }\n\n    \n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            \n            nextLineTabStop = 1;\n        }\n\n        \n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n            \n            if ((text.length() > width) && (pos == nextLineTabStop - 1))\n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n\n    \n    protected int findWrapPos(String text, int width, int startPos) {\n        int pos;\n        \n        \n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n        {\n            return pos + 1;\n        }\n        else if (startPos + width >= text.length())\n        {\n            return -1;\n        }\n\n\n        \n        pos = startPos + width;\n\n        char c;\n\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n                && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        \n        if (pos > startPos)\n        {\n            return pos;\n        }\n        \n        \n        pos = startPos + width;\n        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))\n        {\n            ++pos;\n        }        \n        return pos == text.length() ? -1 : pos;\n    }\n\n    \n    protected String createPadding(int len) {\n        char[] padding = new char[len];\n        Arrays.fill(padding, ' ');\n        \n        return new String(padding);\n    }\n\n    \n    protected String rtrim(String s) {\n        if ((s == null) || (s.length() == 0))\n        {\n            return s;\n        }\n\n        int pos = s.length();\n\n        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\n        {\n            --pos;\n        }\n\n        return s.substring(0, pos);\n    }\n\n    \n    \n    \n    \n    private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2) {\n            Option opt1 = (Option) o1;\n            Option opt2 = (Option) o2;\n\n            return opt1.getKey().compareToIgnoreCase(opt2.getKey());\n        }\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.cli;\n\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\n\n\npublic class HelpFormatter { public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \"; public static final String DEFAULT_OPT_PREFIX = \"-\"; public static final String DEFAULT_LONG_OPT_PREFIX = \"--\"; public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \"; public static final String DEFAULT_ARG_NAME = \"arg\"; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(\"line.separator\"); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); public void setWidth(int width) {\n        this.defaultWidth = width;\n    }\n\n    \n    public int getWidth() {\n        return defaultWidth;\n    }\n\n    \n    public void setLeftPadding(int padding) {\n        this.defaultLeftPad = padding;\n    }\n\n    \n    public int getLeftPadding() {\n        return defaultLeftPad;\n    }\n\n    \n    public void setDescPadding(int padding) {\n        this.defaultDescPad = padding;\n    }\n\n    \n    public int getDescPadding() {\n        return defaultDescPad;\n    }\n\n    \n    public void setSyntaxPrefix(String prefix) {\n        this.defaultSyntaxPrefix = prefix;\n    }\n\n    \n    public String getSyntaxPrefix() {\n        return defaultSyntaxPrefix;\n    }\n\n    \n    public void setNewLine(String newline) {\n        this.defaultNewLine = newline;\n    }\n\n    \n    public String getNewLine() {\n        return defaultNewLine;\n    }\n\n    \n    public void setOptPrefix(String prefix) {\n        this.defaultOptPrefix = prefix;\n    }\n\n    \n    public String getOptPrefix() {\n        return defaultOptPrefix;\n    }\n\n    \n    public void setLongOptPrefix(String prefix) {\n        this.defaultLongOptPrefix = prefix;\n    }\n\n    \n    public String getLongOptPrefix() {\n        return defaultLongOptPrefix;\n    }\n\n    \n    public void setLongOptSeparator(String longOptSeparator) {\n        this.longOptSeparator = longOptSeparator;\n    }\n\n    \n    public String getLongOptSeparator() {\n        return longOptSeparator;\n    }\n\n    \n    public void setArgName(String name) {\n        this.defaultArgName = name;\n    }\n\n    \n    public String getArgName() {\n        return defaultArgName;\n    }\n\n    \n    public Comparator getOptionComparator() {\n        return optionComparator;\n    }\n\n    \n    public void setOptionComparator(Comparator comparator) {\n        if (comparator == null)\n        {\n            this.optionComparator = new OptionComparator();\n        }\n        else\n        {\n            this.optionComparator = comparator;\n        }\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, Options options) {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {\n        printHelp(cmdLineSyntax, header, options, footer, false);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\n        printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);\n    }\n\n    \n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {\n        printHelp(width, cmdLineSyntax, header, options, footer, false);\n    }\n\n    \n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\n        PrintWriter pw = new PrintWriter(System.out);\n\n        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);\n        pw.flush();\n    }\n\n    \n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {\n        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);\n    }\n\n\n    \n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) {\n        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))\n        {\n            throw new IllegalArgumentException(\"cmdLineSyntax not provided\");\n        }\n\n        if (autoUsage)\n        {\n            printUsage(pw, width, cmdLineSyntax, options);\n        }\n        else\n        {\n            printUsage(pw, width, cmdLineSyntax);\n        }\n\n        if ((header != null) && (header.trim().length() > 0))\n        {\n            printWrapped(pw, width, header);\n        }\n\n        printOptions(pw, width, options, leftPad, descPad);\n\n        if ((footer != null) && (footer.trim().length() > 0))\n        {\n            printWrapped(pw, width, footer);\n        }\n    }\n\n    \n    public void printUsage(PrintWriter pw, int width, String app, Options options) {\n        \n        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\n\n        \n        final Collection processedGroups = new ArrayList();\n\n        \n        Option option;\n\n        List optList = new ArrayList(options.getOptions());\n        Collections.sort(optList, getOptionComparator());\n        \n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            \n            option = (Option) i.next();\n\n            \n            OptionGroup group = options.getOptionGroup(option);\n\n            \n            if (group != null)\n            {\n                \n                if (!processedGroups.contains(group))\n                {\n                    \n                    processedGroups.add(group);\n\n\n                    \n                    appendOptionGroup(buff, group);\n                }\n\n                \n                \n            }\n\n            \n            else\n            {\n                appendOption(buff, option, option.isRequired());\n            }\n\n            if (i.hasNext())\n            {\n                buff.append(\" \");\n            }\n        }\n\n\n        \n        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\n    }\n\n    \n    private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\n        if (!group.isRequired())\n        {\n            buff.append(\"[\");\n        }\n\n        List optList = new ArrayList(group.getOptions());\n        Collections.sort(optList, getOptionComparator());\n        \n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            \n            appendOption(buff, (Option) i.next(), true);\n\n            if (i.hasNext())\n            {\n                buff.append(\" | \");\n            }\n        }\n\n        if (!group.isRequired())\n        {\n            buff.append(\"]\");\n        }\n    }\n\n    \n    private void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n        if (!required)\n        {\n            buff.append(\"[\");\n        }\n\n        if (option.getOpt() != null)\n        {\n            buff.append(\"-\").append(option.getOpt());\n        }\n        else\n        {\n            buff.append(\"--\").append(option.getLongOpt());\n        }\n        \n        \n        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))\n        {\n            buff.append(option.getOpt() == null ? longOptSeparator : \" \");\n            buff.append(\"<\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\">\");\n        }\n        \n        \n        if (!required)\n        {\n            buff.append(\"]\");\n        }\n    }\n    \n    \n    public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {\n        int argPos = cmdLineSyntax.indexOf(' ') + 1;\n\n        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);\n    }\n\n    \n    public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) {\n        StringBuffer sb = new StringBuffer();\n\n        renderOptions(sb, width, options, leftPad, descPad);\n        pw.println(sb.toString());\n    }\n\n    \n    public void printWrapped(PrintWriter pw, int width, String text) {\n        printWrapped(pw, width, 0, text);\n    }\n\n    \n    public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) {\n        StringBuffer sb = new StringBuffer(text.length());\n\n        renderWrappedText(sb, width, nextLineTabStop, text);\n        pw.println(sb.toString());\n    }\n\n    \n\n    \n    protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n        final String lpad = createPadding(leftPad);\n        final String dpad = createPadding(descPad);\n\n        \n        \n        \n        \n        int max = 0;\n        StringBuffer optBuf;\n        List prefixList = new ArrayList();\n\n        List optList = options.helpOptions();\n\n        Collections.sort(optList, getOptionComparator());\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            Option option = (Option) i.next();\n            optBuf = new StringBuffer();\n            \n            if (option.getOpt() == null)\n            {\n                optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n            }\n            else\n            {\n                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n\n                if (option.hasLongOpt())\n                {\n                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\n                }\n            }\n\n            if (option.hasArg())\n            {\n                String argName = option.getArgName();\n                if (argName != null && argName.length() == 0)\n                {\n                    \n                    optBuf.append(' ');\n                }\n                else\n                {\n                    optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\n                    optBuf.append(\"<\").append(argName != null ? option.getArgName() : getArgName()).append(\">\");\n                }\n            }\n\n            prefixList.add(optBuf);\n            max = (optBuf.length() > max) ? optBuf.length() : max;\n        }\n\n        int x = 0;\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            Option option = (Option) i.next();\n            optBuf = new StringBuffer(prefixList.get(x++).toString());\n\n            if (optBuf.length() < max)\n            {\n                optBuf.append(createPadding(max - optBuf.length()));\n            }\n\n            optBuf.append(dpad);\n\n            int nextLineTabStop = max + descPad;\n\n            if (option.getDescription() != null)\n            {\n                optBuf.append(option.getDescription());\n            }\n\n            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n\n            if (i.hasNext())\n            {\n                sb.append(defaultNewLine);\n            }\n        }\n\n        return sb;\n    }\n\n    \n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            \n            nextLineTabStop = 1;\n        }\n\n        \n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n            \n            if ((text.length() > width) && (pos == nextLineTabStop - 1))\n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n\n    \n    protected int findWrapPos(String text, int width, int startPos) {\n        int pos;\n        \n        \n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n        {\n            return pos + 1;\n        }\n        else if (startPos + width >= text.length())\n        {\n            return -1;\n        }\n\n\n        \n        pos = startPos + width;\n\n        char c;\n\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n                && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        \n        if (pos > startPos)\n        {\n            return pos;\n        }\n        \n        \n        pos = startPos + width;\n        \n        return pos == text.length() ? -1 : pos;\n    }\n\n    \n    protected String createPadding(int len) {\n        char[] padding = new char[len];\n        Arrays.fill(padding, ' ');\n        \n        return new String(padding);\n    }\n\n    \n    protected String rtrim(String s) {\n        if ((s == null) || (s.length() == 0))\n        {\n            return s;\n        }\n\n        int pos = s.length();\n\n        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\n        {\n            --pos;\n        }\n\n        return s.substring(0, pos);\n    }\n\n    \n    \n    \n    \n    private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2) {\n            Option opt1 = (Option) o1;\n            Option opt2 = (Option) o2;\n\n            return opt1.getKey().compareToIgnoreCase(opt2.getKey());\n        }\n    }\n\n}\n",
      "buggy_signatures": [
        "public int getWidth()",
        "public void setLeftPadding(int padding)",
        "public int getLeftPadding()",
        "public void setDescPadding(int padding)",
        "public int getDescPadding()",
        "public void setSyntaxPrefix(String prefix)",
        "public String getSyntaxPrefix()",
        "public void setNewLine(String newline)",
        "public String getNewLine()",
        "public void setOptPrefix(String prefix)",
        "public String getOptPrefix()",
        "public void setLongOptPrefix(String prefix)",
        "public String getLongOptPrefix()",
        "public void setLongOptSeparator(String longOptSeparator)",
        "public String getLongOptSeparator()",
        "public void setArgName(String name)",
        "public String getArgName()",
        "public Comparator getOptionComparator()",
        "public void setOptionComparator(Comparator comparator)",
        "public void printHelp(String cmdLineSyntax, Options options)",
        "public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",
        "public void printHelp(String cmdLineSyntax, String header, Options options, String footer)",
        "public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",
        "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",
        "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",
        "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer)",
        "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage)",
        "public void printUsage(PrintWriter pw, int width, String app, Options options)",
        "private void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",
        "private void appendOption(final StringBuffer buff, final Option option, final boolean required)",
        "public void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",
        "public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad)",
        "public void printWrapped(PrintWriter pw, int width, String text)",
        "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",
        "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text)",
        "protected int findWrapPos(String text, int width, int startPos)",
        "protected String createPadding(int len)",
        "protected String rtrim(String s)",
        "private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2)"
      ],
      "fixed_signatures": [
        "public int getWidth()",
        "public void setLeftPadding(int padding)",
        "public int getLeftPadding()",
        "public void setDescPadding(int padding)",
        "public int getDescPadding()",
        "public void setSyntaxPrefix(String prefix)",
        "public String getSyntaxPrefix()",
        "public void setNewLine(String newline)",
        "public String getNewLine()",
        "public void setOptPrefix(String prefix)",
        "public String getOptPrefix()",
        "public void setLongOptPrefix(String prefix)",
        "public String getLongOptPrefix()",
        "public void setLongOptSeparator(String longOptSeparator)",
        "public String getLongOptSeparator()",
        "public void setArgName(String name)",
        "public String getArgName()",
        "public Comparator getOptionComparator()",
        "public void setOptionComparator(Comparator comparator)",
        "public void printHelp(String cmdLineSyntax, Options options)",
        "public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",
        "public void printHelp(String cmdLineSyntax, String header, Options options, String footer)",
        "public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",
        "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",
        "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",
        "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer)",
        "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage)",
        "public void printUsage(PrintWriter pw, int width, String app, Options options)",
        "private void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",
        "private void appendOption(final StringBuffer buff, final Option option, final boolean required)",
        "public void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",
        "public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad)",
        "public void printWrapped(PrintWriter pw, int width, String text)",
        "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",
        "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text)",
        "protected int findWrapPos(String text, int width, int startPos)",
        "protected String createPadding(int len)",
        "protected String rtrim(String s)",
        "private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2)"
      ],
      "methods": [
        {
          "buggy_method": "  protected int findWrapPos(String text, int width, int startPos) {\n  int pos;\n  \n  \n  if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n  || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n  {\n  return pos + 1;\n  }\n  else if (startPos + width >= text.length())\n  {\n  return -1;\n  }\n\n\n  \n  pos = startPos + width;\n\n  char c;\n\n  while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n  && (c != '\\n') && (c != '\\r'))\n  {\n  --pos;\n  }\n\n  \n  if (pos > startPos)\n  {\n  return pos;\n  }\n  \n  \n  pos = startPos + width;\n  while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n  && (c != '\\n') && (c != '\\r'))\n  {\n  ++pos;\n  }  \n  return pos == text.length() ? -1 : pos;\n  }",
          "fixed_method": "  protected int findWrapPos(String text, int width, int startPos) {\n  int pos;\n  \n  \n  if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n  || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n  {\n  return pos + 1;\n  }\n  else if (startPos + width >= text.length())\n  {\n  return -1;\n  }\n\n\n  \n  pos = startPos + width;\n\n  char c;\n\n  while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n  && (c != '\\n') && (c != '\\r'))\n  {\n  --pos;\n  }\n\n  \n  if (pos > startPos)\n  {\n  return pos;\n  }\n  \n  \n  pos = startPos + width;\n  \n  return pos == text.length() ? -1 : pos;\n  }",
          "diff": [
            "@@ -934,11 +934,7 @@",
            "         \n",
            "         // if we didn't find one, simply chop at startPos+width\n",
            "         pos = startPos + width;\n",
            "-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n",
            "-               && (c != '\\n') && (c != '\\r'))\n",
            "-        {\n",
            "-            ++pos;\n",
            "-        }        \n",
            "+        \n",
            "         return pos == text.length() ? -1 : pos;\n",
            "     }\n",
            " \n"
          ],
          "changed_lines": 6
        }
      ]
    }
  ]
}
