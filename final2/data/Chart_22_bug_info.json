{
  "bug_id": "22",
  "failed_tests": {
    "org.jfree.data.junit.KeyedObjects2DTests": [
      {
        "methodName": "testRemoveColumnByKey",
        "error": "org.jfree.data.UnknownKeyException",
        "message": "The key (C2) is not recognised.",
        "fail_line": "        data.removeColumn(\"C2\");",
        "test_source": "  public void testRemoveColumnByKey() {\n  KeyedObjects2D data = new KeyedObjects2D();\n  data.setObject(\"Obj1\", \"R1\", \"C1\");\n  data.setObject(\"Obj2\", \"R2\", \"C2\");\n  data.removeColumn(\"C2\");\n  assertEquals(1, data.getColumnCount());\n  assertEquals(\"Obj1\", data.getObject(0, 0));\n  \n  // try unknown column key\n  boolean pass = false;\n  try {\n  data.removeColumn(\"XXX\");\n  }\n  catch (UnknownKeyException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n  \n  // try null column key\n  pass = false;\n  try {\n  data.removeColumn(null);\n  }\n  catch (IllegalArgumentException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n  }",
        "stack": [
          "KeyedObjects.removeValue line 268, KeyedObjects2D.removeColumn line 378, KeyedObjects2DTests.testRemoveColumnByKey line 391"
        ]
      },
      {
        "methodName": "testRemoveValue",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<1> but was:<2>",
        "fail_line": "        assertEquals(1, data.getColumnCount());",
        "test_source": "  public void testRemoveValue() {\n  KeyedObjects2D data = new KeyedObjects2D();\n  data.setObject(\"Obj1\", \"R1\", \"C1\");\n  data.setObject(\"Obj2\", \"R2\", \"C2\");\n  data.removeObject(\"R2\", \"C2\");\n  assertEquals(1, data.getRowCount());\n  assertEquals(1, data.getColumnCount());\n  assertEquals(\"Obj1\", data.getObject(0, 0));\n  }",
        "stack": [
          "KeyedObjects2DTests.testRemoveValue line 425"
        ]
      },
      {
        "methodName": "testGetValueByKey",
        "error": "org.jfree.data.UnknownKeyException",
        "message": "The key (C2) is not recognised.",
        "fail_line": "        assertNull(data.getObject(\"R1\", \"C2\"));",
        "test_source": "  public void testGetValueByKey() {\n  KeyedObjects2D data = new KeyedObjects2D();\n  data.addObject(\"Obj1\", \"R1\", \"C1\");\n  data.addObject(\"Obj2\", \"R2\", \"C2\");\n  assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));\n  assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));\n  assertNull(data.getObject(\"R1\", \"C2\"));\n  assertNull(data.getObject(\"R2\", \"C1\"));\n  \n  // check invalid indices\n  boolean pass = false;\n  try {\n  data.getObject(\"XX\", \"C1\");\n  }\n  catch (UnknownKeyException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n  \n  pass = false;\n  try {\n  data.getObject(\"R1\", \"XX\");\n  }\n  catch (UnknownKeyException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n\n  pass = false;\n  try {\n  data.getObject(\"XX\", \"C1\");\n  }\n  catch (UnknownKeyException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n\n  pass = false;\n  try {\n  data.getObject(\"R1\", \"XX\");\n  }\n  catch (UnknownKeyException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n  }",
        "stack": [
          "KeyedObjects.getObject line 171, KeyedObjects2D.getObject line 233, KeyedObjects2DTests.testGetValueByKey line 211"
        ]
      },
      {
        "methodName": "testRemoveColumnByIndex",
        "error": "org.jfree.data.UnknownKeyException",
        "message": "The key (C1) is not recognised.",
        "fail_line": "        data.removeColumn(0);",
        "test_source": "  public void testRemoveColumnByIndex() {\n  KeyedObjects2D data = new KeyedObjects2D();\n  data.setObject(\"Obj1\", \"R1\", \"C1\");\n  data.setObject(\"Obj2\", \"R2\", \"C2\");\n  data.removeColumn(0);\n  assertEquals(1, data.getColumnCount());\n  assertEquals(\"Obj2\", data.getObject(1, 0));\n  \n  // try negative column index\n  boolean pass = false;\n  try {\n  data.removeColumn(-1);\n  }\n  catch (IndexOutOfBoundsException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n  \n  // try column index too high\n  pass = false;\n  try {\n  data.removeColumn(data.getColumnCount());\n  }\n  catch (IndexOutOfBoundsException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n  }",
        "stack": [
          "KeyedObjects.removeValue line 268, KeyedObjects2D.removeColumn line 378, KeyedObjects2D.removeColumn line 357, KeyedObjects2DTests.testRemoveColumnByIndex line 327"
        ]
      },
      {
        "methodName": "testSetObject",
        "error": "org.jfree.data.UnknownKeyException",
        "message": "The key (C2) is not recognised.",
        "fail_line": "        assertNull(data.getObject(\"R1\", \"C2\"));",
        "test_source": "  public void testSetObject() {\n  KeyedObjects2D data = new KeyedObjects2D();\n  data.setObject(\"Obj1\", \"R1\", \"C1\");\n  data.setObject(\"Obj2\", \"R2\", \"C2\");\n  assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));\n  assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));\n  assertNull(data.getObject(\"R1\", \"C2\"));\n  assertNull(data.getObject(\"R2\", \"C1\"));\n  \n  // confirm overwriting an existing value\n  data.setObject(\"ABC\", \"R2\", \"C2\");\n  assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));\n  \n  // try null keys\n  boolean pass = false;\n  try {\n  data.setObject(\"X\", null, \"C1\");\n  }\n  catch (IllegalArgumentException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n  \n  pass = false;\n  try {\n  data.setObject(\"X\", \"R1\", null);\n  }\n  catch (IllegalArgumentException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n  }",
        "stack": [
          "KeyedObjects.getObject line 171, KeyedObjects2D.getObject line 233, KeyedObjects2DTests.testSetObject line 261"
        ]
      },
      {
        "methodName": "testRemoveRowByKey",
        "error": "java.lang.IndexOutOfBoundsException",
        "message": "Index -1 out of bounds for length 1",
        "fail_line": "            data.removeRow(\"XXX\");",
        "test_source": "  public void testRemoveRowByKey() {\n  KeyedObjects2D data = new KeyedObjects2D();\n  data.setObject(\"Obj1\", \"R1\", \"C1\");\n  data.setObject(\"Obj2\", \"R2\", \"C2\");\n  data.removeRow(\"R2\");\n  assertEquals(1, data.getRowCount());\n  assertEquals(\"Obj1\", data.getObject(0, 0));\n  \n  // try unknown row key\n  boolean pass = false;\n  try {\n  data.removeRow(\"XXX\");\n  }\n  catch (UnknownKeyException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n  \n  // try null row key\n  pass = false;\n  try {\n  data.removeRow(null);\n  }\n  catch (IllegalArgumentException e) {\n  pass = true;\n  }\n  assertTrue(pass);\n  }",
        "stack": [
          "KeyedObjects2D.removeRow line 330, KeyedObjects2D.removeRow line 345, KeyedObjects2DTests.testRemoveRowByKey line 366"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/data/KeyedObjects2D.java",
      "buggy_full_code": "\n\npackage org.jfree.data;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\n\n\n\npublic class KeyedObjects2D implements Cloneable, Serializable { private static final long serialVersionUID = -1015873563138522374L; private List rowKeys; private List columnKeys; private List rows; public KeyedObjects2D() {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n    }\n\n    \n    public int getRowCount() {\n        return this.rowKeys.size();\n    }\n\n    \n    public int getColumnCount() {\n        return this.columnKeys.size();\n    }\n\n    \n    public Object getObject(int row, int column) {\n        Object result = null;\n        KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n        if (rowData != null) {\n            Comparable columnKey = (Comparable) this.columnKeys.get(column);\n            if (columnKey != null) {\n                int index = rowData.getIndex(columnKey);\n                if (index >= 0) {\n                    result = rowData.getObject(columnKey);\n                }\n            }\n        }\n        return result;\n    }\n\n    \n    public Comparable getRowKey(int row) {\n        return (Comparable) this.rowKeys.get(row);\n    }\n\n    \n    public int getRowIndex(Comparable key) {\n        return this.rowKeys.indexOf(key);\n    }\n\n    \n    public List getRowKeys() {\n        return Collections.unmodifiableList(this.rowKeys);\n    }\n\n    \n    public Comparable getColumnKey(int column) {\n        return (Comparable) this.columnKeys.get(column);\n    }\n\n    \n    public int getColumnIndex(Comparable key) {\n        return this.columnKeys.indexOf(key);\n    }\n\n    \n    public List getColumnKeys() {\n        return Collections.unmodifiableList(this.columnKeys);\n    }\n\n    \n    public Object getObject(Comparable rowKey, Comparable columnKey) {\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        int row = this.rowKeys.indexOf(rowKey);\n        if (row < 0) {\n            throw new UnknownKeyException(\"Row key (\" + rowKey \n                    + \") not recognised.\");\n        }\n        int column = this.columnKeys.indexOf(columnKey);\n        if (column < 0) {\n            throw new UnknownKeyException(\"Column key (\" + columnKey \n                    + \") not recognised.\");\n        }\n        if (row >= 0) {\n        KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n            return rowData.getObject(columnKey);\n        }\n        else {\n            return null;\n        }\n    }\n\n    \n    public void addObject(Object object, Comparable rowKey, Comparable columnKey) {\n        setObject(object, rowKey, columnKey);\n    }\n\n    \n    public void setObject(Object object, Comparable rowKey, Comparable columnKey) {\n\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        KeyedObjects row;\n        int rowIndex = this.rowKeys.indexOf(rowKey);\n        if (rowIndex >= 0) {\n            row = (KeyedObjects) this.rows.get(rowIndex);\n        }\n        else {\n            this.rowKeys.add(rowKey);\n            row = new KeyedObjects();\n            this.rows.add(row);\n        }\n        row.setObject(columnKey, object);\n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n\n    }\n\n    \n    public void removeObject(Comparable rowKey, Comparable columnKey) {\n        setObject(null, rowKey, columnKey);\n        \n        \n        boolean allNull = true;\n        int rowIndex = getRowIndex(rowKey);\n        KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex);\n\n        for (int item = 0, itemCount = row.getItemCount(); item < itemCount; \n             item++) {\n            if (row.getObject(item) != null) {\n                allNull = false;\n                break;\n            }\n        }\n        \n        if (allNull) {\n            this.rowKeys.remove(rowIndex);\n            this.rows.remove(rowIndex);\n        }\n        \n        \n        \n        \n    }\n\n    \n    public void removeRow(int rowIndex) {\n        this.rowKeys.remove(rowIndex);\n        this.rows.remove(rowIndex);\n    }\n\n    \n    public void removeRow(Comparable rowKey) {\n        int index = getRowIndex(rowKey);\n        removeRow(index);\n    }\n\n    \n    public void removeColumn(int columnIndex) {\n        Comparable columnKey = getColumnKey(columnIndex);\n        removeColumn(columnKey);\n    }\n\n    \n    public void removeColumn(Comparable columnKey) {\n        int index = getColumnIndex(columnKey);\n        if (index < 0) {\n            throw new UnknownKeyException(\"Column key (\" + columnKey \n                    + \") not recognised.\");\n        }\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            KeyedObjects rowData = (KeyedObjects) iterator.next();\n                rowData.removeValue(columnKey);\n        }\n        this.columnKeys.remove(columnKey);\n    }\n\n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof KeyedObjects2D)) {\n            return false;\n        }\n        \n        KeyedObjects2D that = (KeyedObjects2D) obj;\n        if (!getRowKeys().equals(that.getRowKeys())) {\n            return false;\n        }\n        if (!getColumnKeys().equals(that.getColumnKeys())) {\n            return false;\n        }\n        int rowCount = getRowCount();\n        if (rowCount != that.getRowCount()) {\n            return false;\n        }\n        int colCount = getColumnCount();\n        if (colCount != that.getColumnCount()) {\n            return false;\n        }\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < colCount; c++) {\n                Object v1 = getObject(r, c);\n                Object v2 = that.getObject(r, c);\n                if (v1 == null) {\n                    if (v2 != null) {\n                        return false;\n                    }\n                }\n                else {\n                    if (!v1.equals(v2)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    \n    public int hashCode() {\n        int result;\n        result = this.rowKeys.hashCode();\n        result = 29 * result + this.columnKeys.hashCode();\n        result = 29 * result + this.rows.hashCode();\n        return result;\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        KeyedObjects2D clone = (KeyedObjects2D) super.clone();\n        clone.columnKeys = new java.util.ArrayList(this.columnKeys);\n        clone.rowKeys = new java.util.ArrayList(this.rowKeys);\n        clone.rows = new java.util.ArrayList(this.rows.size());\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            KeyedObjects row = (KeyedObjects) iterator.next();\n            clone.rows.add(row.clone());\n        }\n        return clone;\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.jfree.data;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\n\n\n\npublic class KeyedObjects2D implements Cloneable, Serializable { private static final long serialVersionUID = -1015873563138522374L; private List rowKeys; private List columnKeys; private List rows; public KeyedObjects2D() {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n    }\n\n    \n    public int getRowCount() {\n        return this.rowKeys.size();\n    }\n\n    \n    public int getColumnCount() {\n        return this.columnKeys.size();\n    }\n\n    \n    public Object getObject(int row, int column) {\n        Object result = null;\n        KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n        if (rowData != null) {\n            Comparable columnKey = (Comparable) this.columnKeys.get(column);\n            if (columnKey != null) {\n                int index = rowData.getIndex(columnKey);\n                if (index >= 0) {\n                    result = rowData.getObject(columnKey);\n                }\n            }\n        }\n        return result;\n    }\n\n    \n    public Comparable getRowKey(int row) {\n        return (Comparable) this.rowKeys.get(row);\n    }\n\n    \n    public int getRowIndex(Comparable key) {\n        return this.rowKeys.indexOf(key);\n    }\n\n    \n    public List getRowKeys() {\n        return Collections.unmodifiableList(this.rowKeys);\n    }\n\n    \n    public Comparable getColumnKey(int column) {\n        return (Comparable) this.columnKeys.get(column);\n    }\n\n    \n    public int getColumnIndex(Comparable key) {\n        return this.columnKeys.indexOf(key);\n    }\n\n    \n    public List getColumnKeys() {\n        return Collections.unmodifiableList(this.columnKeys);\n    }\n\n    \n    public Object getObject(Comparable rowKey, Comparable columnKey) {\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        int row = this.rowKeys.indexOf(rowKey);\n        if (row < 0) {\n            throw new UnknownKeyException(\"Row key (\" + rowKey \n                    + \") not recognised.\");\n        }\n        int column = this.columnKeys.indexOf(columnKey);\n        if (column < 0) {\n            throw new UnknownKeyException(\"Column key (\" + columnKey \n                    + \") not recognised.\");\n        }\n        KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n        int index = rowData.getIndex(columnKey);\n        if (index >= 0) {\n            return rowData.getObject(index);\n        }\n        else {\n            return null;\n        }\n    }\n\n    \n    public void addObject(Object object, Comparable rowKey, Comparable columnKey) {\n        setObject(object, rowKey, columnKey);\n    }\n\n    \n    public void setObject(Object object, Comparable rowKey, Comparable columnKey) {\n\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        KeyedObjects row;\n        int rowIndex = this.rowKeys.indexOf(rowKey);\n        if (rowIndex >= 0) {\n            row = (KeyedObjects) this.rows.get(rowIndex);\n        }\n        else {\n            this.rowKeys.add(rowKey);\n            row = new KeyedObjects();\n            this.rows.add(row);\n        }\n        row.setObject(columnKey, object);\n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n\n    }\n\n    \n    public void removeObject(Comparable rowKey, Comparable columnKey) {\n        setObject(null, rowKey, columnKey);\n        \n        \n        boolean allNull = true;\n        int rowIndex = getRowIndex(rowKey);\n        KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex);\n\n        for (int item = 0, itemCount = row.getItemCount(); item < itemCount; \n             item++) {\n            if (row.getObject(item) != null) {\n                allNull = false;\n                break;\n            }\n        }\n        \n        if (allNull) {\n            this.rowKeys.remove(rowIndex);\n            this.rows.remove(rowIndex);\n        }\n        \n        \n        allNull = true;\n        \n        for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n             item++) {\n            row = (KeyedObjects) this.rows.get(item);\n            int columnIndex = row.getIndex(columnKey);\n            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {\n                allNull = false;\n                break;\n            }\n        }\n        \n        if (allNull) {\n            for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n                 item++) {\n                row = (KeyedObjects) this.rows.get(item);\n                int columnIndex = row.getIndex(columnKey);\n                if (columnIndex >= 0) {\n                    row.removeValue(columnIndex);\n                }\n            }\n            this.columnKeys.remove(columnKey);\n        }\n    }\n\n    \n    public void removeRow(int rowIndex) {\n        this.rowKeys.remove(rowIndex);\n        this.rows.remove(rowIndex);\n    }\n\n    \n    public void removeRow(Comparable rowKey) {\n        int index = getRowIndex(rowKey);\n        if (index < 0) {\n            throw new UnknownKeyException(\"Row key (\" + rowKey \n                    + \") not recognised.\");\n        }\n        removeRow(index);\n    }\n\n    \n    public void removeColumn(int columnIndex) {\n        Comparable columnKey = getColumnKey(columnIndex);\n        removeColumn(columnKey);\n    }\n\n    \n    public void removeColumn(Comparable columnKey) {\n        int index = getColumnIndex(columnKey);\n        if (index < 0) {\n            throw new UnknownKeyException(\"Column key (\" + columnKey \n                    + \") not recognised.\");\n        }\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            KeyedObjects rowData = (KeyedObjects) iterator.next();\n            int i = rowData.getIndex(columnKey);\n            if (i >= 0) {\n                rowData.removeValue(i);\n            }\n        }\n        this.columnKeys.remove(columnKey);\n    }\n\n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof KeyedObjects2D)) {\n            return false;\n        }\n        \n        KeyedObjects2D that = (KeyedObjects2D) obj;\n        if (!getRowKeys().equals(that.getRowKeys())) {\n            return false;\n        }\n        if (!getColumnKeys().equals(that.getColumnKeys())) {\n            return false;\n        }\n        int rowCount = getRowCount();\n        if (rowCount != that.getRowCount()) {\n            return false;\n        }\n        int colCount = getColumnCount();\n        if (colCount != that.getColumnCount()) {\n            return false;\n        }\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < colCount; c++) {\n                Object v1 = getObject(r, c);\n                Object v2 = that.getObject(r, c);\n                if (v1 == null) {\n                    if (v2 != null) {\n                        return false;\n                    }\n                }\n                else {\n                    if (!v1.equals(v2)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    \n    public int hashCode() {\n        int result;\n        result = this.rowKeys.hashCode();\n        result = 29 * result + this.columnKeys.hashCode();\n        result = 29 * result + this.rows.hashCode();\n        return result;\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        KeyedObjects2D clone = (KeyedObjects2D) super.clone();\n        clone.columnKeys = new java.util.ArrayList(this.columnKeys);\n        clone.rowKeys = new java.util.ArrayList(this.rowKeys);\n        clone.rows = new java.util.ArrayList(this.rows.size());\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            KeyedObjects row = (KeyedObjects) iterator.next();\n            clone.rows.add(row.clone());\n        }\n        return clone;\n    }\n\n}\n",
      "buggy_signatures": [
        "public int getRowCount()",
        "public int getColumnCount()",
        "public Object getObject(int row, int column)",
        "public Comparable getRowKey(int row)",
        "public int getRowIndex(Comparable key)",
        "public List getRowKeys()",
        "public Comparable getColumnKey(int column)",
        "public int getColumnIndex(Comparable key)",
        "public List getColumnKeys()",
        "public Object getObject(Comparable rowKey, Comparable columnKey)",
        "public void addObject(Object object, Comparable rowKey, Comparable columnKey)",
        "public void setObject(Object object, Comparable rowKey, Comparable columnKey)",
        "public void removeObject(Comparable rowKey, Comparable columnKey)",
        "public void removeRow(int rowIndex)",
        "public void removeRow(Comparable rowKey)",
        "public void removeColumn(int columnIndex)",
        "public void removeColumn(Comparable columnKey)",
        "public boolean equals(Object obj)",
        "public int hashCode()",
        "public Object clone() throws CloneNotSupportedException"
      ],
      "fixed_signatures": [
        "public int getRowCount()",
        "public int getColumnCount()",
        "public Object getObject(int row, int column)",
        "public Comparable getRowKey(int row)",
        "public int getRowIndex(Comparable key)",
        "public List getRowKeys()",
        "public Comparable getColumnKey(int column)",
        "public int getColumnIndex(Comparable key)",
        "public List getColumnKeys()",
        "public Object getObject(Comparable rowKey, Comparable columnKey)",
        "public void addObject(Object object, Comparable rowKey, Comparable columnKey)",
        "public void setObject(Object object, Comparable rowKey, Comparable columnKey)",
        "public void removeObject(Comparable rowKey, Comparable columnKey)",
        "public void removeRow(int rowIndex)",
        "public void removeRow(Comparable rowKey)",
        "public void removeColumn(int columnIndex)",
        "public void removeColumn(Comparable columnKey)",
        "public boolean equals(Object obj)",
        "public int hashCode()",
        "public Object clone() throws CloneNotSupportedException"
      ],
      "methods": [
        {
          "buggy_method": "  public Object getObject(Comparable rowKey, Comparable columnKey) {\n  if (rowKey == null) {\n  throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n  }\n  if (columnKey == null) {\n  throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n  }\n  int row = this.rowKeys.indexOf(rowKey);\n  if (row < 0) {\n  throw new UnknownKeyException(\"Row key (\" + rowKey \n  + \") not recognised.\");\n  }\n  int column = this.columnKeys.indexOf(columnKey);\n  if (column < 0) {\n  throw new UnknownKeyException(\"Column key (\" + columnKey \n  + \") not recognised.\");\n  }\n  if (row >= 0) {\n  KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n  return rowData.getObject(columnKey);\n  }\n  else {\n  return null;\n  }\n  }",
          "fixed_method": "  public Object getObject(Comparable rowKey, Comparable columnKey) {\n  if (rowKey == null) {\n  throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n  }\n  if (columnKey == null) {\n  throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n  }\n  int row = this.rowKeys.indexOf(rowKey);\n  if (row < 0) {\n  throw new UnknownKeyException(\"Row key (\" + rowKey \n  + \") not recognised.\");\n  }\n  int column = this.columnKeys.indexOf(columnKey);\n  if (column < 0) {\n  throw new UnknownKeyException(\"Column key (\" + columnKey \n  + \") not recognised.\");\n  }\n  KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n  int index = rowData.getIndex(columnKey);\n  if (index >= 0) {\n  return rowData.getObject(index);\n  }\n  else {\n  return null;\n  }\n  }",
          "diff": [
            "@@ -228,9 +228,10 @@",
            "             throw new UnknownKeyException(\"Column key (\" + columnKey \n",
            "                     + \") not recognised.\");\n",
            "         }\n",
            "-        if (row >= 0) {\n",
            "         KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n",
            "-            return rowData.getObject(columnKey);\n",
            "+        int index = rowData.getIndex(columnKey);\n",
            "+        if (index >= 0) {\n",
            "+            return rowData.getObject(index);\n",
            "         }\n",
            "         else {\n",
            "             return null;\n"
          ],
          "changed_lines": 5
        },
        {
          "buggy_method": "  public void removeObject(Comparable rowKey, Comparable columnKey) {\n  setObject(null, rowKey, columnKey);\n  \n  \n  boolean allNull = true;\n  int rowIndex = getRowIndex(rowKey);\n  KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex);\n\n  for (int item = 0, itemCount = row.getItemCount(); item < itemCount; \n  item++) {\n  if (row.getObject(item) != null) {\n  allNull = false;\n  break;\n  }\n  }\n  \n  if (allNull) {\n  this.rowKeys.remove(rowIndex);\n  this.rows.remove(rowIndex);\n  }\n  \n  \n  \n  \n  }",
          "fixed_method": "  public void removeObject(Comparable rowKey, Comparable columnKey) {\n  setObject(null, rowKey, columnKey);\n  \n  \n  boolean allNull = true;\n  int rowIndex = getRowIndex(rowKey);\n  KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex);\n\n  for (int item = 0, itemCount = row.getItemCount(); item < itemCount; \n  item++) {\n  if (row.getObject(item) != null) {\n  allNull = false;\n  break;\n  }\n  }\n  \n  if (allNull) {\n  this.rowKeys.remove(rowIndex);\n  this.rows.remove(rowIndex);\n  }\n  \n  \n  allNull = true;\n  \n  for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n  item++) {\n  row = (KeyedObjects) this.rows.get(item);\n  int columnIndex = row.getIndex(columnKey);\n  if (columnIndex >= 0 && row.getObject(columnIndex) != null) {\n  allNull = false;\n  break;\n  }\n  }\n  \n  if (allNull) {\n  for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n  item++) {\n  row = (KeyedObjects) this.rows.get(item);\n  int columnIndex = row.getIndex(columnKey);\n  if (columnIndex >= 0) {\n  row.removeValue(columnIndex);\n  }\n  }\n  this.columnKeys.remove(columnKey);\n  }\n  }",
          "diff": [
            "@@ -315,8 +316,29 @@",
            "         }\n",
            "         \n",
            "         // 2. check whether the column is now empty.\n",
            "-        \n",
            "-        \n",
            "+        allNull = true;\n",
            "+        \n",
            "+        for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n",
            "+             item++) {\n",
            "+            row = (KeyedObjects) this.rows.get(item);\n",
            "+            int columnIndex = row.getIndex(columnKey);\n",
            "+            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {\n",
            "+                allNull = false;\n",
            "+                break;\n",
            "+            }\n",
            "+        }\n",
            "+        \n",
            "+        if (allNull) {\n",
            "+            for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n",
            "+                 item++) {\n",
            "+                row = (KeyedObjects) this.rows.get(item);\n",
            "+                int columnIndex = row.getIndex(columnKey);\n",
            "+                if (columnIndex >= 0) {\n",
            "+                    row.removeValue(columnIndex);\n",
            "+                }\n",
            "+            }\n",
            "+            this.columnKeys.remove(columnKey);\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     /**\n"
          ],
          "changed_lines": 25
        },
        {
          "buggy_method": "  public void removeRow(Comparable rowKey) {\n  int index = getRowIndex(rowKey);\n  removeRow(index);\n  }",
          "fixed_method": "  public void removeRow(Comparable rowKey) {\n  int index = getRowIndex(rowKey);\n  if (index < 0) {\n  throw new UnknownKeyException(\"Row key (\" + rowKey \n  + \") not recognised.\");\n  }\n  removeRow(index);\n  }",
          "diff": [
            "@@ -342,6 +364,10 @@",
            "      */\n",
            "     public void removeRow(Comparable rowKey) {\n",
            "         int index = getRowIndex(rowKey);\n",
            "+        if (index < 0) {\n",
            "+            throw new UnknownKeyException(\"Row key (\" + rowKey \n",
            "+                    + \") not recognised.\");\n",
            "+        }\n",
            "         removeRow(index);\n",
            "     }\n",
            " \n"
          ],
          "changed_lines": 4
        },
        {
          "buggy_method": "  public void removeColumn(Comparable columnKey) {\n  int index = getColumnIndex(columnKey);\n  if (index < 0) {\n  throw new UnknownKeyException(\"Column key (\" + columnKey \n  + \") not recognised.\");\n  }\n  Iterator iterator = this.rows.iterator();\n  while (iterator.hasNext()) {\n  KeyedObjects rowData = (KeyedObjects) iterator.next();\n  rowData.removeValue(columnKey);\n  }\n  this.columnKeys.remove(columnKey);\n  }",
          "fixed_method": "  public void removeColumn(Comparable columnKey) {\n  int index = getColumnIndex(columnKey);\n  if (index < 0) {\n  throw new UnknownKeyException(\"Column key (\" + columnKey \n  + \") not recognised.\");\n  }\n  Iterator iterator = this.rows.iterator();\n  while (iterator.hasNext()) {\n  KeyedObjects rowData = (KeyedObjects) iterator.next();\n  int i = rowData.getIndex(columnKey);\n  if (i >= 0) {\n  rowData.removeValue(i);\n  }\n  }\n  this.columnKeys.remove(columnKey);\n  }",
          "diff": [
            "@@ -375,7 +401,10 @@",
            "         Iterator iterator = this.rows.iterator();\n",
            "         while (iterator.hasNext()) {\n",
            "             KeyedObjects rowData = (KeyedObjects) iterator.next();\n",
            "-                rowData.removeValue(columnKey);\n",
            "+            int i = rowData.getIndex(columnKey);\n",
            "+            if (i >= 0) {\n",
            "+                rowData.removeValue(i);\n",
            "+            }\n",
            "         }\n",
            "         this.columnKeys.remove(columnKey);\n",
            "     }\n"
          ],
          "changed_lines": 5
        }
      ]
    }
  ]
}
