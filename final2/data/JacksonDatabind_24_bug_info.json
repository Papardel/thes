{
  "bug_id": "24",
  "failed_tests": {
    "com.fasterxml.jackson.databind.ser.TestConfig": [
      {
        "methodName": "testDateFormatConfig",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<sun.util.calendar.ZoneInfo[id=\"America/Los_Angeles\",offset=-28800000,dstSavings=3600000,useDaylight=true,transitions=185,lastRule=java.util.SimpleTimeZone[id=America/Los_Angeles,offset=-28800000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]]> but was:<sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]>",
        "fail_line": "        assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());",
        "test_source": "  public void testDateFormatConfig() throws Exception {\n  ObjectMapper mapper = new ObjectMapper();\n  TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n  TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n  // sanity checks\n  assertEquals(tz1, tz1);\n  assertEquals(tz2, tz2);\n  if (tz1.equals(tz2)) {\n  fail();\n  }\n\n  mapper.setTimeZone(tz1);\n  assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());\n  assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());\n\n  // also better stick via reader/writer as well\n  assertEquals(tz1, mapper.writer().getConfig().getTimeZone());\n  assertEquals(tz1, mapper.reader().getConfig().getTimeZone());\n  \n  SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n  f.setTimeZone(tz2);\n  mapper.setDateFormat(f);\n\n  // should not change the timezone tho\n  assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());\n  assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());\n  assertEquals(tz1, mapper.writer().getConfig().getTimeZone());\n  assertEquals(tz1, mapper.reader().getConfig().getTimeZone());\n  }",
        "stack": [
          "TestConfig.testDateFormatConfig line 221"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.cfg;\n\nimport java.text.DateFormat;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.core.Base64Variant;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;\nimport com.fasterxml.jackson.databind.introspect.ClassIntrospector;\nimport com.fasterxml.jackson.databind.introspect.VisibilityChecker;\nimport com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport com.fasterxml.jackson.databind.util.StdDateFormat;\n\n\npublic final class BaseSettings implements java.io.Serializable { private static final long serialVersionUID = 1L; protected final ClassIntrospector _classIntrospector; protected final AnnotationIntrospector _annotationIntrospector; protected final VisibilityChecker<?> _visibilityChecker; protected final PropertyNamingStrategy _propertyNamingStrategy; protected final TypeFactory _typeFactory; protected final TypeResolverBuilder<?> _typeResolverBuilder; protected final DateFormat _dateFormat; protected final HandlerInstantiator _handlerInstantiator; protected final Locale _locale; protected final TimeZone _timeZone; protected final Base64Variant _defaultBase64; public BaseSettings(ClassIntrospector ci, AnnotationIntrospector ai, VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf, TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi, Locale locale, TimeZone tz, Base64Variant defaultBase64) {\n        _classIntrospector = ci;\n        _annotationIntrospector = ai;\n        _visibilityChecker = vc;\n        _propertyNamingStrategy = pns;\n        _typeFactory = tf;\n        _typeResolverBuilder = typer;\n        _dateFormat = dateFormat;\n        _handlerInstantiator = hi;\n        _locale = locale;\n        _timeZone = tz;\n        _defaultBase64 = defaultBase64;\n    }\n\n    \n    \n    public BaseSettings withClassIntrospector(ClassIntrospector ci) {\n        if (_classIntrospector == ci) {\n            return this;\n        }\n        return new BaseSettings(ci, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n    \n    public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai) {\n        if (_annotationIntrospector == ai) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, ai, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return withAnnotationIntrospector(AnnotationIntrospectorPair.create(ai, _annotationIntrospector));\n    }\n\n    public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return withAnnotationIntrospector(AnnotationIntrospectorPair.create(_annotationIntrospector, ai));\n    }\n    \n    public BaseSettings withVisibilityChecker(VisibilityChecker<?> vc) {\n        if (_visibilityChecker == vc) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, vc, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n        return new BaseSettings(_classIntrospector, _annotationIntrospector,\n                _visibilityChecker.withVisibility(forMethod, visibility),\n                _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n    \n    public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns) {\n        if (_propertyNamingStrategy == pns) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, pns, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings withTypeFactory(TypeFactory tf) {\n        if (_typeFactory == tf) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, tf,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings withTypeResolverBuilder(TypeResolverBuilder<?> typer) {\n        if (_typeResolverBuilder == typer) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                typer, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n    \n    public BaseSettings withDateFormat(DateFormat df) {\n        if (_dateFormat == df) {\n            return this;\n        }\n        TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                tz, _defaultBase64);\n    }\n\n    public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) {\n        if (_handlerInstantiator == hi) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, hi, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings with(Locale l) {\n        if (_locale == l) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, l,\n                _timeZone, _defaultBase64);\n    }\n\n    \n    public BaseSettings with(TimeZone tz) {\n        if (tz == null) {\n            throw new IllegalArgumentException();\n        }\n        DateFormat df = _dateFormat;\n        if (df instanceof StdDateFormat) {\n            df = ((StdDateFormat) df).withTimeZone(tz);\n        } else {\n            \n            df = (DateFormat) df.clone();\n            df.setTimeZone(tz);\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector,\n                _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                tz, _defaultBase64);\n    }\n\n    \n    public BaseSettings with(Base64Variant base64) {\n        if (base64 == _defaultBase64) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector,\n                _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, base64);\n    }\n    \n    \n\n    public ClassIntrospector getClassIntrospector() {\n        return _classIntrospector;\n    }\n    \n    public AnnotationIntrospector getAnnotationIntrospector() {\n        return _annotationIntrospector;\n    }\n\n    public VisibilityChecker<?> getVisibilityChecker() {\n        return _visibilityChecker;\n    }\n\n    public PropertyNamingStrategy getPropertyNamingStrategy() {\n        return _propertyNamingStrategy;\n    }\n\n    public TypeFactory getTypeFactory() {\n        return _typeFactory;\n    }\n\n    public TypeResolverBuilder<?> getTypeResolverBuilder() {\n        return _typeResolverBuilder;\n    }\n    \n    public DateFormat getDateFormat() {\n        return _dateFormat;\n    }\n\n    public HandlerInstantiator getHandlerInstantiator() {\n        return _handlerInstantiator;\n    }\n\n    public Locale getLocale() {\n        return _locale;\n    }\n\n    public TimeZone getTimeZone() {\n        return _timeZone;\n    }\n\n    public Base64Variant getBase64Variant() {\n        return _defaultBase64;\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.cfg;\n\nimport java.text.DateFormat;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.core.Base64Variant;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;\nimport com.fasterxml.jackson.databind.introspect.ClassIntrospector;\nimport com.fasterxml.jackson.databind.introspect.VisibilityChecker;\nimport com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport com.fasterxml.jackson.databind.util.StdDateFormat;\n\n\npublic final class BaseSettings implements java.io.Serializable { private static final long serialVersionUID = 1L; protected final ClassIntrospector _classIntrospector; protected final AnnotationIntrospector _annotationIntrospector; protected final VisibilityChecker<?> _visibilityChecker; protected final PropertyNamingStrategy _propertyNamingStrategy; protected final TypeFactory _typeFactory; protected final TypeResolverBuilder<?> _typeResolverBuilder; protected final DateFormat _dateFormat; protected final HandlerInstantiator _handlerInstantiator; protected final Locale _locale; protected final TimeZone _timeZone; protected final Base64Variant _defaultBase64; public BaseSettings(ClassIntrospector ci, AnnotationIntrospector ai, VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf, TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi, Locale locale, TimeZone tz, Base64Variant defaultBase64) {\n        _classIntrospector = ci;\n        _annotationIntrospector = ai;\n        _visibilityChecker = vc;\n        _propertyNamingStrategy = pns;\n        _typeFactory = tf;\n        _typeResolverBuilder = typer;\n        _dateFormat = dateFormat;\n        _handlerInstantiator = hi;\n        _locale = locale;\n        _timeZone = tz;\n        _defaultBase64 = defaultBase64;\n    }\n\n    \n    \n    public BaseSettings withClassIntrospector(ClassIntrospector ci) {\n        if (_classIntrospector == ci) {\n            return this;\n        }\n        return new BaseSettings(ci, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n    \n    public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai) {\n        if (_annotationIntrospector == ai) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, ai, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return withAnnotationIntrospector(AnnotationIntrospectorPair.create(ai, _annotationIntrospector));\n    }\n\n    public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return withAnnotationIntrospector(AnnotationIntrospectorPair.create(_annotationIntrospector, ai));\n    }\n    \n    public BaseSettings withVisibilityChecker(VisibilityChecker<?> vc) {\n        if (_visibilityChecker == vc) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, vc, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n        return new BaseSettings(_classIntrospector, _annotationIntrospector,\n                _visibilityChecker.withVisibility(forMethod, visibility),\n                _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n    \n    public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns) {\n        if (_propertyNamingStrategy == pns) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, pns, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings withTypeFactory(TypeFactory tf) {\n        if (_typeFactory == tf) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, tf,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings withTypeResolverBuilder(TypeResolverBuilder<?> typer) {\n        if (_typeResolverBuilder == typer) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                typer, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n    \n    public BaseSettings withDateFormat(DateFormat df) {\n        if (_dateFormat == df) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) {\n        if (_handlerInstantiator == hi) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, hi, _locale,\n                _timeZone, _defaultBase64);\n    }\n\n    public BaseSettings with(Locale l) {\n        if (_locale == l) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, l,\n                _timeZone, _defaultBase64);\n    }\n\n    \n    public BaseSettings with(TimeZone tz) {\n        if (tz == null) {\n            throw new IllegalArgumentException();\n        }\n        DateFormat df = _dateFormat;\n        if (df instanceof StdDateFormat) {\n            df = ((StdDateFormat) df).withTimeZone(tz);\n        } else {\n            \n            df = (DateFormat) df.clone();\n            df.setTimeZone(tz);\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector,\n                _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                tz, _defaultBase64);\n    }\n\n    \n    public BaseSettings with(Base64Variant base64) {\n        if (base64 == _defaultBase64) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector,\n                _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, base64);\n    }\n    \n    \n\n    public ClassIntrospector getClassIntrospector() {\n        return _classIntrospector;\n    }\n    \n    public AnnotationIntrospector getAnnotationIntrospector() {\n        return _annotationIntrospector;\n    }\n\n    public VisibilityChecker<?> getVisibilityChecker() {\n        return _visibilityChecker;\n    }\n\n    public PropertyNamingStrategy getPropertyNamingStrategy() {\n        return _propertyNamingStrategy;\n    }\n\n    public TypeFactory getTypeFactory() {\n        return _typeFactory;\n    }\n\n    public TypeResolverBuilder<?> getTypeResolverBuilder() {\n        return _typeResolverBuilder;\n    }\n    \n    public DateFormat getDateFormat() {\n        return _dateFormat;\n    }\n\n    public HandlerInstantiator getHandlerInstantiator() {\n        return _handlerInstantiator;\n    }\n\n    public Locale getLocale() {\n        return _locale;\n    }\n\n    public TimeZone getTimeZone() {\n        return _timeZone;\n    }\n\n    public Base64Variant getBase64Variant() {\n        return _defaultBase64;\n    }\n}\n",
      "buggy_signatures": [
        "public BaseSettings withClassIntrospector(ClassIntrospector ci)",
        "public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai)",
        "public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public BaseSettings withVisibilityChecker(VisibilityChecker<?> vc)",
        "public BaseSettings withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)",
        "public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns)",
        "public BaseSettings withTypeFactory(TypeFactory tf)",
        "public BaseSettings withTypeResolverBuilder(TypeResolverBuilder<?> typer)",
        "public BaseSettings withDateFormat(DateFormat df)",
        "public BaseSettings withHandlerInstantiator(HandlerInstantiator hi)",
        "public BaseSettings with(Locale l)",
        "public BaseSettings with(TimeZone tz)",
        "public BaseSettings with(Base64Variant base64)",
        "public ClassIntrospector getClassIntrospector()",
        "public AnnotationIntrospector getAnnotationIntrospector()",
        "public VisibilityChecker<?> getVisibilityChecker()",
        "public PropertyNamingStrategy getPropertyNamingStrategy()",
        "public TypeFactory getTypeFactory()",
        "public TypeResolverBuilder<?> getTypeResolverBuilder()",
        "public DateFormat getDateFormat()",
        "public HandlerInstantiator getHandlerInstantiator()",
        "public Locale getLocale()",
        "public TimeZone getTimeZone()",
        "public Base64Variant getBase64Variant()"
      ],
      "fixed_signatures": [
        "public BaseSettings withClassIntrospector(ClassIntrospector ci)",
        "public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai)",
        "public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public BaseSettings withVisibilityChecker(VisibilityChecker<?> vc)",
        "public BaseSettings withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)",
        "public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns)",
        "public BaseSettings withTypeFactory(TypeFactory tf)",
        "public BaseSettings withTypeResolverBuilder(TypeResolverBuilder<?> typer)",
        "public BaseSettings withDateFormat(DateFormat df)",
        "public BaseSettings withHandlerInstantiator(HandlerInstantiator hi)",
        "public BaseSettings with(Locale l)",
        "public BaseSettings with(TimeZone tz)",
        "public BaseSettings with(Base64Variant base64)",
        "public ClassIntrospector getClassIntrospector()",
        "public AnnotationIntrospector getAnnotationIntrospector()",
        "public VisibilityChecker<?> getVisibilityChecker()",
        "public PropertyNamingStrategy getPropertyNamingStrategy()",
        "public TypeFactory getTypeFactory()",
        "public TypeResolverBuilder<?> getTypeResolverBuilder()",
        "public DateFormat getDateFormat()",
        "public HandlerInstantiator getHandlerInstantiator()",
        "public Locale getLocale()",
        "public TimeZone getTimeZone()",
        "public Base64Variant getBase64Variant()"
      ],
      "methods": [
        {
          "buggy_method": "  public BaseSettings withDateFormat(DateFormat df) {\n  if (_dateFormat == df) {\n  return this;\n  }\n  TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();\n  return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n  _typeResolverBuilder, df, _handlerInstantiator, _locale,\n  tz, _defaultBase64);\n  }",
          "fixed_method": "  public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) {\n  if (_handlerInstantiator == hi) {\n  return this;\n  }\n  return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n  _typeResolverBuilder, _dateFormat, hi, _locale,\n  _timeZone, _defaultBase64);\n  }",
          "diff": [
            "@@ -231,10 +231,9 @@",
            "         if (_dateFormat == df) {\n",
            "             return this;\n",
            "         }\n",
            "-        TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();\n",
            "         return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n",
            "                 _typeResolverBuilder, df, _handlerInstantiator, _locale,\n",
            "-                tz, _defaultBase64);\n",
            "+                _timeZone, _defaultBase64);\n",
            "     }\n",
            " \n",
            "     public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) {\n"
          ],
          "changed_lines": 3
        }
      ]
    }
  ]
}
