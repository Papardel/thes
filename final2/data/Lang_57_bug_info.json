{
  "bug_id": "57",
  "failed_tests": {
    "org.apache.commons.lang.LocaleUtilsTest": [
      {
        "methodName": "testAvailableLocaleSet",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testAvailableLocaleSet() {\n  Set set = LocaleUtils.availableLocaleSet();\n  Set set2 = LocaleUtils.availableLocaleSet();\n  assertNotNull(set);\n  assertSame(set, set2);\n  assertUnmodifiableCollection(set);\n  \n  Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n  List jdkLocaleList = Arrays.asList(jdkLocaleArray);\n  Set jdkLocaleSet = new HashSet(jdkLocaleList);\n  assertEquals(jdkLocaleSet, set);\n  }",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      },
      {
        "methodName": "testIsAvailableLocale",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testIsAvailableLocale() {\n  Set set = LocaleUtils.availableLocaleSet();\n  assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));\n  assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));\n  assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));\n  assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));\n  assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));\n  assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));\n  assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));\n  }",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      },
      {
        "methodName": "testAvailableLocaleList",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testAvailableLocaleList() {\n  List list = LocaleUtils.availableLocaleList();\n  List list2 = LocaleUtils.availableLocaleList();\n  assertNotNull(list);\n  assertSame(list, list2);\n  assertUnmodifiableCollection(list);\n  \n  Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n  List jdkLocaleList = Arrays.asList(jdkLocaleArray);\n  assertEquals(jdkLocaleList, list);\n  }",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      },
      {
        "methodName": "testCountriesByLanguage",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testCountriesByLanguage() {\n  assertCountriesByLanguage(null, new String[0]);\n  assertCountriesByLanguage(\"de\", new String[]{\"IT\", \"CH\", \"BE\", \"LU\", \"DE\", \"LI\", \"AT\"});\n  assertCountriesByLanguage(\"zz\", new String[0]);\n  assertCountriesByLanguage(\"it\", new String[]{\"VA\", \"SM\", \"IT\", \"CH\"});\n  }",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      },
      {
        "methodName": "testLocaleLookupList_LocaleLocale",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testLocaleLookupList_LocaleLocale() {\n  assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, \n  new Locale[]{LOCALE_QQ});\n  assertLocaleLookupList(LOCALE_EN, LOCALE_EN, \n  new Locale[]{LOCALE_EN});\n  \n  assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, \n  new Locale[]{\n  LOCALE_EN_US,\n  LOCALE_EN});\n  assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,\n  new Locale[] {\n  LOCALE_EN_US,\n  LOCALE_EN,\n  LOCALE_QQ});\n  assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,\n  new Locale[] {\n  LOCALE_EN_US,\n  LOCALE_EN,\n  LOCALE_QQ_ZZ});\n  \n  assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n  new Locale[] {\n  LOCALE_EN_US_ZZZZ,\n  LOCALE_EN_US,\n  LOCALE_EN});\n  assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,\n  new Locale[] {\n  LOCALE_EN_US_ZZZZ,\n  LOCALE_EN_US,\n  LOCALE_EN});\n  assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,\n  new Locale[] {\n  LOCALE_EN_US_ZZZZ,\n  LOCALE_EN_US,\n  LOCALE_EN,\n  LOCALE_QQ});\n  assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,\n  new Locale[] {\n  LOCALE_EN_US_ZZZZ,\n  LOCALE_EN_US,\n  LOCALE_EN,\n  LOCALE_QQ_ZZ});\n  assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,\n  new Locale[] {\n  LOCALE_FR_CA,\n  LOCALE_FR,\n  LOCALE_EN});\n  }",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      },
      {
        "methodName": "testLanguagesByCountry",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testLanguagesByCountry() {\n  assertLanguageByCountry(null, new String[0]);\n  assertLanguageByCountry(\"GB\", new String[]{\"en\", \"gd\", \"kw\", \"cy\"});\n  assertLanguageByCountry(\"ZZ\", new String[0]);\n  assertLanguageByCountry(\"CH\", new String[]{\"gsw\", \"de\", \"pt\", \"fr\", \"rm\", \"it\", \"wae\", \"en\"});\n  }",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      },
      {
        "methodName": "testToLocale_1Part",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testToLocale_1Part() {\n  assertEquals(null, LocaleUtils.toLocale((String) null));\n  \n  assertValidToLocale(\"us\");\n  assertValidToLocale(\"fr\");\n  assertValidToLocale(\"de\");\n  assertValidToLocale(\"zh\");\n  // Valid format but lang doesnt exist, should make instance anyway\n  assertValidToLocale(\"qq\");\n  \n  try {\n  LocaleUtils.toLocale(\"Us\");\n  fail(\"Should fail if not lowercase\");\n  } catch (IllegalArgumentException iae) {}\n  try {\n  LocaleUtils.toLocale(\"US\");\n  fail(\"Should fail if not lowercase\");\n  } catch (IllegalArgumentException iae) {}\n  try {\n  LocaleUtils.toLocale(\"uS\");\n  fail(\"Should fail if not lowercase\");\n  } catch (IllegalArgumentException iae) {}\n  try {\n  LocaleUtils.toLocale(\"u#\");\n  fail(\"Should fail if not lowercase\");\n  } catch (IllegalArgumentException iae) {}\n  \n  try {\n  LocaleUtils.toLocale(\"u\");\n  fail(\"Must be 2 chars if less than 5\");\n  } catch (IllegalArgumentException iae) {}\n  \n  try {\n  LocaleUtils.toLocale(\"uuu\");\n  fail(\"Must be 2 chars if less than 5\");\n  } catch (IllegalArgumentException iae) {}\n\n  try {\n  LocaleUtils.toLocale(\"uu_U\");\n  fail(\"Must be 2 chars if less than 5\");\n  } catch (IllegalArgumentException iae) {}\n  }  ",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      },
      {
        "methodName": "testToLocale_2Part",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testToLocale_2Part() {\n  assertValidToLocale(\"us_EN\", \"us\", \"EN\");\n  //valid though doesnt exist\n  assertValidToLocale(\"us_ZH\", \"us\", \"ZH\");\n  \n  try {\n  LocaleUtils.toLocale(\"us-EN\");\n  fail(\"Should fail as not underscore\");\n  } catch (IllegalArgumentException iae) {}\n  try {\n  LocaleUtils.toLocale(\"us_En\");\n  fail(\"Should fail second part not uppercase\");\n  } catch (IllegalArgumentException iae) {}\n  try {\n  LocaleUtils.toLocale(\"us_en\");\n  fail(\"Should fail second part not uppercase\");\n  } catch (IllegalArgumentException iae) {}\n  try {\n  LocaleUtils.toLocale(\"us_eN\");\n  fail(\"Should fail second part not uppercase\");\n  } catch (IllegalArgumentException iae) {}\n  try {\n  LocaleUtils.toLocale(\"uS_EN\");\n  fail(\"Should fail first part not lowercase\");\n  } catch (IllegalArgumentException iae) {}\n  try {\n  LocaleUtils.toLocale(\"us_E3\");\n  fail(\"Should fail second part not uppercase\");\n  } catch (IllegalArgumentException iae) {}\n  }  ",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      },
      {
        "methodName": "testToLocale_3Part",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testToLocale_3Part() {}",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      },
      {
        "methodName": "testLocaleLookupList_Locale",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testLocaleLookupList_Locale() {\n  assertLocaleLookupList(null, null, new Locale[0]);\n  assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});\n  assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n  assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n  assertLocaleLookupList(LOCALE_EN_US, null,\n  new Locale[] {\n  LOCALE_EN_US,\n  LOCALE_EN});\n  assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n  new Locale[] {\n  LOCALE_EN_US_ZZZZ,\n  LOCALE_EN_US,\n  LOCALE_EN});\n  }  ",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      },
      {
        "methodName": "testConstructor",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "",
        "test_source": "  public void testConstructor() {\n  assertNotNull(new LocaleUtils());\n  Constructor[] cons = LocaleUtils.class.getDeclaredConstructors();\n  assertEquals(1, cons.length);\n  assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n  assertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));\n  assertEquals(false, Modifier.isFinal(LocaleUtils.class.getModifiers()));\n  }",
        "stack": [
          "LocaleUtils.isAvailableLocale line 223, LocaleUtilsTest.setUp line 82"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/lang/LocaleUtils.java",
      "buggy_full_code": "\npackage org.apache.commons.lang;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\n\n\npublic class LocaleUtils { private static final List cAvailableLocaleList; private static Set cAvailableLocaleSet; private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap()); private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap()); static {\n        List list = Arrays.asList(Locale.getAvailableLocales());\n        cAvailableLocaleList = Collections.unmodifiableList(list);\n    }\n\n    \n    public LocaleUtils() {\n      super();\n    }\n\n    \n    \n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len != 2 && len != 5 && len < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                if (str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }\n\n    \n    \n    public static List localeLookupList(Locale locale) {\n        return localeLookupList(locale, locale);\n    }\n\n    \n    \n    public static List localeLookupList(Locale locale, Locale defaultLocale) {\n        List list = new ArrayList(4);\n        if (locale != null) {\n            list.add(locale);\n            if (locale.getVariant().length() > 0) {\n                list.add(new Locale(locale.getLanguage(), locale.getCountry()));\n            }\n            if (locale.getCountry().length() > 0) {\n                list.add(new Locale(locale.getLanguage(), \"\"));\n            }\n            if (list.contains(defaultLocale) == false) {\n                list.add(defaultLocale);\n            }\n        }\n        return Collections.unmodifiableList(list);\n    }\n\n    \n    \n    public static List availableLocaleList() {\n        return cAvailableLocaleList;\n    }\n\n    \n    \n    public static Set availableLocaleSet() {\n        Set set = cAvailableLocaleSet;\n        if (set == null) {\n            set = new HashSet(availableLocaleList());\n            set = Collections.unmodifiableSet(set);\n            cAvailableLocaleSet = set;\n        }\n        return set;\n    }\n\n    \n    \n    public static boolean isAvailableLocale(Locale locale) {\n        return cAvailableLocaleSet.contains(locale);\n    }\n\n    \n    \n    public static List languagesByCountry(String countryCode) {\n        List langs = (List) cLanguagesByCountry.get(countryCode);  \n        if (langs == null) {\n            if (countryCode != null) {\n                langs = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (countryCode.equals(locale.getCountry()) &&\n                            locale.getVariant().length() == 0) {\n                        langs.add(locale);\n                    }\n                }\n                langs = Collections.unmodifiableList(langs);\n            } else {\n                langs = Collections.EMPTY_LIST;\n            }\n            cLanguagesByCountry.put(countryCode, langs);  \n        }\n        return langs;\n    }\n\n    \n    \n    public static List countriesByLanguage(String languageCode) {\n        List countries = (List) cCountriesByLanguage.get(languageCode);  \n        if (countries == null) {\n            if (languageCode != null) {\n                countries = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (languageCode.equals(locale.getLanguage()) &&\n                            locale.getCountry().length() != 0 &&\n                            locale.getVariant().length() == 0) {\n                        countries.add(locale);\n                    }\n                }\n                countries = Collections.unmodifiableList(countries);\n            } else {\n                countries = Collections.EMPTY_LIST;\n            }\n            cCountriesByLanguage.put(languageCode, countries);  \n        }\n        return countries;\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.lang;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\n\n\npublic class LocaleUtils { private static final List cAvailableLocaleList; private static Set cAvailableLocaleSet; private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap()); private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap()); static {\n        List list = Arrays.asList(Locale.getAvailableLocales());\n        cAvailableLocaleList = Collections.unmodifiableList(list);\n    }\n\n    \n    public LocaleUtils() {\n      super();\n    }\n\n    \n    \n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len != 2 && len != 5 && len < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                if (str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }\n\n    \n    \n    public static List localeLookupList(Locale locale) {\n        return localeLookupList(locale, locale);\n    }\n\n    \n    \n    public static List localeLookupList(Locale locale, Locale defaultLocale) {\n        List list = new ArrayList(4);\n        if (locale != null) {\n            list.add(locale);\n            if (locale.getVariant().length() > 0) {\n                list.add(new Locale(locale.getLanguage(), locale.getCountry()));\n            }\n            if (locale.getCountry().length() > 0) {\n                list.add(new Locale(locale.getLanguage(), \"\"));\n            }\n            if (list.contains(defaultLocale) == false) {\n                list.add(defaultLocale);\n            }\n        }\n        return Collections.unmodifiableList(list);\n    }\n\n    \n    \n    public static List availableLocaleList() {\n        return cAvailableLocaleList;\n    }\n\n    \n    \n    public static Set availableLocaleSet() {\n        Set set = cAvailableLocaleSet;\n        if (set == null) {\n            set = new HashSet(availableLocaleList());\n            set = Collections.unmodifiableSet(set);\n            cAvailableLocaleSet = set;\n        }\n        return set;\n    }\n\n    \n    \n    public static boolean isAvailableLocale(Locale locale) {\n        return availableLocaleList().contains(locale);\n    }\n\n    \n    \n    public static List languagesByCountry(String countryCode) {\n        List langs = (List) cLanguagesByCountry.get(countryCode);  \n        if (langs == null) {\n            if (countryCode != null) {\n                langs = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (countryCode.equals(locale.getCountry()) &&\n                            locale.getVariant().length() == 0) {\n                        langs.add(locale);\n                    }\n                }\n                langs = Collections.unmodifiableList(langs);\n            } else {\n                langs = Collections.EMPTY_LIST;\n            }\n            cLanguagesByCountry.put(countryCode, langs);  \n        }\n        return langs;\n    }\n\n    \n    \n    public static List countriesByLanguage(String languageCode) {\n        List countries = (List) cCountriesByLanguage.get(languageCode);  \n        if (countries == null) {\n            if (languageCode != null) {\n                countries = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (languageCode.equals(locale.getLanguage()) &&\n                            locale.getCountry().length() != 0 &&\n                            locale.getVariant().length() == 0) {\n                        countries.add(locale);\n                    }\n                }\n                countries = Collections.unmodifiableList(countries);\n            } else {\n                countries = Collections.EMPTY_LIST;\n            }\n            cCountriesByLanguage.put(languageCode, countries);  \n        }\n        return countries;\n    }\n\n}\n",
      "buggy_signatures": [
        "public LocaleUtils()",
        "public static Locale toLocale(String str)",
        "public static List localeLookupList(Locale locale)",
        "public static List localeLookupList(Locale locale, Locale defaultLocale)",
        "public static List availableLocaleList()",
        "public static Set availableLocaleSet()",
        "public static boolean isAvailableLocale(Locale locale)",
        "public static List languagesByCountry(String countryCode)",
        "public static List countriesByLanguage(String languageCode)"
      ],
      "fixed_signatures": [
        "public LocaleUtils()",
        "public static Locale toLocale(String str)",
        "public static List localeLookupList(Locale locale)",
        "public static List localeLookupList(Locale locale, Locale defaultLocale)",
        "public static List availableLocaleList()",
        "public static Set availableLocaleSet()",
        "public static boolean isAvailableLocale(Locale locale)",
        "public static List languagesByCountry(String countryCode)",
        "public static List countriesByLanguage(String languageCode)"
      ],
      "methods": [
        {
          "buggy_method": "  public static boolean isAvailableLocale(Locale locale) {\n  return cAvailableLocaleSet.contains(locale);\n  }",
          "fixed_method": "  public static boolean isAvailableLocale(Locale locale) {\n  return availableLocaleList().contains(locale);\n  }",
          "diff": [
            "@@ -220,7 +220,7 @@",
            "      * @return true if the locale is a known locale\n",
            "      */\n",
            "     public static boolean isAvailableLocale(Locale locale) {\n",
            "-        return cAvailableLocaleSet.contains(locale);\n",
            "+        return availableLocaleList().contains(locale);\n",
            "     }\n",
            " \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
