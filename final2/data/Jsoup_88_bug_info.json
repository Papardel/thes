{
  "bug_id": "88",
  "failed_tests": {
    "org.jsoup.nodes.AttributeTest": [
      {
        "methodName": "booleanAttributesAreEmptyStringValues",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<> but was:<null>",
        "fail_line": "        assertEquals(\"\", first.getValue());",
        "test_source": "",
        "stack": [
          "AttributeTest.booleanAttributesAreEmptyStringValues line 38"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jsoup/nodes/Attribute.java",
      "buggy_full_code": "package org.jsoup.nodes;\n\nimport org.jsoup.SerializationException;\nimport org.jsoup.internal.StringUtil;\nimport org.jsoup.helper.Validate;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Map;\n\n\npublic class Attribute implements Map.Entry<String, String>, Cloneable { private static final String[] booleanAttributes = { \"allowfullscreen\", \"async\", \"autofocus\", \"checked\", \"compact\", \"declare\", \"default\", \"defer\", \"disabled\", \"formnovalidate\", \"hidden\", \"inert\", \"ismap\", \"itemscope\", \"multiple\", \"muted\", \"nohref\", \"noresize\", \"noshade\", \"novalidate\", \"nowrap\", \"open\", \"readonly\", \"required\", \"reversed\", \"seamless\", \"selected\", \"sortable\", \"truespeed\", \"typemustmatch\" }; private String key; private String val; Attributes parent; public Attribute(String key, String value) {\n        this(key, value, null);\n    }\n\n    \n    public Attribute(String key, String val, Attributes parent) {\n        Validate.notNull(key);\n        key = key.trim();\n        Validate.notEmpty(key); \n        this.key = key;\n        this.val = val;\n        this.parent = parent;\n    }\n\n    \n    public String getKey() {\n        return key;\n    }\n\n    \n    public void setKey(String key) {\n        Validate.notNull(key);\n        key = key.trim();\n        Validate.notEmpty(key); \n        if (parent != null) {\n            int i = parent.indexOfKey(this.key);\n            if (i != Attributes.NotFound)\n                parent.keys[i] = key;\n        }\n        this.key = key;\n    }\n\n    \n    public String getValue() {\n        return val;\n    }\n\n    \n    public String setValue(String val) {\n        String oldVal = parent.get(this.key);\n        if (parent != null) {\n            int i = parent.indexOfKey(this.key);\n            if (i != Attributes.NotFound)\n                parent.vals[i] = val;\n        }\n        this.val = val;\n        return oldVal;\n    }\n\n    \n    public String html() {\n        StringBuilder sb = StringUtil.borrowBuilder();\n        \n        try {\n        \thtml(sb, (new Document(\"\")).outputSettings());\n        } catch(IOException exception) {\n        \tthrow new SerializationException(exception);\n        }\n        return StringUtil.releaseBuilder(sb);\n    }\n\n    protected static void html(String key, String val, Appendable accum, Document.OutputSettings out) throws IOException {\n        accum.append(key);\n        if (!shouldCollapseAttribute(key, val, out)) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, Attributes.checkNotNull(val) , out, true, false, false);\n            accum.append('\"');\n        }\n    }\n    \n    protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n        html(key, val, accum, out);\n    }\n\n    \n    @Override\n    public String toString() {\n        return html();\n    }\n\n    \n    public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\n        String value = Entities.unescape(encodedValue, true);\n        return new Attribute(unencodedKey, value, null); \n    }\n\n    protected boolean isDataAttribute() {\n        return isDataAttribute(key);\n    }\n\n    protected static boolean isDataAttribute(String key) {\n        return key.startsWith(Attributes.dataPrefix) && key.length() > Attributes.dataPrefix.length();\n    }\n\n    \n    protected final boolean shouldCollapseAttribute(Document.OutputSettings out) {\n        return shouldCollapseAttribute(key, val, out);\n    }\n\n    protected static boolean shouldCollapseAttribute(final String key, final String val, final Document.OutputSettings out) {\n        return (\n            out.syntax() == Document.OutputSettings.Syntax.html &&\n                (val == null || (\"\".equals(val) || val.equalsIgnoreCase(key)) && Attribute.isBooleanAttribute(key)));\n    }\n\n    \n    protected boolean isBooleanAttribute() {\n        return Arrays.binarySearch(booleanAttributes, key) >= 0 || val == null;\n    }\n\n    \n    protected static boolean isBooleanAttribute(final String key) {\n        return Arrays.binarySearch(booleanAttributes, key) >= 0;\n    }\n\n    @Override\n    public boolean equals(Object o) { \n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Attribute attribute = (Attribute) o;\n        if (key != null ? !key.equals(attribute.key) : attribute.key != null) return false;\n        return val != null ? val.equals(attribute.val) : attribute.val == null;\n    }\n\n    @Override\n    public int hashCode() { \n        int result = key != null ? key.hashCode() : 0;\n        result = 31 * result + (val != null ? val.hashCode() : 0);\n        return result;\n    }\n\n    @Override\n    public Attribute clone() {\n        try {\n            return (Attribute) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n",
      "fixed_full_code": "package org.jsoup.nodes;\n\nimport org.jsoup.SerializationException;\nimport org.jsoup.internal.StringUtil;\nimport org.jsoup.helper.Validate;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Map;\n\n\npublic class Attribute implements Map.Entry<String, String>, Cloneable { private static final String[] booleanAttributes = { \"allowfullscreen\", \"async\", \"autofocus\", \"checked\", \"compact\", \"declare\", \"default\", \"defer\", \"disabled\", \"formnovalidate\", \"hidden\", \"inert\", \"ismap\", \"itemscope\", \"multiple\", \"muted\", \"nohref\", \"noresize\", \"noshade\", \"novalidate\", \"nowrap\", \"open\", \"readonly\", \"required\", \"reversed\", \"seamless\", \"selected\", \"sortable\", \"truespeed\", \"typemustmatch\" }; private String key; private String val; Attributes parent; public Attribute(String key, String value) {\n        this(key, value, null);\n    }\n\n    \n    public Attribute(String key, String val, Attributes parent) {\n        Validate.notNull(key);\n        key = key.trim();\n        Validate.notEmpty(key); \n        this.key = key;\n        this.val = val;\n        this.parent = parent;\n    }\n\n    \n    public String getKey() {\n        return key;\n    }\n\n    \n    public void setKey(String key) {\n        Validate.notNull(key);\n        key = key.trim();\n        Validate.notEmpty(key); \n        if (parent != null) {\n            int i = parent.indexOfKey(this.key);\n            if (i != Attributes.NotFound)\n                parent.keys[i] = key;\n        }\n        this.key = key;\n    }\n\n    \n    public String getValue() {\n        return Attributes.checkNotNull(val);\n    }\n\n    \n    public String setValue(String val) {\n        String oldVal = parent.get(this.key);\n        if (parent != null) {\n            int i = parent.indexOfKey(this.key);\n            if (i != Attributes.NotFound)\n                parent.vals[i] = val;\n        }\n        this.val = val;\n        return oldVal;\n    }\n\n    \n    public String html() {\n        StringBuilder sb = StringUtil.borrowBuilder();\n        \n        try {\n        \thtml(sb, (new Document(\"\")).outputSettings());\n        } catch(IOException exception) {\n        \tthrow new SerializationException(exception);\n        }\n        return StringUtil.releaseBuilder(sb);\n    }\n\n    protected static void html(String key, String val, Appendable accum, Document.OutputSettings out) throws IOException {\n        accum.append(key);\n        if (!shouldCollapseAttribute(key, val, out)) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, Attributes.checkNotNull(val) , out, true, false, false);\n            accum.append('\"');\n        }\n    }\n    \n    protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n        html(key, val, accum, out);\n    }\n\n    \n    @Override\n    public String toString() {\n        return html();\n    }\n\n    \n    public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\n        String value = Entities.unescape(encodedValue, true);\n        return new Attribute(unencodedKey, value, null); \n    }\n\n    protected boolean isDataAttribute() {\n        return isDataAttribute(key);\n    }\n\n    protected static boolean isDataAttribute(String key) {\n        return key.startsWith(Attributes.dataPrefix) && key.length() > Attributes.dataPrefix.length();\n    }\n\n    \n    protected final boolean shouldCollapseAttribute(Document.OutputSettings out) {\n        return shouldCollapseAttribute(key, val, out);\n    }\n\n    protected static boolean shouldCollapseAttribute(final String key, final String val, final Document.OutputSettings out) {\n        return (\n            out.syntax() == Document.OutputSettings.Syntax.html &&\n                (val == null || (\"\".equals(val) || val.equalsIgnoreCase(key)) && Attribute.isBooleanAttribute(key)));\n    }\n\n    \n    protected boolean isBooleanAttribute() {\n        return Arrays.binarySearch(booleanAttributes, key) >= 0 || val == null;\n    }\n\n    \n    protected static boolean isBooleanAttribute(final String key) {\n        return Arrays.binarySearch(booleanAttributes, key) >= 0;\n    }\n\n    @Override\n    public boolean equals(Object o) { \n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Attribute attribute = (Attribute) o;\n        if (key != null ? !key.equals(attribute.key) : attribute.key != null) return false;\n        return val != null ? val.equals(attribute.val) : attribute.val == null;\n    }\n\n    @Override\n    public int hashCode() { \n        int result = key != null ? key.hashCode() : 0;\n        result = 31 * result + (val != null ? val.hashCode() : 0);\n        return result;\n    }\n\n    @Override\n    public Attribute clone() {\n        try {\n            return (Attribute) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public Attribute(String key, String val, Attributes parent)",
        "public String getKey()",
        "public void setKey(String key)",
        "public String getValue()",
        "public String setValue(String val)",
        "public String html()",
        "protected static void html(String key, String val, Appendable accum, Document.OutputSettings out) throws IOException",
        "protected void html(Appendable accum, Document.OutputSettings out) throws IOException",
        "public String toString()",
        "public static Attribute createFromEncoded(String unencodedKey, String encodedValue)",
        "protected boolean isDataAttribute()",
        "protected static boolean isDataAttribute(String key)",
        "protected final boolean shouldCollapseAttribute(Document.OutputSettings out)",
        "protected static boolean shouldCollapseAttribute(final String key, final String val, final Document.OutputSettings out)",
        "protected boolean isBooleanAttribute()",
        "protected static boolean isBooleanAttribute(final String key)",
        "public boolean equals(Object o)",
        "public int hashCode()",
        "public Attribute clone()"
      ],
      "fixed_signatures": [
        "public Attribute(String key, String val, Attributes parent)",
        "public String getKey()",
        "public void setKey(String key)",
        "public String getValue()",
        "public String setValue(String val)",
        "public String html()",
        "protected static void html(String key, String val, Appendable accum, Document.OutputSettings out) throws IOException",
        "protected void html(Appendable accum, Document.OutputSettings out) throws IOException",
        "public String toString()",
        "public static Attribute createFromEncoded(String unencodedKey, String encodedValue)",
        "protected boolean isDataAttribute()",
        "protected static boolean isDataAttribute(String key)",
        "protected final boolean shouldCollapseAttribute(Document.OutputSettings out)",
        "protected static boolean shouldCollapseAttribute(final String key, final String val, final Document.OutputSettings out)",
        "protected boolean isBooleanAttribute()",
        "protected static boolean isBooleanAttribute(final String key)",
        "public boolean equals(Object o)",
        "public int hashCode()",
        "public Attribute clone()"
      ],
      "methods": [
        {
          "buggy_method": "  public String getValue() {\n  return val;\n  }",
          "fixed_method": "  public String getValue() {\n  return Attributes.checkNotNull(val);\n  }",
          "diff": [
            "@@ -77,7 +77,7 @@",
            "      @return the attribute value\n",
            "      */\n",
            "     public String getValue() {\n",
            "-        return val;\n",
            "+        return Attributes.checkNotNull(val);\n",
            "     }\n",
            " \n",
            "     /**\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
