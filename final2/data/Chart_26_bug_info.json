{
  "bug_id": "26",
  "failed_tests": {
    "org.jfree.chart.junit.AreaChartTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n  null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "AreaChartTests.testDrawWithNullInfo line 149"
        ]
      }
    ],
    "org.jfree.chart.junit.BarChart3DTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n  null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "BarChart3DTests.testDrawWithNullInfo line 125"
        ]
      }
    ],
    "org.jfree.chart.junit.BarChartTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n\n  boolean success = false;\n\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n  null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  success = false;\n  }\n\n  assertTrue(success);\n\n  }",
        "stack": [
          "BarChartTests.testDrawWithNullInfo line 128"
        ]
      }
    ],
    "org.jfree.chart.junit.GanttChartTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n  null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "GanttChartTests.testDrawWithNullInfo line 124"
        ]
      },
      {
        "methodName": "testDrawWithNullInfo2",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo2() {\n  boolean success = false;\n  try {\n  JFreeChart chart = createGanttChart();\n  CategoryPlot plot = (CategoryPlot) chart.getPlot();\n  plot.setDataset(createDataset());\n  /* BufferedImage img =*/ chart.createBufferedImage(300, 200, null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "GanttChartTests.testDrawWithNullInfo2 line 143"
        ]
      }
    ],
    "org.jfree.chart.junit.LineChart3DTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n\n  boolean success = false;\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n  null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  success = false;\n  }\n  assertTrue(success);\n\n  }",
        "stack": [
          "LineChart3DTests.testDrawWithNullInfo line 123"
        ]
      }
    ],
    "org.jfree.chart.junit.LineChartTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n\n  boolean success = false;\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n  null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  success = false;\n  }\n  assertTrue(success);\n\n  }",
        "stack": [
          "LineChartTests.testDrawWithNullInfo line 123"
        ]
      }
    ],
    "org.jfree.chart.junit.StackedAreaChartTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n\n  boolean success = false;\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n  null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  success = false;\n  }\n  assertTrue(success);\n\n  }",
        "stack": [
          "StackedAreaChartTests.testDrawWithNullInfo line 123"
        ]
      }
    ],
    "org.jfree.chart.junit.StackedBarChart3DTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n\n  boolean success = false;\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n  null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  success = false;\n  }\n  assertTrue(success);\n\n  }",
        "stack": [
          "StackedBarChart3DTests.testDrawWithNullInfo line 123"
        ]
      }
    ],
    "org.jfree.chart.junit.StackedBarChartTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n\n  boolean success = false;\n\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n  null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  success = false;\n  }\n\n  assertTrue(success);\n\n  }",
        "stack": [
          "StackedBarChartTests.testDrawWithNullInfo line 129"
        ]
      }
    ],
    "org.jfree.chart.junit.WaterfallChartTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n\n  boolean success = false;\n\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n  null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  success = false;\n  }\n\n  assertTrue(success);\n\n  }",
        "stack": [
          "WaterfallChartTests.testDrawWithNullInfo line 121"
        ]
      }
    ],
    "org.jfree.chart.plot.junit.CategoryPlotTests": [
      {
        "methodName": "test1654215",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void test1654215() {\n  DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n  JFreeChart chart = ChartFactory.createLineChart(\"Title\", \"X\", \"Y\",\n  dataset, PlotOrientation.VERTICAL, true, false, false);\n  CategoryPlot plot = (CategoryPlot) chart.getPlot();\n  plot.setRenderer(1, new LineAndShapeRenderer());\n  boolean success = false;\n  try {\n  BufferedImage image = new BufferedImage(200 , 100, \n  BufferedImage.TYPE_INT_RGB);\n  Graphics2D g2 = image.createGraphics();\n  chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n  g2.dispose();\n  success = true;\n  }\n  catch (Exception e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "CategoryPlotTests.test1654215 line 705"
        ]
      },
      {
        "methodName": "testSerialization3",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(passed);",
        "test_source": "  public void testSerialization3() {\n  DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n  JFreeChart chart = ChartFactory.createBarChart(\n  \"Test Chart\",\n  \"Category Axis\",\n  \"Value Axis\",\n  dataset,\n  PlotOrientation.VERTICAL,\n  true,\n  true,\n  false\n  );\n  JFreeChart chart2 = null;\n  \n  // serialize and deserialize the chart....\n  try {\n  ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n  ObjectOutput out = new ObjectOutputStream(buffer);\n  out.writeObject(chart);\n  out.close();\n\n  ObjectInput in = new ObjectInputStream(\n  new ByteArrayInputStream(buffer.toByteArray()));\n  chart2 = (JFreeChart) in.readObject();\n  in.close();\n  }\n  catch (Exception e) {\n  fail(e.toString());\n  }\n\n  // now check that the chart is usable...\n  boolean passed = true;\n  try {\n  chart2.createBufferedImage(300, 200);\n  }\n  catch (Exception e) {\n  passed = false;  \n  e.printStackTrace();  \n  }\n  assertTrue(passed);\n  }",
        "stack": [
          "CategoryPlotTests.testSerialization3 line 514"
        ]
      },
      {
        "methodName": "testSerialization4",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(passed);",
        "test_source": "  public void testSerialization4() {\n  DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n  JFreeChart chart = ChartFactory.createBarChart(\n  \"Test Chart\",\n  \"Category Axis\",\n  \"Value Axis\",\n  dataset,\n  PlotOrientation.VERTICAL,\n  true,\n  true,\n  false\n  );\n  CategoryPlot plot = (CategoryPlot) chart.getPlot();\n  plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n  plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n  JFreeChart chart2 = null;\n  \n  // serialize and deserialize the chart....\n  try {\n  ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n  ObjectOutput out = new ObjectOutputStream(buffer);\n  out.writeObject(chart);\n  out.close();\n\n  ObjectInput in = new ObjectInputStream(\n  new ByteArrayInputStream(buffer.toByteArray()));\n  chart2 = (JFreeChart) in.readObject();\n  in.close();\n  }\n  catch (Exception e) {\n  fail(e.toString());\n  }\n  assertEquals(chart, chart2);\n  \n  // now check that the chart is usable...\n  boolean passed = true;\n  try {\n  chart2.createBufferedImage(300, 200);\n  }\n  catch (Exception e) {\n  passed = false;  \n  e.printStackTrace();  \n  }\n  assertTrue(passed);\n  }",
        "stack": [
          "CategoryPlotTests.testSerialization4 line 563"
        ]
      }
    ],
    "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  DefaultBoxAndWhiskerCategoryDataset dataset \n  = new DefaultBoxAndWhiskerCategoryDataset();\n  dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0),\n  new Double(0.0), new Double(4.0), new Double(0.5), \n  new Double(4.5), new Double(-0.5), new Double(5.5), \n  null), \"S1\", \"C1\");\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  new BoxAndWhiskerRenderer());\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "BoxAndWhiskerRendererTests.testDrawWithNullInfo line 208"
        ]
      }
    ],
    "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n  dataset.addValue(1.0, \"S1\", \"C1\");\n  dataset.addValue(2.0, \"S1\", \"C2\");\n  dataset.addValue(3.0, \"S2\", \"C1\");\n  dataset.addValue(4.0, \"S2\", \"C2\");\n  GroupedStackedBarRenderer renderer \n  = new GroupedStackedBarRenderer();\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  renderer);\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "GroupedStackedBarRendererTests.testDrawWithNullInfo line 176"
        ]
      }
    ],
    "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  double[][] starts = new double[][] {{0.1, 0.2, 0.3}, \n  {0.3, 0.4, 0.5}};\n  double[][] ends = new double[][] {{0.5, 0.6, 0.7}, {0.7, 0.8, 0.9}};\n  DefaultIntervalCategoryDataset dataset \n  = new DefaultIntervalCategoryDataset(starts, ends);  \n  IntervalBarRenderer renderer = new IntervalBarRenderer();\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  renderer);\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "IntervalBarRendererTests.testDrawWithNullInfo line 176"
        ]
      }
    ],
    "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n  dataset.addValue(1.0, \"S1\", \"C1\");\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  new LayeredBarRenderer());\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "LayeredBarRendererTests.testDrawWithNullInfo line 172"
        ]
      }
    ],
    "org.jfree.chart.renderer.category.junit.LevelRendererTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n  dataset.addValue(1.0, \"S1\", \"C1\");\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  new LevelRenderer());\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "LevelRendererTests.testDrawWithNullInfo line 213"
        ]
      }
    ],
    "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n  dataset.addValue(1.0, \"S1\", \"C1\");\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  new MinMaxCategoryRenderer());\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "MinMaxCategoryRendererTests.testDrawWithNullInfo line 171"
        ]
      }
    ],
    "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  DefaultStatisticalCategoryDataset dataset \n  = new DefaultStatisticalCategoryDataset();\n  dataset.add(1.0, 2.0, \"S1\", \"C1\");\n  dataset.add(3.0, 4.0, \"S1\", \"C2\");\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  new StatisticalBarRenderer());\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "StatisticalBarRendererTests.testDrawWithNullInfo line 180"
        ]
      }
    ],
    "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests": [
      {
        "methodName": "testDrawWithNullInfo",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullInfo() {\n  boolean success = false;\n  try {\n  DefaultStatisticalCategoryDataset dataset \n  = new DefaultStatisticalCategoryDataset();\n  dataset.add(1.0, 2.0, \"S1\", \"C1\");\n  dataset.add(3.0, 4.0, \"S1\", \"C2\");\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  new StatisticalLineAndShapeRenderer());\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "StatisticalLineAndShapeRendererTests.testDrawWithNullInfo line 187"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/chart/axis/Axis.java",
      "buggy_full_code": "\n\npackage org.jfree.chart.axis;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.FontMetrics;\nimport java.awt.Graphics2D;\nimport java.awt.Paint;\nimport java.awt.Shape;\nimport java.awt.Stroke;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.EventListener;\nimport java.util.List;\n\nimport javax.swing.event.EventListenerList;\n\nimport org.jfree.chart.ChartRenderingInfo;\nimport org.jfree.chart.entity.AxisLabelEntity;\nimport org.jfree.chart.entity.EntityCollection;\nimport org.jfree.chart.event.AxisChangeEvent;\nimport org.jfree.chart.event.AxisChangeListener;\nimport org.jfree.chart.plot.Plot;\nimport org.jfree.chart.plot.PlotRenderingInfo;\nimport org.jfree.chart.text.TextAnchor;\nimport org.jfree.chart.text.TextUtilities;\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.PaintUtilities;\nimport org.jfree.chart.util.RectangleEdge;\nimport org.jfree.chart.util.RectangleInsets;\nimport org.jfree.chart.util.SerialUtilities;\n\n\npublic abstract class Axis implements Cloneable, Serializable { private static final long serialVersionUID = 7719289504573298271L; public static final boolean DEFAULT_AXIS_VISIBLE = true; public static final Font DEFAULT_AXIS_LABEL_FONT = new Font( \"SansSerif\", Font.PLAIN, 12); public static final Paint DEFAULT_AXIS_LABEL_PAINT = Color.black; public static final RectangleInsets DEFAULT_AXIS_LABEL_INSETS = new RectangleInsets(3.0, 3.0, 3.0, 3.0); public static final Paint DEFAULT_AXIS_LINE_PAINT = Color.gray; public static final Stroke DEFAULT_AXIS_LINE_STROKE = new BasicStroke(1.0f); public static final boolean DEFAULT_TICK_LABELS_VISIBLE = true; public static final Font DEFAULT_TICK_LABEL_FONT = new Font(\"SansSerif\", Font.PLAIN, 10); public static final Paint DEFAULT_TICK_LABEL_PAINT = Color.black; public static final RectangleInsets DEFAULT_TICK_LABEL_INSETS = new RectangleInsets(2.0, 4.0, 2.0, 4.0); public static final boolean DEFAULT_TICK_MARKS_VISIBLE = true; public static final Stroke DEFAULT_TICK_MARK_STROKE = new BasicStroke(1); public static final Paint DEFAULT_TICK_MARK_PAINT = Color.gray; public static final float DEFAULT_TICK_MARK_INSIDE_LENGTH = 0.0f; public static final float DEFAULT_TICK_MARK_OUTSIDE_LENGTH = 2.0f; private boolean visible; private String label; private Font labelFont; private transient Paint labelPaint; private RectangleInsets labelInsets; private double labelAngle; private String labelToolTip; private String labelURL; private boolean axisLineVisible; private transient Stroke axisLineStroke; private transient Paint axisLinePaint; private boolean tickLabelsVisible; private Font tickLabelFont; private transient Paint tickLabelPaint; private RectangleInsets tickLabelInsets; private boolean tickMarksVisible; private float tickMarkInsideLength; private float tickMarkOutsideLength; private transient Stroke tickMarkStroke; private transient Paint tickMarkPaint; private double fixedDimension; private transient Plot plot; private transient EventListenerList listenerList; protected Axis(String label) {\n\n        this.label = label;\n        this.visible = DEFAULT_AXIS_VISIBLE;\n        this.labelFont = DEFAULT_AXIS_LABEL_FONT;\n        this.labelPaint = DEFAULT_AXIS_LABEL_PAINT;\n        this.labelInsets = DEFAULT_AXIS_LABEL_INSETS;\n        this.labelAngle = 0.0;\n        this.labelToolTip = null;\n        this.labelURL = null;\n        \n        this.axisLineVisible = true;\n        this.axisLinePaint = DEFAULT_AXIS_LINE_PAINT;\n        this.axisLineStroke = DEFAULT_AXIS_LINE_STROKE;\n        \n        this.tickLabelsVisible = DEFAULT_TICK_LABELS_VISIBLE;\n        this.tickLabelFont = DEFAULT_TICK_LABEL_FONT;\n        this.tickLabelPaint = DEFAULT_TICK_LABEL_PAINT;\n        this.tickLabelInsets = DEFAULT_TICK_LABEL_INSETS;\n        \n        this.tickMarksVisible = DEFAULT_TICK_MARKS_VISIBLE;\n        this.tickMarkStroke = DEFAULT_TICK_MARK_STROKE;\n        this.tickMarkPaint = DEFAULT_TICK_MARK_PAINT;\n        this.tickMarkInsideLength = DEFAULT_TICK_MARK_INSIDE_LENGTH;\n        this.tickMarkOutsideLength = DEFAULT_TICK_MARK_OUTSIDE_LENGTH;\n\n        this.plot = null;\n\n        this.listenerList = new EventListenerList();\n\n    }\n\n    \n    public boolean isVisible() {\n        return this.visible;\n    }\n\n    \n    public void setVisible(boolean flag) {\n        if (flag != this.visible) {\n            this.visible = flag;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public String getLabel() {\n        return this.label;\n    }\n\n    \n    public void setLabel(String label) {\n        \n        String existing = this.label;\n        if (existing != null) {\n            if (!existing.equals(label)) {\n                this.label = label;\n                notifyListeners(new AxisChangeEvent(this));\n            }\n        }\n        else {\n            if (label != null) {\n                this.label = label;\n                notifyListeners(new AxisChangeEvent(this));\n            }\n        }\n\n    }\n\n    \n    public Font getLabelFont() {\n        return this.labelFont;\n    }\n\n    \n    public void setLabelFont(Font font) {\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        if (!this.labelFont.equals(font)) {\n            this.labelFont = font;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n\n    \n    public void setLabelPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public RectangleInsets getLabelInsets() {\n        return this.labelInsets;\n    }\n\n    \n    public void setLabelInsets(RectangleInsets insets) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");   \n        }\n        if (!insets.equals(this.labelInsets)) {\n            this.labelInsets = insets;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public double getLabelAngle() {\n        return this.labelAngle;\n    }\n\n    \n    public void setLabelAngle(double angle) {\n        this.labelAngle = angle;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public String getLabelToolTip() {\n        return this.labelToolTip;\n    }\n    \n    \n    public void setLabelToolTip(String text) {\n        this.labelToolTip = text;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n    \n    \n    public String getLabelURL() {\n        return this.labelURL;\n    }\n    \n    \n    public void setLabelURL(String url) {\n        this.labelURL = url;\n        notifyListeners(new AxisChangeEvent(this));        \n    }\n    \n    \n    public boolean isAxisLineVisible() {\n        return this.axisLineVisible;\n    }\n    \n    \n    public void setAxisLineVisible(boolean visible) {\n        this.axisLineVisible = visible;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n    \n    \n    public Paint getAxisLinePaint() {\n        return this.axisLinePaint;\n    }\n    \n    \n    public void setAxisLinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");   \n        }\n        this.axisLinePaint = paint;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n    \n    \n    public Stroke getAxisLineStroke() {\n        return this.axisLineStroke;\n    }\n    \n    \n    public void setAxisLineStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");   \n        }\n        this.axisLineStroke = stroke;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n    \n    \n    public boolean isTickLabelsVisible() {\n        return this.tickLabelsVisible;\n    }\n\n    \n    public void setTickLabelsVisible(boolean flag) {\n\n        if (flag != this.tickLabelsVisible) {\n            this.tickLabelsVisible = flag;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n\n    }\n\n    \n    public Font getTickLabelFont() {\n        return this.tickLabelFont;\n    }\n\n    \n    public void setTickLabelFont(Font font) {\n\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n\n        if (!this.tickLabelFont.equals(font)) {\n            this.tickLabelFont = font;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n\n    }\n\n    \n    public Paint getTickLabelPaint() {\n        return this.tickLabelPaint;\n    }\n\n    \n    public void setTickLabelPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.tickLabelPaint = paint;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public RectangleInsets getTickLabelInsets() {\n        return this.tickLabelInsets;\n    }\n\n    \n    public void setTickLabelInsets(RectangleInsets insets) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        if (!this.tickLabelInsets.equals(insets)) {\n            this.tickLabelInsets = insets;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public boolean isTickMarksVisible() {\n        return this.tickMarksVisible;\n    }\n\n    \n    public void setTickMarksVisible(boolean flag) {\n        if (flag != this.tickMarksVisible) {\n            this.tickMarksVisible = flag;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public float getTickMarkInsideLength() {\n        return this.tickMarkInsideLength;\n    }\n\n    \n    public void setTickMarkInsideLength(float length) {\n        this.tickMarkInsideLength = length;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public float getTickMarkOutsideLength() {\n        return this.tickMarkOutsideLength;\n    }\n\n    \n    public void setTickMarkOutsideLength(float length) {\n        this.tickMarkOutsideLength = length;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public Stroke getTickMarkStroke() {\n        return this.tickMarkStroke;\n    }\n\n    \n    public void setTickMarkStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (!this.tickMarkStroke.equals(stroke)) {\n            this.tickMarkStroke = stroke;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public Paint getTickMarkPaint() {\n        return this.tickMarkPaint;\n    }\n\n    \n    public void setTickMarkPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.tickMarkPaint = paint;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public Plot getPlot() {\n        return this.plot;\n    }\n\n    \n    public void setPlot(Plot plot) {\n        this.plot = plot;\n        configure();\n    }\n\n    \n    public double getFixedDimension() {\n        return this.fixedDimension;\n    }\n\n    \n    public void setFixedDimension(double dimension) {\n        this.fixedDimension = dimension;\n    }\n\n    \n    public abstract void configure(); public abstract AxisSpace reserveSpace(Graphics2D g2, Plot plot, Rectangle2D plotArea, RectangleEdge edge, AxisSpace space); public abstract AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState); public abstract List refreshTicks(Graphics2D g2, AxisState state, Rectangle2D dataArea, RectangleEdge edge); public void addChangeListener(AxisChangeListener listener) {\n        this.listenerList.add(AxisChangeListener.class, listener);\n    }\n\n    \n    public void removeChangeListener(AxisChangeListener listener) {\n        this.listenerList.remove(AxisChangeListener.class, listener);\n    }\n\n    \n    public boolean hasListener(EventListener listener) {\n        List list = Arrays.asList(this.listenerList.getListenerList());\n        return list.contains(listener);\n    }\n    \n    \n    protected void notifyListeners(AxisChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == AxisChangeListener.class) {\n                ((AxisChangeListener) listeners[i + 1]).axisChanged(event);\n            }\n        }\n\n    }\n\n    \n    protected Rectangle2D getLabelEnclosure(Graphics2D g2, RectangleEdge edge) {\n\n        Rectangle2D result = new Rectangle2D.Double();\n        String axisLabel = getLabel();\n        if (axisLabel != null && !axisLabel.equals(\"\")) {\n            FontMetrics fm = g2.getFontMetrics(getLabelFont());\n            Rectangle2D bounds = TextUtilities.getTextBounds(axisLabel, g2, fm);\n            RectangleInsets insets = getLabelInsets();\n            bounds = insets.createOutsetRectangle(bounds);\n            double angle = getLabelAngle();\n            if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {\n                angle = angle - Math.PI / 2.0;\n            }\n            double x = bounds.getCenterX();\n            double y = bounds.getCenterY();\n            AffineTransform transformer \n                = AffineTransform.getRotateInstance(angle, x, y);\n            Shape labelBounds = transformer.createTransformedShape(bounds);\n            result = labelBounds.getBounds2D();\n        }\n\n        return result;\n\n    }\n\n    \n    protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n\n        \n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n        \n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n        Shape hotspot = null;\n        \n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) dataArea.getCenterX();\n            float labely = (float) (state.getCursor() - insets.getBottom() \n                    - h / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) dataArea.getCenterX();\n            float labely = (float) (state.getCursor() + insets.getTop() \n                    + h / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) (state.getCursor() - insets.getRight() \n                    - w / 2.0);\n            float labely = (float) dataArea.getCenterY();\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                    TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0, \n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) (state.getCursor() \n                            + insets.getLeft() + w / 2.0);\n            float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                    / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                    TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                    + insets.getRight());\n\n        }\n        if (plotState != null && hotspot != null) {\n            ChartRenderingInfo owner = plotState.getOwner();\n                EntityCollection entities = owner.getEntityCollection();\n                if (entities != null) {\n                    entities.add(new AxisLabelEntity(this, hotspot, \n                            this.labelToolTip, this.labelURL));\n                }\n        }\n        return state;\n\n    }\n\n    \n    protected void drawAxisLine(Graphics2D g2, double cursor, Rectangle2D dataArea, RectangleEdge edge) {\n        \n        Line2D axisLine = null;\n        if (edge == RectangleEdge.TOP) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.LEFT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        g2.setPaint(this.axisLinePaint);\n        g2.setStroke(this.axisLineStroke);\n        g2.draw(axisLine);\n        \n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        Axis clone = (Axis) super.clone();\n        \n        clone.plot = null;        \n        clone.listenerList = new EventListenerList();\n        return clone;\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Axis)) {\n            return false;\n        }\n        Axis that = (Axis) obj;\n        if (this.visible != that.visible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.label, that.label)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelInsets, that.labelInsets)) {\n            return false;\n        }\n        if (this.labelAngle != that.labelAngle) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelToolTip, that.labelToolTip)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelURL, that.labelURL)) {\n            return false;\n        }\n        if (this.axisLineVisible != that.axisLineVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.axisLineStroke, that.axisLineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) {\n            return false;\n        }\n        if (this.tickLabelsVisible != that.tickLabelsVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(\n            this.tickLabelInsets, that.tickLabelInsets\n        )) {\n            return false;\n        }\n        if (this.tickMarksVisible != that.tickMarksVisible) {\n            return false;\n        }\n        if (this.tickMarkInsideLength != that.tickMarkInsideLength) {\n            return false;\n        }                  \n        if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) {\n            return false;\n        }                  \n        if (!PaintUtilities.equal(this.tickMarkPaint, that.tickMarkPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickMarkStroke, that.tickMarkStroke)) {\n            return false;\n        }\n        if (this.fixedDimension != that.fixedDimension) {\n            return false;\n        }\n        return true;\n    }\n\n    \n    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.labelPaint, stream);\n        SerialUtilities.writePaint(this.tickLabelPaint, stream);\n        SerialUtilities.writeStroke(this.axisLineStroke, stream);\n        SerialUtilities.writePaint(this.axisLinePaint, stream);\n        SerialUtilities.writeStroke(this.tickMarkStroke, stream);\n        SerialUtilities.writePaint(this.tickMarkPaint, stream);\n    }\n\n    \n    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.labelPaint = SerialUtilities.readPaint(stream);\n        this.tickLabelPaint = SerialUtilities.readPaint(stream);\n        this.axisLineStroke = SerialUtilities.readStroke(stream);\n        this.axisLinePaint = SerialUtilities.readPaint(stream);\n        this.tickMarkStroke = SerialUtilities.readStroke(stream);\n        this.tickMarkPaint = SerialUtilities.readPaint(stream);\n        this.listenerList = new EventListenerList();\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.jfree.chart.axis;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.FontMetrics;\nimport java.awt.Graphics2D;\nimport java.awt.Paint;\nimport java.awt.Shape;\nimport java.awt.Stroke;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.EventListener;\nimport java.util.List;\n\nimport javax.swing.event.EventListenerList;\n\nimport org.jfree.chart.ChartRenderingInfo;\nimport org.jfree.chart.entity.AxisLabelEntity;\nimport org.jfree.chart.entity.EntityCollection;\nimport org.jfree.chart.event.AxisChangeEvent;\nimport org.jfree.chart.event.AxisChangeListener;\nimport org.jfree.chart.plot.Plot;\nimport org.jfree.chart.plot.PlotRenderingInfo;\nimport org.jfree.chart.text.TextAnchor;\nimport org.jfree.chart.text.TextUtilities;\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.PaintUtilities;\nimport org.jfree.chart.util.RectangleEdge;\nimport org.jfree.chart.util.RectangleInsets;\nimport org.jfree.chart.util.SerialUtilities;\n\n\npublic abstract class Axis implements Cloneable, Serializable { private static final long serialVersionUID = 7719289504573298271L; public static final boolean DEFAULT_AXIS_VISIBLE = true; public static final Font DEFAULT_AXIS_LABEL_FONT = new Font( \"SansSerif\", Font.PLAIN, 12); public static final Paint DEFAULT_AXIS_LABEL_PAINT = Color.black; public static final RectangleInsets DEFAULT_AXIS_LABEL_INSETS = new RectangleInsets(3.0, 3.0, 3.0, 3.0); public static final Paint DEFAULT_AXIS_LINE_PAINT = Color.gray; public static final Stroke DEFAULT_AXIS_LINE_STROKE = new BasicStroke(1.0f); public static final boolean DEFAULT_TICK_LABELS_VISIBLE = true; public static final Font DEFAULT_TICK_LABEL_FONT = new Font(\"SansSerif\", Font.PLAIN, 10); public static final Paint DEFAULT_TICK_LABEL_PAINT = Color.black; public static final RectangleInsets DEFAULT_TICK_LABEL_INSETS = new RectangleInsets(2.0, 4.0, 2.0, 4.0); public static final boolean DEFAULT_TICK_MARKS_VISIBLE = true; public static final Stroke DEFAULT_TICK_MARK_STROKE = new BasicStroke(1); public static final Paint DEFAULT_TICK_MARK_PAINT = Color.gray; public static final float DEFAULT_TICK_MARK_INSIDE_LENGTH = 0.0f; public static final float DEFAULT_TICK_MARK_OUTSIDE_LENGTH = 2.0f; private boolean visible; private String label; private Font labelFont; private transient Paint labelPaint; private RectangleInsets labelInsets; private double labelAngle; private String labelToolTip; private String labelURL; private boolean axisLineVisible; private transient Stroke axisLineStroke; private transient Paint axisLinePaint; private boolean tickLabelsVisible; private Font tickLabelFont; private transient Paint tickLabelPaint; private RectangleInsets tickLabelInsets; private boolean tickMarksVisible; private float tickMarkInsideLength; private float tickMarkOutsideLength; private transient Stroke tickMarkStroke; private transient Paint tickMarkPaint; private double fixedDimension; private transient Plot plot; private transient EventListenerList listenerList; protected Axis(String label) {\n\n        this.label = label;\n        this.visible = DEFAULT_AXIS_VISIBLE;\n        this.labelFont = DEFAULT_AXIS_LABEL_FONT;\n        this.labelPaint = DEFAULT_AXIS_LABEL_PAINT;\n        this.labelInsets = DEFAULT_AXIS_LABEL_INSETS;\n        this.labelAngle = 0.0;\n        this.labelToolTip = null;\n        this.labelURL = null;\n        \n        this.axisLineVisible = true;\n        this.axisLinePaint = DEFAULT_AXIS_LINE_PAINT;\n        this.axisLineStroke = DEFAULT_AXIS_LINE_STROKE;\n        \n        this.tickLabelsVisible = DEFAULT_TICK_LABELS_VISIBLE;\n        this.tickLabelFont = DEFAULT_TICK_LABEL_FONT;\n        this.tickLabelPaint = DEFAULT_TICK_LABEL_PAINT;\n        this.tickLabelInsets = DEFAULT_TICK_LABEL_INSETS;\n        \n        this.tickMarksVisible = DEFAULT_TICK_MARKS_VISIBLE;\n        this.tickMarkStroke = DEFAULT_TICK_MARK_STROKE;\n        this.tickMarkPaint = DEFAULT_TICK_MARK_PAINT;\n        this.tickMarkInsideLength = DEFAULT_TICK_MARK_INSIDE_LENGTH;\n        this.tickMarkOutsideLength = DEFAULT_TICK_MARK_OUTSIDE_LENGTH;\n\n        this.plot = null;\n\n        this.listenerList = new EventListenerList();\n\n    }\n\n    \n    public boolean isVisible() {\n        return this.visible;\n    }\n\n    \n    public void setVisible(boolean flag) {\n        if (flag != this.visible) {\n            this.visible = flag;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public String getLabel() {\n        return this.label;\n    }\n\n    \n    public void setLabel(String label) {\n        \n        String existing = this.label;\n        if (existing != null) {\n            if (!existing.equals(label)) {\n                this.label = label;\n                notifyListeners(new AxisChangeEvent(this));\n            }\n        }\n        else {\n            if (label != null) {\n                this.label = label;\n                notifyListeners(new AxisChangeEvent(this));\n            }\n        }\n\n    }\n\n    \n    public Font getLabelFont() {\n        return this.labelFont;\n    }\n\n    \n    public void setLabelFont(Font font) {\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        if (!this.labelFont.equals(font)) {\n            this.labelFont = font;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n\n    \n    public void setLabelPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.labelPaint = paint;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public RectangleInsets getLabelInsets() {\n        return this.labelInsets;\n    }\n\n    \n    public void setLabelInsets(RectangleInsets insets) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");   \n        }\n        if (!insets.equals(this.labelInsets)) {\n            this.labelInsets = insets;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public double getLabelAngle() {\n        return this.labelAngle;\n    }\n\n    \n    public void setLabelAngle(double angle) {\n        this.labelAngle = angle;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public String getLabelToolTip() {\n        return this.labelToolTip;\n    }\n    \n    \n    public void setLabelToolTip(String text) {\n        this.labelToolTip = text;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n    \n    \n    public String getLabelURL() {\n        return this.labelURL;\n    }\n    \n    \n    public void setLabelURL(String url) {\n        this.labelURL = url;\n        notifyListeners(new AxisChangeEvent(this));        \n    }\n    \n    \n    public boolean isAxisLineVisible() {\n        return this.axisLineVisible;\n    }\n    \n    \n    public void setAxisLineVisible(boolean visible) {\n        this.axisLineVisible = visible;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n    \n    \n    public Paint getAxisLinePaint() {\n        return this.axisLinePaint;\n    }\n    \n    \n    public void setAxisLinePaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");   \n        }\n        this.axisLinePaint = paint;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n    \n    \n    public Stroke getAxisLineStroke() {\n        return this.axisLineStroke;\n    }\n    \n    \n    public void setAxisLineStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");   \n        }\n        this.axisLineStroke = stroke;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n    \n    \n    public boolean isTickLabelsVisible() {\n        return this.tickLabelsVisible;\n    }\n\n    \n    public void setTickLabelsVisible(boolean flag) {\n\n        if (flag != this.tickLabelsVisible) {\n            this.tickLabelsVisible = flag;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n\n    }\n\n    \n    public Font getTickLabelFont() {\n        return this.tickLabelFont;\n    }\n\n    \n    public void setTickLabelFont(Font font) {\n\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n\n        if (!this.tickLabelFont.equals(font)) {\n            this.tickLabelFont = font;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n\n    }\n\n    \n    public Paint getTickLabelPaint() {\n        return this.tickLabelPaint;\n    }\n\n    \n    public void setTickLabelPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.tickLabelPaint = paint;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public RectangleInsets getTickLabelInsets() {\n        return this.tickLabelInsets;\n    }\n\n    \n    public void setTickLabelInsets(RectangleInsets insets) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        if (!this.tickLabelInsets.equals(insets)) {\n            this.tickLabelInsets = insets;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public boolean isTickMarksVisible() {\n        return this.tickMarksVisible;\n    }\n\n    \n    public void setTickMarksVisible(boolean flag) {\n        if (flag != this.tickMarksVisible) {\n            this.tickMarksVisible = flag;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public float getTickMarkInsideLength() {\n        return this.tickMarkInsideLength;\n    }\n\n    \n    public void setTickMarkInsideLength(float length) {\n        this.tickMarkInsideLength = length;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public float getTickMarkOutsideLength() {\n        return this.tickMarkOutsideLength;\n    }\n\n    \n    public void setTickMarkOutsideLength(float length) {\n        this.tickMarkOutsideLength = length;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public Stroke getTickMarkStroke() {\n        return this.tickMarkStroke;\n    }\n\n    \n    public void setTickMarkStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (!this.tickMarkStroke.equals(stroke)) {\n            this.tickMarkStroke = stroke;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n\n    \n    public Paint getTickMarkPaint() {\n        return this.tickMarkPaint;\n    }\n\n    \n    public void setTickMarkPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.tickMarkPaint = paint;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n\n    \n    public Plot getPlot() {\n        return this.plot;\n    }\n\n    \n    public void setPlot(Plot plot) {\n        this.plot = plot;\n        configure();\n    }\n\n    \n    public double getFixedDimension() {\n        return this.fixedDimension;\n    }\n\n    \n    public void setFixedDimension(double dimension) {\n        this.fixedDimension = dimension;\n    }\n\n    \n    public abstract void configure(); public abstract AxisSpace reserveSpace(Graphics2D g2, Plot plot, Rectangle2D plotArea, RectangleEdge edge, AxisSpace space); public abstract AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState); public abstract List refreshTicks(Graphics2D g2, AxisState state, Rectangle2D dataArea, RectangleEdge edge); public void addChangeListener(AxisChangeListener listener) {\n        this.listenerList.add(AxisChangeListener.class, listener);\n    }\n\n    \n    public void removeChangeListener(AxisChangeListener listener) {\n        this.listenerList.remove(AxisChangeListener.class, listener);\n    }\n\n    \n    public boolean hasListener(EventListener listener) {\n        List list = Arrays.asList(this.listenerList.getListenerList());\n        return list.contains(listener);\n    }\n    \n    \n    protected void notifyListeners(AxisChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == AxisChangeListener.class) {\n                ((AxisChangeListener) listeners[i + 1]).axisChanged(event);\n            }\n        }\n\n    }\n\n    \n    protected Rectangle2D getLabelEnclosure(Graphics2D g2, RectangleEdge edge) {\n\n        Rectangle2D result = new Rectangle2D.Double();\n        String axisLabel = getLabel();\n        if (axisLabel != null && !axisLabel.equals(\"\")) {\n            FontMetrics fm = g2.getFontMetrics(getLabelFont());\n            Rectangle2D bounds = TextUtilities.getTextBounds(axisLabel, g2, fm);\n            RectangleInsets insets = getLabelInsets();\n            bounds = insets.createOutsetRectangle(bounds);\n            double angle = getLabelAngle();\n            if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {\n                angle = angle - Math.PI / 2.0;\n            }\n            double x = bounds.getCenterX();\n            double y = bounds.getCenterY();\n            AffineTransform transformer \n                = AffineTransform.getRotateInstance(angle, x, y);\n            Shape labelBounds = transformer.createTransformedShape(bounds);\n            result = labelBounds.getBounds2D();\n        }\n\n        return result;\n\n    }\n\n    \n    protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n\n        \n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n        \n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n        Shape hotspot = null;\n        \n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) dataArea.getCenterX();\n            float labely = (float) (state.getCursor() - insets.getBottom() \n                    - h / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) dataArea.getCenterX();\n            float labely = (float) (state.getCursor() + insets.getTop() \n                    + h / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) (state.getCursor() - insets.getRight() \n                    - w / 2.0);\n            float labely = (float) dataArea.getCenterY();\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                    TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0, \n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) (state.getCursor() \n                            + insets.getLeft() + w / 2.0);\n            float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                    / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                    TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                    + insets.getRight());\n\n        }\n        if (plotState != null && hotspot != null) {\n            ChartRenderingInfo owner = plotState.getOwner();\n            if (owner != null) {\n                EntityCollection entities = owner.getEntityCollection();\n                if (entities != null) {\n                    entities.add(new AxisLabelEntity(this, hotspot, \n                            this.labelToolTip, this.labelURL));\n                }\n            }\n        }\n        return state;\n\n    }\n\n    \n    protected void drawAxisLine(Graphics2D g2, double cursor, Rectangle2D dataArea, RectangleEdge edge) {\n        \n        Line2D axisLine = null;\n        if (edge == RectangleEdge.TOP) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.LEFT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        g2.setPaint(this.axisLinePaint);\n        g2.setStroke(this.axisLineStroke);\n        g2.draw(axisLine);\n        \n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        Axis clone = (Axis) super.clone();\n        \n        clone.plot = null;        \n        clone.listenerList = new EventListenerList();\n        return clone;\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Axis)) {\n            return false;\n        }\n        Axis that = (Axis) obj;\n        if (this.visible != that.visible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.label, that.label)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelInsets, that.labelInsets)) {\n            return false;\n        }\n        if (this.labelAngle != that.labelAngle) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelToolTip, that.labelToolTip)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelURL, that.labelURL)) {\n            return false;\n        }\n        if (this.axisLineVisible != that.axisLineVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.axisLineStroke, that.axisLineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) {\n            return false;\n        }\n        if (this.tickLabelsVisible != that.tickLabelsVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(\n            this.tickLabelInsets, that.tickLabelInsets\n        )) {\n            return false;\n        }\n        if (this.tickMarksVisible != that.tickMarksVisible) {\n            return false;\n        }\n        if (this.tickMarkInsideLength != that.tickMarkInsideLength) {\n            return false;\n        }                  \n        if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) {\n            return false;\n        }                  \n        if (!PaintUtilities.equal(this.tickMarkPaint, that.tickMarkPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickMarkStroke, that.tickMarkStroke)) {\n            return false;\n        }\n        if (this.fixedDimension != that.fixedDimension) {\n            return false;\n        }\n        return true;\n    }\n\n    \n    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.labelPaint, stream);\n        SerialUtilities.writePaint(this.tickLabelPaint, stream);\n        SerialUtilities.writeStroke(this.axisLineStroke, stream);\n        SerialUtilities.writePaint(this.axisLinePaint, stream);\n        SerialUtilities.writeStroke(this.tickMarkStroke, stream);\n        SerialUtilities.writePaint(this.tickMarkPaint, stream);\n    }\n\n    \n    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.labelPaint = SerialUtilities.readPaint(stream);\n        this.tickLabelPaint = SerialUtilities.readPaint(stream);\n        this.axisLineStroke = SerialUtilities.readStroke(stream);\n        this.axisLinePaint = SerialUtilities.readPaint(stream);\n        this.tickMarkStroke = SerialUtilities.readStroke(stream);\n        this.tickMarkPaint = SerialUtilities.readPaint(stream);\n        this.listenerList = new EventListenerList();\n    }\n\n}\n",
      "buggy_signatures": [
        "public boolean isVisible()",
        "public void setVisible(boolean flag)",
        "public String getLabel()",
        "public void setLabel(String label)",
        "public Font getLabelFont()",
        "public void setLabelFont(Font font)",
        "public Paint getLabelPaint()",
        "public void setLabelPaint(Paint paint)",
        "public RectangleInsets getLabelInsets()",
        "public void setLabelInsets(RectangleInsets insets)",
        "public double getLabelAngle()",
        "public void setLabelAngle(double angle)",
        "public String getLabelToolTip()",
        "public void setLabelToolTip(String text)",
        "public String getLabelURL()",
        "public void setLabelURL(String url)",
        "public boolean isAxisLineVisible()",
        "public void setAxisLineVisible(boolean visible)",
        "public Paint getAxisLinePaint()",
        "public void setAxisLinePaint(Paint paint)",
        "public Stroke getAxisLineStroke()",
        "public void setAxisLineStroke(Stroke stroke)",
        "public boolean isTickLabelsVisible()",
        "public void setTickLabelsVisible(boolean flag)",
        "public Font getTickLabelFont()",
        "public void setTickLabelFont(Font font)",
        "public Paint getTickLabelPaint()",
        "public void setTickLabelPaint(Paint paint)",
        "public RectangleInsets getTickLabelInsets()",
        "public void setTickLabelInsets(RectangleInsets insets)",
        "public boolean isTickMarksVisible()",
        "public void setTickMarksVisible(boolean flag)",
        "public float getTickMarkInsideLength()",
        "public void setTickMarkInsideLength(float length)",
        "public float getTickMarkOutsideLength()",
        "public void setTickMarkOutsideLength(float length)",
        "public Stroke getTickMarkStroke()",
        "public void setTickMarkStroke(Stroke stroke)",
        "public Paint getTickMarkPaint()",
        "public void setTickMarkPaint(Paint paint)",
        "public Plot getPlot()",
        "public void setPlot(Plot plot)",
        "public double getFixedDimension()",
        "public void setFixedDimension(double dimension)",
        "public abstract void configure(); public abstract AxisSpace reserveSpace(Graphics2D g2, Plot plot, Rectangle2D plotArea, RectangleEdge edge, AxisSpace space); public abstract AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState); public abstract List refreshTicks(Graphics2D g2, AxisState state, Rectangle2D dataArea, RectangleEdge edge); public void addChangeListener(AxisChangeListener listener)",
        "public void removeChangeListener(AxisChangeListener listener)",
        "public boolean hasListener(EventListener listener)",
        "protected void notifyListeners(AxisChangeEvent event)",
        "protected Rectangle2D getLabelEnclosure(Graphics2D g2, RectangleEdge edge)",
        "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState)",
        "protected void drawAxisLine(Graphics2D g2, double cursor, Rectangle2D dataArea, RectangleEdge edge)",
        "public Object clone() throws CloneNotSupportedException",
        "public boolean equals(Object obj)",
        "private void writeObject(ObjectOutputStream stream) throws IOException",
        "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException"
      ],
      "fixed_signatures": [
        "public boolean isVisible()",
        "public void setVisible(boolean flag)",
        "public String getLabel()",
        "public void setLabel(String label)",
        "public Font getLabelFont()",
        "public void setLabelFont(Font font)",
        "public Paint getLabelPaint()",
        "public void setLabelPaint(Paint paint)",
        "public RectangleInsets getLabelInsets()",
        "public void setLabelInsets(RectangleInsets insets)",
        "public double getLabelAngle()",
        "public void setLabelAngle(double angle)",
        "public String getLabelToolTip()",
        "public void setLabelToolTip(String text)",
        "public String getLabelURL()",
        "public void setLabelURL(String url)",
        "public boolean isAxisLineVisible()",
        "public void setAxisLineVisible(boolean visible)",
        "public Paint getAxisLinePaint()",
        "public void setAxisLinePaint(Paint paint)",
        "public Stroke getAxisLineStroke()",
        "public void setAxisLineStroke(Stroke stroke)",
        "public boolean isTickLabelsVisible()",
        "public void setTickLabelsVisible(boolean flag)",
        "public Font getTickLabelFont()",
        "public void setTickLabelFont(Font font)",
        "public Paint getTickLabelPaint()",
        "public void setTickLabelPaint(Paint paint)",
        "public RectangleInsets getTickLabelInsets()",
        "public void setTickLabelInsets(RectangleInsets insets)",
        "public boolean isTickMarksVisible()",
        "public void setTickMarksVisible(boolean flag)",
        "public float getTickMarkInsideLength()",
        "public void setTickMarkInsideLength(float length)",
        "public float getTickMarkOutsideLength()",
        "public void setTickMarkOutsideLength(float length)",
        "public Stroke getTickMarkStroke()",
        "public void setTickMarkStroke(Stroke stroke)",
        "public Paint getTickMarkPaint()",
        "public void setTickMarkPaint(Paint paint)",
        "public Plot getPlot()",
        "public void setPlot(Plot plot)",
        "public double getFixedDimension()",
        "public void setFixedDimension(double dimension)",
        "public abstract void configure(); public abstract AxisSpace reserveSpace(Graphics2D g2, Plot plot, Rectangle2D plotArea, RectangleEdge edge, AxisSpace space); public abstract AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState); public abstract List refreshTicks(Graphics2D g2, AxisState state, Rectangle2D dataArea, RectangleEdge edge); public void addChangeListener(AxisChangeListener listener)",
        "public void removeChangeListener(AxisChangeListener listener)",
        "public boolean hasListener(EventListener listener)",
        "protected void notifyListeners(AxisChangeEvent event)",
        "protected Rectangle2D getLabelEnclosure(Graphics2D g2, RectangleEdge edge)",
        "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState)",
        "protected void drawAxisLine(Graphics2D g2, double cursor, Rectangle2D dataArea, RectangleEdge edge)",
        "public Object clone() throws CloneNotSupportedException",
        "public boolean equals(Object obj)",
        "private void writeObject(ObjectOutputStream stream) throws IOException",
        "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException"
      ],
      "methods": [
        {
          "buggy_method": "  protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n\n  \n  if (state == null) {\n  throw new IllegalArgumentException(\"Null 'state' argument.\");\n  }\n  \n  if ((label == null) || (label.equals(\"\"))) {\n  return state;\n  }\n\n  Font font = getLabelFont();\n  RectangleInsets insets = getLabelInsets();\n  g2.setFont(font);\n  g2.setPaint(getLabelPaint());\n  FontMetrics fm = g2.getFontMetrics();\n  Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n  Shape hotspot = null;\n  \n  if (edge == RectangleEdge.TOP) {\n  AffineTransform t = AffineTransform.getRotateInstance(\n  getLabelAngle(), labelBounds.getCenterX(), \n  labelBounds.getCenterY());\n  Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n  labelBounds = rotatedLabelBounds.getBounds2D();\n  float w = (float) labelBounds.getWidth();\n  float h = (float) labelBounds.getHeight();\n  float labelx = (float) dataArea.getCenterX();\n  float labely = (float) (state.getCursor() - insets.getBottom() \n  - h / 2.0);\n  TextUtilities.drawRotatedString(label, g2, labelx, labely, \n  TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n  hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n  labely - h / 2.0f, w, h);\n  state.cursorUp(insets.getTop() + labelBounds.getHeight() \n  + insets.getBottom());\n  }\n  else if (edge == RectangleEdge.BOTTOM) {\n  AffineTransform t = AffineTransform.getRotateInstance(\n  getLabelAngle(), labelBounds.getCenterX(), \n  labelBounds.getCenterY());\n  Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n  labelBounds = rotatedLabelBounds.getBounds2D();\n  float w = (float) labelBounds.getWidth();\n  float h = (float) labelBounds.getHeight();\n  float labelx = (float) dataArea.getCenterX();\n  float labely = (float) (state.getCursor() + insets.getTop() \n  + h / 2.0);\n  TextUtilities.drawRotatedString(label, g2, labelx, labely, \n  TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n  hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n  labely - h / 2.0f, w, h);\n  state.cursorDown(insets.getTop() + labelBounds.getHeight() \n  + insets.getBottom());\n  }\n  else if (edge == RectangleEdge.LEFT) {\n  AffineTransform t = AffineTransform.getRotateInstance(\n  getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n  labelBounds.getCenterY());\n  Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n  labelBounds = rotatedLabelBounds.getBounds2D();\n  float w = (float) labelBounds.getWidth();\n  float h = (float) labelBounds.getHeight();\n  float labelx = (float) (state.getCursor() - insets.getRight() \n  - w / 2.0);\n  float labely = (float) dataArea.getCenterY();\n  TextUtilities.drawRotatedString(label, g2, labelx, labely, \n  TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n  TextAnchor.CENTER);\n  hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n  labely - h / 2.0f, w, h);\n  state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n  + insets.getRight());\n  }\n  else if (edge == RectangleEdge.RIGHT) {\n\n  AffineTransform t = AffineTransform.getRotateInstance(\n  getLabelAngle() + Math.PI / 2.0, \n  labelBounds.getCenterX(), labelBounds.getCenterY());\n  Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n  labelBounds = rotatedLabelBounds.getBounds2D();\n  float w = (float) labelBounds.getWidth();\n  float h = (float) labelBounds.getHeight();\n  float labelx = (float) (state.getCursor() \n  + insets.getLeft() + w / 2.0);\n  float labely = (float) (dataArea.getY() + dataArea.getHeight() \n  / 2.0);\n  TextUtilities.drawRotatedString(label, g2, labelx, labely, \n  TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n  TextAnchor.CENTER);\n  hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n  labely - h / 2.0f, w, h);\n  state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n  + insets.getRight());\n\n  }\n  if (plotState != null && hotspot != null) {\n  ChartRenderingInfo owner = plotState.getOwner();\n  EntityCollection entities = owner.getEntityCollection();\n  if (entities != null) {\n  entities.add(new AxisLabelEntity(this, hotspot, \n  this.labelToolTip, this.labelURL));\n  }\n  }\n  return state;\n\n  }",
          "fixed_method": "  protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n\n  \n  if (state == null) {\n  throw new IllegalArgumentException(\"Null 'state' argument.\");\n  }\n  \n  if ((label == null) || (label.equals(\"\"))) {\n  return state;\n  }\n\n  Font font = getLabelFont();\n  RectangleInsets insets = getLabelInsets();\n  g2.setFont(font);\n  g2.setPaint(getLabelPaint());\n  FontMetrics fm = g2.getFontMetrics();\n  Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n  Shape hotspot = null;\n  \n  if (edge == RectangleEdge.TOP) {\n  AffineTransform t = AffineTransform.getRotateInstance(\n  getLabelAngle(), labelBounds.getCenterX(), \n  labelBounds.getCenterY());\n  Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n  labelBounds = rotatedLabelBounds.getBounds2D();\n  float w = (float) labelBounds.getWidth();\n  float h = (float) labelBounds.getHeight();\n  float labelx = (float) dataArea.getCenterX();\n  float labely = (float) (state.getCursor() - insets.getBottom() \n  - h / 2.0);\n  TextUtilities.drawRotatedString(label, g2, labelx, labely, \n  TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n  hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n  labely - h / 2.0f, w, h);\n  state.cursorUp(insets.getTop() + labelBounds.getHeight() \n  + insets.getBottom());\n  }\n  else if (edge == RectangleEdge.BOTTOM) {\n  AffineTransform t = AffineTransform.getRotateInstance(\n  getLabelAngle(), labelBounds.getCenterX(), \n  labelBounds.getCenterY());\n  Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n  labelBounds = rotatedLabelBounds.getBounds2D();\n  float w = (float) labelBounds.getWidth();\n  float h = (float) labelBounds.getHeight();\n  float labelx = (float) dataArea.getCenterX();\n  float labely = (float) (state.getCursor() + insets.getTop() \n  + h / 2.0);\n  TextUtilities.drawRotatedString(label, g2, labelx, labely, \n  TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n  hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n  labely - h / 2.0f, w, h);\n  state.cursorDown(insets.getTop() + labelBounds.getHeight() \n  + insets.getBottom());\n  }\n  else if (edge == RectangleEdge.LEFT) {\n  AffineTransform t = AffineTransform.getRotateInstance(\n  getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n  labelBounds.getCenterY());\n  Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n  labelBounds = rotatedLabelBounds.getBounds2D();\n  float w = (float) labelBounds.getWidth();\n  float h = (float) labelBounds.getHeight();\n  float labelx = (float) (state.getCursor() - insets.getRight() \n  - w / 2.0);\n  float labely = (float) dataArea.getCenterY();\n  TextUtilities.drawRotatedString(label, g2, labelx, labely, \n  TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n  TextAnchor.CENTER);\n  hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n  labely - h / 2.0f, w, h);\n  state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n  + insets.getRight());\n  }\n  else if (edge == RectangleEdge.RIGHT) {\n\n  AffineTransform t = AffineTransform.getRotateInstance(\n  getLabelAngle() + Math.PI / 2.0, \n  labelBounds.getCenterX(), labelBounds.getCenterY());\n  Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n  labelBounds = rotatedLabelBounds.getBounds2D();\n  float w = (float) labelBounds.getWidth();\n  float h = (float) labelBounds.getHeight();\n  float labelx = (float) (state.getCursor() \n  + insets.getLeft() + w / 2.0);\n  float labely = (float) (dataArea.getY() + dataArea.getHeight() \n  / 2.0);\n  TextUtilities.drawRotatedString(label, g2, labelx, labely, \n  TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n  TextAnchor.CENTER);\n  hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n  labely - h / 2.0f, w, h);\n  state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n  + insets.getRight());\n\n  }\n  if (plotState != null && hotspot != null) {\n  ChartRenderingInfo owner = plotState.getOwner();\n  if (owner != null) {\n  EntityCollection entities = owner.getEntityCollection();\n  if (entities != null) {\n  entities.add(new AxisLabelEntity(this, hotspot, \n  this.labelToolTip, this.labelURL));\n  }\n  }\n  }\n  return state;\n\n  }",
          "diff": [
            "@@ -1189,11 +1189,13 @@",
            "         }\n",
            "         if (plotState != null && hotspot != null) {\n",
            "             ChartRenderingInfo owner = plotState.getOwner();\n",
            "+            if (owner != null) {\n",
            "                 EntityCollection entities = owner.getEntityCollection();\n",
            "                 if (entities != null) {\n",
            "                     entities.add(new AxisLabelEntity(this, hotspot, \n",
            "                             this.labelToolTip, this.labelURL));\n",
            "                 }\n",
            "+            }\n",
            "         }\n",
            "         return state;\n",
            " \n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
