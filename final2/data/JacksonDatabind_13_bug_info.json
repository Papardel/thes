{
  "bug_id": "13",
  "failed_tests": {
    "com.fasterxml.jackson.databind.struct.TestObjectIdDeserialization": [
      {
        "methodName": "testNullObjectId",
        "error": "com.fasterxml.jackson.databind.JsonMappingException",
        "message": "(was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.struct.Identifiable[\"id\"])",
        "fail_line": "                (aposToQuotes(\"{'value':3, 'next':null, 'id':null}\"), Identifiable.class);",
        "test_source": "  public void testNullObjectId() throws Exception {\n  // Ok, so missing Object Id is ok, but so is null.\n  \n  Identifiable value = MAPPER.readValue\n  (aposToQuotes(\"{'value':3, 'next':null, 'id':null}\"), Identifiable.class);\n  assertNotNull(value);\n  assertEquals(3, value.value);\n  }",
        "stack": [
          "JsonMappingException.wrapWithPath line 210, JsonMappingException.wrapWithPath line 177, BeanPropertyMap.wrapAndThrow line 439, BeanPropertyMap._findDeserializeAndSet2 line 315, BeanPropertyMap.findDeserializeAndSet line 291, BeanDeserializer.deserializeFromObject line 335, BeanDeserializerBase.deserializeWithObjectId line 1045, BeanDeserializer.deserialize line 140, ObjectMapper._readMapAndClose line 3562, ObjectMapper.readValue line 2578, TestObjectIdDeserialization.testNullObjectId line 465, ObjectIdGenerator$IdKey.<init> line 158, ObjectIdGenerators$IntSequenceGenerator.key line 95, DefaultDeserializationContext.findObjectId line 88, ObjectIdValueProperty.deserializeSetAndReturn line 93, ObjectIdValueProperty.deserializeAndSet line 77, BeanPropertyMap._findDeserializeAndSet2 line 313"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.util.*;\nimport java.util.Map.Entry;\n\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator;\nimport com.fasterxml.jackson.annotation.ObjectIdResolver;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;\nimport com.fasterxml.jackson.annotation.SimpleObjectIdResolver;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\nimport com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;\nimport com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\nimport com.fasterxml.jackson.databind.introspect.Annotated;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\n\n\npublic abstract class DefaultDeserializationContext extends DeserializationContext implements java.io.Serializable { private static final long serialVersionUID = 1L; protected transient LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId> _objectIds; private List<ObjectIdResolver> _objectIdResolvers; protected DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache) {\n        super(df, cache);\n    }\n    \n    protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializationConfig config, JsonParser jp, InjectableValues values) {\n        super(src, config, jp, values);\n    }\n\n    protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializerFactory factory) {\n        super(src, factory);\n    }\n\n    \n    protected DefaultDeserializationContext(DefaultDeserializationContext src) {\n        super(src);\n    }\n    \n    \n    public DefaultDeserializationContext copy() {\n        throw new IllegalStateException(\"DefaultDeserializationContext sub-class not overriding copy()\");\n    }\n\n    \n\n    @Override\n    public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n        \n\n        final ObjectIdGenerator.IdKey key = gen.key(id);\n\n        if (_objectIds == null) {\n            _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey,ReadableObjectId>();\n        } else {\n            ReadableObjectId entry = _objectIds.get(key);\n            if (entry != null) {\n                return entry;\n            }\n        }\n\n        \n        ObjectIdResolver resolver = null;\n\n        if (_objectIdResolvers == null) {\n            _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n        } else {\n            for (ObjectIdResolver res : _objectIdResolvers) {\n                if (res.canUseFor(resolverType)) {\n                    resolver = res;\n                    break;\n                }\n            }\n        }\n\n        if (resolver == null) {\n            resolver = resolverType.newForDeserialization(this);\n            \n            \n            \n            \n            \n            _objectIdResolvers.add(resolver);\n        }\n\n        ReadableObjectId entry = new ReadableObjectId(key);\n        entry.setResolver(resolver);\n        _objectIds.put(key, entry);\n        return entry;\n    }\n    \n    @Deprecated \n    @Override\n    public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen) {\n        return findObjectId(id, gen, new SimpleObjectIdResolver());\n    }\n\n    @Override\n    public void checkUnresolvedObjectId() throws UnresolvedForwardReference {\n        if (_objectIds == null) {\n            return;\n        }\n        \n        if (!isEnabled(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)) {\n            return;\n        }\n        UnresolvedForwardReference exception = null;\n        for (Entry<IdKey,ReadableObjectId> entry : _objectIds.entrySet()) {\n            ReadableObjectId roid = entry.getValue();\n            if (roid.hasReferringProperties()) {\n                if (exception == null) {\n                    exception = new UnresolvedForwardReference(\"Unresolved forward references for: \");\n                }\n                for (Iterator<Referring> iterator = roid.referringProperties(); iterator.hasNext(); ) {\n                    Referring referring = iterator.next();\n                    exception.addUnresolvedId(roid.getKey().key, referring.getBeanType(), referring.getLocation());\n                }\n            }\n        }\n        if (exception != null) {\n            throw exception;\n        }\n    }\n\n    \n    \n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public JsonDeserializer<Object> deserializerInstance(Annotated ann, Object deserDef) throws JsonMappingException {\n        if (deserDef == null) {\n            return null;\n        }\n        JsonDeserializer<?> deser;\n        \n        if (deserDef instanceof JsonDeserializer) {\n            deser = (JsonDeserializer<?>) deserDef;\n        } else {\n            \n            if (!(deserDef instanceof Class)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned deserializer definition of type \"+deserDef.getClass().getName()+\"; expected type JsonDeserializer or Class<JsonDeserializer> instead\");\n            }\n            Class<?> deserClass = (Class<?>)deserDef;\n            \n            if (deserClass == JsonDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) {\n                return null;\n            }\n            if (!JsonDeserializer.class.isAssignableFrom(deserClass)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+deserClass.getName()+\"; expected Class<JsonDeserializer>\");\n            }\n            HandlerInstantiator hi = _config.getHandlerInstantiator();\n            deser = (hi == null) ? null : hi.deserializerInstance(_config, ann, deserClass);\n            if (deser == null) {\n                deser = (JsonDeserializer<?>) ClassUtil.createInstance(deserClass,\n                        _config.canOverrideAccessModifiers());\n            }\n        }\n        \n        if (deser instanceof ResolvableDeserializer) {\n            ((ResolvableDeserializer) deser).resolve(this);\n        }\n        return (JsonDeserializer<Object>) deser;\n    }\n\n    @Override\n    public final KeyDeserializer keyDeserializerInstance(Annotated ann, Object deserDef) throws JsonMappingException {\n        if (deserDef == null) {\n            return null;\n        }\n\n        KeyDeserializer deser;\n        \n        if (deserDef instanceof KeyDeserializer) {\n            deser = (KeyDeserializer) deserDef;\n        } else {\n            if (!(deserDef instanceof Class)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \"\n                        +deserDef.getClass().getName()\n                        +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\");\n            }\n            Class<?> deserClass = (Class<?>)deserDef;\n            \n            if (deserClass == KeyDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) {\n                return null;\n            }\n            if (!KeyDeserializer.class.isAssignableFrom(deserClass)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+deserClass.getName()\n                        +\"; expected Class<KeyDeserializer>\");\n            }\n            HandlerInstantiator hi = _config.getHandlerInstantiator();\n            deser = (hi == null) ? null : hi.keyDeserializerInstance(_config, ann, deserClass);\n            if (deser == null) {\n                deser = (KeyDeserializer) ClassUtil.createInstance(deserClass,\n                        _config.canOverrideAccessModifiers());\n            }\n        }\n        \n        if (deser instanceof ResolvableDeserializer) {\n            ((ResolvableDeserializer) deser).resolve(this);\n        }\n        return deser;\n    }\n\n    \n\n    \n    public abstract DefaultDeserializationContext with(DeserializerFactory factory); public abstract DefaultDeserializationContext createInstance( DeserializationConfig config, JsonParser jp, InjectableValues values); public final static class Impl extends DefaultDeserializationContext {\n        private static final long serialVersionUID = 1L; public Impl(DeserializerFactory df) {\n            super(df, null);\n        }\n\n        protected Impl(Impl src, DeserializationConfig config, JsonParser jp, InjectableValues values) {\n            super(src, config, jp, values);\n        }\n\n        protected Impl(Impl src) { super(src); }\n        \n        protected Impl(Impl src, DeserializerFactory factory) {\n            super(src, factory);\n        }\n\n        @Override\n        public DefaultDeserializationContext copy() {\n            if (getClass() != Impl.class) {\n                return super.copy();\n            }\n           return new Impl(this);\n        }\n        \n        @Override\n        public DefaultDeserializationContext createInstance(DeserializationConfig config, JsonParser jp, InjectableValues values) {\n            return new Impl(this, config, jp, values);\n        }\n\n        @Override\n        public DefaultDeserializationContext with(DeserializerFactory factory) {\n            return new Impl(this, factory);\n        }        \n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.util.*;\nimport java.util.Map.Entry;\n\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator;\nimport com.fasterxml.jackson.annotation.ObjectIdResolver;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;\nimport com.fasterxml.jackson.annotation.SimpleObjectIdResolver;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\nimport com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;\nimport com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\nimport com.fasterxml.jackson.databind.introspect.Annotated;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\n\n\npublic abstract class DefaultDeserializationContext extends DeserializationContext implements java.io.Serializable { private static final long serialVersionUID = 1L; protected transient LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId> _objectIds; private List<ObjectIdResolver> _objectIdResolvers; protected DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache) {\n        super(df, cache);\n    }\n    \n    protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializationConfig config, JsonParser jp, InjectableValues values) {\n        super(src, config, jp, values);\n    }\n\n    protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializerFactory factory) {\n        super(src, factory);\n    }\n\n    \n    protected DefaultDeserializationContext(DefaultDeserializationContext src) {\n        super(src);\n    }\n    \n    \n    public DefaultDeserializationContext copy() {\n        throw new IllegalStateException(\"DefaultDeserializationContext sub-class not overriding copy()\");\n    }\n\n    \n\n    @Override\n    public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n        \n        if (id == null) {\n            return null;\n        }\n\n        final ObjectIdGenerator.IdKey key = gen.key(id);\n\n        if (_objectIds == null) {\n            _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey,ReadableObjectId>();\n        } else {\n            ReadableObjectId entry = _objectIds.get(key);\n            if (entry != null) {\n                return entry;\n            }\n        }\n\n        \n        ObjectIdResolver resolver = null;\n\n        if (_objectIdResolvers == null) {\n            _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n        } else {\n            for (ObjectIdResolver res : _objectIdResolvers) {\n                if (res.canUseFor(resolverType)) {\n                    resolver = res;\n                    break;\n                }\n            }\n        }\n\n        if (resolver == null) {\n            resolver = resolverType.newForDeserialization(this);\n            \n            \n            \n            \n            \n            _objectIdResolvers.add(resolver);\n        }\n\n        ReadableObjectId entry = new ReadableObjectId(key);\n        entry.setResolver(resolver);\n        _objectIds.put(key, entry);\n        return entry;\n    }\n    \n    @Deprecated \n    @Override\n    public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen) {\n        return findObjectId(id, gen, new SimpleObjectIdResolver());\n    }\n\n    @Override\n    public void checkUnresolvedObjectId() throws UnresolvedForwardReference {\n        if (_objectIds == null) {\n            return;\n        }\n        \n        if (!isEnabled(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)) {\n            return;\n        }\n        UnresolvedForwardReference exception = null;\n        for (Entry<IdKey,ReadableObjectId> entry : _objectIds.entrySet()) {\n            ReadableObjectId roid = entry.getValue();\n            if (roid.hasReferringProperties()) {\n                if (exception == null) {\n                    exception = new UnresolvedForwardReference(\"Unresolved forward references for: \");\n                }\n                for (Iterator<Referring> iterator = roid.referringProperties(); iterator.hasNext(); ) {\n                    Referring referring = iterator.next();\n                    exception.addUnresolvedId(roid.getKey().key, referring.getBeanType(), referring.getLocation());\n                }\n            }\n        }\n        if (exception != null) {\n            throw exception;\n        }\n    }\n\n    \n    \n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public JsonDeserializer<Object> deserializerInstance(Annotated ann, Object deserDef) throws JsonMappingException {\n        if (deserDef == null) {\n            return null;\n        }\n        JsonDeserializer<?> deser;\n        \n        if (deserDef instanceof JsonDeserializer) {\n            deser = (JsonDeserializer<?>) deserDef;\n        } else {\n            \n            if (!(deserDef instanceof Class)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned deserializer definition of type \"+deserDef.getClass().getName()+\"; expected type JsonDeserializer or Class<JsonDeserializer> instead\");\n            }\n            Class<?> deserClass = (Class<?>)deserDef;\n            \n            if (deserClass == JsonDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) {\n                return null;\n            }\n            if (!JsonDeserializer.class.isAssignableFrom(deserClass)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+deserClass.getName()+\"; expected Class<JsonDeserializer>\");\n            }\n            HandlerInstantiator hi = _config.getHandlerInstantiator();\n            deser = (hi == null) ? null : hi.deserializerInstance(_config, ann, deserClass);\n            if (deser == null) {\n                deser = (JsonDeserializer<?>) ClassUtil.createInstance(deserClass,\n                        _config.canOverrideAccessModifiers());\n            }\n        }\n        \n        if (deser instanceof ResolvableDeserializer) {\n            ((ResolvableDeserializer) deser).resolve(this);\n        }\n        return (JsonDeserializer<Object>) deser;\n    }\n\n    @Override\n    public final KeyDeserializer keyDeserializerInstance(Annotated ann, Object deserDef) throws JsonMappingException {\n        if (deserDef == null) {\n            return null;\n        }\n\n        KeyDeserializer deser;\n        \n        if (deserDef instanceof KeyDeserializer) {\n            deser = (KeyDeserializer) deserDef;\n        } else {\n            if (!(deserDef instanceof Class)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \"\n                        +deserDef.getClass().getName()\n                        +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\");\n            }\n            Class<?> deserClass = (Class<?>)deserDef;\n            \n            if (deserClass == KeyDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) {\n                return null;\n            }\n            if (!KeyDeserializer.class.isAssignableFrom(deserClass)) {\n                throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+deserClass.getName()\n                        +\"; expected Class<KeyDeserializer>\");\n            }\n            HandlerInstantiator hi = _config.getHandlerInstantiator();\n            deser = (hi == null) ? null : hi.keyDeserializerInstance(_config, ann, deserClass);\n            if (deser == null) {\n                deser = (KeyDeserializer) ClassUtil.createInstance(deserClass,\n                        _config.canOverrideAccessModifiers());\n            }\n        }\n        \n        if (deser instanceof ResolvableDeserializer) {\n            ((ResolvableDeserializer) deser).resolve(this);\n        }\n        return deser;\n    }\n\n    \n\n    \n    public abstract DefaultDeserializationContext with(DeserializerFactory factory); public abstract DefaultDeserializationContext createInstance( DeserializationConfig config, JsonParser jp, InjectableValues values); public final static class Impl extends DefaultDeserializationContext {\n        private static final long serialVersionUID = 1L; public Impl(DeserializerFactory df) {\n            super(df, null);\n        }\n\n        protected Impl(Impl src, DeserializationConfig config, JsonParser jp, InjectableValues values) {\n            super(src, config, jp, values);\n        }\n\n        protected Impl(Impl src) { super(src); }\n        \n        protected Impl(Impl src, DeserializerFactory factory) {\n            super(src, factory);\n        }\n\n        @Override\n        public DefaultDeserializationContext copy() {\n            if (getClass() != Impl.class) {\n                return super.copy();\n            }\n           return new Impl(this);\n        }\n        \n        @Override\n        public DefaultDeserializationContext createInstance(DeserializationConfig config, JsonParser jp, InjectableValues values) {\n            return new Impl(this, config, jp, values);\n        }\n\n        @Override\n        public DefaultDeserializationContext with(DeserializerFactory factory) {\n            return new Impl(this, factory);\n        }        \n    }\n}\n",
      "buggy_signatures": [
        "protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializationConfig config, JsonParser jp, InjectableValues values)",
        "protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializerFactory factory)",
        "protected DefaultDeserializationContext(DefaultDeserializationContext src)",
        "public DefaultDeserializationContext copy()",
        "public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType)",
        "public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen)",
        "public void checkUnresolvedObjectId() throws UnresolvedForwardReference",
        "public JsonDeserializer<Object> deserializerInstance(Annotated ann, Object deserDef) throws JsonMappingException",
        "public final KeyDeserializer keyDeserializerInstance(Annotated ann, Object deserDef) throws JsonMappingException",
        "public abstract DefaultDeserializationContext with(DeserializerFactory factory); public abstract DefaultDeserializationContext createInstance( DeserializationConfig config, JsonParser jp, InjectableValues values); public final static class Impl extends DefaultDeserializationContext",
        "protected Impl(Impl src, DeserializationConfig config, JsonParser jp, InjectableValues values)",
        "protected Impl(Impl src)",
        "protected Impl(Impl src, DeserializerFactory factory)",
        "public DefaultDeserializationContext copy()",
        "public DefaultDeserializationContext createInstance(DeserializationConfig config, JsonParser jp, InjectableValues values)",
        "public DefaultDeserializationContext with(DeserializerFactory factory)"
      ],
      "fixed_signatures": [
        "protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializationConfig config, JsonParser jp, InjectableValues values)",
        "protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializerFactory factory)",
        "protected DefaultDeserializationContext(DefaultDeserializationContext src)",
        "public DefaultDeserializationContext copy()",
        "public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType)",
        "public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen)",
        "public void checkUnresolvedObjectId() throws UnresolvedForwardReference",
        "public JsonDeserializer<Object> deserializerInstance(Annotated ann, Object deserDef) throws JsonMappingException",
        "public final KeyDeserializer keyDeserializerInstance(Annotated ann, Object deserDef) throws JsonMappingException",
        "public abstract DefaultDeserializationContext with(DeserializerFactory factory); public abstract DefaultDeserializationContext createInstance( DeserializationConfig config, JsonParser jp, InjectableValues values); public final static class Impl extends DefaultDeserializationContext",
        "protected Impl(Impl src, DeserializationConfig config, JsonParser jp, InjectableValues values)",
        "protected Impl(Impl src)",
        "protected Impl(Impl src, DeserializerFactory factory)",
        "public DefaultDeserializationContext copy()",
        "public DefaultDeserializationContext createInstance(DeserializationConfig config, JsonParser jp, InjectableValues values)",
        "public DefaultDeserializationContext with(DeserializerFactory factory)"
      ],
      "methods": [
        {
          "buggy_method": "  public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n  \n\n  final ObjectIdGenerator.IdKey key = gen.key(id);\n\n  if (_objectIds == null) {\n  _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey,ReadableObjectId>();\n  } else {\n  ReadableObjectId entry = _objectIds.get(key);\n  if (entry != null) {\n  return entry;\n  }\n  }\n\n  \n  ObjectIdResolver resolver = null;\n\n  if (_objectIdResolvers == null) {\n  _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n  } else {\n  for (ObjectIdResolver res : _objectIdResolvers) {\n  if (res.canUseFor(resolverType)) {\n  resolver = res;\n  break;\n  }\n  }\n  }\n\n  if (resolver == null) {\n  resolver = resolverType.newForDeserialization(this);\n  \n  \n  \n  \n  \n  _objectIdResolvers.add(resolver);\n  }\n\n  ReadableObjectId entry = new ReadableObjectId(key);\n  entry.setResolver(resolver);\n  _objectIds.put(key, entry);\n  return entry;\n  }",
          "fixed_method": "  public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n  \n  if (id == null) {\n  return null;\n  }\n\n  final ObjectIdGenerator.IdKey key = gen.key(id);\n\n  if (_objectIds == null) {\n  _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey,ReadableObjectId>();\n  } else {\n  ReadableObjectId entry = _objectIds.get(key);\n  if (entry != null) {\n  return entry;\n  }\n  }\n\n  \n  ObjectIdResolver resolver = null;\n\n  if (_objectIdResolvers == null) {\n  _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n  } else {\n  for (ObjectIdResolver res : _objectIdResolvers) {\n  if (res.canUseFor(resolverType)) {\n  resolver = res;\n  break;\n  }\n  }\n  }\n\n  if (resolver == null) {\n  resolver = resolverType.newForDeserialization(this);\n  \n  \n  \n  \n  \n  _objectIdResolvers.add(resolver);\n  }\n\n  ReadableObjectId entry = new ReadableObjectId(key);\n  entry.setResolver(resolver);\n  _objectIds.put(key, entry);\n  return entry;\n  }",
          "diff": [
            "@@ -84,6 +84,9 @@",
            "         /* 02-Apr-2015, tatu: As per [databind#742] should allow 'null', similar to how\n",
            "          *   missing id already works.\n",
            "          */\n",
            "+        if (id == null) {\n",
            "+            return null;\n",
            "+        }\n",
            " \n",
            "         final ObjectIdGenerator.IdKey key = gen.key(id);\n",
            " \n"
          ],
          "changed_lines": 3
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n\n\npublic final class ObjectIdValueProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final ObjectIdReader _objectIdReader; public ObjectIdValueProperty(ObjectIdReader objectIdReader, PropertyMetadata metadata) {\n        super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata,\n                objectIdReader.getDeserializer());\n        _objectIdReader = objectIdReader;\n    }\n\n    protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser) {\n        super(src, deser);\n        _objectIdReader = src._objectIdReader;\n    }\n\n    @Deprecated \n    protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) {\n        super(src, newName);\n        _objectIdReader = src._objectIdReader;\n    }\n    \n    @Deprecated \n    protected ObjectIdValueProperty(ObjectIdValueProperty src, String newName) {\n        this(src, new PropertyName(newName));\n    }\n\n    @Override\n    public ObjectIdValueProperty withName(PropertyName newName) {\n        return new ObjectIdValueProperty(this, newName);\n    }\n\n    @Override\n    public ObjectIdValueProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        return new ObjectIdValueProperty(this, deser);\n    }\n    \n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return null;\n    }\n\n    @Override public AnnotatedMember getMember() {  return null; }\n\n    \n\n    @Override\n    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n        deserializeSetAndReturn(jp, ctxt, instance);\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n        \n        Object id = _valueDeserializer.deserialize(jp, ctxt);\n\n        \n        \n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        roid.bindItem(instance);\n        \n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp != null) {\n            return idProp.setAndReturn(instance, id);\n        }\n        return instance;\n    }\n\n    @Override\n    public void set(Object instance, Object value) throws IOException {\n        setAndReturn(instance, value);\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp == null) {\n            throw new UnsupportedOperationException(\n                    \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\");\n        }\n        return idProp.setAndReturn(instance, value);\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n\n\npublic final class ObjectIdValueProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final ObjectIdReader _objectIdReader; public ObjectIdValueProperty(ObjectIdReader objectIdReader, PropertyMetadata metadata) {\n        super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata,\n                objectIdReader.getDeserializer());\n        _objectIdReader = objectIdReader;\n    }\n\n    protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser) {\n        super(src, deser);\n        _objectIdReader = src._objectIdReader;\n    }\n\n    @Deprecated \n    protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) {\n        super(src, newName);\n        _objectIdReader = src._objectIdReader;\n    }\n    \n    @Deprecated \n    protected ObjectIdValueProperty(ObjectIdValueProperty src, String newName) {\n        this(src, new PropertyName(newName));\n    }\n\n    @Override\n    public ObjectIdValueProperty withName(PropertyName newName) {\n        return new ObjectIdValueProperty(this, newName);\n    }\n\n    @Override\n    public ObjectIdValueProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        return new ObjectIdValueProperty(this, deser);\n    }\n    \n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return null;\n    }\n\n    @Override public AnnotatedMember getMember() {  return null; }\n\n    \n\n    @Override\n    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n        deserializeSetAndReturn(jp, ctxt, instance);\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n        \n        Object id = _valueDeserializer.deserialize(jp, ctxt);\n\n        \n        if (id == null) {\n            return null;\n        }\n        \n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        roid.bindItem(instance);\n        \n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp != null) {\n            return idProp.setAndReturn(instance, id);\n        }\n        return instance;\n    }\n\n    @Override\n    public void set(Object instance, Object value) throws IOException {\n        setAndReturn(instance, value);\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp == null) {\n            throw new UnsupportedOperationException(\n                    \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\");\n        }\n        return idProp.setAndReturn(instance, value);\n    }\n}\n",
      "buggy_signatures": [
        "protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser)",
        "protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName)",
        "protected ObjectIdValueProperty(ObjectIdValueProperty src, String newName)",
        "public ObjectIdValueProperty withName(PropertyName newName)",
        "public ObjectIdValueProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException",
        "public void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException"
      ],
      "fixed_signatures": [
        "protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser)",
        "protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName)",
        "protected ObjectIdValueProperty(ObjectIdValueProperty src, String newName)",
        "public ObjectIdValueProperty withName(PropertyName newName)",
        "public ObjectIdValueProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException",
        "public void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n  \n  Object id = _valueDeserializer.deserialize(jp, ctxt);\n\n  \n  \n  ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n  roid.bindItem(instance);\n  \n  SettableBeanProperty idProp = _objectIdReader.idProperty;\n  if (idProp != null) {\n  return idProp.setAndReturn(instance, id);\n  }\n  return instance;\n  }",
          "fixed_method": "  public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n  \n  Object id = _valueDeserializer.deserialize(jp, ctxt);\n\n  \n  if (id == null) {\n  return null;\n  }\n  \n  ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n  roid.bindItem(instance);\n  \n  SettableBeanProperty idProp = _objectIdReader.idProperty;\n  if (idProp != null) {\n  return idProp.setAndReturn(instance, id);\n  }\n  return instance;\n  }",
          "diff": [
            "@@ -89,6 +89,9 @@",
            "          *  will be generated externally, at a later point, and is not available\n",
            "          *  quite yet. Typical use case is with DB inserts.\n",
            "          */\n",
            "+        if (id == null) {\n",
            "+            return null;\n",
            "+        }\n",
            "         \n",
            "         ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n",
            "         roid.bindItem(instance);\n"
          ],
          "changed_lines": 3
        }
      ]
    }
  ]
}
