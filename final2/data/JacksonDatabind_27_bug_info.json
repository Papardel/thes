{
  "bug_id": "27",
  "failed_tests": {
    "com.fasterxml.jackson.databind.jsontype.TestExternalId": [
      {
        "methodName": "testInverseExternalId928",
        "error": "java.lang.IllegalStateException",
        "message": "No fallback setter/field defined: can not use creator property for com.fasterxml.jackson.databind.deser.CreatorProperty",
        "fail_line": "        Envelope928 envelope2 = mapper.readValue(failCase, Envelope928.class);",
        "test_source": "  public void testInverseExternalId928() throws Exception {\n  final String CLASS = Payload928.class.getName();\n\n  ObjectMapper mapper = new ObjectMapper();\n\n  final String successCase = \"{\\\"payload\\\":{\\\"something\\\":\\\"test\\\"},\\\"class\\\":\\\"\"+CLASS+\"\\\"}\";\n  Envelope928 envelope1 = mapper.readValue(successCase, Envelope928.class);\n  assertNotNull(envelope1);\n  assertEquals(Payload928.class, envelope1._payload.getClass());\n\n  // and then re-ordered case that was problematic\n  final String failCase = \"{\\\"class\\\":\\\"\"+CLASS+\"\\\",\\\"payload\\\":{\\\"something\\\":\\\"test\\\"}}\";\n  Envelope928 envelope2 = mapper.readValue(failCase, Envelope928.class);\n  assertNotNull(envelope2);\n  assertEquals(Payload928.class, envelope2._payload.getClass());\n  }",
        "stack": [
          "CreatorProperty.set line 199, CreatorProperty.deserializeAndSet line 180, ExternalTypeHandler._deserializeAndSet line 253, ExternalTypeHandler.handlePropertyValue line 119, BeanDeserializer.deserializeUsingPropertyBasedWithExternalTypeId line 794, BeanDeserializer.deserializeWithExternalTypeId line 716, BeanDeserializer.deserializeFromObject line 292, BeanDeserializer.deserialize line 131, ObjectMapper._readMapAndClose line 3731, ObjectMapper.readValue line 2724, TestExternalId.testInverseExternalId928 line 495"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.impl.*;\nimport com.fasterxml.jackson.databind.util.NameTransformer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class BeanDeserializer extends BeanDeserializerBase implements java.io.Serializable { private static final long serialVersionUID = 1L; public BeanDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, HashSet<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) {\n        super(builder, beanDesc, properties, backRefs,\n                ignorableProps, ignoreAllUnknown, hasViews);\n    }\n\n    \n    protected BeanDeserializer(BeanDeserializerBase src) {\n        super(src, src._ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(BeanDeserializerBase src, boolean ignoreAllUnknown) {\n        super(src, ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(BeanDeserializerBase src, NameTransformer unwrapper) {\n        super(src, unwrapper);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, ObjectIdReader oir) {\n        super(src, oir);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, HashSet<String> ignorableProps) {\n        super(src, ignorableProps);\n    }\n\n    @Override\n    public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper) {\n        \n        if (getClass() != BeanDeserializer.class) {\n            return this;\n        }\n        \n        return new BeanDeserializer(this, unwrapper);\n    }\n\n    @Override\n    public BeanDeserializer withObjectIdReader(ObjectIdReader oir) {\n        return new BeanDeserializer(this, oir);\n    }\n\n    @Override\n    public BeanDeserializer withIgnorableProperties(HashSet<String> ignorableProps) {\n        return new BeanDeserializer(this, ignorableProps);\n    }\n\n    @Override\n    protected BeanDeserializerBase asArrayDeserializer() {\n        SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n        return new BeanAsArrayDeserializer(this, props);\n    }\n    \n    \n\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (p.isExpectedStartObjectToken()) {\n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, p.nextToken());\n            }\n            p.nextToken();\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        }\n        JsonToken t = p.getCurrentToken();\n        return _deserializeOther(p, ctxt, t);\n    }\n\n    protected final Object _deserializeOther(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException {\n        \n        switch (t) {\n        case VALUE_STRING:\n            return deserializeFromString(p, ctxt);\n        case VALUE_NUMBER_INT:\n            return deserializeFromNumber(p, ctxt);\n        case VALUE_NUMBER_FLOAT:\n\t    return deserializeFromDouble(p, ctxt);\n        case VALUE_EMBEDDED_OBJECT:\n            return deserializeFromEmbedded(p, ctxt);\n        case VALUE_TRUE:\n        case VALUE_FALSE:\n            return deserializeFromBoolean(p, ctxt);\n        case START_ARRAY:\n            \n            return deserializeFromArray(p, ctxt);\n        case FIELD_NAME:\n        case END_OBJECT: \n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, t);\n            }\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        default:\n            throw ctxt.mappingException(handledType());\n        }\n    }\n\n    protected Object _missingToken(JsonParser p, DeserializationContext ctxt) throws IOException {\n        throw ctxt.endOfInputException(handledType());\n    }\n\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        \n        p.setCurrentValue(bean);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_unwrappedPropertyHandler != null) {\n            return deserializeWithUnwrapped(p, ctxt, bean);\n        }\n        if (_externalTypeIdHandler != null) {\n            return deserializeWithExternalTypeId(p, ctxt, bean);\n        }\n        String propName;\n\n        \n        if (p.isExpectedStartObjectToken()) {\n            propName = p.nextFieldName();\n            if (propName == null) {\n                return bean;\n            }\n        } else {\n            if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n                propName = p.getCurrentName();\n            } else {\n                return bean;\n            }\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        do {\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n\n            if (prop != null) { \n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        } while ((propName = p.nextFieldName()) != null);\n        return bean;\n    }\n\n    \n\n    \n    private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException {\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        \n        p.setCurrentValue(bean);\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                SettableBeanProperty prop = _beanProperties.find(propName);\n\n                if (prop != null) { \n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (_objectIdReader != null && _objectIdReader.maySerializeAsObject()) {\n            if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)\n                    && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {\n                return deserializeFromObjectId(p, ctxt);\n            }\n        }\n        if (_nonStandardCreation) {\n            if (_unwrappedPropertyHandler != null) {\n                return deserializeWithUnwrapped(p, ctxt);\n            }\n            if (_externalTypeIdHandler != null) {\n                return deserializeWithExternalTypeId(p, ctxt);\n            }\n            Object bean = deserializeFromObjectUsingNonDefault(p, ctxt);\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            \n            \n            return bean;\n        }\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        \n        p.setCurrentValue(bean);\n        if (p.canReadObjectId()) {\n            Object id = p.getObjectId();\n            if (id != null) {\n                _handleTypedObjectId(p, ctxt, bean, id);\n            }\n        }\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) { \n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        \n        TokenBuffer unknown = null;\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                if (buffer.assignParameter(creatorProp,\n                        _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapInstantiationProblem(e, ctxt);\n                        bean = null; \n                    }\n                    if (bean == null) {\n                        throw ctxt.instantiationException(_beanType.getRawClass(), \"JSON Creator returned null\");\n                    }\n                    \n                    p.setCurrentValue(bean);\n\n                    \n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        return handlePolymorphic(p, ctxt, bean, unknown);\n                    }\n                    if (unknown != null) { \n                        bean = handleUnknownProperties(ctxt, bean, unknown);\n                    }\n                    \n                    return deserialize(p, ctxt, bean);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n            \n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (unknown == null) {\n                unknown = new TokenBuffer(p);\n            }\n            unknown.writeFieldName(propName);\n            unknown.copyCurrentStructure(p);\n        }\n\n        \n        Object bean;\n        try {\n            bean =  creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            bean = null; \n        }\n        if (unknown != null) {\n            \n            if (bean.getClass() != _beanType.getRawClass()) {\n                return handlePolymorphic(null, ctxt, bean, unknown);\n            }\n            \n            return handleUnknownProperties(ctxt, bean, unknown);\n        }\n        return bean;\n    }\n\n    protected final Object _deserializeWithErrorWrapping(JsonParser p, DeserializationContext ctxt, SettableBeanProperty prop) throws IOException {\n        try {\n            return prop.deserialize(p, ctxt);\n        } catch (Exception e) {\n            wrapAndThrow(e, _beanType.getRawClass(), prop.getName(), ctxt);\n            \n            return null;\n        }\n    }\n\n    \n\n    protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException {\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                \n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    if (!prop.visibleInView(activeView)) {\n                        p.skipChildren();\n                        continue;\n                    }\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n    \n    \n\n    \n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\n        }\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n\n        \n        p.setCurrentValue(bean);\n\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        String propName = p.hasTokenId(JsonTokenId.ID_FIELD_NAME) ? p.getCurrentName() : null;\n\n        for (; propName != null; propName = p.nextFieldName()) {\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            p.nextToken();\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapInstantiationProblem(e, ctxt);\n                        continue; \n                    }\n                    \n                    p.setCurrentValue(bean);\n                    \n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken(); \n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        \n                        \n                        tokens.close();\n                        throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    }\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n            }\n        }\n\n        \n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null; \n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    \n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\n        }\n        return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\n    }\n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n\n        for (JsonToken t = p.getCurrentToken(); t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            t = p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                \n                if (t.isScalarValue()) {\n                    ext.handleTypePropertyValue(p, ctxt, propName, bean);\n                }\n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            if (ext.handlePropertyValue(p, ctxt, propName, bean)) {\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            handleUnknownProperty(p, ctxt, bean, propName);\n        }\n        \n        return ext.complete(p, ctxt, bean);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                \n                \n                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n                    ;\n                } else {\n                    \n                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                        t = p.nextToken(); \n                        Object bean;\n                        try {\n                            bean = creator.build(ctxt, buffer);\n                        } catch (Exception e) {\n                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                            continue; \n                        }\n                        \n                        while (t == JsonToken.FIELD_NAME) {\n                            p.nextToken(); \n                            tokens.copyCurrentStructure(p);\n                            t = p.nextToken();\n                        }\n                        if (bean.getClass() != _beanType.getRawClass()) {\n                            \n                            \n                            throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        }\n                        return ext.complete(p, ctxt, bean);\n                    }\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            \n            if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n\n        \n        try {\n            return ext.complete(p, ctxt, buffer, creator);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null; \n        }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.impl.*;\nimport com.fasterxml.jackson.databind.util.NameTransformer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class BeanDeserializer extends BeanDeserializerBase implements java.io.Serializable { private static final long serialVersionUID = 1L; public BeanDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, HashSet<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) {\n        super(builder, beanDesc, properties, backRefs,\n                ignorableProps, ignoreAllUnknown, hasViews);\n    }\n\n    \n    protected BeanDeserializer(BeanDeserializerBase src) {\n        super(src, src._ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(BeanDeserializerBase src, boolean ignoreAllUnknown) {\n        super(src, ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(BeanDeserializerBase src, NameTransformer unwrapper) {\n        super(src, unwrapper);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, ObjectIdReader oir) {\n        super(src, oir);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, HashSet<String> ignorableProps) {\n        super(src, ignorableProps);\n    }\n\n    @Override\n    public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper) {\n        \n        if (getClass() != BeanDeserializer.class) {\n            return this;\n        }\n        \n        return new BeanDeserializer(this, unwrapper);\n    }\n\n    @Override\n    public BeanDeserializer withObjectIdReader(ObjectIdReader oir) {\n        return new BeanDeserializer(this, oir);\n    }\n\n    @Override\n    public BeanDeserializer withIgnorableProperties(HashSet<String> ignorableProps) {\n        return new BeanDeserializer(this, ignorableProps);\n    }\n\n    @Override\n    protected BeanDeserializerBase asArrayDeserializer() {\n        SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n        return new BeanAsArrayDeserializer(this, props);\n    }\n    \n    \n\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (p.isExpectedStartObjectToken()) {\n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, p.nextToken());\n            }\n            p.nextToken();\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        }\n        JsonToken t = p.getCurrentToken();\n        return _deserializeOther(p, ctxt, t);\n    }\n\n    protected final Object _deserializeOther(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException {\n        \n        switch (t) {\n        case VALUE_STRING:\n            return deserializeFromString(p, ctxt);\n        case VALUE_NUMBER_INT:\n            return deserializeFromNumber(p, ctxt);\n        case VALUE_NUMBER_FLOAT:\n\t    return deserializeFromDouble(p, ctxt);\n        case VALUE_EMBEDDED_OBJECT:\n            return deserializeFromEmbedded(p, ctxt);\n        case VALUE_TRUE:\n        case VALUE_FALSE:\n            return deserializeFromBoolean(p, ctxt);\n        case START_ARRAY:\n            \n            return deserializeFromArray(p, ctxt);\n        case FIELD_NAME:\n        case END_OBJECT: \n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, t);\n            }\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        default:\n            throw ctxt.mappingException(handledType());\n        }\n    }\n\n    protected Object _missingToken(JsonParser p, DeserializationContext ctxt) throws IOException {\n        throw ctxt.endOfInputException(handledType());\n    }\n\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        \n        p.setCurrentValue(bean);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_unwrappedPropertyHandler != null) {\n            return deserializeWithUnwrapped(p, ctxt, bean);\n        }\n        if (_externalTypeIdHandler != null) {\n            return deserializeWithExternalTypeId(p, ctxt, bean);\n        }\n        String propName;\n\n        \n        if (p.isExpectedStartObjectToken()) {\n            propName = p.nextFieldName();\n            if (propName == null) {\n                return bean;\n            }\n        } else {\n            if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n                propName = p.getCurrentName();\n            } else {\n                return bean;\n            }\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        do {\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n\n            if (prop != null) { \n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        } while ((propName = p.nextFieldName()) != null);\n        return bean;\n    }\n\n    \n\n    \n    private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException {\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        \n        p.setCurrentValue(bean);\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                SettableBeanProperty prop = _beanProperties.find(propName);\n\n                if (prop != null) { \n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (_objectIdReader != null && _objectIdReader.maySerializeAsObject()) {\n            if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)\n                    && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {\n                return deserializeFromObjectId(p, ctxt);\n            }\n        }\n        if (_nonStandardCreation) {\n            if (_unwrappedPropertyHandler != null) {\n                return deserializeWithUnwrapped(p, ctxt);\n            }\n            if (_externalTypeIdHandler != null) {\n                return deserializeWithExternalTypeId(p, ctxt);\n            }\n            Object bean = deserializeFromObjectUsingNonDefault(p, ctxt);\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            \n            \n            return bean;\n        }\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        \n        p.setCurrentValue(bean);\n        if (p.canReadObjectId()) {\n            Object id = p.getObjectId();\n            if (id != null) {\n                _handleTypedObjectId(p, ctxt, bean, id);\n            }\n        }\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) { \n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        \n        TokenBuffer unknown = null;\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                if (buffer.assignParameter(creatorProp,\n                        _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapInstantiationProblem(e, ctxt);\n                        bean = null; \n                    }\n                    if (bean == null) {\n                        throw ctxt.instantiationException(_beanType.getRawClass(), \"JSON Creator returned null\");\n                    }\n                    \n                    p.setCurrentValue(bean);\n\n                    \n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        return handlePolymorphic(p, ctxt, bean, unknown);\n                    }\n                    if (unknown != null) { \n                        bean = handleUnknownProperties(ctxt, bean, unknown);\n                    }\n                    \n                    return deserialize(p, ctxt, bean);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n            \n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (unknown == null) {\n                unknown = new TokenBuffer(p);\n            }\n            unknown.writeFieldName(propName);\n            unknown.copyCurrentStructure(p);\n        }\n\n        \n        Object bean;\n        try {\n            bean =  creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            bean = null; \n        }\n        if (unknown != null) {\n            \n            if (bean.getClass() != _beanType.getRawClass()) {\n                return handlePolymorphic(null, ctxt, bean, unknown);\n            }\n            \n            return handleUnknownProperties(ctxt, bean, unknown);\n        }\n        return bean;\n    }\n\n    protected final Object _deserializeWithErrorWrapping(JsonParser p, DeserializationContext ctxt, SettableBeanProperty prop) throws IOException {\n        try {\n            return prop.deserialize(p, ctxt);\n        } catch (Exception e) {\n            wrapAndThrow(e, _beanType.getRawClass(), prop.getName(), ctxt);\n            \n            return null;\n        }\n    }\n\n    \n\n    protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException {\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                \n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    if (!prop.visibleInView(activeView)) {\n                        p.skipChildren();\n                        continue;\n                    }\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n    \n    \n\n    \n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\n        }\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n\n        \n        p.setCurrentValue(bean);\n\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        String propName = p.hasTokenId(JsonTokenId.ID_FIELD_NAME) ? p.getCurrentName() : null;\n\n        for (; propName != null; propName = p.nextFieldName()) {\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            p.nextToken();\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapInstantiationProblem(e, ctxt);\n                        continue; \n                    }\n                    \n                    p.setCurrentValue(bean);\n                    \n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken(); \n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        \n                        \n                        tokens.close();\n                        throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    }\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n            }\n        }\n\n        \n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null; \n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    \n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\n        }\n        return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\n    }\n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n\n        for (JsonToken t = p.getCurrentToken(); t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            t = p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                \n                if (t.isScalarValue()) {\n                    ext.handleTypePropertyValue(p, ctxt, propName, bean);\n                }\n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            if (ext.handlePropertyValue(p, ctxt, propName, bean)) {\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            handleUnknownProperty(p, ctxt, bean, propName);\n        }\n        \n        return ext.complete(p, ctxt, bean);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                \n                \n                if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                    ;\n                } else {\n                    \n                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                        t = p.nextToken(); \n                        Object bean;\n                        try {\n                            bean = creator.build(ctxt, buffer);\n                        } catch (Exception e) {\n                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                            continue; \n                        }\n                        \n                        while (t == JsonToken.FIELD_NAME) {\n                            p.nextToken(); \n                            tokens.copyCurrentStructure(p);\n                            t = p.nextToken();\n                        }\n                        if (bean.getClass() != _beanType.getRawClass()) {\n                            \n                            \n                            throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        }\n                        return ext.complete(p, ctxt, bean);\n                    }\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            \n            if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n\n        \n        try {\n            return ext.complete(p, ctxt, buffer, creator);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null; \n        }\n    }\n}\n",
      "buggy_signatures": [
        "protected BeanDeserializer(BeanDeserializerBase src)",
        "protected BeanDeserializer(BeanDeserializerBase src, boolean ignoreAllUnknown)",
        "protected BeanDeserializer(BeanDeserializerBase src, NameTransformer unwrapper)",
        "public BeanDeserializer(BeanDeserializerBase src, ObjectIdReader oir)",
        "public BeanDeserializer(BeanDeserializerBase src, HashSet<String> ignorableProps)",
        "public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)",
        "public BeanDeserializer withObjectIdReader(ObjectIdReader oir)",
        "public BeanDeserializer withIgnorableProperties(HashSet<String> ignorableProps)",
        "protected BeanDeserializerBase asArrayDeserializer()",
        "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected final Object _deserializeOther(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException",
        "protected Object _missingToken(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException",
        "public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException",
        "protected final Object _deserializeWithErrorWrapping(JsonParser p, DeserializationContext ctxt, SettableBeanProperty prop) throws IOException",
        "protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException"
      ],
      "fixed_signatures": [
        "protected BeanDeserializer(BeanDeserializerBase src)",
        "protected BeanDeserializer(BeanDeserializerBase src, boolean ignoreAllUnknown)",
        "protected BeanDeserializer(BeanDeserializerBase src, NameTransformer unwrapper)",
        "public BeanDeserializer(BeanDeserializerBase src, ObjectIdReader oir)",
        "public BeanDeserializer(BeanDeserializerBase src, HashSet<String> ignorableProps)",
        "public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)",
        "public BeanDeserializer withObjectIdReader(ObjectIdReader oir)",
        "public BeanDeserializer withIgnorableProperties(HashSet<String> ignorableProps)",
        "protected BeanDeserializerBase asArrayDeserializer()",
        "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected final Object _deserializeOther(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException",
        "protected Object _missingToken(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException",
        "public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException",
        "protected final Object _deserializeWithErrorWrapping(JsonParser p, DeserializationContext ctxt, SettableBeanProperty prop) throws IOException",
        "protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException {\n  final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n  final PropertyBasedCreator creator = _propertyBasedCreator;\n  PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n  TokenBuffer tokens = new TokenBuffer(p);\n  tokens.writeStartObject();\n\n  JsonToken t = p.getCurrentToken();\n  for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n  String propName = p.getCurrentName();\n  p.nextToken(); \n  \n  SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n  if (creatorProp != null) {\n  \n  \n  \n  if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n  ;\n  } else {\n  \n  if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n  t = p.nextToken(); \n  Object bean;\n  try {\n  bean = creator.build(ctxt, buffer);\n  } catch (Exception e) {\n  wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n  continue; \n  }\n  \n  while (t == JsonToken.FIELD_NAME) {\n  p.nextToken(); \n  tokens.copyCurrentStructure(p);\n  t = p.nextToken();\n  }\n  if (bean.getClass() != _beanType.getRawClass()) {\n  \n  \n  throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n  }\n  return ext.complete(p, ctxt, bean);\n  }\n  }\n  continue;\n  }\n  \n  if (buffer.readIdProperty(propName)) {\n  continue;\n  }\n  \n  SettableBeanProperty prop = _beanProperties.find(propName);\n  if (prop != null) {\n  buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n  continue;\n  }\n  \n  if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n  continue;\n  }\n  \n  if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n  handleIgnoredProperty(p, ctxt, handledType(), propName);\n  continue;\n  }\n  \n  if (_anySetter != null) {\n  buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n  }\n  }\n\n  \n  try {\n  return ext.complete(p, ctxt, buffer, creator);\n  } catch (Exception e) {\n  wrapInstantiationProblem(e, ctxt);\n  return null; \n  }\n  }",
          "fixed_method": "  protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException {\n  final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n  final PropertyBasedCreator creator = _propertyBasedCreator;\n  PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n  TokenBuffer tokens = new TokenBuffer(p);\n  tokens.writeStartObject();\n\n  JsonToken t = p.getCurrentToken();\n  for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n  String propName = p.getCurrentName();\n  p.nextToken(); \n  \n  SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n  if (creatorProp != null) {\n  \n  \n  \n  if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n  ;\n  } else {\n  \n  if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n  t = p.nextToken(); \n  Object bean;\n  try {\n  bean = creator.build(ctxt, buffer);\n  } catch (Exception e) {\n  wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n  continue; \n  }\n  \n  while (t == JsonToken.FIELD_NAME) {\n  p.nextToken(); \n  tokens.copyCurrentStructure(p);\n  t = p.nextToken();\n  }\n  if (bean.getClass() != _beanType.getRawClass()) {\n  \n  \n  throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n  }\n  return ext.complete(p, ctxt, bean);\n  }\n  }\n  continue;\n  }\n  \n  if (buffer.readIdProperty(propName)) {\n  continue;\n  }\n  \n  SettableBeanProperty prop = _beanProperties.find(propName);\n  if (prop != null) {\n  buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n  continue;\n  }\n  \n  if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n  continue;\n  }\n  \n  if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n  handleIgnoredProperty(p, ctxt, handledType(), propName);\n  continue;\n  }\n  \n  if (_anySetter != null) {\n  buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n  }\n  }\n\n  \n  try {\n  return ext.complete(p, ctxt, buffer, creator);\n  } catch (Exception e) {\n  wrapInstantiationProblem(e, ctxt);\n  return null; \n  }\n  }",
          "diff": [
            "@@ -791,7 +791,7 @@",
            "                 // first: let's check to see if this might be part of value with external type id:\n",
            "                 // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,\n",
            "                 //   since it is not the bean\n",
            "-                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n",
            "+                if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n",
            "                     ;\n",
            "                 } else {\n",
            "                     // Last creator property to set?\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
