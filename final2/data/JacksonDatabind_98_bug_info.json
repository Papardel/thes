{
  "bug_id": "98",
  "failed_tests": {
    "com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdWithEnum1328Test": [
      {
        "methodName": "testExample",
        "error": "com.fasterxml.jackson.databind.exc.InvalidDefinitionException",
        "message": "Cannot construct instance of `com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdWithEnum1328Test$AnimalAndType`, problem: argument type mismatch",
        "fail_line": "            .readValue(json);",
        "test_source": "  public void testExample() throws Exception {\n  ObjectMapper mapper = new ObjectMapper();\n  \n  String json = mapper.writerWithDefaultPrettyPrinter()\n  .writeValueAsString(Arrays.asList(new AnimalAndType(AnimalType.Dog, new Dog())));\n  List<AnimalAndType> list = mapper.readerFor(new TypeReference<List<AnimalAndType>>() { })\n  .readValue(json);\n  assertNotNull(list);\n  }",
        "stack": [
          "InvalidDefinitionException.from line 67, DeserializationContext.instantiationException line 1601, StdValueInstantiator.wrapAsJsonMappingException line 484, StdValueInstantiator.rewrapCtorProblem line 503, StdValueInstantiator.createFromObjectWith line 285, ValueInstantiator.createFromObjectWith line 229, PropertyBasedCreator.build line 195, ExternalTypeHandler.complete line 302, BeanDeserializer.deserializeUsingPropertyBasedWithExternalTypeId line 994, BeanDeserializer.deserializeWithExternalTypeId line 846, BeanDeserializer.deserializeFromObject line 324, BeanDeserializer.deserialize line 159, CollectionDeserializer.deserialize line 286, CollectionDeserializer.deserialize line 245, CollectionDeserializer.deserialize line 27, ObjectReader._bindAndClose line 1611, ObjectReader.readValue line 1219, ExternalTypeIdWithEnum1328Test.testExample line 88, AnnotatedConstructor.call line 124, StdValueInstantiator.createFromObjectWith line 283"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class ExternalTypeHandler { private final JavaType _beanType; private final ExtTypedProperty[] _properties; private final Map<String, Object> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(JavaType beanType, ExtTypedProperty[] properties, Map<String, Object> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens) {\n        _beanType = beanType;\n        _properties = properties;\n        _nameToPropertyIndex = nameToPropertyIndex;\n        _typeIds = typeIds;\n        _tokens = tokens;\n    }\n\n    protected ExternalTypeHandler(ExternalTypeHandler h) {\n        _beanType = h._beanType;\n        _properties = h._properties;\n        _nameToPropertyIndex = h._nameToPropertyIndex;\n        int len = _properties.length;\n        _typeIds = new String[len];\n        _tokens = new TokenBuffer[len];\n    }\n\n    \n    public static Builder builder(JavaType beanType) {\n        return new Builder(beanType);\n    }\n\n    \n    public ExternalTypeHandler start() {\n        return new ExternalTypeHandler(this);\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Object ob = _nameToPropertyIndex.get(propName);\n        if (ob == null) {\n            return false;\n        }\n        final String typeId = p.getText();\n        \n        if (ob instanceof List<?>) {\n            boolean result = false;\n            for (Integer index : (List<Integer>) ob) {\n                if (_handleTypePropertyValue(p, ctxt, propName, bean,\n                        typeId, index.intValue())) {\n                    result = true;\n                }\n            }\n            return result;\n        }\n        return _handleTypePropertyValue(p, ctxt, propName, bean,\n                typeId, ((Integer) ob).intValue());\n    }\n\n    private final boolean _handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean, String typeId, int index) throws IOException {\n        ExtTypedProperty prop = _properties[index];\n        if (!prop.hasTypePropertyName(propName)) { \n            return false;\n        }\n        \n        boolean canDeserialize = (bean != null) && (_tokens[index] != null);\n        \n        if (canDeserialize) {\n            _deserializeAndSet(p, ctxt, bean, index, typeId);\n            \n            _tokens[index] = null;\n        } else {\n            _typeIds[index] = typeId;\n        }\n        return true;\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Object ob = _nameToPropertyIndex.get(propName);\n        if (ob == null) {\n            return false;\n        }\n        \n        if (ob instanceof List<?>) {\n            Iterator<Integer> it = ((List<Integer>) ob).iterator();\n            Integer index = it.next();\n\n            ExtTypedProperty prop = _properties[index];\n            \n            \n            if (prop.hasTypePropertyName(propName)) {\n                String typeId = p.getText();\n                p.skipChildren();\n                _typeIds[index] = typeId;\n                while (it.hasNext()) {\n                    _typeIds[it.next()] = typeId;\n                }\n            } else {\n                @SuppressWarnings(\"resource\")\n                TokenBuffer tokens = new TokenBuffer(p, ctxt);\n                tokens.copyCurrentStructure(p);\n                _tokens[index] = tokens;\n                while (it.hasNext()) {\n                    _tokens[it.next()] = tokens;\n                }\n            }\n            return true;\n        }\n\n        \n        \n        int index = ((Integer) ob).intValue();\n        ExtTypedProperty prop = _properties[index];\n        boolean canDeserialize;\n        if (prop.hasTypePropertyName(propName)) {\n            _typeIds[index] = p.getText();\n            p.skipChildren();\n            canDeserialize = (bean != null) && (_tokens[index] != null);\n        } else {\n            @SuppressWarnings(\"resource\")\n            TokenBuffer tokens = new TokenBuffer(p, ctxt);\n            tokens.copyCurrentStructure(p);\n            _tokens[index] = tokens;\n            canDeserialize = (bean != null) && (_typeIds[index] != null);\n        }\n        \n        \n        if (canDeserialize) {\n            String typeId = _typeIds[index];\n            \n            _typeIds[index] = null;\n            _deserializeAndSet(p, ctxt, bean, index, typeId);\n            _tokens[index] = null;\n        }\n        return true;\n    }\n\n    \n    @SuppressWarnings(\"resource\")\n    public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        for (int i = 0, len = _properties.length; i < len; ++i) {\n            String typeId = _typeIds[i];\n            if (typeId == null) {\n                TokenBuffer tokens = _tokens[i];\n                \n                \n                if (tokens == null) {\n                    continue;\n                }\n                \n                \n                JsonToken t = tokens.firstToken();\n                if (t.isScalarValue()) { \n                    JsonParser buffered = tokens.asParser(p);\n                    buffered.nextToken();\n                    SettableBeanProperty extProp = _properties[i].getProperty();\n                    Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType());\n                    if (result != null) {\n                        extProp.set(bean, result);\n                        continue;\n                    }\n                    \n                    if (!_properties[i].hasDefaultType()) {\n                        ctxt.reportInputMismatch(bean.getClass(),\n                                \"Missing external type id property '%s'\",\n                                _properties[i].getTypePropertyName());                                \n                    } else  {\n                        typeId = _properties[i].getDefaultTypeId();\n                    }\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = _properties[i].getProperty();\n\n                if(prop.isRequired() ||\n                        ctxt.isEnabled(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY)) {\n                    ctxt.reportInputMismatch(bean.getClass(),\n                            \"Missing property '%s' for external type id '%s'\",\n                            prop.getName(), _properties[i].getTypePropertyName());\n                }\n                return bean;\n            }\n            _deserializeAndSet(p, ctxt, bean, i, typeId);\n        }\n        return bean;\n    }\n\n    \n    public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException {\n        \n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            final ExtTypedProperty extProp = _properties[i];\n            if (typeId == null) {\n                \n                if (_tokens[i] == null) {\n                    continue;\n                }\n                \n                \n                if (!extProp.hasDefaultType()) {\n                    ctxt.reportInputMismatch(_beanType,\n                            \"Missing external type id property '%s'\",\n                            extProp.getTypePropertyName());\n                } else {\n                    typeId = extProp.getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = extProp.getProperty();\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            values[i] = _deserialize(p, ctxt, i, typeId);\n\n            final SettableBeanProperty prop = extProp.getProperty();\n            \n            if (prop.getCreatorIndex() >= 0) {\n                buffer.assignParameter(prop, values[i]);\n\n                \n                SettableBeanProperty typeProp = extProp.getTypeProperty();\n                \n                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                    \n                    \n                    buffer.assignParameter(typeProp, typeId);\n                }\n            }\n        }\n        Object bean = creator.build(ctxt, buffer);\n        \n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (prop.getCreatorIndex() < 0) {\n                prop.set(bean, values[i]);\n            }\n        }\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException {\n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        if (t == JsonToken.VALUE_NULL) {\n            return null;\n        }\n        TokenBuffer merged = new TokenBuffer(p, ctxt);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        return _properties[index].getProperty().deserialize(mp, ctxt);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException {\n        \n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        if (t == JsonToken.VALUE_NULL) {\n            _properties[index].getProperty().set(bean, null);\n            return;\n        }\n        TokenBuffer merged = new TokenBuffer(p, ctxt);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n\n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean);\n    }\n\n    \n    \n    public static class Builder { private final JavaType _beanType; private final List<ExtTypedProperty> _properties = new ArrayList<>(); private final Map<String, Object> _nameToPropertyIndex = new HashMap<>(); protected Builder(JavaType t) {\n            _beanType = t;\n        }\n\n        public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            Integer index = _properties.size();\n            _properties.add(new ExtTypedProperty(property, typeDeser));\n            _addPropertyIndex(property.getName(), index);\n            _addPropertyIndex(typeDeser.getPropertyName(), index);\n        }\n\n        private void _addPropertyIndex(String name, Integer index) {\n            Object ob = _nameToPropertyIndex.get(name);\n            if (ob == null) {\n                _nameToPropertyIndex.put(name, index);\n            } else if (ob instanceof List<?>) {\n                @SuppressWarnings(\"unchecked\")\n                List<Object> list = (List<Object>) ob;\n                list.add(index);\n            } else {\n                List<Object> list = new LinkedList<>();\n                list.add(ob);\n                list.add(index);\n                _nameToPropertyIndex.put(name, list);\n            }\n        }\n        \n        \n        public ExternalTypeHandler build(BeanPropertyMap otherProps) {\n            \n            final int len = _properties.size();\n            ExtTypedProperty[] extProps = new ExtTypedProperty[len];\n            for (int i = 0; i < len; ++i) {\n                ExtTypedProperty extProp = _properties.get(i);\n                String typePropId = extProp.getTypePropertyName();\n                SettableBeanProperty typeProp = otherProps.find(typePropId);\n                if (typeProp != null) {\n                    extProp.linkTypeProperty(typeProp);\n                }\n                extProps[i] = extProp;\n            }\n            return new ExternalTypeHandler(_beanType, extProps, _nameToPropertyIndex,\n                    null, null);\n        }\n    }\n\n    private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            _property = property;\n            _typeDeserializer = typeDeser;\n            _typePropertyName = typeDeser.getPropertyName();\n        }\n\n        \n        public void linkTypeProperty(SettableBeanProperty p) {\n            _typeProperty = p;\n        }\n\n        public boolean hasTypePropertyName(String n) {\n            return n.equals(_typePropertyName);\n        }\n\n        public boolean hasDefaultType() {\n            return _typeDeserializer.getDefaultImpl() != null;\n        }\n\n        \n        public String getDefaultTypeId() {\n            Class<?> defaultType = _typeDeserializer.getDefaultImpl();\n            if (defaultType == null) {\n                return null;\n            }\n            return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType);\n        }\n\n        public String getTypePropertyName() { return _typePropertyName; }\n\n        public SettableBeanProperty getProperty() {\n            return _property;\n        }\n\n        \n        public SettableBeanProperty getTypeProperty() {\n            return _typeProperty;\n        }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class ExternalTypeHandler { private final JavaType _beanType; private final ExtTypedProperty[] _properties; private final Map<String, Object> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(JavaType beanType, ExtTypedProperty[] properties, Map<String, Object> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens) {\n        _beanType = beanType;\n        _properties = properties;\n        _nameToPropertyIndex = nameToPropertyIndex;\n        _typeIds = typeIds;\n        _tokens = tokens;\n    }\n\n    protected ExternalTypeHandler(ExternalTypeHandler h) {\n        _beanType = h._beanType;\n        _properties = h._properties;\n        _nameToPropertyIndex = h._nameToPropertyIndex;\n        int len = _properties.length;\n        _typeIds = new String[len];\n        _tokens = new TokenBuffer[len];\n    }\n\n    \n    public static Builder builder(JavaType beanType) {\n        return new Builder(beanType);\n    }\n\n    \n    public ExternalTypeHandler start() {\n        return new ExternalTypeHandler(this);\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Object ob = _nameToPropertyIndex.get(propName);\n        if (ob == null) {\n            return false;\n        }\n        final String typeId = p.getText();\n        \n        if (ob instanceof List<?>) {\n            boolean result = false;\n            for (Integer index : (List<Integer>) ob) {\n                if (_handleTypePropertyValue(p, ctxt, propName, bean,\n                        typeId, index.intValue())) {\n                    result = true;\n                }\n            }\n            return result;\n        }\n        return _handleTypePropertyValue(p, ctxt, propName, bean,\n                typeId, ((Integer) ob).intValue());\n    }\n\n    private final boolean _handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean, String typeId, int index) throws IOException {\n        ExtTypedProperty prop = _properties[index];\n        if (!prop.hasTypePropertyName(propName)) { \n            return false;\n        }\n        \n        boolean canDeserialize = (bean != null) && (_tokens[index] != null);\n        \n        if (canDeserialize) {\n            _deserializeAndSet(p, ctxt, bean, index, typeId);\n            \n            _tokens[index] = null;\n        } else {\n            _typeIds[index] = typeId;\n        }\n        return true;\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Object ob = _nameToPropertyIndex.get(propName);\n        if (ob == null) {\n            return false;\n        }\n        \n        if (ob instanceof List<?>) {\n            Iterator<Integer> it = ((List<Integer>) ob).iterator();\n            Integer index = it.next();\n\n            ExtTypedProperty prop = _properties[index];\n            \n            \n            if (prop.hasTypePropertyName(propName)) {\n                String typeId = p.getText();\n                p.skipChildren();\n                _typeIds[index] = typeId;\n                while (it.hasNext()) {\n                    _typeIds[it.next()] = typeId;\n                }\n            } else {\n                @SuppressWarnings(\"resource\")\n                TokenBuffer tokens = new TokenBuffer(p, ctxt);\n                tokens.copyCurrentStructure(p);\n                _tokens[index] = tokens;\n                while (it.hasNext()) {\n                    _tokens[it.next()] = tokens;\n                }\n            }\n            return true;\n        }\n\n        \n        \n        int index = ((Integer) ob).intValue();\n        ExtTypedProperty prop = _properties[index];\n        boolean canDeserialize;\n        if (prop.hasTypePropertyName(propName)) {\n            _typeIds[index] = p.getText();\n            p.skipChildren();\n            canDeserialize = (bean != null) && (_tokens[index] != null);\n        } else {\n            @SuppressWarnings(\"resource\")\n            TokenBuffer tokens = new TokenBuffer(p, ctxt);\n            tokens.copyCurrentStructure(p);\n            _tokens[index] = tokens;\n            canDeserialize = (bean != null) && (_typeIds[index] != null);\n        }\n        \n        \n        if (canDeserialize) {\n            String typeId = _typeIds[index];\n            \n            _typeIds[index] = null;\n            _deserializeAndSet(p, ctxt, bean, index, typeId);\n            _tokens[index] = null;\n        }\n        return true;\n    }\n\n    \n    @SuppressWarnings(\"resource\")\n    public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        for (int i = 0, len = _properties.length; i < len; ++i) {\n            String typeId = _typeIds[i];\n            if (typeId == null) {\n                TokenBuffer tokens = _tokens[i];\n                \n                \n                if (tokens == null) {\n                    continue;\n                }\n                \n                \n                JsonToken t = tokens.firstToken();\n                if (t.isScalarValue()) { \n                    JsonParser buffered = tokens.asParser(p);\n                    buffered.nextToken();\n                    SettableBeanProperty extProp = _properties[i].getProperty();\n                    Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType());\n                    if (result != null) {\n                        extProp.set(bean, result);\n                        continue;\n                    }\n                    \n                    if (!_properties[i].hasDefaultType()) {\n                        ctxt.reportInputMismatch(bean.getClass(),\n                                \"Missing external type id property '%s'\",\n                                _properties[i].getTypePropertyName());                                \n                    } else  {\n                        typeId = _properties[i].getDefaultTypeId();\n                    }\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = _properties[i].getProperty();\n\n                if(prop.isRequired() ||\n                        ctxt.isEnabled(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY)) {\n                    ctxt.reportInputMismatch(bean.getClass(),\n                            \"Missing property '%s' for external type id '%s'\",\n                            prop.getName(), _properties[i].getTypePropertyName());\n                }\n                return bean;\n            }\n            _deserializeAndSet(p, ctxt, bean, i, typeId);\n        }\n        return bean;\n    }\n\n    \n    public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException {\n        \n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            final ExtTypedProperty extProp = _properties[i];\n            if (typeId == null) {\n                \n                if (_tokens[i] == null) {\n                    continue;\n                }\n                \n                \n                if (!extProp.hasDefaultType()) {\n                    ctxt.reportInputMismatch(_beanType,\n                            \"Missing external type id property '%s'\",\n                            extProp.getTypePropertyName());\n                } else {\n                    typeId = extProp.getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = extProp.getProperty();\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            values[i] = _deserialize(p, ctxt, i, typeId);\n\n            final SettableBeanProperty prop = extProp.getProperty();\n            \n            if (prop.getCreatorIndex() >= 0) {\n                buffer.assignParameter(prop, values[i]);\n\n                \n                SettableBeanProperty typeProp = extProp.getTypeProperty();\n                \n                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                    \n                    \n                    final Object v;\n                    if (typeProp.getType().hasRawClass(String.class)) {\n                        v = typeId;\n                    } else {\n                        TokenBuffer tb = new TokenBuffer(p, ctxt);\n                        tb.writeString(typeId);\n                        v = typeProp.getValueDeserializer().deserialize(tb.asParserOnFirstToken(), ctxt);\n                        tb.close();\n                    }\n                    buffer.assignParameter(typeProp, v);\n                }\n            }\n        }\n        Object bean = creator.build(ctxt, buffer);\n        \n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (prop.getCreatorIndex() < 0) {\n                prop.set(bean, values[i]);\n            }\n        }\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException {\n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        if (t == JsonToken.VALUE_NULL) {\n            return null;\n        }\n        TokenBuffer merged = new TokenBuffer(p, ctxt);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        return _properties[index].getProperty().deserialize(mp, ctxt);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException {\n        \n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        if (t == JsonToken.VALUE_NULL) {\n            _properties[index].getProperty().set(bean, null);\n            return;\n        }\n        TokenBuffer merged = new TokenBuffer(p, ctxt);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n\n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean);\n    }\n\n    \n    \n    public static class Builder { private final JavaType _beanType; private final List<ExtTypedProperty> _properties = new ArrayList<>(); private final Map<String, Object> _nameToPropertyIndex = new HashMap<>(); protected Builder(JavaType t) {\n            _beanType = t;\n        }\n\n        public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            Integer index = _properties.size();\n            _properties.add(new ExtTypedProperty(property, typeDeser));\n            _addPropertyIndex(property.getName(), index);\n            _addPropertyIndex(typeDeser.getPropertyName(), index);\n        }\n\n        private void _addPropertyIndex(String name, Integer index) {\n            Object ob = _nameToPropertyIndex.get(name);\n            if (ob == null) {\n                _nameToPropertyIndex.put(name, index);\n            } else if (ob instanceof List<?>) {\n                @SuppressWarnings(\"unchecked\")\n                List<Object> list = (List<Object>) ob;\n                list.add(index);\n            } else {\n                List<Object> list = new LinkedList<>();\n                list.add(ob);\n                list.add(index);\n                _nameToPropertyIndex.put(name, list);\n            }\n        }\n        \n        \n        public ExternalTypeHandler build(BeanPropertyMap otherProps) {\n            \n            final int len = _properties.size();\n            ExtTypedProperty[] extProps = new ExtTypedProperty[len];\n            for (int i = 0; i < len; ++i) {\n                ExtTypedProperty extProp = _properties.get(i);\n                String typePropId = extProp.getTypePropertyName();\n                SettableBeanProperty typeProp = otherProps.find(typePropId);\n                if (typeProp != null) {\n                    extProp.linkTypeProperty(typeProp);\n                }\n                extProps[i] = extProp;\n            }\n            return new ExternalTypeHandler(_beanType, extProps, _nameToPropertyIndex,\n                    null, null);\n        }\n    }\n\n    private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            _property = property;\n            _typeDeserializer = typeDeser;\n            _typePropertyName = typeDeser.getPropertyName();\n        }\n\n        \n        public void linkTypeProperty(SettableBeanProperty p) {\n            _typeProperty = p;\n        }\n\n        public boolean hasTypePropertyName(String n) {\n            return n.equals(_typePropertyName);\n        }\n\n        public boolean hasDefaultType() {\n            return _typeDeserializer.getDefaultImpl() != null;\n        }\n\n        \n        public String getDefaultTypeId() {\n            Class<?> defaultType = _typeDeserializer.getDefaultImpl();\n            if (defaultType == null) {\n                return null;\n            }\n            return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType);\n        }\n\n        public String getTypePropertyName() { return _typePropertyName; }\n\n        public SettableBeanProperty getProperty() {\n            return _property;\n        }\n\n        \n        public SettableBeanProperty getTypeProperty() {\n            return _typeProperty;\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public class ExternalTypeHandler { private final JavaType _beanType; private final ExtTypedProperty[] _properties; private final Map<String, Object> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(JavaType beanType, ExtTypedProperty[] properties, Map<String, Object> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens)",
        "protected ExternalTypeHandler(ExternalTypeHandler h)",
        "public static Builder builder(JavaType beanType)",
        "public ExternalTypeHandler start()",
        "public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "private final boolean _handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean, String typeId, int index) throws IOException",
        "public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException",
        "protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException",
        "protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException",
        "public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser)",
        "private void _addPropertyIndex(String name, Integer index)",
        "public ExternalTypeHandler build(BeanPropertyMap otherProps)",
        "private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser)",
        "public void linkTypeProperty(SettableBeanProperty p)",
        "public boolean hasTypePropertyName(String n)",
        "public boolean hasDefaultType()",
        "public String getDefaultTypeId()",
        "public String getTypePropertyName()",
        "public SettableBeanProperty getProperty()",
        "public SettableBeanProperty getTypeProperty()"
      ],
      "fixed_signatures": [
        "public class ExternalTypeHandler { private final JavaType _beanType; private final ExtTypedProperty[] _properties; private final Map<String, Object> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(JavaType beanType, ExtTypedProperty[] properties, Map<String, Object> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens)",
        "protected ExternalTypeHandler(ExternalTypeHandler h)",
        "public static Builder builder(JavaType beanType)",
        "public ExternalTypeHandler start()",
        "public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "private final boolean _handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean, String typeId, int index) throws IOException",
        "public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException",
        "protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException",
        "protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException",
        "public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser)",
        "private void _addPropertyIndex(String name, Integer index)",
        "public ExternalTypeHandler build(BeanPropertyMap otherProps)",
        "private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser)",
        "public void linkTypeProperty(SettableBeanProperty p)",
        "public boolean hasTypePropertyName(String n)",
        "public boolean hasDefaultType()",
        "public String getDefaultTypeId()",
        "public String getTypePropertyName()",
        "public SettableBeanProperty getProperty()",
        "public SettableBeanProperty getTypeProperty()"
      ],
      "methods": [
        {
          "buggy_method": "  public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException {\n  \n  final int len = _properties.length;\n  Object[] values = new Object[len];\n  for (int i = 0; i < len; ++i) {\n  String typeId = _typeIds[i];\n  final ExtTypedProperty extProp = _properties[i];\n  if (typeId == null) {\n  \n  if (_tokens[i] == null) {\n  continue;\n  }\n  \n  \n  if (!extProp.hasDefaultType()) {\n  ctxt.reportInputMismatch(_beanType,\n  \"Missing external type id property '%s'\",\n  extProp.getTypePropertyName());\n  } else {\n  typeId = extProp.getDefaultTypeId();\n  }\n  } else if (_tokens[i] == null) {\n  SettableBeanProperty prop = extProp.getProperty();\n  ctxt.reportInputMismatch(_beanType,\n  \"Missing property '%s' for external type id '%s'\",\n  prop.getName(), _properties[i].getTypePropertyName());\n  }\n  values[i] = _deserialize(p, ctxt, i, typeId);\n\n  final SettableBeanProperty prop = extProp.getProperty();\n  \n  if (prop.getCreatorIndex() >= 0) {\n  buffer.assignParameter(prop, values[i]);\n\n  \n  SettableBeanProperty typeProp = extProp.getTypeProperty();\n  \n  if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n  \n  \n  buffer.assignParameter(typeProp, typeId);\n  }\n  }\n  }\n  Object bean = creator.build(ctxt, buffer);\n  \n  for (int i = 0; i < len; ++i) {\n  SettableBeanProperty prop = _properties[i].getProperty();\n  if (prop.getCreatorIndex() < 0) {\n  prop.set(bean, values[i]);\n  }\n  }\n  return bean;\n  }",
          "fixed_method": "  public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException {\n  \n  final int len = _properties.length;\n  Object[] values = new Object[len];\n  for (int i = 0; i < len; ++i) {\n  String typeId = _typeIds[i];\n  final ExtTypedProperty extProp = _properties[i];\n  if (typeId == null) {\n  \n  if (_tokens[i] == null) {\n  continue;\n  }\n  \n  \n  if (!extProp.hasDefaultType()) {\n  ctxt.reportInputMismatch(_beanType,\n  \"Missing external type id property '%s'\",\n  extProp.getTypePropertyName());\n  } else {\n  typeId = extProp.getDefaultTypeId();\n  }\n  } else if (_tokens[i] == null) {\n  SettableBeanProperty prop = extProp.getProperty();\n  ctxt.reportInputMismatch(_beanType,\n  \"Missing property '%s' for external type id '%s'\",\n  prop.getName(), _properties[i].getTypePropertyName());\n  }\n  values[i] = _deserialize(p, ctxt, i, typeId);\n\n  final SettableBeanProperty prop = extProp.getProperty();\n  \n  if (prop.getCreatorIndex() >= 0) {\n  buffer.assignParameter(prop, values[i]);\n\n  \n  SettableBeanProperty typeProp = extProp.getTypeProperty();\n  \n  if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n  \n  \n  final Object v;\n  if (typeProp.getType().hasRawClass(String.class)) {\n  v = typeId;\n  } else {\n  TokenBuffer tb = new TokenBuffer(p, ctxt);\n  tb.writeString(typeId);\n  v = typeProp.getValueDeserializer().deserialize(tb.asParserOnFirstToken(), ctxt);\n  tb.close();\n  }\n  buffer.assignParameter(typeProp, v);\n  }\n  }\n  }\n  Object bean = creator.build(ctxt, buffer);\n  \n  for (int i = 0; i < len; ++i) {\n  SettableBeanProperty prop = _properties[i].getProperty();\n  if (prop.getCreatorIndex() < 0) {\n  prop.set(bean, values[i]);\n  }\n  }\n  return bean;\n  }",
          "diff": [
            "@@ -295,7 +295,16 @@",
            "                 if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n",
            "                     // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to\n",
            "                     //    apply deserializer... fun fun.\n",
            "-                    buffer.assignParameter(typeProp, typeId);\n",
            "+                    final Object v;\n",
            "+                    if (typeProp.getType().hasRawClass(String.class)) {\n",
            "+                        v = typeId;\n",
            "+                    } else {\n",
            "+                        TokenBuffer tb = new TokenBuffer(p, ctxt);\n",
            "+                        tb.writeString(typeId);\n",
            "+                        v = typeProp.getValueDeserializer().deserialize(tb.asParserOnFirstToken(), ctxt);\n",
            "+                        tb.close();\n",
            "+                    }\n",
            "+                    buffer.assignParameter(typeProp, v);\n",
            "                 }\n",
            "             }\n",
            "         }\n"
          ],
          "changed_lines": 11
        }
      ]
    }
  ]
}
