{
  "bug_id": "23",
  "failed_tests": {
    "org.mockitousage.stubbing.DeepStubsSerializableTest": [
      {
        "methodName": "should_serialize_and_deserialize_mock_created_by_deep_stubs",
        "error": "java.io.NotSerializableException",
        "message": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs$2",
        "fail_line": "        Object o = SimpleSerializationUtil.serializeAndBack(sampleClass);",
        "test_source": "  public void should_serialize_and_deserialize_mock_created_by_deep_stubs() throws Exception {\n  // given\n  SampleClass sampleClass = mock(SampleClass.class, withSettings().defaultAnswer(Mockito.RETURNS_DEEP_STUBS).serializable());\n  when(sampleClass.getSample().isSth()).thenReturn(STUBBED_BOOLEAN_VALUE);\n  when(sampleClass.getSample().getNumber()).thenReturn(STUBBED_INTEGER_VALUE);\n\n  // when\n  Object o = SimpleSerializationUtil.serializeAndBack(sampleClass);\n\n  // then\n  assertThat(o).isInstanceOf(SampleClass.class);\n  SampleClass deserializedSample = (SampleClass) o;\n  assertThat(deserializedSample.getSample().isSth()).isEqualTo(STUBBED_BOOLEAN_VALUE);\n  assertThat(deserializedSample.getSample().getNumber()).isEqualTo(STUBBED_INTEGER_VALUE);\n  }",
        "stack": [
          "SimpleSerializationUtil.serializeMock line 34, SimpleSerializationUtil.serializeAndBack line 16, DeepStubsSerializableTest.should_serialize_and_deserialize_mock_created_by_deep_stubs line 25"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
      "buggy_full_code": "\npackage org.mockito.internal.stubbing.defaultanswers;\n\nimport static org.mockito.Mockito.*; import java.io.Serializable; import org.mockito.MockSettings; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private MockitoCore mockitoCore = new MockitoCore(); private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable {\n        GenericMetadataSupport returnTypeGenericMetadata =\n                actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n\n        Class<?> rawType = returnTypeGenericMetadata.rawType();\n        if (!mockitoCore.isTypeMockable(rawType)) {\n            return delegate.returnValueFor(rawType);\n        }\n\n        return getMock(invocation, returnTypeGenericMetadata);\n    }\n\n\n\n    private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n    \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n    \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n\n        \n        for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\n    \t\tif(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\n    \t\t\treturn stubbedInvocationMatcher.answer(invocation);\n    \t\t}\n\t\t}\n\n        \n        return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);\n    }\n\n    \n    private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {\n        return mockitoCore.mock(\n                returnTypeGenericMetadata.rawType(),\n                withSettingsUsing(returnTypeGenericMetadata)\n        );\n    }\n\n    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {\n        MockSettings mockSettings =\n                returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?\n                withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n                : withSettings();\n\n        return mockSettings\n                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n    }\n\n    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n        return new ReturnsDeepStubs() {\n            @Override\n            protected GenericMetadataSupport actualParameterizedType(Object mock) {\n                return returnTypeGenericMetadata;\n            }\n        };\n    }\n\n    private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n\n        container.addAnswer(new Answer<Object>() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return mock;\n            }\n        }, false);\n\n        return mock;\n    }\n\t\n\t\t\n\t\n\n    protected GenericMetadataSupport actualParameterizedType(Object mock) {\n        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();\n        return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());\n    }\n}\n",
      "fixed_full_code": "\npackage org.mockito.internal.stubbing.defaultanswers;\n\nimport static org.mockito.Mockito.*; import java.io.Serializable; import org.mockito.MockSettings; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private transient MockitoCore mockitoCore; private transient ReturnsEmptyValues delegate; public Object answer(InvocationOnMock invocation) throws Throwable {\n        GenericMetadataSupport returnTypeGenericMetadata =\n                actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n\n        Class<?> rawType = returnTypeGenericMetadata.rawType();\n        instantiateMockitoCoreIfNeeded();\n        instantiateDelegateIfNeeded();\n        if (!mockitoCore.isTypeMockable(rawType)) {\n            return delegate.returnValueFor(rawType);\n        }\n\n        return getMock(invocation, returnTypeGenericMetadata);\n    }\n\n    private synchronized void instantiateMockitoCoreIfNeeded() {\n        if (mockitoCore == null) {\n            mockitoCore = new MockitoCore();\n        }\n    }\n\n    private synchronized void instantiateDelegateIfNeeded() {\n        if (delegate == null) {\n            delegate = new ReturnsEmptyValues();\n        }\n    }\n\n    private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n    \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n    \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n\n        \n        for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\n    \t\tif(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\n    \t\t\treturn stubbedInvocationMatcher.answer(invocation);\n    \t\t}\n\t\t}\n\n        \n        return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);\n    }\n\n    \n    private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {\n        return mockitoCore.mock(\n                returnTypeGenericMetadata.rawType(),\n                withSettingsUsing(returnTypeGenericMetadata)\n        );\n    }\n\n    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {\n        MockSettings mockSettings =\n                returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?\n                withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n                : withSettings();\n\n        return mockSettings\n\t\t        .serializable()\n                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n    }\n\n    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n        return new ReturnsDeepStubs() {\n            @Override\n            protected GenericMetadataSupport actualParameterizedType(Object mock) {\n                return returnTypeGenericMetadata;\n            }\n        };\n    }\n\n    private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n\n        container.addAnswer(new SerializableAnswer() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return mock;\n            }\n        }, false);\n\n        return mock;\n    }\n\t\n\tabstract class SerializableAnswer implements Answer<Object>, Serializable { } protected GenericMetadataSupport actualParameterizedType(Object mock) {\n        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();\n        return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());\n    }\n}\n",
      "buggy_signatures": [
        "private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable",
        "private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata)",
        "private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata)",
        "private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata)",
        "protected GenericMetadataSupport actualParameterizedType(Object mock)",
        "private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable",
        "public Object answer(InvocationOnMock invocation) throws Throwable",
        "protected GenericMetadataSupport actualParameterizedType(Object mock)"
      ],
      "fixed_signatures": [
        "private synchronized void instantiateMockitoCoreIfNeeded()",
        "private synchronized void instantiateDelegateIfNeeded()",
        "private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable",
        "private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata)",
        "private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata)",
        "private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata)",
        "protected GenericMetadataSupport actualParameterizedType(Object mock)",
        "private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable",
        "public Object answer(InvocationOnMock invocation) throws Throwable",
        "abstract class SerializableAnswer implements Answer<Object>, Serializable { } protected GenericMetadataSupport actualParameterizedType(Object mock)"
      ],
      "methods": [
        {
          "buggy_method": "  public Object answer(InvocationOnMock invocation) throws Throwable {\n  GenericMetadataSupport returnTypeGenericMetadata =\n  actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n\n  Class<?> rawType = returnTypeGenericMetadata.rawType();\n  if (!mockitoCore.isTypeMockable(rawType)) {\n  return delegate.returnValueFor(rawType);\n  }\n\n  return getMock(invocation, returnTypeGenericMetadata);\n  }",
          "fixed_method": "  public Object answer(InvocationOnMock invocation) throws Throwable {\n  GenericMetadataSupport returnTypeGenericMetadata =\n  actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n\n  Class<?> rawType = returnTypeGenericMetadata.rawType();\n  instantiateMockitoCoreIfNeeded();\n  instantiateDelegateIfNeeded();\n  if (!mockitoCore.isTypeMockable(rawType)) {\n  return delegate.returnValueFor(rawType);\n  }\n\n  return getMock(invocation, returnTypeGenericMetadata);\n  }",
          "diff": [
            "@@ -41,14 +41,16 @@",
            "     \n",
            "     private static final long serialVersionUID = -7105341425736035847L;\n",
            " \n",
            "-    private MockitoCore mockitoCore = new MockitoCore();\n",
            "-    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();\n",
            "+    private transient MockitoCore mockitoCore;\n",
            "+    private transient ReturnsEmptyValues delegate;\n",
            " \n",
            "     public Object answer(InvocationOnMock invocation) throws Throwable {\n",
            "         GenericMetadataSupport returnTypeGenericMetadata =\n",
            "                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n",
            " \n",
            "         Class<?> rawType = returnTypeGenericMetadata.rawType();\n",
            "+        instantiateMockitoCoreIfNeeded();\n",
            "+        instantiateDelegateIfNeeded();\n",
            "         if (!mockitoCore.isTypeMockable(rawType)) {\n",
            "             return delegate.returnValueFor(rawType);\n",
            "         }\n",
            "@@ -111,7 +124,7 @@",
            " \n",
            "     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n",
            " \n",
            "-        container.addAnswer(new Answer<Object>() {\n",
            "+        container.addAnswer(new SerializableAnswer() {\n",
            "             public Object answer(InvocationOnMock invocation) throws Throwable {\n",
            "                 return mock;\n",
            "             }\n"
          ],
          "changed_lines": 8
        },
        {
          "buggy_method": "  private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n  \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n  \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n\n  \n  for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\n  \t\tif(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\n  \t\t\treturn stubbedInvocationMatcher.answer(invocation);\n  \t\t}\n\t\t}\n\n  \n  return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);\n  }",
          "fixed_method": "  private synchronized void instantiateMockitoCoreIfNeeded() {\n  if (mockitoCore == null) {\n  mockitoCore = new MockitoCore();\n  }\n  }",
          "diff": [
            "@@ -56,7 +58,17 @@",
            "         return getMock(invocation, returnTypeGenericMetadata);\n",
            "     }\n",
            " \n",
            "+    private synchronized void instantiateMockitoCoreIfNeeded() {\n",
            "+        if (mockitoCore == null) {\n",
            "+            mockitoCore = new MockitoCore();\n",
            "+        }\n",
            "+    }\n",
            " \n",
            "+    private synchronized void instantiateDelegateIfNeeded() {\n",
            "+        if (delegate == null) {\n",
            "+            delegate = new ReturnsEmptyValues();\n",
            "+        }\n",
            "+    }\n",
            " \n",
            "     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n",
            "     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n"
          ],
          "changed_lines": 10
        },
        {
          "buggy_method": "  private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n  return new ReturnsDeepStubs() {\n  @Override\n  protected GenericMetadataSupport actualParameterizedType(Object mock) {\n  return returnTypeGenericMetadata;\n  }\n  };\n  }",
          "fixed_method": "  private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {\n  MockSettings mockSettings =\n  returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?\n  withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n  : withSettings();\n\n  return mockSettings\n\t\t  .serializable()\n  .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n  }",
          "diff": [
            "@@ -97,6 +109,7 @@",
            "                 : withSettings();\n",
            " \n",
            "         return mockSettings\n",
            "+\t\t        .serializable()\n",
            "                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n",
            "     }\n",
            " \n"
          ],
          "changed_lines": 1
        },
        {
          "buggy_method": "  protected GenericMetadataSupport actualParameterizedType(Object mock) {\n  CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();\n  return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());\n  }",
          "fixed_method": "  public Object answer(InvocationOnMock invocation) throws Throwable {\n  return mock;\n  }",
          "diff": [
            "@@ -120,7 +133,9 @@",
            "         return mock;\n",
            "     }\n",
            " \t\n",
            "+\tabstract class SerializableAnswer implements Answer<Object>, Serializable {\n",
            " \t\t\n",
            "+\t}\n",
            " \t\n",
            " \n",
            "     protected GenericMetadataSupport actualParameterizedType(Object mock) {\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
