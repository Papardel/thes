{
  "bug_id": "8",
  "failed_tests": {
    "org.apache.commons.cli.HelpFormatterTest": [
      {
        "methodName": "testPrintWrapped",
        "error": "junit.framework.ComparisonFailure",
        "message": "single line padded text 2 expected:<...TE[-DATE] where DATE[",
        "fail_line": "      assertEquals(\"single line padded text 2\", expected, sb.toString());",
        "test_source": "  public void testPrintWrapped() throws Exception {\n  StringBuffer sb = new StringBuffer();\n  HelpFormatter hf = new HelpFormatter();\n\n  String text = \"This is a test.\";\n  String expected;\n\n  expected = \"This is a\" + hf.getNewLine() + \"test.\";\n  hf.renderWrappedText(sb, 12, 0, text);\n  assertEquals(\"single line text\", expected, sb.toString());\n\n  sb.setLength(0);\n  expected = \"This is a\" + hf.getNewLine() + \"  test.\";\n  hf.renderWrappedText(sb, 12, 4, text);\n  assertEquals(\"single line padded text\", expected, sb.toString());\n\n  text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n  \"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\n\n  sb.setLength(0);\n  expected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" +\n  hf.getNewLine() +\n  \"  form DATE[-DATE] where DATE\" +\n  hf.getNewLine() +\n  \"  has form YYYY[MM[DD]]\";\n  hf.renderWrappedText(sb, 53, 24, text);\n  assertEquals(\"single line padded text 2\", expected, sb.toString());\n\n  text =\n  \"aaaa aaaa aaaa\" + hf.getNewLine() +\n  \"aaaaaa\" + hf.getNewLine() +\n  \"aaaaa\";\n\n  expected = text;\n  sb.setLength(0);\n  hf.renderWrappedText(sb, 16, 0, text);\n  assertEquals(\"multi line text\", expected, sb.toString());\n\n  expected =\n  \"aaaa aaaa aaaa\" + hf.getNewLine() +\n  \"  aaaaaa\" + hf.getNewLine() +\n  \"  aaaaa\";\n  sb.setLength(0);\n  hf.renderWrappedText(sb, 16, 4, text);\n  assertEquals(\"multi-line padded text\", expected, sb.toString());\n  }",
        "stack": [
          "HelpFormatterTest.testPrintWrapped line 96"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/cli/HelpFormatter.java",
      "buggy_full_code": "\npackage org.apache.commons.cli;\n\nimport java.io.PrintWriter;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\n\n\npublic class HelpFormatter { public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \"; public static final String DEFAULT_OPT_PREFIX = \"-\"; public static final String DEFAULT_LONG_OPT_PREFIX = \"--\"; public static final String DEFAULT_ARG_NAME = \"arg\"; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(\"line.separator\"); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; public void setWidth(int width) {\n        this.defaultWidth = width;\n    }\n\n    \n    public int getWidth() {\n        return this.defaultWidth;\n    }\n\n    \n    public void setLeftPadding(int padding) {\n        this.defaultLeftPad = padding;\n    }\n\n    \n    public int getLeftPadding() {\n        return this.defaultLeftPad;\n    }\n\n    \n    public void setDescPadding(int padding) {\n        this.defaultDescPad = padding;\n    }\n\n    \n    public int getDescPadding() {\n        return this.defaultDescPad;\n    }\n\n    \n    public void setSyntaxPrefix(String prefix) {\n        this.defaultSyntaxPrefix = prefix;\n    }\n\n    \n    public String getSyntaxPrefix() {\n        return this.defaultSyntaxPrefix;\n    }\n\n    \n    public void setNewLine(String newline) {\n        this.defaultNewLine = newline;\n    }\n\n    \n    public String getNewLine() {\n        return this.defaultNewLine;\n    }\n\n    \n    public void setOptPrefix(String prefix) {\n        this.defaultOptPrefix = prefix;\n    }\n\n    \n    public String getOptPrefix() {\n        return this.defaultOptPrefix;\n    }\n\n    \n    public void setLongOptPrefix(String prefix) {\n        this.defaultLongOptPrefix = prefix;\n    }\n\n    \n    public String getLongOptPrefix() {\n        return this.defaultLongOptPrefix;\n    }\n\n    \n    public void setArgName(String name) {\n        this.defaultArgName = name;\n    }\n\n    \n    public String getArgName() {\n        return this.defaultArgName;\n    }\n\n\n    \n\n    \n    public void printHelp(String cmdLineSyntax, Options options) {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {\n        printHelp(cmdLineSyntax, header, options, footer, false);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\n        printHelp(defaultWidth, cmdLineSyntax, header, options, footer, \n                  autoUsage);\n    }\n\n    \n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {\n        printHelp(width, cmdLineSyntax, header, options, footer, false);\n    }\n\n    \n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\n        PrintWriter pw = new PrintWriter(System.out);\n\n        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, \n                  defaultDescPad, footer, autoUsage);\n        pw.flush();\n    }\n\n    \n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {\n        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, \n                  footer, false);\n    }\n\n\n    \n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) {\n        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))\n        {\n            throw new IllegalArgumentException(\"cmdLineSyntax not provided\");\n        }\n\n        if (autoUsage)\n        {\n            printUsage(pw, width, cmdLineSyntax, options);\n        }\n        else\n        {\n            printUsage(pw, width, cmdLineSyntax);\n        }\n\n        if ((header != null) && (header.trim().length() > 0))\n        {\n            printWrapped(pw, width, header);\n        }\n\n        printOptions(pw, width, options, leftPad, descPad);\n\n        if ((footer != null) && (footer.trim().length() > 0))\n        {\n            printWrapped(pw, width, footer);\n        }\n    }\n\n    \n    public void printUsage(PrintWriter pw, int width, String app, Options options) {\n        \n        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)\n                                                                 .append(\" \");\n\n        \n        final Collection processedGroups = new ArrayList();\n\n        \n        Option option;\n\n        List optList = new ArrayList(options.getOptions());\n        Collections.sort(optList, new OptionComparator());\n        \n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            \n            option = (Option) i.next();\n\n            \n            OptionGroup group = options.getOptionGroup(option);\n\n            \n            if (group != null)\n            {\n                \n                if (!processedGroups.contains(group))\n                {\n                    \n                    processedGroups.add(group);\n\n\n                    \n                    appendOptionGroup(buff, group);\n                }\n\n                \n                \n            }\n\n            \n            else\n            {\n                appendOption(buff, option, option.isRequired());\n            }\n\n            if (i.hasNext())\n            {\n                buff.append(\" \");\n            }\n        }\n\n\n        \n        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, \n                     buff.toString());\n    }\n\n    \n    private static void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\n        if (!group.isRequired())\n        {\n            buff.append(\"[\");\n        }\n\n        List optList = new ArrayList(group.getOptions());\n        Collections.sort(optList, new OptionComparator());\n        \n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            \n            appendOption(buff, (Option) i.next(), true);\n\n            if (i.hasNext())\n            {\n                buff.append(\" | \");\n            }\n        }\n\n        if (!group.isRequired())\n        {\n            buff.append(\"]\");\n        }\n    }\n\n    \n    private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n        if (!required)\n        {\n            buff.append(\"[\");\n        }\n\n        if (option.getOpt() != null)\n        {\n            buff.append(\"-\").append(option.getOpt());\n        }\n        else\n        {\n            buff.append(\"--\").append(option.getLongOpt());\n        }\n\n        \n        if (option.hasArg() && (option.getArgName() != null))\n        {\n            buff.append(\" <\").append(option.getArgName()).append(\">\");\n        }\n\n        \n        if (!required)\n        {\n            buff.append(\"]\");\n        }\n    }\n\n    \n    public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {\n        int argPos = cmdLineSyntax.indexOf(' ') + 1;\n\n        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, \n                     defaultSyntaxPrefix + cmdLineSyntax);\n    }\n\n    \n    public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) {\n        StringBuffer sb = new StringBuffer();\n\n        renderOptions(sb, width, options, leftPad, descPad);\n        pw.println(sb.toString());\n    }\n\n    \n    public void printWrapped(PrintWriter pw, int width, String text) {\n        printWrapped(pw, width, 0, text);\n    }\n\n    \n    public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) {\n        StringBuffer sb = new StringBuffer(text.length());\n\n        renderWrappedText(sb, width, nextLineTabStop, text);\n        pw.println(sb.toString());\n    }\n\n    \n\n    \n    protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n        final String lpad = createPadding(leftPad);\n        final String dpad = createPadding(descPad);\n\n        \n        \n        \n        \n        int max = 0;\n        StringBuffer optBuf;\n        List prefixList = new ArrayList();\n        Option option;\n        List optList = options.helpOptions();\n\n        Collections.sort(optList, new OptionComparator());\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            option = (Option) i.next();\n            optBuf = new StringBuffer(8);\n\n            if (option.getOpt() == null)\n            {\n                optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix)\n                      .append(option.getLongOpt());\n            }\n            else\n            {\n                optBuf.append(lpad).append(defaultOptPrefix)\n                      .append(option.getOpt());\n\n                if (option.hasLongOpt())\n                {\n                    optBuf.append(',').append(defaultLongOptPrefix)\n                          .append(option.getLongOpt());\n                }\n            }\n\n            if (option.hasArg())\n            {\n                if (option.hasArgName())\n                {\n                    optBuf.append(\" <\").append(option.getArgName()).append(\">\");\n                }\n                else\n                {\n                    optBuf.append(' ');\n                }\n            }\n\n            prefixList.add(optBuf);\n            max = (optBuf.length() > max)       ? optBuf.length() : max;\n        }\n\n        int x = 0;\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            option = (Option) i.next();\n            optBuf = new StringBuffer(prefixList.get(x++).toString());\n\n            if (optBuf.length() < max)\n            {\n                optBuf.append(createPadding(max - optBuf.length()));\n            }\n\n            optBuf.append(dpad);\n\n            int nextLineTabStop = max + descPad;\n\n            if (option.getDescription() != null)\n            {\n                optBuf.append(option.getDescription());\n            }\n\n            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n\n            if (i.hasNext())\n            {\n                sb.append(defaultNewLine);\n            }\n        }\n\n        return sb;\n    }\n\n    \n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        \n        \n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, nextLineTabStop);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n\n    \n    protected int findWrapPos(String text, int width, int startPos) {\n        int pos = -1;\n\n        \n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n        {\n            return pos+1;\n        }\n        else if ((startPos + width) >= text.length())\n        {\n            return -1;\n        }\n\n\n        \n        pos = startPos + width;\n\n        char c;\n\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        \n        if (pos > startPos)\n        {\n            return pos;\n        }\n        \n        \n        \n        pos = startPos + width;\n\n        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))\n        {\n            ++pos;\n        }\n\n        return (pos == text.length())        ? (-1) : pos;\n    }\n\n    \n    protected String createPadding(int len) {\n        StringBuffer sb = new StringBuffer(len);\n\n        for (int i = 0; i < len; ++i)\n        {\n            sb.append(' ');\n        }\n\n        return sb.toString();\n    }\n\n    \n    protected String rtrim(String s) {\n        if ((s == null) || (s.length() == 0))\n        {\n            return s;\n        }\n\n        int pos = s.length();\n\n        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\n        {\n            --pos;\n        }\n\n        return s.substring(0, pos);\n    }\n\n    \n    \n    \n    \n    private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2) {\n            Option opt1 = (Option)o1;\n            Option opt2 = (Option)o2;\n\n            return opt1.getKey().compareToIgnoreCase(opt2.getKey());\n        }\n    }\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.cli;\n\nimport java.io.PrintWriter;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\n\n\npublic class HelpFormatter { public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \"; public static final String DEFAULT_OPT_PREFIX = \"-\"; public static final String DEFAULT_LONG_OPT_PREFIX = \"--\"; public static final String DEFAULT_ARG_NAME = \"arg\"; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(\"line.separator\"); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; public void setWidth(int width) {\n        this.defaultWidth = width;\n    }\n\n    \n    public int getWidth() {\n        return this.defaultWidth;\n    }\n\n    \n    public void setLeftPadding(int padding) {\n        this.defaultLeftPad = padding;\n    }\n\n    \n    public int getLeftPadding() {\n        return this.defaultLeftPad;\n    }\n\n    \n    public void setDescPadding(int padding) {\n        this.defaultDescPad = padding;\n    }\n\n    \n    public int getDescPadding() {\n        return this.defaultDescPad;\n    }\n\n    \n    public void setSyntaxPrefix(String prefix) {\n        this.defaultSyntaxPrefix = prefix;\n    }\n\n    \n    public String getSyntaxPrefix() {\n        return this.defaultSyntaxPrefix;\n    }\n\n    \n    public void setNewLine(String newline) {\n        this.defaultNewLine = newline;\n    }\n\n    \n    public String getNewLine() {\n        return this.defaultNewLine;\n    }\n\n    \n    public void setOptPrefix(String prefix) {\n        this.defaultOptPrefix = prefix;\n    }\n\n    \n    public String getOptPrefix() {\n        return this.defaultOptPrefix;\n    }\n\n    \n    public void setLongOptPrefix(String prefix) {\n        this.defaultLongOptPrefix = prefix;\n    }\n\n    \n    public String getLongOptPrefix() {\n        return this.defaultLongOptPrefix;\n    }\n\n    \n    public void setArgName(String name) {\n        this.defaultArgName = name;\n    }\n\n    \n    public String getArgName() {\n        return this.defaultArgName;\n    }\n\n\n    \n\n    \n    public void printHelp(String cmdLineSyntax, Options options) {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {\n        printHelp(cmdLineSyntax, header, options, footer, false);\n    }\n\n    \n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\n        printHelp(defaultWidth, cmdLineSyntax, header, options, footer, \n                  autoUsage);\n    }\n\n    \n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {\n        printHelp(width, cmdLineSyntax, header, options, footer, false);\n    }\n\n    \n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\n        PrintWriter pw = new PrintWriter(System.out);\n\n        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, \n                  defaultDescPad, footer, autoUsage);\n        pw.flush();\n    }\n\n    \n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {\n        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, \n                  footer, false);\n    }\n\n\n    \n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) {\n        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))\n        {\n            throw new IllegalArgumentException(\"cmdLineSyntax not provided\");\n        }\n\n        if (autoUsage)\n        {\n            printUsage(pw, width, cmdLineSyntax, options);\n        }\n        else\n        {\n            printUsage(pw, width, cmdLineSyntax);\n        }\n\n        if ((header != null) && (header.trim().length() > 0))\n        {\n            printWrapped(pw, width, header);\n        }\n\n        printOptions(pw, width, options, leftPad, descPad);\n\n        if ((footer != null) && (footer.trim().length() > 0))\n        {\n            printWrapped(pw, width, footer);\n        }\n    }\n\n    \n    public void printUsage(PrintWriter pw, int width, String app, Options options) {\n        \n        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)\n                                                                 .append(\" \");\n\n        \n        final Collection processedGroups = new ArrayList();\n\n        \n        Option option;\n\n        List optList = new ArrayList(options.getOptions());\n        Collections.sort(optList, new OptionComparator());\n        \n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            \n            option = (Option) i.next();\n\n            \n            OptionGroup group = options.getOptionGroup(option);\n\n            \n            if (group != null)\n            {\n                \n                if (!processedGroups.contains(group))\n                {\n                    \n                    processedGroups.add(group);\n\n\n                    \n                    appendOptionGroup(buff, group);\n                }\n\n                \n                \n            }\n\n            \n            else\n            {\n                appendOption(buff, option, option.isRequired());\n            }\n\n            if (i.hasNext())\n            {\n                buff.append(\" \");\n            }\n        }\n\n\n        \n        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, \n                     buff.toString());\n    }\n\n    \n    private static void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\n        if (!group.isRequired())\n        {\n            buff.append(\"[\");\n        }\n\n        List optList = new ArrayList(group.getOptions());\n        Collections.sort(optList, new OptionComparator());\n        \n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            \n            appendOption(buff, (Option) i.next(), true);\n\n            if (i.hasNext())\n            {\n                buff.append(\" | \");\n            }\n        }\n\n        if (!group.isRequired())\n        {\n            buff.append(\"]\");\n        }\n    }\n\n    \n    private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n        if (!required)\n        {\n            buff.append(\"[\");\n        }\n\n        if (option.getOpt() != null)\n        {\n            buff.append(\"-\").append(option.getOpt());\n        }\n        else\n        {\n            buff.append(\"--\").append(option.getLongOpt());\n        }\n\n        \n        if (option.hasArg() && (option.getArgName() != null))\n        {\n            buff.append(\" <\").append(option.getArgName()).append(\">\");\n        }\n\n        \n        if (!required)\n        {\n            buff.append(\"]\");\n        }\n    }\n\n    \n    public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {\n        int argPos = cmdLineSyntax.indexOf(' ') + 1;\n\n        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, \n                     defaultSyntaxPrefix + cmdLineSyntax);\n    }\n\n    \n    public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) {\n        StringBuffer sb = new StringBuffer();\n\n        renderOptions(sb, width, options, leftPad, descPad);\n        pw.println(sb.toString());\n    }\n\n    \n    public void printWrapped(PrintWriter pw, int width, String text) {\n        printWrapped(pw, width, 0, text);\n    }\n\n    \n    public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) {\n        StringBuffer sb = new StringBuffer(text.length());\n\n        renderWrappedText(sb, width, nextLineTabStop, text);\n        pw.println(sb.toString());\n    }\n\n    \n\n    \n    protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n        final String lpad = createPadding(leftPad);\n        final String dpad = createPadding(descPad);\n\n        \n        \n        \n        \n        int max = 0;\n        StringBuffer optBuf;\n        List prefixList = new ArrayList();\n        Option option;\n        List optList = options.helpOptions();\n\n        Collections.sort(optList, new OptionComparator());\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            option = (Option) i.next();\n            optBuf = new StringBuffer(8);\n\n            if (option.getOpt() == null)\n            {\n                optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix)\n                      .append(option.getLongOpt());\n            }\n            else\n            {\n                optBuf.append(lpad).append(defaultOptPrefix)\n                      .append(option.getOpt());\n\n                if (option.hasLongOpt())\n                {\n                    optBuf.append(',').append(defaultLongOptPrefix)\n                          .append(option.getLongOpt());\n                }\n            }\n\n            if (option.hasArg())\n            {\n                if (option.hasArgName())\n                {\n                    optBuf.append(\" <\").append(option.getArgName()).append(\">\");\n                }\n                else\n                {\n                    optBuf.append(' ');\n                }\n            }\n\n            prefixList.add(optBuf);\n            max = (optBuf.length() > max)       ? optBuf.length() : max;\n        }\n\n        int x = 0;\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            option = (Option) i.next();\n            optBuf = new StringBuffer(prefixList.get(x++).toString());\n\n            if (optBuf.length() < max)\n            {\n                optBuf.append(createPadding(max - optBuf.length()));\n            }\n\n            optBuf.append(dpad);\n\n            int nextLineTabStop = max + descPad;\n\n            if (option.getDescription() != null)\n            {\n                optBuf.append(option.getDescription());\n            }\n\n            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n\n            if (i.hasNext())\n            {\n                sb.append(defaultNewLine);\n            }\n        }\n\n        return sb;\n    }\n\n    \n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        \n        \n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n\n    \n    protected int findWrapPos(String text, int width, int startPos) {\n        int pos = -1;\n\n        \n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n        {\n            return pos+1;\n        }\n        else if ((startPos + width) >= text.length())\n        {\n            return -1;\n        }\n\n\n        \n        pos = startPos + width;\n\n        char c;\n\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        \n        if (pos > startPos)\n        {\n            return pos;\n        }\n        \n        \n        \n        pos = startPos + width;\n\n        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))\n        {\n            ++pos;\n        }\n\n        return (pos == text.length())        ? (-1) : pos;\n    }\n\n    \n    protected String createPadding(int len) {\n        StringBuffer sb = new StringBuffer(len);\n\n        for (int i = 0; i < len; ++i)\n        {\n            sb.append(' ');\n        }\n\n        return sb.toString();\n    }\n\n    \n    protected String rtrim(String s) {\n        if ((s == null) || (s.length() == 0))\n        {\n            return s;\n        }\n\n        int pos = s.length();\n\n        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\n        {\n            --pos;\n        }\n\n        return s.substring(0, pos);\n    }\n\n    \n    \n    \n    \n    private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2) {\n            Option opt1 = (Option)o1;\n            Option opt2 = (Option)o2;\n\n            return opt1.getKey().compareToIgnoreCase(opt2.getKey());\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public int getWidth()",
        "public void setLeftPadding(int padding)",
        "public int getLeftPadding()",
        "public void setDescPadding(int padding)",
        "public int getDescPadding()",
        "public void setSyntaxPrefix(String prefix)",
        "public String getSyntaxPrefix()",
        "public void setNewLine(String newline)",
        "public String getNewLine()",
        "public void setOptPrefix(String prefix)",
        "public String getOptPrefix()",
        "public void setLongOptPrefix(String prefix)",
        "public String getLongOptPrefix()",
        "public void setArgName(String name)",
        "public String getArgName()",
        "public void printHelp(String cmdLineSyntax, Options options)",
        "public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",
        "public void printHelp(String cmdLineSyntax, String header, Options options, String footer)",
        "public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",
        "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",
        "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",
        "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer)",
        "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage)",
        "public void printUsage(PrintWriter pw, int width, String app, Options options)",
        "private static void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",
        "private static void appendOption(final StringBuffer buff, final Option option, final boolean required)",
        "public void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",
        "public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad)",
        "public void printWrapped(PrintWriter pw, int width, String text)",
        "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",
        "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text)",
        "protected int findWrapPos(String text, int width, int startPos)",
        "protected String createPadding(int len)",
        "protected String rtrim(String s)",
        "private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2)"
      ],
      "fixed_signatures": [
        "public int getWidth()",
        "public void setLeftPadding(int padding)",
        "public int getLeftPadding()",
        "public void setDescPadding(int padding)",
        "public int getDescPadding()",
        "public void setSyntaxPrefix(String prefix)",
        "public String getSyntaxPrefix()",
        "public void setNewLine(String newline)",
        "public String getNewLine()",
        "public void setOptPrefix(String prefix)",
        "public String getOptPrefix()",
        "public void setLongOptPrefix(String prefix)",
        "public String getLongOptPrefix()",
        "public void setArgName(String name)",
        "public String getArgName()",
        "public void printHelp(String cmdLineSyntax, Options options)",
        "public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",
        "public void printHelp(String cmdLineSyntax, String header, Options options, String footer)",
        "public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",
        "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",
        "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",
        "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer)",
        "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage)",
        "public void printUsage(PrintWriter pw, int width, String app, Options options)",
        "private static void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",
        "private static void appendOption(final StringBuffer buff, final Option option, final boolean required)",
        "public void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",
        "public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad)",
        "public void printWrapped(PrintWriter pw, int width, String text)",
        "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",
        "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text)",
        "protected int findWrapPos(String text, int width, int startPos)",
        "protected String createPadding(int len)",
        "protected String rtrim(String s)",
        "private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2)"
      ],
      "methods": [
        {
          "buggy_method": "  protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n  int pos = findWrapPos(text, width, 0);\n\n  if (pos == -1)\n  {\n  sb.append(rtrim(text));\n\n  return sb;\n  }\n  sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n  \n  \n  final String padding = createPadding(nextLineTabStop);\n\n  while (true)\n  {\n  text = padding + text.substring(pos).trim();\n  pos = findWrapPos(text, width, nextLineTabStop);\n\n  if (pos == -1)\n  {\n  sb.append(text);\n\n  return sb;\n  }\n\n  sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n  }\n  }",
          "fixed_method": "  protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n  int pos = findWrapPos(text, width, 0);\n\n  if (pos == -1)\n  {\n  sb.append(rtrim(text));\n\n  return sb;\n  }\n  sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n  \n  \n  final String padding = createPadding(nextLineTabStop);\n\n  while (true)\n  {\n  text = padding + text.substring(pos).trim();\n  pos = findWrapPos(text, width, 0);\n\n  if (pos == -1)\n  {\n  sb.append(text);\n\n  return sb;\n  }\n\n  sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n  }\n  }",
          "diff": [
            "@@ -809,7 +809,7 @@",
            "         while (true)\n",
            "         {\n",
            "             text = padding + text.substring(pos).trim();\n",
            "-            pos = findWrapPos(text, width, nextLineTabStop);\n",
            "+            pos = findWrapPos(text, width, 0);\n",
            " \n",
            "             if (pos == -1)\n",
            "             {\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
