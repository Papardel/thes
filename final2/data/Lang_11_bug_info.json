{
  "bug_id": "11",
  "failed_tests": {
    "org.apache.commons.lang3.RandomStringUtilsTest": [
      {
        "methodName": "testLANG807",
        "error": "junit.framework.AssertionFailedError",
        "message": "Message (bound must be positive) must contain 'start'",
        "fail_line": "            assertTrue(\"Message (\" + msg + \") must contain 'start'\", msg.contains(\"start\"));",
        "test_source": "  public void testLANG807() {\n  try {\n  RandomStringUtils.random(3,5,5,false,false);\n  fail(\"Expected IllegalArgumentException\");\n  } catch (IllegalArgumentException ex) { // distinguish from Random#nextInt message\n  final String msg = ex.getMessage();\n  assertTrue(\"Message (\" + msg + \") must contain 'start'\", msg.contains(\"start\"));\n  assertTrue(\"Message (\" + msg + \") must contain 'end'\", msg.contains(\"end\"));\n  }\n  }",
        "stack": [
          "RandomStringUtilsTest.testLANG807 line 139"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/lang3/RandomStringUtils.java",
      "buggy_full_code": "\npackage org.apache.commons.lang3;\n\nimport java.util.Random;\n\n\npublic class RandomStringUtils { private static final Random RANDOM = new Random(); public RandomStringUtils() {\n      super();\n    }\n\n    \n    \n    \n    public static String random(int count) {\n        return random(count, false, false);\n    }\n\n    \n    public static String randomAscii(int count) {\n        return random(count, 32, 127, false, false);\n    }\n    \n    \n    public static String randomAlphabetic(int count) {\n        return random(count, true, false);\n    }\n    \n    \n    public static String randomAlphanumeric(int count) {\n        return random(count, true, true);\n    }\n    \n    \n    public static String randomNumeric(int count) {\n        return random(count, false, true);\n    }\n\n    \n    public static String random(int count, boolean letters, boolean numbers) {\n        return random(count, 0, 0, letters, numbers);\n    }\n    \n    \n    public static String random(int count, int start, int end, boolean letters, boolean numbers) {\n        return random(count, start, end, letters, numbers, null, RANDOM);\n    }\n\n    \n    public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars) {\n        return random(count, start, end, letters, numbers, chars, RANDOM);\n    }\n\n    \n    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start == 0 && end == 0) {\n            if (chars != null) {\n                end = chars.length;\n            } else {\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';                \n                }\n            }\n        }\n\n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                ch = chars[random.nextInt(gap) + start];\n            }\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                if(ch >= 56320 && ch <= 57343) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        \n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch >= 55296 && ch <= 56191) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        \n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) {\n                    \n                    count++;\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }\n\n    \n    public static String random(int count, String chars) {\n        if (chars == null) {\n            return random(count, 0, 0, false, false, null, RANDOM);\n        }\n        return random(count, chars.toCharArray());\n    }\n\n    \n    public static String random(int count, char... chars) {\n        if (chars == null) {\n            return random(count, 0, 0, false, false, null, RANDOM);\n        }\n        return random(count, 0, chars.length, false, false, chars, RANDOM);\n    }\n    \n}\n",
      "fixed_full_code": "\npackage org.apache.commons.lang3;\n\nimport java.util.Random;\n\n\npublic class RandomStringUtils { private static final Random RANDOM = new Random(); public RandomStringUtils() {\n      super();\n    }\n\n    \n    \n    \n    public static String random(int count) {\n        return random(count, false, false);\n    }\n\n    \n    public static String randomAscii(int count) {\n        return random(count, 32, 127, false, false);\n    }\n    \n    \n    public static String randomAlphabetic(int count) {\n        return random(count, true, false);\n    }\n    \n    \n    public static String randomAlphanumeric(int count) {\n        return random(count, true, true);\n    }\n    \n    \n    public static String randomNumeric(int count) {\n        return random(count, false, true);\n    }\n\n    \n    public static String random(int count, boolean letters, boolean numbers) {\n        return random(count, 0, 0, letters, numbers);\n    }\n    \n    \n    public static String random(int count, int start, int end, boolean letters, boolean numbers) {\n        return random(count, start, end, letters, numbers, null, RANDOM);\n    }\n\n    \n    public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars) {\n        return random(count, start, end, letters, numbers, chars, RANDOM);\n    }\n\n    \n    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start == 0 && end == 0) {\n            if (chars != null) {\n                end = chars.length;\n            } else {\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';                \n                }\n            }\n        } else {\n            if (end <= start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                ch = chars[random.nextInt(gap) + start];\n            }\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                if(ch >= 56320 && ch <= 57343) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        \n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch >= 55296 && ch <= 56191) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        \n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) {\n                    \n                    count++;\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }\n\n    \n    public static String random(int count, String chars) {\n        if (chars == null) {\n            return random(count, 0, 0, false, false, null, RANDOM);\n        }\n        return random(count, chars.toCharArray());\n    }\n\n    \n    public static String random(int count, char... chars) {\n        if (chars == null) {\n            return random(count, 0, 0, false, false, null, RANDOM);\n        }\n        return random(count, 0, chars.length, false, false, chars, RANDOM);\n    }\n    \n}\n",
      "buggy_signatures": [
        "public static String random(int count)",
        "public static String randomAscii(int count)",
        "public static String randomAlphabetic(int count)",
        "public static String randomAlphanumeric(int count)",
        "public static String randomNumeric(int count)",
        "public static String random(int count, boolean letters, boolean numbers)",
        "public static String random(int count, int start, int end, boolean letters, boolean numbers)",
        "public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars)",
        "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random)",
        "public static String random(int count, String chars)",
        "public static String random(int count, char... chars)"
      ],
      "fixed_signatures": [
        "public static String random(int count)",
        "public static String randomAscii(int count)",
        "public static String randomAlphabetic(int count)",
        "public static String randomAlphanumeric(int count)",
        "public static String randomNumeric(int count)",
        "public static String random(int count, boolean letters, boolean numbers)",
        "public static String random(int count, int start, int end, boolean letters, boolean numbers)",
        "public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars)",
        "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random)",
        "public static String random(int count, String chars)",
        "public static String random(int count, char... chars)"
      ],
      "methods": [
        {
          "buggy_method": "  public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n  if (count == 0) {\n  return \"\";\n  } else if (count < 0) {\n  throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n  }\n  if (chars != null && chars.length == 0) {\n  throw new IllegalArgumentException(\"The chars array must not be empty\");\n  }\n\n  if (start == 0 && end == 0) {\n  if (chars != null) {\n  end = chars.length;\n  } else {\n  if (!letters && !numbers) {\n  end = Integer.MAX_VALUE;\n  } else {\n  end = 'z' + 1;\n  start = ' ';  \n  }\n  }\n  }\n\n  char[] buffer = new char[count];\n  int gap = end - start;\n\n  while (count-- != 0) {\n  char ch;\n  if (chars == null) {\n  ch = (char) (random.nextInt(gap) + start);\n  } else {\n  ch = chars[random.nextInt(gap) + start];\n  }\n  if (letters && Character.isLetter(ch)\n  || numbers && Character.isDigit(ch)\n  || !letters && !numbers) {\n  if(ch >= 56320 && ch <= 57343) {\n  if(count == 0) {\n  count++;\n  } else {\n  \n  buffer[count] = ch;\n  count--;\n  buffer[count] = (char) (55296 + random.nextInt(128));\n  }\n  } else if(ch >= 55296 && ch <= 56191) {\n  if(count == 0) {\n  count++;\n  } else {\n  \n  buffer[count] = (char) (56320 + random.nextInt(128));\n  count--;\n  buffer[count] = ch;\n  }\n  } else if(ch >= 56192 && ch <= 56319) {\n  \n  count++;\n  } else {\n  buffer[count] = ch;\n  }\n  } else {\n  count++;\n  }\n  }\n  return new String(buffer);\n  }",
          "fixed_method": "  public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n  if (count == 0) {\n  return \"\";\n  } else if (count < 0) {\n  throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n  }\n  if (chars != null && chars.length == 0) {\n  throw new IllegalArgumentException(\"The chars array must not be empty\");\n  }\n\n  if (start == 0 && end == 0) {\n  if (chars != null) {\n  end = chars.length;\n  } else {\n  if (!letters && !numbers) {\n  end = Integer.MAX_VALUE;\n  } else {\n  end = 'z' + 1;\n  start = ' ';  \n  }\n  }\n  } else {\n  if (end <= start) {\n  throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n  }\n  }\n\n  char[] buffer = new char[count];\n  int gap = end - start;\n\n  while (count-- != 0) {\n  char ch;\n  if (chars == null) {\n  ch = (char) (random.nextInt(gap) + start);\n  } else {\n  ch = chars[random.nextInt(gap) + start];\n  }\n  if (letters && Character.isLetter(ch)\n  || numbers && Character.isDigit(ch)\n  || !letters && !numbers) {\n  if(ch >= 56320 && ch <= 57343) {\n  if(count == 0) {\n  count++;\n  } else {\n  \n  buffer[count] = ch;\n  count--;\n  buffer[count] = (char) (55296 + random.nextInt(128));\n  }\n  } else if(ch >= 55296 && ch <= 56191) {\n  if(count == 0) {\n  count++;\n  } else {\n  \n  buffer[count] = (char) (56320 + random.nextInt(128));\n  count--;\n  buffer[count] = ch;\n  }\n  } else if(ch >= 56192 && ch <= 56319) {\n  \n  count++;\n  } else {\n  buffer[count] = ch;\n  }\n  } else {\n  count++;\n  }\n  }\n  return new String(buffer);\n  }",
          "diff": [
            "@@ -241,6 +241,10 @@",
            "                     end = 'z' + 1;\n",
            "                     start = ' ';                \n",
            "                 }\n",
            "+            }\n",
            "+        } else {\n",
            "+            if (end <= start) {\n",
            "+                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n",
            "             }\n",
            "         }\n",
            " \n"
          ],
          "changed_lines": 4
        }
      ]
    }
  ]
}
