{
  "bug_id": "57",
  "failed_tests": {
    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest": [
      {
        "methodName": "testSmallDistances",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(uniquePointIsCenter);",
        "test_source": "  public void testSmallDistances() {\n  // Create a bunch of CloseIntegerPoints. Most are identical, but one is different by a\n  // small distance.\n  int[] repeatedArray = { 0 };\n  int[] uniqueArray = { 1 };\n  CloseIntegerPoint repeatedPoint =\n  new CloseIntegerPoint(new EuclideanIntegerPoint(repeatedArray));\n  CloseIntegerPoint uniquePoint =\n  new CloseIntegerPoint(new EuclideanIntegerPoint(uniqueArray));\n\n  Collection<CloseIntegerPoint> points = new ArrayList<CloseIntegerPoint>();\n  final int NUM_REPEATED_POINTS = 10 * 1000;\n  for (int i = 0; i < NUM_REPEATED_POINTS; ++i) {\n  points.add(repeatedPoint);\n  }\n  points.add(uniquePoint);\n\n  // Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial\n  // cluster centers).\n  final long RANDOM_SEED = 0;\n  final int NUM_CLUSTERS = 2;\n  final int NUM_ITERATIONS = 0;\n  KMeansPlusPlusClusterer<CloseIntegerPoint> clusterer =\n  new KMeansPlusPlusClusterer<CloseIntegerPoint>(new Random(RANDOM_SEED));\n  List<Cluster<CloseIntegerPoint>> clusters =\n  clusterer.cluster(points, NUM_CLUSTERS, NUM_ITERATIONS);\n\n  // Check that one of the chosen centers is the unique point.\n  boolean uniquePointIsCenter = false;\n  for (Cluster<CloseIntegerPoint> cluster : clusters) {\n  if (cluster.getCenter().equals(uniquePoint)) {\n  uniquePointIsCenter = true;\n  }\n  }\n  assertTrue(uniquePointIsCenter);\n  }",
        "stack": [
          "KMeansPlusPlusClustererTest.testSmallDistances line 249"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
      "buggy_full_code": "\n\npackage org.apache.commons.math.stat.clustering;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Random;\n\nimport org.apache.commons.math.exception.ConvergenceException;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.stat.descriptive.moment.Variance;\n\n\npublic class KMeansPlusPlusClusterer<T extends Clusterable<T>> { public static enum EmptyClusterStrategy { LARGEST_VARIANCE, LARGEST_POINTS_NUMBER, FARTHEST_POINT, ERROR } private final Random random; private final EmptyClusterStrategy emptyStrategy; public KMeansPlusPlusClusterer(final Random random) {\n        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);\n    }\n\n    \n    public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {\n        this.random        = random;\n        this.emptyStrategy = emptyStrategy;\n    }\n\n    \n    public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations) {\n        \n        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n        assignPointsToClusters(clusters, points);\n\n        \n        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n        for (int count = 0; count < max; count++) {\n            boolean clusteringChanged = false;\n            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n            for (final Cluster<T> cluster : clusters) {\n                final T newCenter;\n                if (cluster.getPoints().isEmpty()) {\n                    switch (emptyStrategy) {\n                        case LARGEST_VARIANCE :\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER :\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case FARTHEST_POINT :\n                            newCenter = getFarthestPoint(clusters);\n                            break;\n                        default :\n                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                    }\n                    clusteringChanged = true;\n                } else {\n                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                    if (!newCenter.equals(cluster.getCenter())) {\n                        clusteringChanged = true;\n                    }\n                }\n                newClusters.add(new Cluster<T>(newCenter));\n            }\n            if (!clusteringChanged) {\n                return clusters;\n            }\n            assignPointsToClusters(newClusters, points);\n            clusters = newClusters;\n        }\n        return clusters;\n    }\n\n    \n    private static <T extends Clusterable<T>> void assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n        for (final T p : points) {\n            Cluster<T> cluster = getNearestCluster(clusters, p);\n            cluster.addPoint(p);\n        }\n    }\n\n    \n    private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        \n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k) {\n            \n            \n            int sum = 0;\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum;\n            }\n\n            \n            \n            final double r = random.nextDouble() * sum;\n            for (int i = 0 ; i < dx2.length; i++) {\n                if (dx2[i] >= r) {\n                    final T p = pointSet.remove(i);\n                    resultSet.add(new Cluster<T>(p));\n                    break;\n                }\n            }\n        }\n\n        return resultSet;\n\n    }\n\n    \n    private T getPointFromLargestVarianceCluster(final Collection<Cluster<T>> clusters) {\n\n        double maxVariance = Double.NEGATIVE_INFINITY;\n        Cluster<T> selected = null;\n        for (final Cluster<T> cluster : clusters) {\n            if (!cluster.getPoints().isEmpty()) {\n\n                \n                final T center = cluster.getCenter();\n                final Variance stat = new Variance();\n                for (final T point : cluster.getPoints()) {\n                    stat.increment(point.distanceFrom(center));\n                }\n                final double variance = stat.getResult();\n\n                \n                if (variance > maxVariance) {\n                    maxVariance = variance;\n                    selected = cluster;\n                }\n\n            }\n        }\n\n        \n        if (selected == null) {\n            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n        }\n\n        \n        final List<T> selectedPoints = selected.getPoints();\n        return selectedPoints.remove(random.nextInt(selectedPoints.size()));\n\n    }\n\n    \n    private T getPointFromLargestNumberCluster(final Collection<Cluster<T>> clusters) {\n\n        int maxNumber = 0;\n        Cluster<T> selected = null;\n        for (final Cluster<T> cluster : clusters) {\n\n            \n            final int number = cluster.getPoints().size();\n\n            \n            if (number > maxNumber) {\n                maxNumber = number;\n                selected = cluster;\n            }\n\n        }\n\n        \n        if (selected == null) {\n            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n        }\n\n        \n        final List<T> selectedPoints = selected.getPoints();\n        return selectedPoints.remove(random.nextInt(selectedPoints.size()));\n\n    }\n\n    \n    private T getFarthestPoint(final Collection<Cluster<T>> clusters) {\n\n        double maxDistance = Double.NEGATIVE_INFINITY;\n        Cluster<T> selectedCluster = null;\n        int selectedPoint = -1;\n        for (final Cluster<T> cluster : clusters) {\n\n            \n            final T center = cluster.getCenter();\n            final List<T> points = cluster.getPoints();\n            for (int i = 0; i < points.size(); ++i) {\n                final double distance = points.get(i).distanceFrom(center);\n                if (distance > maxDistance) {\n                    maxDistance     = distance;\n                    selectedCluster = cluster;\n                    selectedPoint   = i;\n                }\n            }\n\n        }\n\n        \n        if (selectedCluster == null) {\n            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n        }\n\n        return selectedCluster.getPoints().remove(selectedPoint);\n\n    }\n\n    \n    private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {\n        double minDistance = Double.MAX_VALUE;\n        Cluster<T> minCluster = null;\n        for (final Cluster<T> c : clusters) {\n            final double distance = point.distanceFrom(c.getCenter());\n            if (distance < minDistance) {\n                minDistance = distance;\n                minCluster = c;\n            }\n        }\n        return minCluster;\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.math.stat.clustering;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Random;\n\nimport org.apache.commons.math.exception.ConvergenceException;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.stat.descriptive.moment.Variance;\n\n\npublic class KMeansPlusPlusClusterer<T extends Clusterable<T>> { public static enum EmptyClusterStrategy { LARGEST_VARIANCE, LARGEST_POINTS_NUMBER, FARTHEST_POINT, ERROR } private final Random random; private final EmptyClusterStrategy emptyStrategy; public KMeansPlusPlusClusterer(final Random random) {\n        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);\n    }\n\n    \n    public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {\n        this.random        = random;\n        this.emptyStrategy = emptyStrategy;\n    }\n\n    \n    public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations) {\n        \n        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n        assignPointsToClusters(clusters, points);\n\n        \n        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n        for (int count = 0; count < max; count++) {\n            boolean clusteringChanged = false;\n            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n            for (final Cluster<T> cluster : clusters) {\n                final T newCenter;\n                if (cluster.getPoints().isEmpty()) {\n                    switch (emptyStrategy) {\n                        case LARGEST_VARIANCE :\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER :\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case FARTHEST_POINT :\n                            newCenter = getFarthestPoint(clusters);\n                            break;\n                        default :\n                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                    }\n                    clusteringChanged = true;\n                } else {\n                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                    if (!newCenter.equals(cluster.getCenter())) {\n                        clusteringChanged = true;\n                    }\n                }\n                newClusters.add(new Cluster<T>(newCenter));\n            }\n            if (!clusteringChanged) {\n                return clusters;\n            }\n            assignPointsToClusters(newClusters, points);\n            clusters = newClusters;\n        }\n        return clusters;\n    }\n\n    \n    private static <T extends Clusterable<T>> void assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n        for (final T p : points) {\n            Cluster<T> cluster = getNearestCluster(clusters, p);\n            cluster.addPoint(p);\n        }\n    }\n\n    \n    private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        \n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k) {\n            \n            \n            double sum = 0;\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum;\n            }\n\n            \n            \n            final double r = random.nextDouble() * sum;\n            for (int i = 0 ; i < dx2.length; i++) {\n                if (dx2[i] >= r) {\n                    final T p = pointSet.remove(i);\n                    resultSet.add(new Cluster<T>(p));\n                    break;\n                }\n            }\n        }\n\n        return resultSet;\n\n    }\n\n    \n    private T getPointFromLargestVarianceCluster(final Collection<Cluster<T>> clusters) {\n\n        double maxVariance = Double.NEGATIVE_INFINITY;\n        Cluster<T> selected = null;\n        for (final Cluster<T> cluster : clusters) {\n            if (!cluster.getPoints().isEmpty()) {\n\n                \n                final T center = cluster.getCenter();\n                final Variance stat = new Variance();\n                for (final T point : cluster.getPoints()) {\n                    stat.increment(point.distanceFrom(center));\n                }\n                final double variance = stat.getResult();\n\n                \n                if (variance > maxVariance) {\n                    maxVariance = variance;\n                    selected = cluster;\n                }\n\n            }\n        }\n\n        \n        if (selected == null) {\n            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n        }\n\n        \n        final List<T> selectedPoints = selected.getPoints();\n        return selectedPoints.remove(random.nextInt(selectedPoints.size()));\n\n    }\n\n    \n    private T getPointFromLargestNumberCluster(final Collection<Cluster<T>> clusters) {\n\n        int maxNumber = 0;\n        Cluster<T> selected = null;\n        for (final Cluster<T> cluster : clusters) {\n\n            \n            final int number = cluster.getPoints().size();\n\n            \n            if (number > maxNumber) {\n                maxNumber = number;\n                selected = cluster;\n            }\n\n        }\n\n        \n        if (selected == null) {\n            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n        }\n\n        \n        final List<T> selectedPoints = selected.getPoints();\n        return selectedPoints.remove(random.nextInt(selectedPoints.size()));\n\n    }\n\n    \n    private T getFarthestPoint(final Collection<Cluster<T>> clusters) {\n\n        double maxDistance = Double.NEGATIVE_INFINITY;\n        Cluster<T> selectedCluster = null;\n        int selectedPoint = -1;\n        for (final Cluster<T> cluster : clusters) {\n\n            \n            final T center = cluster.getCenter();\n            final List<T> points = cluster.getPoints();\n            for (int i = 0; i < points.size(); ++i) {\n                final double distance = points.get(i).distanceFrom(center);\n                if (distance > maxDistance) {\n                    maxDistance     = distance;\n                    selectedCluster = cluster;\n                    selectedPoint   = i;\n                }\n            }\n\n        }\n\n        \n        if (selectedCluster == null) {\n            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n        }\n\n        return selectedCluster.getPoints().remove(selectedPoint);\n\n    }\n\n    \n    private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {\n        double minDistance = Double.MAX_VALUE;\n        Cluster<T> minCluster = null;\n        for (final Cluster<T> c : clusters) {\n            final double distance = point.distanceFrom(c.getCenter());\n            if (distance < minDistance) {\n                minDistance = distance;\n                minCluster = c;\n            }\n        }\n        return minCluster;\n    }\n\n}\n",
      "buggy_signatures": [
        "public class KMeansPlusPlusClusterer<T extends Clusterable<T>> { public static enum EmptyClusterStrategy { LARGEST_VARIANCE, LARGEST_POINTS_NUMBER, FARTHEST_POINT, ERROR } private final Random random; private final EmptyClusterStrategy emptyStrategy; public KMeansPlusPlusClusterer(final Random random)",
        "public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy)",
        "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations)",
        "private static <T extends Clusterable<T>> void assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points)",
        "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points, final int k, final Random random)",
        "private T getPointFromLargestVarianceCluster(final Collection<Cluster<T>> clusters)",
        "private T getPointFromLargestNumberCluster(final Collection<Cluster<T>> clusters)",
        "private T getFarthestPoint(final Collection<Cluster<T>> clusters)",
        "private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(final Collection<Cluster<T>> clusters, final T point)"
      ],
      "fixed_signatures": [
        "public class KMeansPlusPlusClusterer<T extends Clusterable<T>> { public static enum EmptyClusterStrategy { LARGEST_VARIANCE, LARGEST_POINTS_NUMBER, FARTHEST_POINT, ERROR } private final Random random; private final EmptyClusterStrategy emptyStrategy; public KMeansPlusPlusClusterer(final Random random)",
        "public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy)",
        "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations)",
        "private static <T extends Clusterable<T>> void assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points)",
        "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points, final int k, final Random random)",
        "private T getPointFromLargestVarianceCluster(final Collection<Cluster<T>> clusters)",
        "private T getPointFromLargestNumberCluster(final Collection<Cluster<T>> clusters)",
        "private T getFarthestPoint(final Collection<Cluster<T>> clusters)",
        "private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(final Collection<Cluster<T>> clusters, final T point)"
      ],
      "methods": [
        {
          "buggy_method": "  public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations) {\n  \n  List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n  assignPointsToClusters(clusters, points);\n\n  \n  final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n  for (int count = 0; count < max; count++) {\n  boolean clusteringChanged = false;\n  List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n  for (final Cluster<T> cluster : clusters) {\n  final T newCenter;\n  if (cluster.getPoints().isEmpty()) {\n  switch (emptyStrategy) {\n  case LARGEST_VARIANCE :\n  newCenter = getPointFromLargestVarianceCluster(clusters);\n  break;\n  case LARGEST_POINTS_NUMBER :\n  newCenter = getPointFromLargestNumberCluster(clusters);\n  break;\n  case FARTHEST_POINT :\n  newCenter = getFarthestPoint(clusters);\n  break;\n  default :\n  throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n  }\n  clusteringChanged = true;\n  } else {\n  newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n  if (!newCenter.equals(cluster.getCenter())) {\n  clusteringChanged = true;\n  }\n  }\n  newClusters.add(new Cluster<T>(newCenter));\n  }\n  if (!clusteringChanged) {\n  return clusters;\n  }\n  assignPointsToClusters(newClusters, points);\n  clusters = newClusters;\n  }\n  return clusters;\n  }",
          "fixed_method": "  public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations) {\n  \n  List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n  assignPointsToClusters(clusters, points);\n\n  \n  final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n  for (int count = 0; count < max; count++) {\n  boolean clusteringChanged = false;\n  List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n  for (final Cluster<T> cluster : clusters) {\n  final T newCenter;\n  if (cluster.getPoints().isEmpty()) {\n  switch (emptyStrategy) {\n  case LARGEST_VARIANCE :\n  newCenter = getPointFromLargestVarianceCluster(clusters);\n  break;\n  case LARGEST_POINTS_NUMBER :\n  newCenter = getPointFromLargestNumberCluster(clusters);\n  break;\n  case FARTHEST_POINT :\n  newCenter = getFarthestPoint(clusters);\n  break;\n  default :\n  throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n  }\n  clusteringChanged = true;\n  } else {\n  newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n  if (!newCenter.equals(cluster.getCenter())) {\n  clusteringChanged = true;\n  }\n  }\n  newClusters.add(new Cluster<T>(newCenter));\n  }\n  if (!clusteringChanged) {\n  return clusters;\n  }\n  assignPointsToClusters(newClusters, points);\n  clusters = newClusters;\n  }\n  return clusters;\n  }",
          "diff": [
            "@@ -172,7 +172,7 @@",
            "         while (resultSet.size() < k) {\n",
            "             // For each data point x, compute D(x), the distance between x and\n",
            "             // the nearest center that has already been chosen.\n",
            "-            int sum = 0;\n",
            "+            double sum = 0;\n",
            "             for (int i = 0; i < pointSet.size(); i++) {\n",
            "                 final T p = pointSet.get(i);\n",
            "                 final Cluster<T> nearest = getNearestCluster(resultSet, p);\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
