{
  "bug_id": "34",
  "failed_tests": {
    "org.jsoup.parser.CharacterReaderTest": [
      {
        "methodName": "nextIndexOfUnmatched",
        "error": "java.lang.ArrayIndexOutOfBoundsException",
        "message": "Index 8 out of bounds for length 8",
        "fail_line": "        assertEquals(-1, r.nextIndexOf(\"]]>\"));",
        "test_source": "",
        "stack": [
          "CharacterReader.nextIndexOf line 92, CharacterReaderTest.nextIndexOfUnmatched line 100"
        ]
      }
    ],
    "org.jsoup.parser.HtmlParserTest": [
      {
        "methodName": "handlesUnclosedCdataAtEOF",
        "error": "java.lang.ArrayIndexOutOfBoundsException",
        "message": "Index 11 out of bounds for length 11",
        "fail_line": "        Document doc = Jsoup.parse(h);",
        "test_source": "",
        "stack": [
          "CharacterReader.nextIndexOf line 92, CharacterReader.consumeTo line 112, TokeniserState$67.read line 1634, Tokeniser.read line 42, TreeBuilder.runParser line 47, TreeBuilder.parse line 41, HtmlTreeBuilder.parse line 38, Parser.parse line 90, Jsoup.parse line 58, HtmlParserTest.handlesUnclosedCdataAtEOF line 293"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jsoup/parser/CharacterReader.java",
      "buggy_full_code": "package org.jsoup.parser;\n\nimport org.jsoup.helper.Validate;\n\nimport java.util.Locale;\n\n\nclass CharacterReader {\n    static final char EOF = (char) -1; private final char[] input; private final int length; private int pos = 0; private int mark = 0; CharacterReader(String input) {\n        Validate.notNull(input);\n        this.input = input.toCharArray();\n        this.length = this.input.length;\n    }\n\n    int pos() {\n        return pos;\n    }\n\n    boolean isEmpty() {\n        return pos >= length;\n    }\n\n    char current() {\n        return isEmpty() ? EOF : input[pos];\n    }\n\n    char consume() {\n        char val = isEmpty() ? EOF : input[pos];\n        pos++;\n        return val;\n    }\n\n    void unconsume() {\n        pos--;\n    }\n\n    void advance() {\n        pos++;\n    }\n\n    void mark() {\n        mark = pos;\n    }\n\n    void rewindToMark() {\n        pos = mark;\n    }\n\n    String consumeAsString() {\n        return new String(input, pos++, 1);\n    }\n\n    \n    int nextIndexOf(char c) {\n        \n        for (int i = pos; i < length; i++) {\n            if (c == input[i])\n                return i - pos;\n        }\n        return -1;\n    }\n\n    \n    int nextIndexOf(CharSequence seq) {\n        \n        char startChar = seq.charAt(0);\n        for (int offset = pos; offset < length; offset++) {\n            \n            if (startChar != input[offset])\n                while(++offset < length && startChar != input[offset]);\n            int i = offset + 1;\n            int last = i + seq.length()-1;\n            if (offset < length) {\n                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);\n                if (i == last) \n                    return offset - pos;\n            }\n        }\n        return -1;\n    }\n\n    String consumeTo(char c) {\n        int offset = nextIndexOf(c);\n        if (offset != -1) {\n            String consumed = new String(input, pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }\n\n    String consumeTo(String seq) {\n        int offset = nextIndexOf(seq);\n        if (offset != -1) {\n            String consumed = new String(input, pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }\n\n    String consumeToAny(final char... chars) {\n        int start = pos;\n\n        OUTER: while (pos < length) {\n            for (int i = 0; i < chars.length; i++) {\n                if (input[pos] == chars[i])\n                    break OUTER;\n            }\n            pos++;\n        }\n\n        return pos > start ? new String(input, start, pos-start) : \"\";\n    }\n\n    String consumeToEnd() {\n        String data = new String(input, pos, length-pos);\n        pos = length;\n        return data;\n    }\n\n    String consumeLetterSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n\n        return new String(input, start, pos - start);\n    }\n\n    String consumeLetterThenDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n        while (!isEmpty()) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n\n        return new String(input, start, pos - start);\n    }\n\n    String consumeHexSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))\n                pos++;\n            else\n                break;\n        }\n        return new String(input, start, pos - start);\n    }\n\n    String consumeDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n        return new String(input, start, pos - start);\n    }\n\n    boolean matches(char c) {\n        return !isEmpty() && input[pos] == c;\n\n    }\n\n    boolean matches(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;\n        return true;\n    }\n\n    boolean matchesIgnoreCase(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++) {\n            char upScan = Character.toUpperCase(seq.charAt(offset));\n            char upTarget = Character.toUpperCase(input[pos + offset]);\n            if (upScan != upTarget)\n                return false;\n        }\n        return true;\n    }\n\n    boolean matchesAny(char... seq) {\n        if (isEmpty())\n            return false;\n\n        char c = input[pos];\n        for (char seek : seq) {\n            if (seek == c)\n                return true;\n        }\n        return false;\n    }\n\n    boolean matchesLetter() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    }\n\n    boolean matchesDigit() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= '0' && c <= '9');\n    }\n\n    boolean matchConsume(String seq) {\n        if (matches(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    boolean matchConsumeIgnoreCase(String seq) {\n        if (matchesIgnoreCase(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    boolean containsIgnoreCase(String seq) {\n        \n        String loScan = seq.toLowerCase(Locale.ENGLISH);\n        String hiScan = seq.toUpperCase(Locale.ENGLISH);\n        return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);\n    }\n\n    @Override\n    public String toString() {\n        return new String(input, pos, length - pos);\n    }\n}\n",
      "fixed_full_code": "package org.jsoup.parser;\n\nimport org.jsoup.helper.Validate;\n\nimport java.util.Locale;\n\n\nclass CharacterReader {\n    static final char EOF = (char) -1; private final char[] input; private final int length; private int pos = 0; private int mark = 0; CharacterReader(String input) {\n        Validate.notNull(input);\n        this.input = input.toCharArray();\n        this.length = this.input.length;\n    }\n\n    int pos() {\n        return pos;\n    }\n\n    boolean isEmpty() {\n        return pos >= length;\n    }\n\n    char current() {\n        return isEmpty() ? EOF : input[pos];\n    }\n\n    char consume() {\n        char val = isEmpty() ? EOF : input[pos];\n        pos++;\n        return val;\n    }\n\n    void unconsume() {\n        pos--;\n    }\n\n    void advance() {\n        pos++;\n    }\n\n    void mark() {\n        mark = pos;\n    }\n\n    void rewindToMark() {\n        pos = mark;\n    }\n\n    String consumeAsString() {\n        return new String(input, pos++, 1);\n    }\n\n    \n    int nextIndexOf(char c) {\n        \n        for (int i = pos; i < length; i++) {\n            if (c == input[i])\n                return i - pos;\n        }\n        return -1;\n    }\n\n    \n    int nextIndexOf(CharSequence seq) {\n        \n        char startChar = seq.charAt(0);\n        for (int offset = pos; offset < length; offset++) {\n            \n            if (startChar != input[offset])\n                while(++offset < length && startChar != input[offset]);\n            int i = offset + 1;\n            int last = i + seq.length()-1;\n            if (offset < length && last <= length) {\n                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);\n                if (i == last) \n                    return offset - pos;\n            }\n        }\n        return -1;\n    }\n\n    String consumeTo(char c) {\n        int offset = nextIndexOf(c);\n        if (offset != -1) {\n            String consumed = new String(input, pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }\n\n    String consumeTo(String seq) {\n        int offset = nextIndexOf(seq);\n        if (offset != -1) {\n            String consumed = new String(input, pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }\n\n    String consumeToAny(final char... chars) {\n        int start = pos;\n\n        OUTER: while (pos < length) {\n            for (int i = 0; i < chars.length; i++) {\n                if (input[pos] == chars[i])\n                    break OUTER;\n            }\n            pos++;\n        }\n\n        return pos > start ? new String(input, start, pos-start) : \"\";\n    }\n\n    String consumeToEnd() {\n        String data = new String(input, pos, length-pos);\n        pos = length;\n        return data;\n    }\n\n    String consumeLetterSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n\n        return new String(input, start, pos - start);\n    }\n\n    String consumeLetterThenDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n        while (!isEmpty()) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n\n        return new String(input, start, pos - start);\n    }\n\n    String consumeHexSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))\n                pos++;\n            else\n                break;\n        }\n        return new String(input, start, pos - start);\n    }\n\n    String consumeDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n        return new String(input, start, pos - start);\n    }\n\n    boolean matches(char c) {\n        return !isEmpty() && input[pos] == c;\n\n    }\n\n    boolean matches(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;\n        return true;\n    }\n\n    boolean matchesIgnoreCase(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++) {\n            char upScan = Character.toUpperCase(seq.charAt(offset));\n            char upTarget = Character.toUpperCase(input[pos + offset]);\n            if (upScan != upTarget)\n                return false;\n        }\n        return true;\n    }\n\n    boolean matchesAny(char... seq) {\n        if (isEmpty())\n            return false;\n\n        char c = input[pos];\n        for (char seek : seq) {\n            if (seek == c)\n                return true;\n        }\n        return false;\n    }\n\n    boolean matchesLetter() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    }\n\n    boolean matchesDigit() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= '0' && c <= '9');\n    }\n\n    boolean matchConsume(String seq) {\n        if (matches(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    boolean matchConsumeIgnoreCase(String seq) {\n        if (matchesIgnoreCase(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    boolean containsIgnoreCase(String seq) {\n        \n        String loScan = seq.toLowerCase(Locale.ENGLISH);\n        String hiScan = seq.toUpperCase(Locale.ENGLISH);\n        return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);\n    }\n\n    @Override\n    public String toString() {\n        return new String(input, pos, length - pos);\n    }\n}\n",
      "buggy_signatures": [
        "public String toString()"
      ],
      "fixed_signatures": [
        "public String toString()"
      ],
      "methods": [
        {
          "buggy_method": "  static final char EOF = (char) -1; private final char[] input; private final int length; private int pos = 0; private int mark = 0; CharacterReader(String input) {\n  Validate.notNull(input);\n  this.input = input.toCharArray();\n  this.length = this.input.length;\n  }",
          "fixed_method": "  static final char EOF = (char) -1; private final char[] input; private final int length; private int pos = 0; private int mark = 0; CharacterReader(String input) {\n  Validate.notNull(input);\n  this.input = input.toCharArray();\n  this.length = this.input.length;\n  }",
          "diff": [
            "@@ -88,7 +88,7 @@",
            "                 while(++offset < length && startChar != input[offset]);\n",
            "             int i = offset + 1;\n",
            "             int last = i + seq.length()-1;\n",
            "-            if (offset < length) {\n",
            "+            if (offset < length && last <= length) {\n",
            "                 for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);\n",
            "                 if (i == last) // found full sequence\n",
            "                     return offset - pos;\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
