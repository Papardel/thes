{
  "bug_id": "18",
  "failed_tests": {
    "org.apache.commons.jxpath.ri.model.dom.DOMModelTest": [
      {
        "methodName": "testAxisAttribute",
        "error": "junit.framework.AssertionFailedError",
        "message": "Evaluating value iterator <vendor/product/price:amount/attribute::node()> expected:<[10%, 20%]> but was:<[]>",
        "fail_line": "",
        "test_source": "",
        "stack": [
          "JXPathTestCase.assertXPathValueIterator line 158, XMLModelTestCase.testAxisAttribute line 562"
        ]
      }
    ],
    "org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest": [
      {
        "methodName": "testAxisAttribute",
        "error": "junit.framework.AssertionFailedError",
        "message": "Evaluating value iterator <vendor/product/price:amount/attribute::node()> expected:<[10%, 20%]> but was:<[]>",
        "fail_line": "",
        "test_source": "",
        "stack": [
          "JXPathTestCase.assertXPathValueIterator line 158, XMLModelTestCase.testAxisAttribute line 562"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/jxpath/ri/axes/AttributeContext.java",
      "buggy_full_code": "\npackage org.apache.commons.jxpath.ri.axes;\n\nimport org.apache.commons.jxpath.ri.EvalContext;\nimport org.apache.commons.jxpath.ri.QName;\nimport org.apache.commons.jxpath.ri.compiler.NodeNameTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTest;\nimport org.apache.commons.jxpath.ri.model.NodeIterator;\nimport org.apache.commons.jxpath.ri.model.NodePointer;\n\n\npublic class AttributeContext extends EvalContext { private NodeTest nodeTest; private boolean setStarted = false; private NodeIterator iterator; private NodePointer currentNodePointer; public AttributeContext(EvalContext parentContext, NodeTest nodeTest) {\n        super(parentContext);\n        this.nodeTest = nodeTest;\n    }\n\n    public NodePointer getCurrentNodePointer() {\n        return currentNodePointer;\n    }\n\n    public void reset() {\n        setStarted = false;\n        iterator = null;\n        super.reset();\n    }\n\n    public boolean setPosition(int position) {\n        if (position < getCurrentPosition()) {\n            reset();\n        }\n\n        while (getCurrentPosition() < position) {\n            if (!nextNode()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean nextNode() {\n        super.setPosition(getCurrentPosition() + 1);\n        if (!setStarted) {\n            setStarted = true;\n            if (!(nodeTest instanceof NodeNameTest)) {\n                return false;\n            }\n            QName name = ((NodeNameTest) nodeTest).getNodeName();\n            iterator =\n                parentContext.getCurrentNodePointer().attributeIterator(name);\n        }\n        if (iterator == null) {\n            return false;\n        }\n        if (!iterator.setPosition(iterator.getPosition() + 1)) {\n            return false;\n        }\n        currentNodePointer = iterator.getNodePointer();\n        return true;\n    }\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.jxpath.ri.axes;\n\nimport org.apache.commons.jxpath.ri.Compiler;\nimport org.apache.commons.jxpath.ri.EvalContext;\nimport org.apache.commons.jxpath.ri.QName;\nimport org.apache.commons.jxpath.ri.compiler.NodeNameTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\nimport org.apache.commons.jxpath.ri.model.NodeIterator;\nimport org.apache.commons.jxpath.ri.model.NodePointer;\n\n\npublic class AttributeContext extends EvalContext { private static final NodeNameTest WILDCARD_TEST = new NodeNameTest(new QName(null, \"*\")); private NodeTest nodeTest; private boolean setStarted = false; private NodeIterator iterator; private NodePointer currentNodePointer; public AttributeContext(EvalContext parentContext, NodeTest nodeTest) {\n        super(parentContext);\n        this.nodeTest = nodeTest;\n    }\n\n    public NodePointer getCurrentNodePointer() {\n        return currentNodePointer;\n    }\n\n    public void reset() {\n        setStarted = false;\n        iterator = null;\n        super.reset();\n    }\n\n    public boolean setPosition(int position) {\n        if (position < getCurrentPosition()) {\n            reset();\n        }\n\n        while (getCurrentPosition() < position) {\n            if (!nextNode()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean nextNode() {\n        super.setPosition(getCurrentPosition() + 1);\n        if (!setStarted) {\n            setStarted = true;\n            NodeNameTest nodeNameTest = null;\n            if (nodeTest instanceof NodeTypeTest) {\n                if (((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE) {\n                    nodeNameTest = WILDCARD_TEST;\n                }\n            }\n            else if (nodeTest instanceof NodeNameTest) {\n                nodeNameTest = (NodeNameTest) nodeTest;\n            }\n            if (nodeNameTest == null) {\n                return false;\n            }\n            iterator = parentContext.getCurrentNodePointer().attributeIterator(\n                    nodeNameTest.getNodeName());\n        }\n        if (iterator == null) {\n            return false;\n        }\n        if (!iterator.setPosition(iterator.getPosition() + 1)) {\n            return false;\n        }\n        currentNodePointer = iterator.getNodePointer();\n        return true;\n    }\n}",
      "buggy_signatures": [
        "public NodePointer getCurrentNodePointer()",
        "public void reset()",
        "public boolean setPosition(int position)",
        "public boolean nextNode()"
      ],
      "fixed_signatures": [
        "public NodePointer getCurrentNodePointer()",
        "public void reset()",
        "public boolean setPosition(int position)",
        "public boolean nextNode()"
      ],
      "methods": [
        {
          "buggy_method": "",
          "fixed_method": "",
          "diff": [
            "@@ -16,10 +16,12 @@",
            "  */\n",
            " package org.apache.commons.jxpath.ri.axes;\n",
            " \n",
            "+import org.apache.commons.jxpath.ri.Compiler;\n",
            " import org.apache.commons.jxpath.ri.EvalContext;\n",
            " import org.apache.commons.jxpath.ri.QName;\n",
            " import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n",
            " import org.apache.commons.jxpath.ri.compiler.NodeTest;\n",
            "+import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\n",
            " import org.apache.commons.jxpath.ri.model.NodeIterator;\n",
            " import org.apache.commons.jxpath.ri.model.NodePointer;\n",
            " \n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "",
          "fixed_method": "  private static final NodeNameTest WILDCARD_TEST = new NodeNameTest(new QName(null, \"*\")); private NodeTest nodeTest; private boolean setStarted = false; private NodeIterator iterator; private NodePointer currentNodePointer; public AttributeContext(EvalContext parentContext, NodeTest nodeTest) {\n  super(parentContext);\n  this.nodeTest = nodeTest;\n  }",
          "diff": [
            "@@ -30,6 +32,7 @@",
            "  * @version $Revision$ $Date$\n",
            "  */\n",
            " public class AttributeContext extends EvalContext {\n",
            "+    private static final NodeNameTest WILDCARD_TEST = new NodeNameTest(new QName(null, \"*\"));\n",
            " \n",
            "     private NodeTest nodeTest;\n",
            "     private boolean setStarted = false;\n"
          ],
          "changed_lines": 1
        },
        {
          "buggy_method": "  public boolean nextNode() {\n  super.setPosition(getCurrentPosition() + 1);\n  if (!setStarted) {\n  setStarted = true;\n  if (!(nodeTest instanceof NodeNameTest)) {\n  return false;\n  }\n  QName name = ((NodeNameTest) nodeTest).getNodeName();\n  iterator =\n  parentContext.getCurrentNodePointer().attributeIterator(name);\n  }\n  if (iterator == null) {\n  return false;\n  }\n  if (!iterator.setPosition(iterator.getPosition() + 1)) {\n  return false;\n  }\n  currentNodePointer = iterator.getNodePointer();\n  return true;\n  }",
          "fixed_method": "  public boolean nextNode() {\n  super.setPosition(getCurrentPosition() + 1);\n  if (!setStarted) {\n  setStarted = true;\n  NodeNameTest nodeNameTest = null;\n  if (nodeTest instanceof NodeTypeTest) {\n  if (((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE) {\n  nodeNameTest = WILDCARD_TEST;\n  }\n  }\n  else if (nodeTest instanceof NodeNameTest) {\n  nodeNameTest = (NodeNameTest) nodeTest;\n  }\n  if (nodeNameTest == null) {\n  return false;\n  }\n  iterator = parentContext.getCurrentNodePointer().attributeIterator(\n  nodeNameTest.getNodeName());\n  }\n  if (iterator == null) {\n  return false;\n  }\n  if (!iterator.setPosition(iterator.getPosition() + 1)) {\n  return false;\n  }\n  currentNodePointer = iterator.getNodePointer();\n  return true;\n  }",
          "diff": [
            "@@ -72,12 +75,20 @@",
            "         super.setPosition(getCurrentPosition() + 1);\n",
            "         if (!setStarted) {\n",
            "             setStarted = true;\n",
            "-            if (!(nodeTest instanceof NodeNameTest)) {\n",
            "+            NodeNameTest nodeNameTest = null;\n",
            "+            if (nodeTest instanceof NodeTypeTest) {\n",
            "+                if (((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE) {\n",
            "+                    nodeNameTest = WILDCARD_TEST;\n",
            "+                }\n",
            "+            }\n",
            "+            else if (nodeTest instanceof NodeNameTest) {\n",
            "+                nodeNameTest = (NodeNameTest) nodeTest;\n",
            "+            }\n",
            "+            if (nodeNameTest == null) {\n",
            "                 return false;\n",
            "             }\n",
            "-            QName name = ((NodeNameTest) nodeTest).getNodeName();\n",
            "-            iterator =\n",
            "-                parentContext.getCurrentNodePointer().attributeIterator(name);\n",
            "+            iterator = parentContext.getCurrentNodePointer().attributeIterator(\n",
            "+                    nodeNameTest.getNodeName());\n",
            "         }\n",
            "         if (iterator == null) {\n",
            "             return false;\n",
            "@@ -88,4 +99,4 @@",
            "         currentNodePointer = iterator.getNodePointer();\n",
            "         return true;\n",
            "     }\n",
            "-}\n",
            "+}"
          ],
          "changed_lines": 18
        }
      ]
    }
  ]
}
