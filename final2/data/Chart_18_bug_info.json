{
  "bug_id": "18",
  "failed_tests": {
    "org.jfree.data.category.junit.DefaultCategoryDatasetTests": [
      {
        "methodName": "testBug1835955",
        "error": "java.lang.IndexOutOfBoundsException",
        "message": "Index 0 out of bounds for length 0",
        "fail_line": "    \td.addValue(3.0, \"R2\", \"C2\");",
        "test_source": "  public void testBug1835955() {\n  \tDefaultCategoryDataset d = new DefaultCategoryDataset();\n  \td.addValue(1.0, \"R1\", \"C1\");\n  \td.addValue(2.0, \"R2\", \"C2\");\n  \td.removeColumn(\"C2\");\n  \td.addValue(3.0, \"R2\", \"C2\");\n  \tassertEquals(3.0, d.getValue(\"R2\", \"C2\").doubleValue(), EPSILON);\n  }",
        "stack": [
          "DefaultKeyedValues.setValue line 234, DefaultKeyedValues2D.setValue line 337, DefaultKeyedValues2D.addValue line 303, DefaultCategoryDataset.addValue line 218, DefaultCategoryDataset.addValue line 233, DefaultCategoryDatasetTests.testBug1835955 line 350"
        ]
      }
    ],
    "org.jfree.data.junit.DefaultKeyedValues2DTests": [
      {
        "methodName": "testRemoveColumnByKey",
        "error": "java.lang.IndexOutOfBoundsException",
        "message": "Index 0 out of bounds for length 0",
        "fail_line": "    \td.addValue(new Double(3.0), \"R2\", \"C2\");",
        "test_source": "  public void testRemoveColumnByKey() {\n  \tDefaultKeyedValues2D d = new DefaultKeyedValues2D();\n  \td.addValue(new Double(1.0), \"R1\", \"C1\");\n  \td.addValue(new Double(2.0), \"R2\", \"C2\");\n  \td.removeColumn(\"C2\");\n  \td.addValue(new Double(3.0), \"R2\", \"C2\");\n  \tassertEquals(3.0, d.getValue(\"R2\", \"C2\").doubleValue(), EPSILON);\n  \t\n  \t// check for unknown column\n  \tboolean pass = false;\n  \ttry {\n  \t\td.removeColumn(\"XXX\");\n  \t}\n  \tcatch (UnknownKeyException e) {\n  \t\tpass = true;\n  \t}\n  \tassertTrue(pass);\n  }",
        "stack": [
          "DefaultKeyedValues.setValue line 234, DefaultKeyedValues2D.setValue line 337, DefaultKeyedValues2D.addValue line 303, DefaultKeyedValues2DTests.testRemoveColumnByKey line 354"
        ]
      }
    ],
    "org.jfree.data.junit.DefaultKeyedValuesTests": [
      {
        "methodName": "testRemoveValue",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(pass);",
        "test_source": "  public void testRemoveValue() {\n  DefaultKeyedValues data = new DefaultKeyedValues();\n  data.addValue(\"A\", new Double(1.0));\n  data.addValue(\"B\", null);\n  data.addValue(\"C\", new Double(3.0));\n  data.addValue(\"D\", new Double(2.0));\n  assertEquals(1, data.getIndex(\"B\"));\n  data.removeValue(\"B\");\n  assertEquals(-1, data.getIndex(\"B\"));\n  \n  boolean pass = false;\n  try {\n  data.removeValue(\"XXX\");\n  }\n  catch (UnknownKeyException e) {\n  pass = true;  \n  }\n  assertTrue(pass);\n  }",
        "stack": [
          "DefaultKeyedValuesTests.testRemoveValue line 372"
        ]
      },
      {
        "methodName": "testGetIndex2",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<-1> but was:<0>",
        "fail_line": "    \tassertEquals(-1, v.getIndex(\"K1\"));",
        "test_source": "  public void testGetIndex2() {\n  \tDefaultKeyedValues v = new DefaultKeyedValues();\n  \tassertEquals(-1, v.getIndex(\"K1\"));\n  \tv.addValue(\"K1\", 1.0);\n  \tassertEquals(0, v.getIndex(\"K1\"));\n  \tv.removeValue(\"K1\");\n  \tassertEquals(-1, v.getIndex(\"K1\"));\n  }",
        "stack": [
          "DefaultKeyedValuesTests.testGetIndex2 line 244"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/data/DefaultKeyedValues.java",
      "buggy_full_code": "\n\npackage org.jfree.data;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport org.jfree.chart.util.PublicCloneable;\nimport org.jfree.chart.util.SortOrder;\n\n\npublic class DefaultKeyedValues implements KeyedValues, Cloneable, PublicCloneable, Serializable { private static final long serialVersionUID = 8468154364608194797L; private ArrayList keys; private ArrayList values; private HashMap indexMap; public DefaultKeyedValues() {\n        this.keys = new ArrayList();\n        this.values = new ArrayList();\n        this.indexMap = new HashMap();\n    }\n\n    \n    public int getItemCount() {\n        return this.indexMap.size();\n    }\n\n    \n    public Number getValue(int item) {\n        return (Number) this.values.get(item);\n    }\n\n    \n    public Comparable getKey(int index) {\n        return (Comparable) this.keys.get(index);\n    }\n\n    \n    public int getIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        final Integer i = (Integer) this.indexMap.get(key);\n        if (i == null) {\n            return -1;  \n        }\n        return i.intValue();\n    }\n\n    \n    public List getKeys() {\n        return (List) this.keys.clone();\n    }\n\n    \n    public Number getValue(Comparable key) {\n        int index = getIndex(key);\n        if (index < 0) {\n            throw new UnknownKeyException(\"Key not found: \" + key);\n        }\n        return getValue(index);\n    }\n\n    \n    public void addValue(Comparable key, double value) {\n        addValue(key, new Double(value)); \n    }\n    \n    \n    public void addValue(Comparable key, Number value) {\n        setValue(key, value);\n    }\n\n    \n    public void setValue(Comparable key, double value) {\n        setValue(key, new Double(value));   \n    }\n    \n    \n    public void setValue(Comparable key, Number value) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            this.keys.set(keyIndex, key);\n            this.values.set(keyIndex, value);\n        }\n        else {\n            this.keys.add(key);\n            this.values.add(value);\n            this.indexMap.put(key, new Integer(this.keys.size() - 1));\n        }\n    }\n    \n    \n    public void insertValue(int position, Comparable key, double value) {\n        insertValue(position, key, new Double(value));\n    }\n\n    \n    public void insertValue(int position, Comparable key, Number value) {\n        if (position < 0 || position > getItemCount()) {\n            throw new IllegalArgumentException(\"'position' out of bounds.\");\n        }\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        int pos = getIndex(key);\n        if (pos == position) {\n            this.keys.set(pos, key);\n            this.values.set(pos, value);\n        }\n        else {\n            if (pos >= 0) {\n                this.keys.remove(pos);\n                this.values.remove(pos);\n            }\n          \n            this.keys.add(position, key);\n            this.values.add(position, value);\n            rebuildIndex();\n        }\n    }\n\n    \n    private void rebuildIndex () {\n        this.indexMap.clear();\n        for (int i = 0; i < this.keys.size(); i++) {\n            final Object key = this.keys.get(i);\n            this.indexMap.put(key, new Integer(i));\n        }\n    }\n\n    \n    public void removeValue(int index) {\n        this.keys.remove(index);\n        this.values.remove(index);\n        if (index < this.keys.size()) {\n        rebuildIndex();\n        }\n    }\n\n    \n    public void removeValue(Comparable key) {\n        int index = getIndex(key);\n        if (index < 0) {\n\t\t\treturn;\n        }\n        removeValue(index);\n    }\n    \n    \n    public void clear() {\n        this.keys.clear();\n        this.values.clear();\n        this.indexMap.clear();\n    }\n\n    \n    public void sortByKeys(SortOrder order) {\n        final int size = this.keys.size();\n        final DefaultKeyedValue[] data = new DefaultKeyedValue[size];\n\n        for (int i = 0; i < size; i++) {\n            data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), \n                    (Number) this.values.get(i));\n        }\n\n        Comparator comparator = new KeyedValueComparator(\n                KeyedValueComparatorType.BY_KEY, order);\n        Arrays.sort(data, comparator);\n        clear();\n\n        for (int i = 0; i < data.length; i++) {\n            final DefaultKeyedValue value = data[i];\n            addValue(value.getKey(), value.getValue());\n        }\n    }\n\n    \n    public void sortByValues(SortOrder order) {\n        final int size = this.keys.size();\n        final DefaultKeyedValue[] data = new DefaultKeyedValue[size];\n        for (int i = 0; i < size; i++) {\n            data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), \n                    (Number) this.values.get(i));\n        }\n\n        Comparator comparator = new KeyedValueComparator(\n                KeyedValueComparatorType.BY_VALUE, order);\n        Arrays.sort(data, comparator);\n\n        clear();\n        for (int i = 0; i < data.length; i++) {\n            final DefaultKeyedValue value = data[i];\n            addValue(value.getKey(), value.getValue());\n        }\n    }\n\n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n\n        if (!(obj instanceof KeyedValues)) {\n            return false;\n        }\n\n        KeyedValues that = (KeyedValues) obj;\n        int count = getItemCount();\n        if (count != that.getItemCount()) {\n            return false;\n        }\n\n        for (int i = 0; i < count; i++) {\n            Comparable k1 = getKey(i);\n            Comparable k2 = that.getKey(i);\n            if (!k1.equals(k2)) {\n                return false;\n            }\n            Number v1 = getValue(i);\n            Number v2 = that.getValue(i);\n            if (v1 == null) {\n                if (v2 != null) {\n                    return false;\n                }\n            }\n            else {\n                if (!v1.equals(v2)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    \n    public int hashCode() {\n        return (this.keys != null ? this.keys.hashCode() : 0);\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        DefaultKeyedValues clone = (DefaultKeyedValues) super.clone();\n        clone.keys = (ArrayList) this.keys.clone();\n        clone.values = (ArrayList) this.values.clone();\n        clone.indexMap = (HashMap) this.indexMap.clone();\n        return clone;\n    }\n    \n}",
      "fixed_full_code": "\n\npackage org.jfree.data;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport org.jfree.chart.util.PublicCloneable;\nimport org.jfree.chart.util.SortOrder;\n\n\npublic class DefaultKeyedValues implements KeyedValues, Cloneable, PublicCloneable, Serializable { private static final long serialVersionUID = 8468154364608194797L; private ArrayList keys; private ArrayList values; private HashMap indexMap; public DefaultKeyedValues() {\n        this.keys = new ArrayList();\n        this.values = new ArrayList();\n        this.indexMap = new HashMap();\n    }\n\n    \n    public int getItemCount() {\n        return this.indexMap.size();\n    }\n\n    \n    public Number getValue(int item) {\n        return (Number) this.values.get(item);\n    }\n\n    \n    public Comparable getKey(int index) {\n        return (Comparable) this.keys.get(index);\n    }\n\n    \n    public int getIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        final Integer i = (Integer) this.indexMap.get(key);\n        if (i == null) {\n            return -1;  \n        }\n        return i.intValue();\n    }\n\n    \n    public List getKeys() {\n        return (List) this.keys.clone();\n    }\n\n    \n    public Number getValue(Comparable key) {\n        int index = getIndex(key);\n        if (index < 0) {\n            throw new UnknownKeyException(\"Key not found: \" + key);\n        }\n        return getValue(index);\n    }\n\n    \n    public void addValue(Comparable key, double value) {\n        addValue(key, new Double(value)); \n    }\n    \n    \n    public void addValue(Comparable key, Number value) {\n        setValue(key, value);\n    }\n\n    \n    public void setValue(Comparable key, double value) {\n        setValue(key, new Double(value));   \n    }\n    \n    \n    public void setValue(Comparable key, Number value) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            this.keys.set(keyIndex, key);\n            this.values.set(keyIndex, value);\n        }\n        else {\n            this.keys.add(key);\n            this.values.add(value);\n            this.indexMap.put(key, new Integer(this.keys.size() - 1));\n        }\n    }\n    \n    \n    public void insertValue(int position, Comparable key, double value) {\n        insertValue(position, key, new Double(value));\n    }\n\n    \n    public void insertValue(int position, Comparable key, Number value) {\n        if (position < 0 || position > getItemCount()) {\n            throw new IllegalArgumentException(\"'position' out of bounds.\");\n        }\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        int pos = getIndex(key);\n        if (pos == position) {\n            this.keys.set(pos, key);\n            this.values.set(pos, value);\n        }\n        else {\n            if (pos >= 0) {\n                this.keys.remove(pos);\n                this.values.remove(pos);\n            }\n          \n            this.keys.add(position, key);\n            this.values.add(position, value);\n            rebuildIndex();\n        }\n    }\n\n    \n    private void rebuildIndex () {\n        this.indexMap.clear();\n        for (int i = 0; i < this.keys.size(); i++) {\n            final Object key = this.keys.get(i);\n            this.indexMap.put(key, new Integer(i));\n        }\n    }\n\n    \n    public void removeValue(int index) {\n        this.keys.remove(index);\n        this.values.remove(index);\n        rebuildIndex();\n    }\n\n    \n    public void removeValue(Comparable key) {\n        int index = getIndex(key);\n        if (index < 0) {\n            throw new UnknownKeyException(\"The key (\" + key \n                    + \") is not recognised.\");\n        }\n        removeValue(index);\n    }\n    \n    \n    public void clear() {\n        this.keys.clear();\n        this.values.clear();\n        this.indexMap.clear();\n    }\n\n    \n    public void sortByKeys(SortOrder order) {\n        final int size = this.keys.size();\n        final DefaultKeyedValue[] data = new DefaultKeyedValue[size];\n\n        for (int i = 0; i < size; i++) {\n            data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), \n                    (Number) this.values.get(i));\n        }\n\n        Comparator comparator = new KeyedValueComparator(\n                KeyedValueComparatorType.BY_KEY, order);\n        Arrays.sort(data, comparator);\n        clear();\n\n        for (int i = 0; i < data.length; i++) {\n            final DefaultKeyedValue value = data[i];\n            addValue(value.getKey(), value.getValue());\n        }\n    }\n\n    \n    public void sortByValues(SortOrder order) {\n        final int size = this.keys.size();\n        final DefaultKeyedValue[] data = new DefaultKeyedValue[size];\n        for (int i = 0; i < size; i++) {\n            data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), \n                    (Number) this.values.get(i));\n        }\n\n        Comparator comparator = new KeyedValueComparator(\n                KeyedValueComparatorType.BY_VALUE, order);\n        Arrays.sort(data, comparator);\n\n        clear();\n        for (int i = 0; i < data.length; i++) {\n            final DefaultKeyedValue value = data[i];\n            addValue(value.getKey(), value.getValue());\n        }\n    }\n\n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n\n        if (!(obj instanceof KeyedValues)) {\n            return false;\n        }\n\n        KeyedValues that = (KeyedValues) obj;\n        int count = getItemCount();\n        if (count != that.getItemCount()) {\n            return false;\n        }\n\n        for (int i = 0; i < count; i++) {\n            Comparable k1 = getKey(i);\n            Comparable k2 = that.getKey(i);\n            if (!k1.equals(k2)) {\n                return false;\n            }\n            Number v1 = getValue(i);\n            Number v2 = that.getValue(i);\n            if (v1 == null) {\n                if (v2 != null) {\n                    return false;\n                }\n            }\n            else {\n                if (!v1.equals(v2)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    \n    public int hashCode() {\n        return (this.keys != null ? this.keys.hashCode() : 0);\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        DefaultKeyedValues clone = (DefaultKeyedValues) super.clone();\n        clone.keys = (ArrayList) this.keys.clone();\n        clone.values = (ArrayList) this.values.clone();\n        clone.indexMap = (HashMap) this.indexMap.clone();\n        return clone;\n    }\n    \n}",
      "buggy_signatures": [
        "public int getItemCount()",
        "public Number getValue(int item)",
        "public Comparable getKey(int index)",
        "public int getIndex(Comparable key)",
        "public List getKeys()",
        "public Number getValue(Comparable key)",
        "public void addValue(Comparable key, double value)",
        "public void addValue(Comparable key, Number value)",
        "public void setValue(Comparable key, double value)",
        "public void setValue(Comparable key, Number value)",
        "public void insertValue(int position, Comparable key, double value)",
        "public void insertValue(int position, Comparable key, Number value)",
        "private void rebuildIndex ()",
        "public void removeValue(int index)",
        "public void removeValue(Comparable key)",
        "public void clear()",
        "public void sortByKeys(SortOrder order)",
        "public void sortByValues(SortOrder order)",
        "public boolean equals(Object obj)",
        "public int hashCode()",
        "public Object clone() throws CloneNotSupportedException"
      ],
      "fixed_signatures": [
        "public int getItemCount()",
        "public Number getValue(int item)",
        "public Comparable getKey(int index)",
        "public int getIndex(Comparable key)",
        "public List getKeys()",
        "public Number getValue(Comparable key)",
        "public void addValue(Comparable key, double value)",
        "public void addValue(Comparable key, Number value)",
        "public void setValue(Comparable key, double value)",
        "public void setValue(Comparable key, Number value)",
        "public void insertValue(int position, Comparable key, double value)",
        "public void insertValue(int position, Comparable key, Number value)",
        "private void rebuildIndex ()",
        "public void removeValue(int index)",
        "public void removeValue(Comparable key)",
        "public void clear()",
        "public void sortByKeys(SortOrder order)",
        "public void sortByValues(SortOrder order)",
        "public boolean equals(Object obj)",
        "public int hashCode()",
        "public Object clone() throws CloneNotSupportedException"
      ],
      "methods": [
        {
          "buggy_method": "  public void removeValue(int index) {\n  this.keys.remove(index);\n  this.values.remove(index);\n  if (index < this.keys.size()) {\n  rebuildIndex();\n  }\n  }",
          "fixed_method": "  public void removeValue(int index) {\n  this.keys.remove(index);\n  this.values.remove(index);\n  rebuildIndex();\n  }",
          "diff": [
            "@@ -315,9 +315,7 @@",
            "     public void removeValue(int index) {\n",
            "         this.keys.remove(index);\n",
            "         this.values.remove(index);\n",
            "-        if (index < this.keys.size()) {\n",
            "         rebuildIndex();\n",
            "-        }\n",
            "     }\n",
            " \n",
            "     /**\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public void removeValue(Comparable key) {\n  int index = getIndex(key);\n  if (index < 0) {\n\t\t\treturn;\n  }\n  removeValue(index);\n  }",
          "fixed_method": "  public void removeValue(Comparable key) {\n  int index = getIndex(key);\n  if (index < 0) {\n  throw new UnknownKeyException(\"The key (\" + key \n  + \") is not recognised.\");\n  }\n  removeValue(index);\n  }",
          "diff": [
            "@@ -332,7 +330,8 @@",
            "     public void removeValue(Comparable key) {\n",
            "         int index = getIndex(key);\n",
            "         if (index < 0) {\n",
            "-\t\t\treturn;\n",
            "+            throw new UnknownKeyException(\"The key (\" + key \n",
            "+                    + \") is not recognised.\");\n",
            "         }\n",
            "         removeValue(index);\n",
            "     }\n"
          ],
          "changed_lines": 3
        }
      ]
    },
    {
      "name": "org/jfree/data/DefaultKeyedValues2D.java",
      "buggy_full_code": "\n\npackage org.jfree.data;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.PublicCloneable;\n\n\npublic class DefaultKeyedValues2D implements KeyedValues2D, PublicCloneable, Cloneable, Serializable { private static final long serialVersionUID = -5514169970951994748L; private List rowKeys; private List columnKeys; private List rows; private boolean sortRowKeys; public DefaultKeyedValues2D() {\n        this(false);\n    }\n\n    \n    public DefaultKeyedValues2D(boolean sortRowKeys) {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n        this.sortRowKeys = sortRowKeys;\n    }\n\n    \n    public int getRowCount() {\n        return this.rowKeys.size();\n    }\n\n    \n    public int getColumnCount() {\n        return this.columnKeys.size();\n    }\n\n    \n    public Number getValue(int row, int column) {\n        Number result = null;\n        DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row);\n        if (rowData != null) {\n            Comparable columnKey = (Comparable) this.columnKeys.get(column);\n            \n            \n            int index = rowData.getIndex(columnKey);\n            if (index >= 0) {\n                result = rowData.getValue(index);\n            }\n        }\n        return result;\n    }\n\n    \n    public Comparable getRowKey(int row) {\n        return (Comparable) this.rowKeys.get(row);\n    }\n\n    \n    public int getRowIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.sortRowKeys) {\n            return Collections.binarySearch(this.rowKeys, key);\n        }\n        else {\n            return this.rowKeys.indexOf(key);\n        }\n    }\n\n    \n    public List getRowKeys() {\n        return Collections.unmodifiableList(this.rowKeys);\n    }\n\n    \n    public Comparable getColumnKey(int column) {\n        return (Comparable) this.columnKeys.get(column);\n    }\n\n    \n    public int getColumnIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        return this.columnKeys.indexOf(key);\n    }\n\n    \n    public List getColumnKeys() {\n        return Collections.unmodifiableList(this.columnKeys);\n    }\n\n    \n    public Number getValue(Comparable rowKey, Comparable columnKey) {\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        \n        \n        if (!(this.columnKeys.contains(columnKey))) {\n            throw new UnknownKeyException(\"Unrecognised columnKey: \" \n                    + columnKey);\n        }\n        \n        \n        \n        \n        int row = getRowIndex(rowKey);\n        if (row >= 0) {\n            DefaultKeyedValues rowData \n                = (DefaultKeyedValues) this.rows.get(row);\n            int col = rowData.getIndex(columnKey);\n            return (col >= 0 ? rowData.getValue(col) : null);\n        }\n        else {\n            throw new UnknownKeyException(\"Unrecognised rowKey: \" + rowKey);\n        }\n    }\n\n    \n    public void addValue(Number value, Comparable rowKey, Comparable columnKey) {\n        \n        setValue(value, rowKey, columnKey);\n    }\n\n    \n    public void setValue(Number value, Comparable rowKey, Comparable columnKey) {\n\n        DefaultKeyedValues row;\n        int rowIndex = getRowIndex(rowKey);\n        \n        if (rowIndex >= 0) {\n            row = (DefaultKeyedValues) this.rows.get(rowIndex);\n        }\n        else {\n            row = new DefaultKeyedValues();\n            if (this.sortRowKeys) {\n                rowIndex = -rowIndex - 1;\n                this.rowKeys.add(rowIndex, rowKey);\n                this.rows.add(rowIndex, row);\n            }\n            else {\n                this.rowKeys.add(rowKey);\n                this.rows.add(row);\n            }\n        }\n        row.setValue(columnKey, value);\n        \n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n    }\n\n    \n    public void removeValue(Comparable rowKey, Comparable columnKey) {\n        setValue(null, rowKey, columnKey);\n        \n        \n        boolean allNull = true;\n        int rowIndex = getRowIndex(rowKey);\n        DefaultKeyedValues row = (DefaultKeyedValues) this.rows.get(rowIndex);\n\n        for (int item = 0, itemCount = row.getItemCount(); item < itemCount; \n             item++) {\n            if (row.getValue(item) != null) {\n                allNull = false;\n                break;\n            }\n        }\n        \n        if (allNull) {\n            this.rowKeys.remove(rowIndex);\n            this.rows.remove(rowIndex);\n        }\n        \n        \n        allNull = true;\n        \n        \n        for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n             item++) {\n            row = (DefaultKeyedValues) this.rows.get(item);\n            int columnIndex = row.getIndex(columnKey);\n            if (columnIndex >= 0 && row.getValue(columnIndex) != null) {\n                allNull = false;\n                break;\n            }\n        }\n        \n        if (allNull) {\n            for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n                 item++) {\n                row = (DefaultKeyedValues) this.rows.get(item);\n                int columnIndex = row.getIndex(columnKey);\n                if (columnIndex >= 0) {\n                    row.removeValue(columnIndex);\n                }\n            }\n            this.columnKeys.remove(columnKey);\n        }\n    }\n\n    \n    public void removeRow(int rowIndex) {\n        this.rowKeys.remove(rowIndex);\n        this.rows.remove(rowIndex);\n    }\n\n    \n    public void removeRow(Comparable rowKey) {\n        removeRow(getRowIndex(rowKey));\n    }\n\n    \n    public void removeColumn(int columnIndex) {\n        Comparable columnKey = getColumnKey(columnIndex);\n        removeColumn(columnKey);\n    }\n\n    \n    public void removeColumn(Comparable columnKey) {\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n                rowData.removeValue(columnKey);\n        }\n        this.columnKeys.remove(columnKey);\n    }\n\n    \n    public void clear() {\n        this.rowKeys.clear();\n        this.columnKeys.clear();\n        this.rows.clear();\n    }\n    \n    \n    public boolean equals(Object o) {\n\n        if (o == null) {\n            return false;\n        }\n        if (o == this) {\n            return true;\n        }\n\n        if (!(o instanceof KeyedValues2D)) {\n            return false;\n        }\n        KeyedValues2D kv2D = (KeyedValues2D) o;\n        if (!getRowKeys().equals(kv2D.getRowKeys())) {\n            return false;\n        }\n        if (!getColumnKeys().equals(kv2D.getColumnKeys())) {\n            return false;\n        }\n        int rowCount = getRowCount();\n        if (rowCount != kv2D.getRowCount()) {\n            return false;\n        }\n\n        int colCount = getColumnCount();\n        if (colCount != kv2D.getColumnCount()) {\n            return false;\n        }\n\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < colCount; c++) {\n                Number v1 = getValue(r, c);\n                Number v2 = kv2D.getValue(r, c);\n                if (v1 == null) {\n                    if (v2 != null) {\n                        return false;\n                    }\n                }\n                else {\n                    if (!v1.equals(v2)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    \n    public int hashCode() {\n        int result;\n        result = this.rowKeys.hashCode();\n        result = 29 * result + this.columnKeys.hashCode();\n        result = 29 * result + this.rows.hashCode();\n        return result;\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        DefaultKeyedValues2D clone = (DefaultKeyedValues2D) super.clone();\n        \n        \n        clone.columnKeys = new java.util.ArrayList(this.columnKeys);\n        clone.rowKeys = new java.util.ArrayList(this.rowKeys);\n        \n        \n        clone.rows = (List) ObjectUtilities.deepClone(this.rows);\n        return clone;\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.jfree.data;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.PublicCloneable;\n\n\npublic class DefaultKeyedValues2D implements KeyedValues2D, PublicCloneable, Cloneable, Serializable { private static final long serialVersionUID = -5514169970951994748L; private List rowKeys; private List columnKeys; private List rows; private boolean sortRowKeys; public DefaultKeyedValues2D() {\n        this(false);\n    }\n\n    \n    public DefaultKeyedValues2D(boolean sortRowKeys) {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n        this.sortRowKeys = sortRowKeys;\n    }\n\n    \n    public int getRowCount() {\n        return this.rowKeys.size();\n    }\n\n    \n    public int getColumnCount() {\n        return this.columnKeys.size();\n    }\n\n    \n    public Number getValue(int row, int column) {\n        Number result = null;\n        DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row);\n        if (rowData != null) {\n            Comparable columnKey = (Comparable) this.columnKeys.get(column);\n            \n            \n            int index = rowData.getIndex(columnKey);\n            if (index >= 0) {\n                result = rowData.getValue(index);\n            }\n        }\n        return result;\n    }\n\n    \n    public Comparable getRowKey(int row) {\n        return (Comparable) this.rowKeys.get(row);\n    }\n\n    \n    public int getRowIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.sortRowKeys) {\n            return Collections.binarySearch(this.rowKeys, key);\n        }\n        else {\n            return this.rowKeys.indexOf(key);\n        }\n    }\n\n    \n    public List getRowKeys() {\n        return Collections.unmodifiableList(this.rowKeys);\n    }\n\n    \n    public Comparable getColumnKey(int column) {\n        return (Comparable) this.columnKeys.get(column);\n    }\n\n    \n    public int getColumnIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        return this.columnKeys.indexOf(key);\n    }\n\n    \n    public List getColumnKeys() {\n        return Collections.unmodifiableList(this.columnKeys);\n    }\n\n    \n    public Number getValue(Comparable rowKey, Comparable columnKey) {\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        \n        \n        if (!(this.columnKeys.contains(columnKey))) {\n            throw new UnknownKeyException(\"Unrecognised columnKey: \" \n                    + columnKey);\n        }\n        \n        \n        \n        \n        int row = getRowIndex(rowKey);\n        if (row >= 0) {\n            DefaultKeyedValues rowData \n                = (DefaultKeyedValues) this.rows.get(row);\n            int col = rowData.getIndex(columnKey);\n            return (col >= 0 ? rowData.getValue(col) : null);\n        }\n        else {\n            throw new UnknownKeyException(\"Unrecognised rowKey: \" + rowKey);\n        }\n    }\n\n    \n    public void addValue(Number value, Comparable rowKey, Comparable columnKey) {\n        \n        setValue(value, rowKey, columnKey);\n    }\n\n    \n    public void setValue(Number value, Comparable rowKey, Comparable columnKey) {\n\n        DefaultKeyedValues row;\n        int rowIndex = getRowIndex(rowKey);\n        \n        if (rowIndex >= 0) {\n            row = (DefaultKeyedValues) this.rows.get(rowIndex);\n        }\n        else {\n            row = new DefaultKeyedValues();\n            if (this.sortRowKeys) {\n                rowIndex = -rowIndex - 1;\n                this.rowKeys.add(rowIndex, rowKey);\n                this.rows.add(rowIndex, row);\n            }\n            else {\n                this.rowKeys.add(rowKey);\n                this.rows.add(row);\n            }\n        }\n        row.setValue(columnKey, value);\n        \n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n    }\n\n    \n    public void removeValue(Comparable rowKey, Comparable columnKey) {\n        setValue(null, rowKey, columnKey);\n        \n        \n        boolean allNull = true;\n        int rowIndex = getRowIndex(rowKey);\n        DefaultKeyedValues row = (DefaultKeyedValues) this.rows.get(rowIndex);\n\n        for (int item = 0, itemCount = row.getItemCount(); item < itemCount; \n             item++) {\n            if (row.getValue(item) != null) {\n                allNull = false;\n                break;\n            }\n        }\n        \n        if (allNull) {\n            this.rowKeys.remove(rowIndex);\n            this.rows.remove(rowIndex);\n        }\n        \n        \n        allNull = true;\n        \n        \n        for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n             item++) {\n            row = (DefaultKeyedValues) this.rows.get(item);\n            int columnIndex = row.getIndex(columnKey);\n            if (columnIndex >= 0 && row.getValue(columnIndex) != null) {\n                allNull = false;\n                break;\n            }\n        }\n        \n        if (allNull) {\n            for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n                 item++) {\n                row = (DefaultKeyedValues) this.rows.get(item);\n                int columnIndex = row.getIndex(columnKey);\n                if (columnIndex >= 0) {\n                    row.removeValue(columnIndex);\n                }\n            }\n            this.columnKeys.remove(columnKey);\n        }\n    }\n\n    \n    public void removeRow(int rowIndex) {\n        this.rowKeys.remove(rowIndex);\n        this.rows.remove(rowIndex);\n    }\n\n    \n    public void removeRow(Comparable rowKey) {\n        removeRow(getRowIndex(rowKey));\n    }\n\n    \n    public void removeColumn(int columnIndex) {\n        Comparable columnKey = getColumnKey(columnIndex);\n        removeColumn(columnKey);\n    }\n\n    \n    public void removeColumn(Comparable columnKey) {\n    \tif (columnKey == null) {\n    \t\tthrow new IllegalArgumentException(\"Null 'columnKey' argument.\");\n    \t}\n    \tif (!this.columnKeys.contains(columnKey)) {\n    \t\tthrow new UnknownKeyException(\"Unknown key: \" + columnKey);\n    \t}\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n            int index = rowData.getIndex(columnKey);\n            if (index >= 0) {\n                rowData.removeValue(columnKey);\n            }\n        }\n        this.columnKeys.remove(columnKey);\n    }\n\n    \n    public void clear() {\n        this.rowKeys.clear();\n        this.columnKeys.clear();\n        this.rows.clear();\n    }\n    \n    \n    public boolean equals(Object o) {\n\n        if (o == null) {\n            return false;\n        }\n        if (o == this) {\n            return true;\n        }\n\n        if (!(o instanceof KeyedValues2D)) {\n            return false;\n        }\n        KeyedValues2D kv2D = (KeyedValues2D) o;\n        if (!getRowKeys().equals(kv2D.getRowKeys())) {\n            return false;\n        }\n        if (!getColumnKeys().equals(kv2D.getColumnKeys())) {\n            return false;\n        }\n        int rowCount = getRowCount();\n        if (rowCount != kv2D.getRowCount()) {\n            return false;\n        }\n\n        int colCount = getColumnCount();\n        if (colCount != kv2D.getColumnCount()) {\n            return false;\n        }\n\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < colCount; c++) {\n                Number v1 = getValue(r, c);\n                Number v2 = kv2D.getValue(r, c);\n                if (v1 == null) {\n                    if (v2 != null) {\n                        return false;\n                    }\n                }\n                else {\n                    if (!v1.equals(v2)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    \n    public int hashCode() {\n        int result;\n        result = this.rowKeys.hashCode();\n        result = 29 * result + this.columnKeys.hashCode();\n        result = 29 * result + this.rows.hashCode();\n        return result;\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        DefaultKeyedValues2D clone = (DefaultKeyedValues2D) super.clone();\n        \n        \n        clone.columnKeys = new java.util.ArrayList(this.columnKeys);\n        clone.rowKeys = new java.util.ArrayList(this.rowKeys);\n        \n        \n        clone.rows = (List) ObjectUtilities.deepClone(this.rows);\n        return clone;\n    }\n\n}\n",
      "buggy_signatures": [
        "public DefaultKeyedValues2D(boolean sortRowKeys)",
        "public int getRowCount()",
        "public int getColumnCount()",
        "public Number getValue(int row, int column)",
        "public Comparable getRowKey(int row)",
        "public int getRowIndex(Comparable key)",
        "public List getRowKeys()",
        "public Comparable getColumnKey(int column)",
        "public int getColumnIndex(Comparable key)",
        "public List getColumnKeys()",
        "public Number getValue(Comparable rowKey, Comparable columnKey)",
        "public void addValue(Number value, Comparable rowKey, Comparable columnKey)",
        "public void setValue(Number value, Comparable rowKey, Comparable columnKey)",
        "public void removeValue(Comparable rowKey, Comparable columnKey)",
        "public void removeRow(int rowIndex)",
        "public void removeRow(Comparable rowKey)",
        "public void removeColumn(int columnIndex)",
        "public void removeColumn(Comparable columnKey)",
        "public void clear()",
        "public boolean equals(Object o)",
        "public int hashCode()",
        "public Object clone() throws CloneNotSupportedException"
      ],
      "fixed_signatures": [
        "public DefaultKeyedValues2D(boolean sortRowKeys)",
        "public int getRowCount()",
        "public int getColumnCount()",
        "public Number getValue(int row, int column)",
        "public Comparable getRowKey(int row)",
        "public int getRowIndex(Comparable key)",
        "public List getRowKeys()",
        "public Comparable getColumnKey(int column)",
        "public int getColumnIndex(Comparable key)",
        "public List getColumnKeys()",
        "public Number getValue(Comparable rowKey, Comparable columnKey)",
        "public void addValue(Number value, Comparable rowKey, Comparable columnKey)",
        "public void setValue(Number value, Comparable rowKey, Comparable columnKey)",
        "public void removeValue(Comparable rowKey, Comparable columnKey)",
        "public void removeRow(int rowIndex)",
        "public void removeRow(Comparable rowKey)",
        "public void removeColumn(int columnIndex)",
        "public void removeColumn(Comparable columnKey)",
        "public void clear()",
        "public boolean equals(Object o)",
        "public int hashCode()",
        "public Object clone() throws CloneNotSupportedException"
      ],
      "methods": [
        {
          "buggy_method": "  public void removeColumn(Comparable columnKey) {\n  Iterator iterator = this.rows.iterator();\n  while (iterator.hasNext()) {\n  DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n  rowData.removeValue(columnKey);\n  }\n  this.columnKeys.remove(columnKey);\n  }",
          "fixed_method": "  public void removeColumn(Comparable columnKey) {\n  \tif (columnKey == null) {\n  \t\tthrow new IllegalArgumentException(\"Null 'columnKey' argument.\");\n  \t}\n  \tif (!this.columnKeys.contains(columnKey)) {\n  \t\tthrow new UnknownKeyException(\"Unknown key: \" + columnKey);\n  \t}\n  Iterator iterator = this.rows.iterator();\n  while (iterator.hasNext()) {\n  DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n  int index = rowData.getIndex(columnKey);\n  if (index >= 0) {\n  rowData.removeValue(columnKey);\n  }\n  }\n  this.columnKeys.remove(columnKey);\n  }",
          "diff": [
            "@@ -452,10 +452,19 @@",
            "      * @see #removeRow(Comparable)\n",
            "      */\n",
            "     public void removeColumn(Comparable columnKey) {\n",
            "+    \tif (columnKey == null) {\n",
            "+    \t\tthrow new IllegalArgumentException(\"Null 'columnKey' argument.\");\n",
            "+    \t}\n",
            "+    \tif (!this.columnKeys.contains(columnKey)) {\n",
            "+    \t\tthrow new UnknownKeyException(\"Unknown key: \" + columnKey);\n",
            "+    \t}\n",
            "         Iterator iterator = this.rows.iterator();\n",
            "         while (iterator.hasNext()) {\n",
            "             DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n",
            "+            int index = rowData.getIndex(columnKey);\n",
            "+            if (index >= 0) {\n",
            "                 rowData.removeValue(columnKey);\n",
            "+            }\n",
            "         }\n",
            "         this.columnKeys.remove(columnKey);\n",
            "     }\n"
          ],
          "changed_lines": 9
        }
      ]
    }
  ]
}
