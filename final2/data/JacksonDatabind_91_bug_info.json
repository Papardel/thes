{
  "bug_id": "91",
  "failed_tests": {
    "com.fasterxml.jackson.databind.deser.jdk.MapDeserializerCachingTest": [
      {
        "methodName": "testCachedSerialize",
        "error": "junit.framework.AssertionFailedError",
        "message": "Not using custom key deserializer for input: {\"data\":{\"1st\":\"onedata\",\"2nd\":\"twodata\"}}; resulted in: {1st=onedata, 2nd=twodata}",
        "fail_line": "            fail(\"Not using custom key deserializer for input: \"+json+\"; resulted in: \"+model2.data);",
        "test_source": "  public void testCachedSerialize() throws IOException {\n  ObjectMapper mapper = new ObjectMapper();\n  String json = aposToQuotes(\"{'data':{'1st':'onedata','2nd':'twodata'}}\");\n\n  // Do deserialization with non-annotated map property\n  NonAnnotatedMapHolderClass ignored = mapper.readValue(json, NonAnnotatedMapHolderClass.class);\n  assertTrue(ignored.data.containsKey(\"1st\"));\n  assertTrue(ignored.data.containsKey(\"2nd\"));\n\n//mapper = new ObjectMapper();\n  \n  MapHolder model2 = mapper.readValue(json, MapHolder.class);\n  if (!model2.data.containsKey(\"1st (CUSTOM)\")\n  || !model2.data.containsKey(\"2nd (CUSTOM)\")) {\n  fail(\"Not using custom key deserializer for input: \"+json+\"; resulted in: \"+model2.data);\n  }\n  }",
        "stack": [
          "MapDeserializerCachingTest.testCachedSerialize line 49"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.util.HashMap;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\nimport com.fasterxml.jackson.databind.introspect.Annotated;\nimport com.fasterxml.jackson.databind.type.*;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\nimport com.fasterxml.jackson.databind.util.Converter;\n\n\npublic final class DeserializerCache implements java.io.Serializable { private static final long serialVersionUID = 1L; final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _cachedDeserializers = new ConcurrentHashMap<JavaType, JsonDeserializer<Object>>(64, 0.75f, 4); final protected HashMap<JavaType, JsonDeserializer<Object>> _incompleteDeserializers = new HashMap<JavaType, JsonDeserializer<Object>>(8); public DeserializerCache() { }\n\n    \n\n    Object writeReplace() {\n        \n        _incompleteDeserializers.clear();\n        \n        return this;\n    }\n    \n    \n\n    \n    public int cachedDeserializersCount() {\n        return _cachedDeserializers.size();\n    }\n\n    \n    public void flushCachedDeserializers() {\n        _cachedDeserializers.clear();       \n    }\n\n    \n\n    \n    public JsonDeserializer<Object> findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n        JsonDeserializer<Object> deser = _findCachedDeserializer(propertyType);\n        if (deser == null) {\n            \n            deser = _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n            if (deser == null) {\n                \n                deser = _handleUnknownValueDeserializer(ctxt, propertyType);\n            }\n        }\n        return deser;\n    }\n\n    \n    public KeyDeserializer findKeyDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n        KeyDeserializer kd = factory.createKeyDeserializer(ctxt, type);\n        if (kd == null) { \n            return _handleUnknownKeyDeserializer(ctxt, type);\n        }\n        \n        if (kd instanceof ResolvableDeserializer) {\n            ((ResolvableDeserializer) kd).resolve(ctxt);\n        }\n        return kd;\n    }\n\n    \n    public boolean hasValueDeserializerFor(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n        \n        JsonDeserializer<Object> deser = _findCachedDeserializer(type);\n        if (deser == null) {\n            deser = _createAndCacheValueDeserializer(ctxt, factory, type);\n        }\n        return (deser != null);\n    }\n\n    \n\n    protected JsonDeserializer<Object> _findCachedDeserializer(JavaType type) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Null JavaType passed\");\n        }\n        if (_hasCustomHandlers(type)) {\n            return null;\n        }\n        return _cachedDeserializers.get(type);\n    }\n\n    \n    protected JsonDeserializer<Object> _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n        \n        synchronized (_incompleteDeserializers) {\n            \n            JsonDeserializer<Object> deser = _findCachedDeserializer(type);\n            if (deser != null) {\n                return deser;\n            }\n            int count = _incompleteDeserializers.size();\n            \n            if (count > 0) {\n                deser = _incompleteDeserializers.get(type);\n                if (deser != null) {\n                    return deser;\n                }\n            }\n            \n            try {\n                return _createAndCache2(ctxt, factory, type);\n            } finally {\n                \n                if (count == 0 && _incompleteDeserializers.size() > 0) {\n                    _incompleteDeserializers.clear();\n                }\n            }\n        }\n    }\n\n    \n    protected JsonDeserializer<Object> _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n        JsonDeserializer<Object> deser;\n        try {\n            deser = _createDeserializer(ctxt, factory, type);\n        } catch (IllegalArgumentException iae) {\n            \n            \n            throw JsonMappingException.from(ctxt, iae.getMessage(), iae);\n        }\n        if (deser == null) {\n            return null;\n        }\n        \n        \n        boolean addToCache = !_hasCustomHandlers(type) && deser.isCachable();\n\n        \n        \n        \n        if (deser instanceof ResolvableDeserializer) {\n            _incompleteDeserializers.put(type, deser);\n            ((ResolvableDeserializer)deser).resolve(ctxt);\n            _incompleteDeserializers.remove(type);\n        }\n        if (addToCache) {\n            _cachedDeserializers.put(type, deser);\n        }\n        return deser;\n    }\n\n    \n    \n    \n    @SuppressWarnings(\"unchecked\")\n    protected JsonDeserializer<Object> _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n        final DeserializationConfig config = ctxt.getConfig();\n\n        \n        if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n            type = factory.mapAbstractType(config, type);\n        }\n        BeanDescription beanDesc = config.introspect(type);\n        \n        JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt,\n                beanDesc.getClassInfo());\n        if (deser != null) {\n            return deser;\n        }\n\n        \n        JavaType newType = modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n        if (newType != type) {\n            type = newType;\n            beanDesc = config.introspect(newType);\n        }\n\n        \n        Class<?> builder = beanDesc.findPOJOBuilder();\n        if (builder != null) {\n            return (JsonDeserializer<Object>) factory.createBuilderBasedDeserializer(\n            \t\tctxt, type, beanDesc, builder);\n        }\n\n        \n        Converter<Object,Object> conv = beanDesc.findDeserializationConverter();\n        if (conv == null) { \n            return (JsonDeserializer<Object>) _createDeserializer2(ctxt, factory, type, beanDesc);\n        }\n        \n        JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n        \n        if (!delegateType.hasRawClass(type.getRawClass())) {\n            beanDesc = config.introspect(delegateType);\n        }\n        return new StdDelegatingDeserializer<Object>(conv, delegateType,\n                _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n    }\n\n    protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n        final DeserializationConfig config = ctxt.getConfig();\n        \n        if (type.isEnumType()) {\n            return factory.createEnumDeserializer(ctxt, type, beanDesc);\n        }\n        if (type.isContainerType()) {\n            if (type.isArrayType()) {\n                return factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n            }\n            if (type.isMapLikeType()) {\n                MapLikeType mlt = (MapLikeType) type;\n                if (mlt.isTrueMapType()) {\n                    return factory.createMapDeserializer(ctxt,(MapType) mlt, beanDesc);\n                }\n                return factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n            }\n            if (type.isCollectionLikeType()) {\n                \n                JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n                if ((format == null) || format.getShape() != JsonFormat.Shape.OBJECT) {\n                    CollectionLikeType clt = (CollectionLikeType) type;\n                    if (clt.isTrueCollectionType()) {\n                        return factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n                    }\n                    return factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n                }\n            }\n        }\n        if (type.isReferenceType()) {\n            return factory.createReferenceDeserializer(ctxt, (ReferenceType) type, beanDesc);\n        }\n        if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n            return factory.createTreeDeserializer(config, type, beanDesc);\n        }\n        return factory.createBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    \n    protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann) throws JsonMappingException {\n        Object deserDef = ctxt.getAnnotationIntrospector().findDeserializer(ann);\n        if (deserDef == null) {\n            return null;\n        }\n        JsonDeserializer<Object> deser = ctxt.deserializerInstance(ann, deserDef);\n        \n        return findConvertingDeserializer(ctxt, ann, deser);\n    }\n\n    \n    protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, Annotated a, JsonDeserializer<Object> deser) throws JsonMappingException {\n        Converter<Object,Object> conv = findConverter(ctxt, a);\n        if (conv == null) {\n            return deser;\n        }\n        JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n        return (JsonDeserializer<Object>) new StdDelegatingDeserializer<Object>(conv, delegateType, deser);\n    }\n\n    protected Converter<Object,Object> findConverter(DeserializationContext ctxt, Annotated a) throws JsonMappingException {\n        Object convDef = ctxt.getAnnotationIntrospector().findDeserializationConverter(a);\n        if (convDef == null) {\n            return null;\n        }\n        return ctxt.converterInstance(a, convDef);\n    }    \n    \n    private JavaType modifyTypeByAnnotation(DeserializationContext ctxt, Annotated a, JavaType type) throws JsonMappingException {\n        AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n        if (intr == null) {\n            return type;\n        }\n\n        \n\n        \n        if (type.isMapLikeType()) {\n            JavaType keyType = type.getKeyType();\n            \n            \n            \n            if (keyType != null && keyType.getValueHandler() == null) {\n                Object kdDef = intr.findKeyDeserializer(a);\n                if (kdDef != null) {\n                    KeyDeserializer kd = ctxt.keyDeserializerInstance(a, kdDef);\n                    if (kd != null) {\n                        type = ((MapLikeType) type).withKeyValueHandler(kd);\n                        keyType = type.getKeyType(); \n                    }\n                }\n            }            \n        }\n        JavaType contentType = type.getContentType();\n        if (contentType != null) {\n            if (contentType.getValueHandler() == null) { \n                Object cdDef = intr.findContentDeserializer(a);\n                if (cdDef != null) {\n                    JsonDeserializer<?> cd = null;\n                    if (cdDef instanceof JsonDeserializer<?>) {\n                        cdDef = (JsonDeserializer<?>) cdDef;\n                    } else {\n                        Class<?> cdClass = _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n                        if (cdClass != null) {\n                            cd = ctxt.deserializerInstance(a, cdClass);\n                        }\n                    }\n                    if (cd != null) {\n                        type = type.withContentValueHandler(cd);\n                    }\n                }\n            }\n        }\n\n        \n        \n        type = intr.refineDeserializationType(ctxt.getConfig(), a, type);\n        \n        return type;\n    }\n\n    \n\n    \n    private boolean _hasCustomHandlers(JavaType t) {\n        if (t.isContainerType()) {\n            \n            JavaType ct = t.getContentType();\n            if (ct != null) {\n                return (ct.getValueHandler() != null) || (ct.getTypeHandler() != null);\n            \n            }\n        }\n        return false;\n    }\n\n    private Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass) {\n        if (src == null) {\n            return null;\n        }\n        if (!(src instanceof Class)) {\n            throw new IllegalStateException(\"AnnotationIntrospector.\"+methodName+\"() returned value of type \"+src.getClass().getName()+\": expected type JsonSerializer or Class<JsonSerializer> instead\");\n        }\n        Class<?> cls = (Class<?>) src;\n        if (cls == noneClass || ClassUtil.isBogusClass(cls)) {\n            return null;\n        }\n        return cls;\n    }\n\n    \n\n    \n    protected JsonDeserializer<Object> _handleUnknownValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n        \n        Class<?> rawClass = type.getRawClass();\n        if (!ClassUtil.isConcrete(rawClass)) {\n            ctxt.reportMappingException(\"Can not find a Value deserializer for abstract type %s\", type); } ctxt.reportMappingException(\"Can not find a Value deserializer for type %s\", type); return null; } protected KeyDeserializer _handleUnknownKeyDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n        ctxt.reportMappingException(\"Can not find a (Map) Key deserializer for type %s\", type);\n        return null;\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.util.HashMap;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\nimport com.fasterxml.jackson.databind.introspect.Annotated;\nimport com.fasterxml.jackson.databind.type.*;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\nimport com.fasterxml.jackson.databind.util.Converter;\n\n\npublic final class DeserializerCache implements java.io.Serializable { private static final long serialVersionUID = 1L; final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _cachedDeserializers = new ConcurrentHashMap<JavaType, JsonDeserializer<Object>>(64, 0.75f, 4); final protected HashMap<JavaType, JsonDeserializer<Object>> _incompleteDeserializers = new HashMap<JavaType, JsonDeserializer<Object>>(8); public DeserializerCache() { }\n\n    \n\n    Object writeReplace() {\n        \n        _incompleteDeserializers.clear();\n        \n        return this;\n    }\n    \n    \n\n    \n    public int cachedDeserializersCount() {\n        return _cachedDeserializers.size();\n    }\n\n    \n    public void flushCachedDeserializers() {\n        _cachedDeserializers.clear();       \n    }\n\n    \n\n    \n    public JsonDeserializer<Object> findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n        JsonDeserializer<Object> deser = _findCachedDeserializer(propertyType);\n        if (deser == null) {\n            \n            deser = _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n            if (deser == null) {\n                \n                deser = _handleUnknownValueDeserializer(ctxt, propertyType);\n            }\n        }\n        return deser;\n    }\n\n    \n    public KeyDeserializer findKeyDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n        KeyDeserializer kd = factory.createKeyDeserializer(ctxt, type);\n        if (kd == null) { \n            return _handleUnknownKeyDeserializer(ctxt, type);\n        }\n        \n        if (kd instanceof ResolvableDeserializer) {\n            ((ResolvableDeserializer) kd).resolve(ctxt);\n        }\n        return kd;\n    }\n\n    \n    public boolean hasValueDeserializerFor(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n        \n        JsonDeserializer<Object> deser = _findCachedDeserializer(type);\n        if (deser == null) {\n            deser = _createAndCacheValueDeserializer(ctxt, factory, type);\n        }\n        return (deser != null);\n    }\n\n    \n\n    protected JsonDeserializer<Object> _findCachedDeserializer(JavaType type) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Null JavaType passed\");\n        }\n        if (_hasCustomHandlers(type)) {\n            return null;\n        }\n        return _cachedDeserializers.get(type);\n    }\n\n    \n    protected JsonDeserializer<Object> _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n        \n        synchronized (_incompleteDeserializers) {\n            \n            JsonDeserializer<Object> deser = _findCachedDeserializer(type);\n            if (deser != null) {\n                return deser;\n            }\n            int count = _incompleteDeserializers.size();\n            \n            if (count > 0) {\n                deser = _incompleteDeserializers.get(type);\n                if (deser != null) {\n                    return deser;\n                }\n            }\n            \n            try {\n                return _createAndCache2(ctxt, factory, type);\n            } finally {\n                \n                if (count == 0 && _incompleteDeserializers.size() > 0) {\n                    _incompleteDeserializers.clear();\n                }\n            }\n        }\n    }\n\n    \n    protected JsonDeserializer<Object> _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n        JsonDeserializer<Object> deser;\n        try {\n            deser = _createDeserializer(ctxt, factory, type);\n        } catch (IllegalArgumentException iae) {\n            \n            \n            throw JsonMappingException.from(ctxt, iae.getMessage(), iae);\n        }\n        if (deser == null) {\n            return null;\n        }\n        \n        \n        boolean addToCache = !_hasCustomHandlers(type) && deser.isCachable();\n\n        \n        \n        \n        if (deser instanceof ResolvableDeserializer) {\n            _incompleteDeserializers.put(type, deser);\n            ((ResolvableDeserializer)deser).resolve(ctxt);\n            _incompleteDeserializers.remove(type);\n        }\n        if (addToCache) {\n            _cachedDeserializers.put(type, deser);\n        }\n        return deser;\n    }\n\n    \n    \n    \n    @SuppressWarnings(\"unchecked\")\n    protected JsonDeserializer<Object> _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n        final DeserializationConfig config = ctxt.getConfig();\n\n        \n        if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n            type = factory.mapAbstractType(config, type);\n        }\n        BeanDescription beanDesc = config.introspect(type);\n        \n        JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt,\n                beanDesc.getClassInfo());\n        if (deser != null) {\n            return deser;\n        }\n\n        \n        JavaType newType = modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n        if (newType != type) {\n            type = newType;\n            beanDesc = config.introspect(newType);\n        }\n\n        \n        Class<?> builder = beanDesc.findPOJOBuilder();\n        if (builder != null) {\n            return (JsonDeserializer<Object>) factory.createBuilderBasedDeserializer(\n            \t\tctxt, type, beanDesc, builder);\n        }\n\n        \n        Converter<Object,Object> conv = beanDesc.findDeserializationConverter();\n        if (conv == null) { \n            return (JsonDeserializer<Object>) _createDeserializer2(ctxt, factory, type, beanDesc);\n        }\n        \n        JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n        \n        if (!delegateType.hasRawClass(type.getRawClass())) {\n            beanDesc = config.introspect(delegateType);\n        }\n        return new StdDelegatingDeserializer<Object>(conv, delegateType,\n                _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n    }\n\n    protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n        final DeserializationConfig config = ctxt.getConfig();\n        \n        if (type.isEnumType()) {\n            return factory.createEnumDeserializer(ctxt, type, beanDesc);\n        }\n        if (type.isContainerType()) {\n            if (type.isArrayType()) {\n                return factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n            }\n            if (type.isMapLikeType()) {\n                MapLikeType mlt = (MapLikeType) type;\n                if (mlt.isTrueMapType()) {\n                    return factory.createMapDeserializer(ctxt,(MapType) mlt, beanDesc);\n                }\n                return factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n            }\n            if (type.isCollectionLikeType()) {\n                \n                JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n                if ((format == null) || format.getShape() != JsonFormat.Shape.OBJECT) {\n                    CollectionLikeType clt = (CollectionLikeType) type;\n                    if (clt.isTrueCollectionType()) {\n                        return factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n                    }\n                    return factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n                }\n            }\n        }\n        if (type.isReferenceType()) {\n            return factory.createReferenceDeserializer(ctxt, (ReferenceType) type, beanDesc);\n        }\n        if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n            return factory.createTreeDeserializer(config, type, beanDesc);\n        }\n        return factory.createBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    \n    protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann) throws JsonMappingException {\n        Object deserDef = ctxt.getAnnotationIntrospector().findDeserializer(ann);\n        if (deserDef == null) {\n            return null;\n        }\n        JsonDeserializer<Object> deser = ctxt.deserializerInstance(ann, deserDef);\n        \n        return findConvertingDeserializer(ctxt, ann, deser);\n    }\n\n    \n    protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, Annotated a, JsonDeserializer<Object> deser) throws JsonMappingException {\n        Converter<Object,Object> conv = findConverter(ctxt, a);\n        if (conv == null) {\n            return deser;\n        }\n        JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n        return (JsonDeserializer<Object>) new StdDelegatingDeserializer<Object>(conv, delegateType, deser);\n    }\n\n    protected Converter<Object,Object> findConverter(DeserializationContext ctxt, Annotated a) throws JsonMappingException {\n        Object convDef = ctxt.getAnnotationIntrospector().findDeserializationConverter(a);\n        if (convDef == null) {\n            return null;\n        }\n        return ctxt.converterInstance(a, convDef);\n    }    \n    \n    private JavaType modifyTypeByAnnotation(DeserializationContext ctxt, Annotated a, JavaType type) throws JsonMappingException {\n        AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n        if (intr == null) {\n            return type;\n        }\n\n        \n\n        \n        if (type.isMapLikeType()) {\n            JavaType keyType = type.getKeyType();\n            \n            \n            \n            if (keyType != null && keyType.getValueHandler() == null) {\n                Object kdDef = intr.findKeyDeserializer(a);\n                if (kdDef != null) {\n                    KeyDeserializer kd = ctxt.keyDeserializerInstance(a, kdDef);\n                    if (kd != null) {\n                        type = ((MapLikeType) type).withKeyValueHandler(kd);\n                        keyType = type.getKeyType(); \n                    }\n                }\n            }            \n        }\n        JavaType contentType = type.getContentType();\n        if (contentType != null) {\n            if (contentType.getValueHandler() == null) { \n                Object cdDef = intr.findContentDeserializer(a);\n                if (cdDef != null) {\n                    JsonDeserializer<?> cd = null;\n                    if (cdDef instanceof JsonDeserializer<?>) {\n                        cdDef = (JsonDeserializer<?>) cdDef;\n                    } else {\n                        Class<?> cdClass = _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n                        if (cdClass != null) {\n                            cd = ctxt.deserializerInstance(a, cdClass);\n                        }\n                    }\n                    if (cd != null) {\n                        type = type.withContentValueHandler(cd);\n                    }\n                }\n            }\n        }\n\n        \n        \n        type = intr.refineDeserializationType(ctxt.getConfig(), a, type);\n        \n        return type;\n    }\n\n    \n\n    \n    private boolean _hasCustomHandlers(JavaType t) {\n        if (t.isContainerType()) {\n            \n            JavaType ct = t.getContentType();\n            if (ct != null) {\n                if ((ct.getValueHandler() != null) || (ct.getTypeHandler() != null)) {\n                    return true;\n                }\n            }\n            \n            if (t.isMapLikeType()) {\n                JavaType kt = t.getKeyType();\n                if (kt.getValueHandler() != null) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass) {\n        if (src == null) {\n            return null;\n        }\n        if (!(src instanceof Class)) {\n            throw new IllegalStateException(\"AnnotationIntrospector.\"+methodName+\"() returned value of type \"+src.getClass().getName()+\": expected type JsonSerializer or Class<JsonSerializer> instead\");\n        }\n        Class<?> cls = (Class<?>) src;\n        if (cls == noneClass || ClassUtil.isBogusClass(cls)) {\n            return null;\n        }\n        return cls;\n    }\n\n    \n\n    \n    protected JsonDeserializer<Object> _handleUnknownValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n        \n        Class<?> rawClass = type.getRawClass();\n        if (!ClassUtil.isConcrete(rawClass)) {\n            ctxt.reportMappingException(\"Can not find a Value deserializer for abstract type %s\", type); } ctxt.reportMappingException(\"Can not find a Value deserializer for type %s\", type); return null; } protected KeyDeserializer _handleUnknownKeyDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n        ctxt.reportMappingException(\"Can not find a (Map) Key deserializer for type %s\", type);\n        return null;\n    }\n}\n",
      "buggy_signatures": [
        "public int cachedDeserializersCount()",
        "public void flushCachedDeserializers()",
        "public JsonDeserializer<Object> findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException",
        "public KeyDeserializer findKeyDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
        "public boolean hasValueDeserializerFor(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
        "protected JsonDeserializer<Object> _findCachedDeserializer(JavaType type)",
        "protected JsonDeserializer<Object> _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
        "synchronized (_incompleteDeserializers)",
        "protected JsonDeserializer<Object> _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
        "protected JsonDeserializer<Object> _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
        "protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type, BeanDescription beanDesc) throws JsonMappingException",
        "protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann) throws JsonMappingException",
        "protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, Annotated a, JsonDeserializer<Object> deser) throws JsonMappingException",
        "protected Converter<Object,Object> findConverter(DeserializationContext ctxt, Annotated a) throws JsonMappingException",
        "private JavaType modifyTypeByAnnotation(DeserializationContext ctxt, Annotated a, JavaType type) throws JsonMappingException",
        "private boolean _hasCustomHandlers(JavaType t)",
        "private Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass)",
        "protected JsonDeserializer<Object> _handleUnknownValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException",
        "abstract type %s\", type); } ctxt.reportMappingException(\"Can not find a Value deserializer for type %s\", type); return null; } protected KeyDeserializer _handleUnknownKeyDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException"
      ],
      "fixed_signatures": [
        "public int cachedDeserializersCount()",
        "public void flushCachedDeserializers()",
        "public JsonDeserializer<Object> findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException",
        "public KeyDeserializer findKeyDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
        "public boolean hasValueDeserializerFor(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
        "protected JsonDeserializer<Object> _findCachedDeserializer(JavaType type)",
        "protected JsonDeserializer<Object> _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
        "synchronized (_incompleteDeserializers)",
        "protected JsonDeserializer<Object> _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
        "protected JsonDeserializer<Object> _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException",
        "protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type, BeanDescription beanDesc) throws JsonMappingException",
        "protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann) throws JsonMappingException",
        "protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, Annotated a, JsonDeserializer<Object> deser) throws JsonMappingException",
        "protected Converter<Object,Object> findConverter(DeserializationContext ctxt, Annotated a) throws JsonMappingException",
        "private JavaType modifyTypeByAnnotation(DeserializationContext ctxt, Annotated a, JavaType type) throws JsonMappingException",
        "private boolean _hasCustomHandlers(JavaType t)",
        "private Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass)",
        "protected JsonDeserializer<Object> _handleUnknownValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException",
        "abstract type %s\", type); } ctxt.reportMappingException(\"Can not find a Value deserializer for type %s\", type); return null; } protected KeyDeserializer _handleUnknownKeyDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException"
      ],
      "methods": [
        {
          "buggy_method": "  private boolean _hasCustomHandlers(JavaType t) {\n  if (t.isContainerType()) {\n  \n  JavaType ct = t.getContentType();\n  if (ct != null) {\n  return (ct.getValueHandler() != null) || (ct.getTypeHandler() != null);\n  \n  }\n  }\n  return false;\n  }",
          "fixed_method": "  private boolean _hasCustomHandlers(JavaType t) {\n  if (t.isContainerType()) {\n  \n  JavaType ct = t.getContentType();\n  if (ct != null) {\n  if ((ct.getValueHandler() != null) || (ct.getTypeHandler() != null)) {\n  return true;\n  }\n  }\n  \n  if (t.isMapLikeType()) {\n  JavaType kt = t.getKeyType();\n  if (kt.getValueHandler() != null) {\n  return true;\n  }\n  }\n  }\n  return false;\n  }",
          "diff": [
            "@@ -538,8 +538,16 @@",
            "             // First: value types may have both value and type handlers\n",
            "             JavaType ct = t.getContentType();\n",
            "             if (ct != null) {\n",
            "-                return (ct.getValueHandler() != null) || (ct.getTypeHandler() != null);\n",
            "+                if ((ct.getValueHandler() != null) || (ct.getTypeHandler() != null)) {\n",
            "+                    return true;\n",
            "+                }\n",
            "+            }\n",
            "             // Second: map(-like) types may have value handler for key (but not type; keys are untyped)\n",
            "+            if (t.isMapLikeType()) {\n",
            "+                JavaType kt = t.getKeyType();\n",
            "+                if (kt.getValueHandler() != null) {\n",
            "+                    return true;\n",
            "+                }\n",
            "             }\n",
            "         }\n",
            "         return false;\n"
          ],
          "changed_lines": 10
        }
      ]
    }
  ]
}
