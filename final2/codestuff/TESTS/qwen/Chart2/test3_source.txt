### Failing Test
Test Source:
```java
public void testBug2849731_2() {
  XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
  XYIntervalSeries s = new XYIntervalSeries("S1");
  s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);
  d.addSeries(s);
  Range r = DatasetUtilities.iterateDomainBounds(d);
  assertEquals(1.0, r.getLowerBound(), EPSILON);
  assertEquals(1.0, r.getUpperBound(), EPSILON);

  s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);
  r = DatasetUtilities.iterateDomainBounds(d);
  assertEquals(1.0, r.getLowerBound(), EPSILON);
  assertEquals(1.5, r.getUpperBound(), EPSILON);

  s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);
  r = DatasetUtilities.iterateDomainBounds(d);
  assertEquals(0.5, r.getLowerBound(), EPSILON);
  assertEquals(1.5, r.getUpperBound(), EPSILON);
  }
```
Stack Trace:
DatasetUtilitiesTests.testBug2849731_2 line 1276

### Failing Test
Test Source:
```java
public void testBug2849731_3() {
  XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
  XYIntervalSeries s = new XYIntervalSeries("S1");
  s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);
  d.addSeries(s);
  Range r = DatasetUtilities.iterateRangeBounds(d);
  assertEquals(1.5, r.getLowerBound(), EPSILON);
  assertEquals(1.5, r.getUpperBound(), EPSILON);

  s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);
  r = DatasetUtilities.iterateRangeBounds(d);
  assertEquals(1.5, r.getLowerBound(), EPSILON);
  assertEquals(2.5, r.getUpperBound(), EPSILON);

  s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);
  r = DatasetUtilities.iterateRangeBounds(d);
  assertEquals(1.5, r.getLowerBound(), EPSILON);
  assertEquals(3.5, r.getUpperBound(), EPSILON);
  }
```
Stack Trace:
DatasetUtilitiesTests.testBug2849731_3 line 1299

### Candidate Method 1
```java
// â€¼ signature public static Range iterateDomainBounds(XYDataset dataset, not found
```

### Candidate Method 2
```java
public static XYSeries sampleFunction2DToSeries(Function2D f,
            double start, double end, int samples, Comparable seriesKey) {

        if (f == null) {
            throw new IllegalArgumentException("Null 'f' argument.");
        }
        if (seriesKey == null) {
            throw new IllegalArgumentException("Null 'seriesKey' argument.");
        }
        if (start >= end) {
            throw new IllegalArgumentException("Requires 'start' < 'end'.");
        }
        if (samples < 2) {
            throw new IllegalArgumentException("Requires 'samples' > 1");
        }

        XYSeries series = new XYSeries(seriesKey);
        double step = (end - start) / (samples - 1);
        for (int i = 0; i < samples; i++) {
            double x = start + (step * i);
            series.add(x, f.getValue(x));
        }
        return series;
    }
```

### Candidate Method 3
```java
public static Range findStackedRangeBounds(TableXYDataset dataset) {
        return findStackedRangeBounds(dataset, 0.0);
    }
```

### Candidate Method 4
```java
public static Number findMinimumRangeValue(XYDataset dataset) {

        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }

        
        if (dataset instanceof RangeInfo) {
            RangeInfo info = (RangeInfo) dataset;
            return new Double(info.getRangeLowerBound(true));
        }

        
        else {
            double minimum = Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {

                    double value;
                    if (dataset instanceof IntervalXYDataset) {
                        IntervalXYDataset intervalXYData
                                = (IntervalXYDataset) dataset;
                        value = intervalXYData.getStartYValue(series, item);
                    }
                    else if (dataset instanceof OHLCDataset) {
                        OHLCDataset highLowData = (OHLCDataset) dataset;
                        value = highLowData.getLowValue(series, item);
                    }
                    else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!Double.isNaN(value)) {
                        minimum = Math.min(minimum, value);
                    }

                }
            }
            if (minimum == Double.POSITIVE_INFINITY) {
                return null;
            }
            else {
                return new Double(minimum);
            }

        }

    }
```

### Candidate Method 5
```java
public static Range findRangeBounds(XYDataset dataset,
            List visibleSeriesKeys, Range xRange, boolean includeInterval) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Range result = null;
        if (dataset instanceof XYRangeInfo) {
            XYRangeInfo info = (XYRangeInfo) dataset;
            result = info.getRangeBounds(visibleSeriesKeys, xRange,
                    includeInterval);
        }
        else {
            result = iterateToFindRangeBounds(dataset, visibleSeriesKeys,
                    xRange, includeInterval);
        }
        return result;
    }
```
Analyse the failing test(s) above along with these candidate methods, these methods contain the causes of the test failures.
Your task is to identify the most likely lines of code in these methods that could cause the failure of the test cases above.
Look at the test cases, their stack traces, and the error messages to determine which lines in these methods are most likely responsible for the failure.
Return the signature of the method and the lines of code that are most likely responsible for the failure.

IMPORTANT: You must reply _exactly_ in this form:
RESPONSE:
<signature-1>: line of code
 line of code
<signature-2>: line of code
 line of code
<signature-3>: line of code
 line of code
