{
  "bug_id": "1",
  "failed_tests": {
    "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests": [
      {
        "methodName": "test2947660",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<1> but was:<0>",
        "fail_line": "        assertEquals(1, lic.getItemCount());",
        "test_source": "  public void test2947660() {\n  AbstractCategoryItemRenderer r = new LineAndShapeRenderer();\n  assertNotNull(r.getLegendItems());\n  assertEquals(0, r.getLegendItems().getItemCount());\n\n  DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n  CategoryPlot plot = new CategoryPlot();\n  plot.setDataset(dataset);\n  plot.setRenderer(r);\n  assertEquals(0, r.getLegendItems().getItemCount());\n\n  dataset.addValue(1.0, \"S1\", \"C1\");\n  LegendItemCollection lic = r.getLegendItems();\n  assertEquals(1, lic.getItemCount());\n  assertEquals(\"S1\", lic.get(0).getLabel());\n  }",
        "stack": [
          "AbstractCategoryItemRendererTests.test2947660 line 409"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
      "buggy_full_code": "\n\npackage org.jfree.chart.renderer.category;\n\nimport java.awt.AlphaComposite;\nimport java.awt.Composite;\nimport java.awt.Font;\nimport java.awt.GradientPaint;\nimport java.awt.Graphics2D;\nimport java.awt.Paint;\nimport java.awt.Rectangle;\nimport java.awt.Shape;\nimport java.awt.Stroke;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.jfree.chart.ChartRenderingInfo;\nimport org.jfree.chart.LegendItem;\nimport org.jfree.chart.LegendItemCollection;\nimport org.jfree.chart.RenderingSource;\nimport org.jfree.chart.annotations.CategoryAnnotation;\nimport org.jfree.chart.axis.CategoryAxis;\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.chart.entity.CategoryItemEntity;\nimport org.jfree.chart.entity.EntityCollection;\nimport org.jfree.chart.event.RendererChangeEvent;\nimport org.jfree.chart.labels.CategoryItemLabelGenerator;\nimport org.jfree.chart.labels.CategorySeriesLabelGenerator;\nimport org.jfree.chart.labels.CategoryToolTipGenerator;\nimport org.jfree.chart.labels.ItemLabelPosition;\nimport org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;\nimport org.jfree.chart.plot.CategoryCrosshairState;\nimport org.jfree.chart.plot.CategoryMarker;\nimport org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.plot.DrawingSupplier;\nimport org.jfree.chart.plot.IntervalMarker;\nimport org.jfree.chart.plot.Marker;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.plot.PlotRenderingInfo;\nimport org.jfree.chart.plot.ValueMarker;\nimport org.jfree.chart.renderer.AbstractRenderer;\nimport org.jfree.chart.text.TextUtilities;\nimport org.jfree.chart.urls.CategoryURLGenerator;\nimport org.jfree.chart.util.GradientPaintTransformer;\nimport org.jfree.chart.util.Layer;\nimport org.jfree.chart.util.LengthAdjustmentType;\nimport org.jfree.chart.util.ObjectList;\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.PublicCloneable;\nimport org.jfree.chart.util.RectangleAnchor;\nimport org.jfree.chart.util.RectangleEdge;\nimport org.jfree.chart.util.RectangleInsets;\nimport org.jfree.chart.util.SortOrder;\nimport org.jfree.data.Range;\nimport org.jfree.data.category.CategoryDataset;\nimport org.jfree.data.category.CategoryDatasetSelectionState;\nimport org.jfree.data.category.SelectableCategoryDataset;\nimport org.jfree.data.general.DatasetUtilities;\n\n\npublic abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n        implements CategoryItemRenderer, Cloneable, PublicCloneable,\n        Serializable {\n\n    \n    private static final long serialVersionUID = 1247553218442497391L;\n\n    \n    private CategoryPlot plot;\n\n    \n    private ObjectList itemLabelGeneratorList;\n\n    \n    private CategoryItemLabelGenerator baseItemLabelGenerator;\n\n    \n    private ObjectList toolTipGeneratorList;\n\n    \n    private CategoryToolTipGenerator baseToolTipGenerator;\n\n    \n    private ObjectList urlGeneratorList;\n\n    \n    private CategoryURLGenerator baseURLGenerator;\n\n    \n    private CategorySeriesLabelGenerator legendItemLabelGenerator;\n\n    \n    private CategorySeriesLabelGenerator legendItemToolTipGenerator;\n\n    \n    private CategorySeriesLabelGenerator legendItemURLGenerator;\n\n    \n    private List backgroundAnnotations;\n\n    \n    private List foregroundAnnotations;\n\n    \n    private transient int rowCount;\n\n    \n    private transient int columnCount;\n\n    \n    protected AbstractCategoryItemRenderer() {\n        this.itemLabelGeneratorList = new ObjectList();\n        this.toolTipGeneratorList = new ObjectList();\n        this.urlGeneratorList = new ObjectList();\n        this.legendItemLabelGenerator\n                = new StandardCategorySeriesLabelGenerator();\n        this.backgroundAnnotations = new ArrayList();\n        this.foregroundAnnotations = new ArrayList();\n    }\n\n    \n    public int getPassCount() {\n        return 1;\n    }\n\n    \n    public CategoryPlot getPlot() {\n        return this.plot;\n    }\n\n    \n    public void setPlot(CategoryPlot plot) {\n        if (plot == null) {\n            throw new IllegalArgumentException(\"Null 'plot' argument.\");\n        }\n        this.plot = plot;\n    }\n\n    \n\n    \n    public CategoryItemLabelGenerator getItemLabelGenerator(int row,\n            int column, boolean selected) {\n        CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator)\n                this.itemLabelGeneratorList.get(row);\n        if (generator == null) {\n            generator = this.baseItemLabelGenerator;\n        }\n        return generator;\n    }\n\n    \n    public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series) {\n        return (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(\n                series);\n    }\n\n    \n    public void setSeriesItemLabelGenerator(int series,\n            CategoryItemLabelGenerator generator) {\n        setSeriesItemLabelGenerator(series, generator, true);\n    }\n\n    \n    public void setSeriesItemLabelGenerator(int series,\n            CategoryItemLabelGenerator generator, boolean notify) {\n        this.itemLabelGeneratorList.set(series, generator);\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n    public CategoryItemLabelGenerator getBaseItemLabelGenerator() {\n        return this.baseItemLabelGenerator;\n    }\n\n    \n    public void setBaseItemLabelGenerator(\n            CategoryItemLabelGenerator generator) {\n        setBaseItemLabelGenerator(generator, true);\n    }\n\n    \n    public void setBaseItemLabelGenerator(\n            CategoryItemLabelGenerator generator, boolean notify) {\n        this.baseItemLabelGenerator = generator;\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n\n    \n    public CategoryToolTipGenerator getToolTipGenerator(int row, int column,\n            boolean selected) {\n\n        CategoryToolTipGenerator result = null;\n        result = getSeriesToolTipGenerator(row);\n        if (result == null) {\n            result = this.baseToolTipGenerator;\n        }\n        return result;\n    }\n\n    \n    public CategoryToolTipGenerator getSeriesToolTipGenerator(int series) {\n        return (CategoryToolTipGenerator) this.toolTipGeneratorList.get(series);\n    }\n\n    \n    public void setSeriesToolTipGenerator(int series,\n            CategoryToolTipGenerator generator) {\n        setSeriesToolTipGenerator(series, generator, true);\n    }\n\n    \n    public void setSeriesToolTipGenerator(int series,\n            CategoryToolTipGenerator generator, boolean notify) {\n        this.toolTipGeneratorList.set(series, generator);\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n    public CategoryToolTipGenerator getBaseToolTipGenerator() {\n        return this.baseToolTipGenerator;\n    }\n\n    \n    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator) {\n        setBaseToolTipGenerator(generator, true);\n    }\n\n    \n    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator,\n            boolean notify) {\n        this.baseToolTipGenerator = generator;\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n\n    \n    public CategoryURLGenerator getURLGenerator(int row, int column, boolean\n            selected) {\n        CategoryURLGenerator generator\n                = (CategoryURLGenerator) this.urlGeneratorList.get(row);\n        if (generator == null) {\n            generator = this.baseURLGenerator;\n        }\n        return generator;\n    }\n\n    \n    public CategoryURLGenerator getSeriesURLGenerator(int series) {\n        return (CategoryURLGenerator) this.urlGeneratorList.get(series);\n    }\n\n    \n    public void setSeriesURLGenerator(int series,\n            CategoryURLGenerator generator) {\n        setSeriesURLGenerator(series, generator, true);\n    }\n\n    \n    public void setSeriesURLGenerator(int series,\n            CategoryURLGenerator generator, boolean notify) {\n        this.urlGeneratorList.set(series, generator);\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n    public CategoryURLGenerator getBaseURLGenerator() {\n        return this.baseURLGenerator;\n    }\n\n    \n    public void setBaseURLGenerator(CategoryURLGenerator generator) {\n        setBaseURLGenerator(generator, true);\n    }\n\n    \n    public void setBaseURLGenerator(CategoryURLGenerator generator,\n            boolean notify) {\n        this.baseURLGenerator = generator;\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n\n    \n    public void addAnnotation(CategoryAnnotation annotation) {\n        \n        addAnnotation(annotation, Layer.FOREGROUND);\n    }\n\n    \n    public void addAnnotation(CategoryAnnotation annotation, Layer layer) {\n        if (annotation == null) {\n            throw new IllegalArgumentException(\"Null 'annotation' argument.\");\n        }\n        if (layer.equals(Layer.FOREGROUND)) {\n            this.foregroundAnnotations.add(annotation);\n            notifyListeners(new RendererChangeEvent(this));\n        }\n        else if (layer.equals(Layer.BACKGROUND)) {\n            this.backgroundAnnotations.add(annotation);\n            notifyListeners(new RendererChangeEvent(this));\n        }\n        else {\n            \n            throw new RuntimeException(\"Unknown layer.\");\n        }\n    }\n    \n    public boolean removeAnnotation(CategoryAnnotation annotation) {\n        boolean removed = this.foregroundAnnotations.remove(annotation);\n        removed = removed & this.backgroundAnnotations.remove(annotation);\n        notifyListeners(new RendererChangeEvent(this));\n        return removed;\n    }\n\n    \n    public void removeAnnotations() {\n        this.foregroundAnnotations.clear();\n        this.backgroundAnnotations.clear();\n        notifyListeners(new RendererChangeEvent(this));\n    }\n\n    \n    public CategorySeriesLabelGenerator getLegendItemLabelGenerator() {\n        return this.legendItemLabelGenerator;\n    }\n\n    \n    public void setLegendItemLabelGenerator(\n            CategorySeriesLabelGenerator generator) {\n        if (generator == null) {\n            throw new IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendItemLabelGenerator = generator;\n        fireChangeEvent();\n    }\n\n    \n    public CategorySeriesLabelGenerator getLegendItemToolTipGenerator() {\n        return this.legendItemToolTipGenerator;\n    }\n\n    \n    public void setLegendItemToolTipGenerator(\n            CategorySeriesLabelGenerator generator) {\n        this.legendItemToolTipGenerator = generator;\n        fireChangeEvent();\n    }\n\n    \n    public CategorySeriesLabelGenerator getLegendItemURLGenerator() {\n        return this.legendItemURLGenerator;\n    }\n\n    \n    public void setLegendItemURLGenerator(\n            CategorySeriesLabelGenerator generator) {\n        this.legendItemURLGenerator = generator;\n        fireChangeEvent();\n    }\n\n    \n    public int getRowCount() {\n        return this.rowCount;\n    }\n\n    \n    public int getColumnCount() {\n        return this.columnCount;\n    }\n\n    \n    protected CategoryItemRendererState createState(PlotRenderingInfo info) {\n        CategoryItemRendererState state = new CategoryItemRendererState(info);\n        int[] visibleSeriesTemp = new int[this.rowCount];\n        int visibleSeriesCount = 0;\n        for (int row = 0; row < this.rowCount; row++) {\n            if (isSeriesVisible(row)) {\n                visibleSeriesTemp[visibleSeriesCount] = row;\n                visibleSeriesCount++;\n            }\n        }\n        int[] visibleSeries = new int[visibleSeriesCount];\n        System.arraycopy(visibleSeriesTemp, 0, visibleSeries, 0,\n                visibleSeriesCount);\n        state.setVisibleSeriesArray(visibleSeries);\n        return state;\n    }\n\n    \n    public CategoryItemRendererState initialise(Graphics2D g2,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset,\n            PlotRenderingInfo info) {\n\n        setPlot(plot);\n        if (dataset != null) {\n            this.rowCount = dataset.getRowCount();\n            this.columnCount = dataset.getColumnCount();\n        }\n        else {\n            this.rowCount = 0;\n            this.columnCount = 0;\n        }\n        CategoryItemRendererState state = createState(info);\n\n        \n        CategoryDatasetSelectionState selectionState = null;\n        if (dataset instanceof SelectableCategoryDataset) {\n            SelectableCategoryDataset scd = (SelectableCategoryDataset) dataset;\n            selectionState = scd.getSelectionState();\n        }\n        \n        \n        if (selectionState == null && info != null) {\n            ChartRenderingInfo cri = info.getOwner();\n            if (cri != null) {\n                RenderingSource rs = cri.getRenderingSource();\n                selectionState = (CategoryDatasetSelectionState)\n                        rs.getSelectionState(dataset);\n            }\n        }\n        state.setSelectionState(selectionState);\n\n        return state;\n    }\n\n    \n    public Range findRangeBounds(CategoryDataset dataset) {\n        return findRangeBounds(dataset, false);\n    }\n\n    \n    protected Range findRangeBounds(CategoryDataset dataset,\n            boolean includeInterval) {\n        if (dataset == null) {\n            return null;\n        }\n        if (getDataBoundsIncludesVisibleSeriesOnly()) {\n            List visibleSeriesKeys = new ArrayList();\n            int seriesCount = dataset.getRowCount();\n            for (int s = 0; s < seriesCount; s++) {\n                if (isSeriesVisible(s)) {\n                    visibleSeriesKeys.add(dataset.getRowKey(s));\n                }\n            }\n            return DatasetUtilities.findRangeBounds(dataset,\n                    visibleSeriesKeys, includeInterval);\n        }\n        else {\n            return DatasetUtilities.findRangeBounds(dataset, includeInterval);\n        }\n    }\n\n    \n    public double getItemMiddle(Comparable rowKey, Comparable columnKey,\n            CategoryDataset dataset, CategoryAxis axis, Rectangle2D area,\n            RectangleEdge edge) {\n        return axis.getCategoryMiddle(columnKey, dataset.getColumnKeys(), area,\n                edge);\n    }\n\n    \n    public void drawBackground(Graphics2D g2,\n                               CategoryPlot plot,\n                               Rectangle2D dataArea) {\n\n        plot.drawBackground(g2, dataArea);\n\n    }\n\n    \n    public void drawOutline(Graphics2D g2,\n                            CategoryPlot plot,\n                            Rectangle2D dataArea) {\n\n        plot.drawOutline(g2, dataArea);\n\n    }\n\n    \n    public void drawDomainLine(Graphics2D g2, CategoryPlot plot,\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {\n\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        Line2D line = null;\n        PlotOrientation orientation = plot.getOrientation();\n\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            line = new Line2D.Double(dataArea.getMinX(), value,\n                    dataArea.getMaxX(), value);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            line = new Line2D.Double(value, dataArea.getMinY(), value,\n                    dataArea.getMaxY());\n        }\n\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n        g2.draw(line);\n\n    }\n\n    \n    public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {\n\n        Range range = axis.getRange();\n        if (!range.contains(value)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Line2D line = null;\n        double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            line = new Line2D.Double(v, dataArea.getMinY(), v,\n                    dataArea.getMaxY());\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            line = new Line2D.Double(dataArea.getMinX(), v,\n                    dataArea.getMaxX(), v);\n        }\n\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n        g2.draw(line);\n\n    }\n\n    \n    public void drawDomainMarker(Graphics2D g2,\n                                 CategoryPlot plot,\n                                 CategoryAxis axis,\n                                 CategoryMarker marker,\n                                 Rectangle2D dataArea) {\n\n        Comparable category = marker.getKey();\n        CategoryDataset dataset = plot.getDataset(plot.getIndexOf(this));\n        int columnIndex = dataset.getColumnIndex(category);\n        if (columnIndex < 0) {\n            return;\n        }\n\n        final Composite savedComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(\n                AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n        PlotOrientation orientation = plot.getOrientation();\n        Rectangle2D bounds = null;\n        if (marker.getDrawAsLine()) {\n            double v = axis.getCategoryMiddle(columnIndex,\n                    dataset.getColumnCount(), dataArea,\n                    plot.getDomainAxisEdge());\n            Line2D line = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                line = new Line2D.Double(dataArea.getMinX(), v,\n                        dataArea.getMaxX(), v);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                line = new Line2D.Double(v, dataArea.getMinY(), v,\n                        dataArea.getMaxY());\n            }\n            g2.setPaint(marker.getPaint());\n            g2.setStroke(marker.getStroke());\n            g2.draw(line);\n            bounds = line.getBounds2D();\n        }\n        else {\n            double v0 = axis.getCategoryStart(columnIndex,\n                    dataset.getColumnCount(), dataArea,\n                    plot.getDomainAxisEdge());\n            double v1 = axis.getCategoryEnd(columnIndex,\n                    dataset.getColumnCount(), dataArea,\n                    plot.getDomainAxisEdge());\n            Rectangle2D area = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                area = new Rectangle2D.Double(dataArea.getMinX(), v0,\n                        dataArea.getWidth(), (v1 - v0));\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                area = new Rectangle2D.Double(v0, dataArea.getMinY(),\n                        (v1 - v0), dataArea.getHeight());\n            }\n            g2.setPaint(marker.getPaint());\n            g2.fill(area);\n            bounds = area;\n        }\n\n        String label = marker.getLabel();\n        RectangleAnchor anchor = marker.getLabelAnchor();\n        if (label != null) {\n            Font labelFont = marker.getLabelFont();\n            g2.setFont(labelFont);\n            g2.setPaint(marker.getLabelPaint());\n            Point2D coordinates = calculateDomainMarkerTextAnchorPoint(\n                    g2, orientation, dataArea, bounds, marker.getLabelOffset(),\n                    marker.getLabelOffsetType(), anchor);\n            TextUtilities.drawAlignedString(label, g2,\n                    (float) coordinates.getX(), (float) coordinates.getY(),\n                    marker.getLabelTextAnchor());\n        }\n        g2.setComposite(savedComposite);\n    }\n\n    \n    public void drawRangeMarker(Graphics2D g2,\n                                CategoryPlot plot,\n                                ValueAxis axis,\n                                Marker marker,\n                                Rectangle2D dataArea) {\n\n        if (marker instanceof ValueMarker) {\n            ValueMarker vm = (ValueMarker) marker;\n            double value = vm.getValue();\n            Range range = axis.getRange();\n\n            if (!range.contains(value)) {\n                return;\n            }\n\n            final Composite savedComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n            PlotOrientation orientation = plot.getOrientation();\n            double v = axis.valueToJava2D(value, dataArea,\n                    plot.getRangeAxisEdge());\n            Line2D line = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                line = new Line2D.Double(v, dataArea.getMinY(), v,\n                        dataArea.getMaxY());\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                line = new Line2D.Double(dataArea.getMinX(), v,\n                        dataArea.getMaxX(), v);\n            }\n\n            g2.setPaint(marker.getPaint());\n            g2.setStroke(marker.getStroke());\n            g2.draw(line);\n\n            String label = marker.getLabel();\n            RectangleAnchor anchor = marker.getLabelAnchor();\n            if (label != null) {\n                Font labelFont = marker.getLabelFont();\n                g2.setFont(labelFont);\n                g2.setPaint(marker.getLabelPaint());\n                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\n                        g2, orientation, dataArea, line.getBounds2D(),\n                        marker.getLabelOffset(), LengthAdjustmentType.EXPAND,\n                        anchor);\n                TextUtilities.drawAlignedString(label, g2,\n                        (float) coordinates.getX(), (float) coordinates.getY(),\n                        marker.getLabelTextAnchor());\n            }\n            g2.setComposite(savedComposite);\n        }\n        else if (marker instanceof IntervalMarker) {\n            IntervalMarker im = (IntervalMarker) marker;\n            double start = im.getStartValue();\n            double end = im.getEndValue();\n            Range range = axis.getRange();\n            if (!(range.intersects(start, end))) {\n                return;\n            }\n\n            final Composite savedComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n            double start2d = axis.valueToJava2D(start, dataArea,\n                    plot.getRangeAxisEdge());\n            double end2d = axis.valueToJava2D(end, dataArea,\n                    plot.getRangeAxisEdge());\n            double low = Math.min(start2d, end2d);\n            double high = Math.max(start2d, end2d);\n\n            PlotOrientation orientation = plot.getOrientation();\n            Rectangle2D rect = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                \n                low = Math.max(low, dataArea.getMinX());\n                high = Math.min(high, dataArea.getMaxX());\n                rect = new Rectangle2D.Double(low,\n                        dataArea.getMinY(), high - low,\n                        dataArea.getHeight());\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                \n                low = Math.max(low, dataArea.getMinY());\n                high = Math.min(high, dataArea.getMaxY());\n                rect = new Rectangle2D.Double(dataArea.getMinX(),\n                        low, dataArea.getWidth(),\n                        high - low);\n            }\n            Paint p = marker.getPaint();\n            if (p instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) p;\n                GradientPaintTransformer t = im.getGradientPaintTransformer();\n                if (t != null) {\n                    gp = t.transform(gp, rect);\n                }\n                g2.setPaint(gp);\n            }\n            else {\n                g2.setPaint(p);\n            }\n            g2.fill(rect);\n\n            \n            if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {\n                if (orientation == PlotOrientation.VERTICAL) {\n                    Line2D line = new Line2D.Double();\n                    double x0 = dataArea.getMinX();\n                    double x1 = dataArea.getMaxX();\n                    g2.setPaint(im.getOutlinePaint());\n                    g2.setStroke(im.getOutlineStroke());\n                    if (range.contains(start)) {\n                        line.setLine(x0, start2d, x1, start2d);\n                        g2.draw(line);\n                    }\n                    if (range.contains(end)) {\n                        line.setLine(x0, end2d, x1, end2d);\n                        g2.draw(line);\n                    }\n                }\n                else { \n                    Line2D line = new Line2D.Double();\n                    double y0 = dataArea.getMinY();\n                    double y1 = dataArea.getMaxY();\n                    g2.setPaint(im.getOutlinePaint());\n                    g2.setStroke(im.getOutlineStroke());\n                    if (range.contains(start)) {\n                        line.setLine(start2d, y0, start2d, y1);\n                        g2.draw(line);\n                    }\n                    if (range.contains(end)) {\n                        line.setLine(end2d, y0, end2d, y1);\n                        g2.draw(line);\n                    }\n                }\n            }\n\n            String label = marker.getLabel();\n            RectangleAnchor anchor = marker.getLabelAnchor();\n            if (label != null) {\n                Font labelFont = marker.getLabelFont();\n                g2.setFont(labelFont);\n                g2.setPaint(marker.getLabelPaint());\n                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\n                        g2, orientation, dataArea, rect,\n                        marker.getLabelOffset(), marker.getLabelOffsetType(),\n                        anchor);\n                TextUtilities.drawAlignedString(label, g2,\n                        (float) coordinates.getX(), (float) coordinates.getY(),\n                        marker.getLabelTextAnchor());\n            }\n            g2.setComposite(savedComposite);\n        }\n    }\n\n    \n    protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,\n                                      PlotOrientation orientation,\n                                      Rectangle2D dataArea,\n                                      Rectangle2D markerArea,\n                                      RectangleInsets markerOffset,\n                                      LengthAdjustmentType labelOffsetType,\n                                      RectangleAnchor anchor) {\n\n        Rectangle2D anchorRect = null;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);\n        }\n        return RectangleAnchor.coordinates(anchorRect, anchor);\n\n    }\n\n    \n    protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,\n                                      PlotOrientation orientation,\n                                      Rectangle2D dataArea,\n                                      Rectangle2D markerArea,\n                                      RectangleInsets markerOffset,\n                                      LengthAdjustmentType labelOffsetType,\n                                      RectangleAnchor anchor) {\n\n        Rectangle2D anchorRect = null;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);\n        }\n        return RectangleAnchor.coordinates(anchorRect, anchor);\n\n    }\n\n    \n    public LegendItem getLegendItem(int datasetIndex, int series) {\n\n        CategoryPlot p = getPlot();\n        if (p == null) {\n            return null;\n        }\n\n        \n        if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {\n            return null;\n        }\n\n        CategoryDataset dataset = p.getDataset(datasetIndex);\n        String label = this.legendItemLabelGenerator.generateLabel(dataset,\n                series);\n        String description = label;\n        String toolTipText = null;\n        if (this.legendItemToolTipGenerator != null) {\n            toolTipText = this.legendItemToolTipGenerator.generateLabel(\n                    dataset, series);\n        }\n        String urlText = null;\n        if (this.legendItemURLGenerator != null) {\n            urlText = this.legendItemURLGenerator.generateLabel(dataset,\n                    series);\n        }\n        Shape shape = lookupLegendShape(series);\n        Paint paint = lookupSeriesPaint(series);\n        Paint outlinePaint = lookupSeriesOutlinePaint(series);\n        Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n\n        LegendItem item = new LegendItem(label, description, toolTipText,\n                urlText, shape, paint, outlineStroke, outlinePaint);\n        item.setLabelFont(lookupLegendTextFont(series));\n        Paint labelPaint = lookupLegendTextPaint(series);\n        if (labelPaint != null) {\n            item.setLabelPaint(labelPaint);\n        }\n        item.setSeriesKey(dataset.getRowKey(series));\n        item.setSeriesIndex(series);\n        item.setDataset(dataset);\n        item.setDatasetIndex(datasetIndex);\n        return item;\n    }\n\n    \n    public boolean equals(Object obj) {\n\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractCategoryItemRenderer)) {\n            return false;\n        }\n        AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj;\n\n        if (!ObjectUtilities.equal(this.itemLabelGeneratorList,\n                that.itemLabelGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseItemLabelGenerator,\n                that.baseItemLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.toolTipGeneratorList,\n                that.toolTipGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseToolTipGenerator,\n                that.baseToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.urlGeneratorList,\n                that.urlGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseURLGenerator,\n                that.baseURLGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemLabelGenerator,\n                that.legendItemLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,\n                that.legendItemToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemURLGenerator,\n                that.legendItemURLGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundAnnotations,\n                that.backgroundAnnotations)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundAnnotations,\n                that.foregroundAnnotations)) {\n            return false;\n        }\n        return super.equals(obj);\n    }\n\n    \n    public int hashCode() {\n        int result = super.hashCode();\n        return result;\n    }\n\n    \n    public DrawingSupplier getDrawingSupplier() {\n        DrawingSupplier result = null;\n        CategoryPlot cp = getPlot();\n        if (cp != null) {\n            result = cp.getDrawingSupplier();\n        }\n        return result;\n    }\n\n    \n    protected void updateCrosshairValues(CategoryCrosshairState crosshairState,\n            Comparable rowKey, Comparable columnKey, double value,\n            int datasetIndex,\n            double transX, double transY, PlotOrientation orientation) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n\n        if (crosshairState != null) {\n            if (this.plot.isRangeCrosshairLockedOnData()) {\n                \n                crosshairState.updateCrosshairPoint(rowKey, columnKey, value,\n                        datasetIndex, transX, transY, orientation);\n            }\n            else {\n                crosshairState.updateCrosshairX(rowKey, columnKey,\n                        datasetIndex, transX, orientation);\n            }\n        }\n    }\n\n    \n    protected void drawItemLabel(Graphics2D g2, PlotOrientation orientation,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            double x, double y, boolean negative) {\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\n                column, selected);\n        if (generator != null) {\n            Font labelFont = getItemLabelFont(row, column, selected);\n            Paint paint = getItemLabelPaint(row, column, selected);\n            g2.setFont(labelFont);\n            g2.setPaint(paint);\n            String label = generator.generateLabel(dataset, row, column);\n            ItemLabelPosition position = null;\n            if (!negative) {\n                position = getPositiveItemLabelPosition(row, column, selected);\n            }\n            else {\n                position = getNegativeItemLabelPosition(row, column, selected);\n            }\n            Point2D anchorPoint = calculateLabelAnchorPoint(\n                    position.getItemLabelAnchor(), x, y, orientation);\n            TextUtilities.drawRotatedString(label, g2,\n                    (float) anchorPoint.getX(), (float) anchorPoint.getY(),\n                    position.getTextAnchor(),\n                    position.getAngle(), position.getRotationAnchor());\n        }\n\n    }\n\n    \n    public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,\n            CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer,\n            PlotRenderingInfo info) {\n\n        Iterator iterator = null;\n        if (layer.equals(Layer.FOREGROUND)) {\n            iterator = this.foregroundAnnotations.iterator();\n        }\n        else if (layer.equals(Layer.BACKGROUND)) {\n            iterator = this.backgroundAnnotations.iterator();\n        }\n        else {\n            \n            throw new RuntimeException(\"Unknown layer.\");\n        }\n        while (iterator.hasNext()) {\n            CategoryAnnotation annotation = (CategoryAnnotation) iterator.next();\n            annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis,\n                    0, info);\n        }\n\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n\n        AbstractCategoryItemRenderer clone\n                = (AbstractCategoryItemRenderer) super.clone();\n\n\n        if (this.itemLabelGeneratorList != null) {\n            clone.itemLabelGeneratorList\n                    = (ObjectList) this.itemLabelGeneratorList.clone();\n        }\n\n        if (this.baseItemLabelGenerator != null) {\n            if (this.baseItemLabelGenerator instanceof PublicCloneable) {\n                PublicCloneable pc\n                        = (PublicCloneable) this.baseItemLabelGenerator;\n                clone.baseItemLabelGenerator\n                        = (CategoryItemLabelGenerator) pc.clone();\n            }\n            else {\n                throw new CloneNotSupportedException(\n                        \"ItemLabelGenerator not cloneable.\");\n            }\n        }\n\n        if (this.toolTipGeneratorList != null) {\n            clone.toolTipGeneratorList\n                    = (ObjectList) this.toolTipGeneratorList.clone();\n        }\n\n        if (this.baseToolTipGenerator != null) {\n            if (this.baseToolTipGenerator instanceof PublicCloneable) {\n                PublicCloneable pc\n                        = (PublicCloneable) this.baseToolTipGenerator;\n                clone.baseToolTipGenerator\n                        = (CategoryToolTipGenerator) pc.clone();\n            }\n            else {\n                throw new CloneNotSupportedException(\n                        \"Base tool tip generator not cloneable.\");\n            }\n        }\n\n        if (this.urlGeneratorList != null) {\n            clone.urlGeneratorList = (ObjectList) this.urlGeneratorList.clone();\n        }\n\n        if (this.baseURLGenerator != null) {\n            if (this.baseURLGenerator instanceof PublicCloneable) {\n                PublicCloneable pc = (PublicCloneable) this.baseURLGenerator;\n                clone.baseURLGenerator = (CategoryURLGenerator) pc.clone();\n            }\n            else {\n                throw new CloneNotSupportedException(\n                        \"Base item URL generator not cloneable.\");\n            }\n        }\n\n        if (this.legendItemLabelGenerator instanceof PublicCloneable) {\n            clone.legendItemLabelGenerator = (CategorySeriesLabelGenerator)\n                    ObjectUtilities.clone(this.legendItemLabelGenerator);\n        }\n        if (this.legendItemToolTipGenerator instanceof PublicCloneable) {\n            clone.legendItemToolTipGenerator = (CategorySeriesLabelGenerator)\n                    ObjectUtilities.clone(this.legendItemToolTipGenerator);\n        }\n        if (this.legendItemURLGenerator instanceof PublicCloneable) {\n            clone.legendItemURLGenerator = (CategorySeriesLabelGenerator)\n                    ObjectUtilities.clone(this.legendItemURLGenerator);\n        }\n        return clone;\n    }\n\n    \n    protected CategoryAxis getDomainAxis(CategoryPlot plot, \n            CategoryDataset dataset) {\n        int datasetIndex = plot.indexOf(dataset);\n        return plot.getDomainAxisForDataset(datasetIndex);\n    }\n\n    \n    protected ValueAxis getRangeAxis(CategoryPlot plot, int index) {\n        ValueAxis result = plot.getRangeAxis(index);\n        if (result == null) {\n            result = plot.getRangeAxis();\n        }\n        return result;\n    }\n\n    \n    public LegendItemCollection getLegendItems() {\n        LegendItemCollection result = new LegendItemCollection();\n        if (this.plot == null) {\n            return result;\n        }\n        int index = this.plot.getIndexOf(this);\n        CategoryDataset dataset = this.plot.getDataset(index);\n        if (dataset != null) {\n            return result;\n        }\n        int seriesCount = dataset.getRowCount();\n        if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n            for (int i = 0; i < seriesCount; i++) {\n                if (isSeriesVisibleInLegend(i)) {\n                    LegendItem item = getLegendItem(index, i);\n                    if (item != null) {\n                        result.add(item);\n                    }\n                }\n            }\n        }\n        else {\n            for (int i = seriesCount - 1; i >= 0; i--) {\n                if (isSeriesVisibleInLegend(i)) {\n                    LegendItem item = getLegendItem(index, i);\n                    if (item != null) {\n                        result.add(item);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    \n    protected void addEntity(EntityCollection entities, Shape hotspot,\n            CategoryDataset dataset, int row, int column, boolean selected) {\n\n        if (hotspot == null) {\n            throw new IllegalArgumentException(\"Null 'hotspot' argument.\");\n        }\n        addEntity(entities, hotspot, dataset, row, column, selected, 0.0, 0.0);\n    }\n\n    \n    protected void addEntity(EntityCollection entities, Shape hotspot,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            double entityX, double entityY) {\n        if (!getItemCreateEntity(row, column, selected)) {\n            return;\n        }\n        Shape s = hotspot;\n        if (hotspot == null) {\n            double r = getDefaultEntityRadius();\n            double w = r * 2;\n            if (getPlot().getOrientation() == PlotOrientation.VERTICAL) {\n                s = new Ellipse2D.Double(entityX - r, entityY - r, w, w);\n            }\n            else {\n                s = new Ellipse2D.Double(entityY - r, entityX - r, w, w);\n            }\n        }\n        String tip = null;\n        CategoryToolTipGenerator generator = getToolTipGenerator(row, column,\n                selected);\n        if (generator != null) {\n            tip = generator.generateToolTip(dataset, row, column);\n        }\n        String url = null;\n        CategoryURLGenerator urlster = getURLGenerator(row, column, selected);\n        if (urlster != null) {\n            url = urlster.generateURL(dataset, row, column);\n        }\n        CategoryItemEntity entity = new CategoryItemEntity(s, tip, url,\n                dataset, dataset.getRowKey(row), dataset.getColumnKey(column));\n        entities.add(entity);\n    }\n\n        \n    public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            CategoryItemRendererState state) {\n        throw new RuntimeException(\"Not implemented.\");\n    }\n\n    \n    public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            CategoryItemRendererState state, Rectangle2D result) {\n        if (result == null) {\n            result = new Rectangle();\n        }\n        Comparable key = dataset.getColumnKey(column);\n        Number y = dataset.getValue(row, column);\n        if (y == null) {\n            return null;\n        }\n        double xx = domainAxis.getCategoryMiddle(key,\n                plot.getCategoriesForAxis(domainAxis),\n                dataArea, plot.getDomainAxisEdge());\n        double yy = rangeAxis.valueToJava2D(y.doubleValue(), dataArea,\n                plot.getRangeAxisEdge());\n        result.setRect(xx - 2, yy - 2, 4, 4);\n        return result;\n    }\n\n    \n    public boolean hitTest(double xx, double yy, Graphics2D g2,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            boolean selected, CategoryItemRendererState state) {\n        Rectangle2D bounds = createHotSpotBounds(g2, dataArea, plot,\n                domainAxis, rangeAxis, dataset, row, column, selected,\n                state, null);\n        if (bounds == null) {\n            return false;\n        }\n        \n        \n        return bounds.contains(xx, yy);\n    }\n    \n}\n",
      "fixed_full_code": "\n\npackage org.jfree.chart.renderer.category;\n\nimport java.awt.AlphaComposite;\nimport java.awt.Composite;\nimport java.awt.Font;\nimport java.awt.GradientPaint;\nimport java.awt.Graphics2D;\nimport java.awt.Paint;\nimport java.awt.Rectangle;\nimport java.awt.Shape;\nimport java.awt.Stroke;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.jfree.chart.ChartRenderingInfo;\nimport org.jfree.chart.LegendItem;\nimport org.jfree.chart.LegendItemCollection;\nimport org.jfree.chart.RenderingSource;\nimport org.jfree.chart.annotations.CategoryAnnotation;\nimport org.jfree.chart.axis.CategoryAxis;\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.chart.entity.CategoryItemEntity;\nimport org.jfree.chart.entity.EntityCollection;\nimport org.jfree.chart.event.RendererChangeEvent;\nimport org.jfree.chart.labels.CategoryItemLabelGenerator;\nimport org.jfree.chart.labels.CategorySeriesLabelGenerator;\nimport org.jfree.chart.labels.CategoryToolTipGenerator;\nimport org.jfree.chart.labels.ItemLabelPosition;\nimport org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;\nimport org.jfree.chart.plot.CategoryCrosshairState;\nimport org.jfree.chart.plot.CategoryMarker;\nimport org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.plot.DrawingSupplier;\nimport org.jfree.chart.plot.IntervalMarker;\nimport org.jfree.chart.plot.Marker;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.plot.PlotRenderingInfo;\nimport org.jfree.chart.plot.ValueMarker;\nimport org.jfree.chart.renderer.AbstractRenderer;\nimport org.jfree.chart.text.TextUtilities;\nimport org.jfree.chart.urls.CategoryURLGenerator;\nimport org.jfree.chart.util.GradientPaintTransformer;\nimport org.jfree.chart.util.Layer;\nimport org.jfree.chart.util.LengthAdjustmentType;\nimport org.jfree.chart.util.ObjectList;\nimport org.jfree.chart.util.ObjectUtilities;\nimport org.jfree.chart.util.PublicCloneable;\nimport org.jfree.chart.util.RectangleAnchor;\nimport org.jfree.chart.util.RectangleEdge;\nimport org.jfree.chart.util.RectangleInsets;\nimport org.jfree.chart.util.SortOrder;\nimport org.jfree.data.Range;\nimport org.jfree.data.category.CategoryDataset;\nimport org.jfree.data.category.CategoryDatasetSelectionState;\nimport org.jfree.data.category.SelectableCategoryDataset;\nimport org.jfree.data.general.DatasetUtilities;\n\n\npublic abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n        implements CategoryItemRenderer, Cloneable, PublicCloneable,\n        Serializable {\n\n    \n    private static final long serialVersionUID = 1247553218442497391L;\n\n    \n    private CategoryPlot plot;\n\n    \n    private ObjectList itemLabelGeneratorList;\n\n    \n    private CategoryItemLabelGenerator baseItemLabelGenerator;\n\n    \n    private ObjectList toolTipGeneratorList;\n\n    \n    private CategoryToolTipGenerator baseToolTipGenerator;\n\n    \n    private ObjectList urlGeneratorList;\n\n    \n    private CategoryURLGenerator baseURLGenerator;\n\n    \n    private CategorySeriesLabelGenerator legendItemLabelGenerator;\n\n    \n    private CategorySeriesLabelGenerator legendItemToolTipGenerator;\n\n    \n    private CategorySeriesLabelGenerator legendItemURLGenerator;\n\n    \n    private List backgroundAnnotations;\n\n    \n    private List foregroundAnnotations;\n\n    \n    private transient int rowCount;\n\n    \n    private transient int columnCount;\n\n    \n    protected AbstractCategoryItemRenderer() {\n        this.itemLabelGeneratorList = new ObjectList();\n        this.toolTipGeneratorList = new ObjectList();\n        this.urlGeneratorList = new ObjectList();\n        this.legendItemLabelGenerator\n                = new StandardCategorySeriesLabelGenerator();\n        this.backgroundAnnotations = new ArrayList();\n        this.foregroundAnnotations = new ArrayList();\n    }\n\n    \n    public int getPassCount() {\n        return 1;\n    }\n\n    \n    public CategoryPlot getPlot() {\n        return this.plot;\n    }\n\n    \n    public void setPlot(CategoryPlot plot) {\n        if (plot == null) {\n            throw new IllegalArgumentException(\"Null 'plot' argument.\");\n        }\n        this.plot = plot;\n    }\n\n    \n\n    \n    public CategoryItemLabelGenerator getItemLabelGenerator(int row,\n            int column, boolean selected) {\n        CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator)\n                this.itemLabelGeneratorList.get(row);\n        if (generator == null) {\n            generator = this.baseItemLabelGenerator;\n        }\n        return generator;\n    }\n\n    \n    public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series) {\n        return (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(\n                series);\n    }\n\n    \n    public void setSeriesItemLabelGenerator(int series,\n            CategoryItemLabelGenerator generator) {\n        setSeriesItemLabelGenerator(series, generator, true);\n    }\n\n    \n    public void setSeriesItemLabelGenerator(int series,\n            CategoryItemLabelGenerator generator, boolean notify) {\n        this.itemLabelGeneratorList.set(series, generator);\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n    public CategoryItemLabelGenerator getBaseItemLabelGenerator() {\n        return this.baseItemLabelGenerator;\n    }\n\n    \n    public void setBaseItemLabelGenerator(\n            CategoryItemLabelGenerator generator) {\n        setBaseItemLabelGenerator(generator, true);\n    }\n\n    \n    public void setBaseItemLabelGenerator(\n            CategoryItemLabelGenerator generator, boolean notify) {\n        this.baseItemLabelGenerator = generator;\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n\n    \n    public CategoryToolTipGenerator getToolTipGenerator(int row, int column,\n            boolean selected) {\n\n        CategoryToolTipGenerator result = null;\n        result = getSeriesToolTipGenerator(row);\n        if (result == null) {\n            result = this.baseToolTipGenerator;\n        }\n        return result;\n    }\n\n    \n    public CategoryToolTipGenerator getSeriesToolTipGenerator(int series) {\n        return (CategoryToolTipGenerator) this.toolTipGeneratorList.get(series);\n    }\n\n    \n    public void setSeriesToolTipGenerator(int series,\n            CategoryToolTipGenerator generator) {\n        setSeriesToolTipGenerator(series, generator, true);\n    }\n\n    \n    public void setSeriesToolTipGenerator(int series,\n            CategoryToolTipGenerator generator, boolean notify) {\n        this.toolTipGeneratorList.set(series, generator);\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n    public CategoryToolTipGenerator getBaseToolTipGenerator() {\n        return this.baseToolTipGenerator;\n    }\n\n    \n    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator) {\n        setBaseToolTipGenerator(generator, true);\n    }\n\n    \n    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator,\n            boolean notify) {\n        this.baseToolTipGenerator = generator;\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n\n    \n    public CategoryURLGenerator getURLGenerator(int row, int column, boolean\n            selected) {\n        CategoryURLGenerator generator\n                = (CategoryURLGenerator) this.urlGeneratorList.get(row);\n        if (generator == null) {\n            generator = this.baseURLGenerator;\n        }\n        return generator;\n    }\n\n    \n    public CategoryURLGenerator getSeriesURLGenerator(int series) {\n        return (CategoryURLGenerator) this.urlGeneratorList.get(series);\n    }\n\n    \n    public void setSeriesURLGenerator(int series,\n            CategoryURLGenerator generator) {\n        setSeriesURLGenerator(series, generator, true);\n    }\n\n    \n    public void setSeriesURLGenerator(int series,\n            CategoryURLGenerator generator, boolean notify) {\n        this.urlGeneratorList.set(series, generator);\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n    public CategoryURLGenerator getBaseURLGenerator() {\n        return this.baseURLGenerator;\n    }\n\n    \n    public void setBaseURLGenerator(CategoryURLGenerator generator) {\n        setBaseURLGenerator(generator, true);\n    }\n\n    \n    public void setBaseURLGenerator(CategoryURLGenerator generator,\n            boolean notify) {\n        this.baseURLGenerator = generator;\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n\n    \n\n    \n    public void addAnnotation(CategoryAnnotation annotation) {\n        \n        addAnnotation(annotation, Layer.FOREGROUND);\n    }\n\n    \n    public void addAnnotation(CategoryAnnotation annotation, Layer layer) {\n        if (annotation == null) {\n            throw new IllegalArgumentException(\"Null 'annotation' argument.\");\n        }\n        if (layer.equals(Layer.FOREGROUND)) {\n            this.foregroundAnnotations.add(annotation);\n            notifyListeners(new RendererChangeEvent(this));\n        }\n        else if (layer.equals(Layer.BACKGROUND)) {\n            this.backgroundAnnotations.add(annotation);\n            notifyListeners(new RendererChangeEvent(this));\n        }\n        else {\n            \n            throw new RuntimeException(\"Unknown layer.\");\n        }\n    }\n    \n    public boolean removeAnnotation(CategoryAnnotation annotation) {\n        boolean removed = this.foregroundAnnotations.remove(annotation);\n        removed = removed & this.backgroundAnnotations.remove(annotation);\n        notifyListeners(new RendererChangeEvent(this));\n        return removed;\n    }\n\n    \n    public void removeAnnotations() {\n        this.foregroundAnnotations.clear();\n        this.backgroundAnnotations.clear();\n        notifyListeners(new RendererChangeEvent(this));\n    }\n\n    \n    public CategorySeriesLabelGenerator getLegendItemLabelGenerator() {\n        return this.legendItemLabelGenerator;\n    }\n\n    \n    public void setLegendItemLabelGenerator(\n            CategorySeriesLabelGenerator generator) {\n        if (generator == null) {\n            throw new IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendItemLabelGenerator = generator;\n        fireChangeEvent();\n    }\n\n    \n    public CategorySeriesLabelGenerator getLegendItemToolTipGenerator() {\n        return this.legendItemToolTipGenerator;\n    }\n\n    \n    public void setLegendItemToolTipGenerator(\n            CategorySeriesLabelGenerator generator) {\n        this.legendItemToolTipGenerator = generator;\n        fireChangeEvent();\n    }\n\n    \n    public CategorySeriesLabelGenerator getLegendItemURLGenerator() {\n        return this.legendItemURLGenerator;\n    }\n\n    \n    public void setLegendItemURLGenerator(\n            CategorySeriesLabelGenerator generator) {\n        this.legendItemURLGenerator = generator;\n        fireChangeEvent();\n    }\n\n    \n    public int getRowCount() {\n        return this.rowCount;\n    }\n\n    \n    public int getColumnCount() {\n        return this.columnCount;\n    }\n\n    \n    protected CategoryItemRendererState createState(PlotRenderingInfo info) {\n        CategoryItemRendererState state = new CategoryItemRendererState(info);\n        int[] visibleSeriesTemp = new int[this.rowCount];\n        int visibleSeriesCount = 0;\n        for (int row = 0; row < this.rowCount; row++) {\n            if (isSeriesVisible(row)) {\n                visibleSeriesTemp[visibleSeriesCount] = row;\n                visibleSeriesCount++;\n            }\n        }\n        int[] visibleSeries = new int[visibleSeriesCount];\n        System.arraycopy(visibleSeriesTemp, 0, visibleSeries, 0,\n                visibleSeriesCount);\n        state.setVisibleSeriesArray(visibleSeries);\n        return state;\n    }\n\n    \n    public CategoryItemRendererState initialise(Graphics2D g2,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset,\n            PlotRenderingInfo info) {\n\n        setPlot(plot);\n        if (dataset != null) {\n            this.rowCount = dataset.getRowCount();\n            this.columnCount = dataset.getColumnCount();\n        }\n        else {\n            this.rowCount = 0;\n            this.columnCount = 0;\n        }\n        CategoryItemRendererState state = createState(info);\n\n        \n        CategoryDatasetSelectionState selectionState = null;\n        if (dataset instanceof SelectableCategoryDataset) {\n            SelectableCategoryDataset scd = (SelectableCategoryDataset) dataset;\n            selectionState = scd.getSelectionState();\n        }\n        \n        \n        if (selectionState == null && info != null) {\n            ChartRenderingInfo cri = info.getOwner();\n            if (cri != null) {\n                RenderingSource rs = cri.getRenderingSource();\n                selectionState = (CategoryDatasetSelectionState)\n                        rs.getSelectionState(dataset);\n            }\n        }\n        state.setSelectionState(selectionState);\n\n        return state;\n    }\n\n    \n    public Range findRangeBounds(CategoryDataset dataset) {\n        return findRangeBounds(dataset, false);\n    }\n\n    \n    protected Range findRangeBounds(CategoryDataset dataset,\n            boolean includeInterval) {\n        if (dataset == null) {\n            return null;\n        }\n        if (getDataBoundsIncludesVisibleSeriesOnly()) {\n            List visibleSeriesKeys = new ArrayList();\n            int seriesCount = dataset.getRowCount();\n            for (int s = 0; s < seriesCount; s++) {\n                if (isSeriesVisible(s)) {\n                    visibleSeriesKeys.add(dataset.getRowKey(s));\n                }\n            }\n            return DatasetUtilities.findRangeBounds(dataset,\n                    visibleSeriesKeys, includeInterval);\n        }\n        else {\n            return DatasetUtilities.findRangeBounds(dataset, includeInterval);\n        }\n    }\n\n    \n    public double getItemMiddle(Comparable rowKey, Comparable columnKey,\n            CategoryDataset dataset, CategoryAxis axis, Rectangle2D area,\n            RectangleEdge edge) {\n        return axis.getCategoryMiddle(columnKey, dataset.getColumnKeys(), area,\n                edge);\n    }\n\n    \n    public void drawBackground(Graphics2D g2,\n                               CategoryPlot plot,\n                               Rectangle2D dataArea) {\n\n        plot.drawBackground(g2, dataArea);\n\n    }\n\n    \n    public void drawOutline(Graphics2D g2,\n                            CategoryPlot plot,\n                            Rectangle2D dataArea) {\n\n        plot.drawOutline(g2, dataArea);\n\n    }\n\n    \n    public void drawDomainLine(Graphics2D g2, CategoryPlot plot,\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {\n\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        Line2D line = null;\n        PlotOrientation orientation = plot.getOrientation();\n\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            line = new Line2D.Double(dataArea.getMinX(), value,\n                    dataArea.getMaxX(), value);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            line = new Line2D.Double(value, dataArea.getMinY(), value,\n                    dataArea.getMaxY());\n        }\n\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n        g2.draw(line);\n\n    }\n\n    \n    public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {\n\n        Range range = axis.getRange();\n        if (!range.contains(value)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Line2D line = null;\n        double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            line = new Line2D.Double(v, dataArea.getMinY(), v,\n                    dataArea.getMaxY());\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            line = new Line2D.Double(dataArea.getMinX(), v,\n                    dataArea.getMaxX(), v);\n        }\n\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n        g2.draw(line);\n\n    }\n\n    \n    public void drawDomainMarker(Graphics2D g2,\n                                 CategoryPlot plot,\n                                 CategoryAxis axis,\n                                 CategoryMarker marker,\n                                 Rectangle2D dataArea) {\n\n        Comparable category = marker.getKey();\n        CategoryDataset dataset = plot.getDataset(plot.getIndexOf(this));\n        int columnIndex = dataset.getColumnIndex(category);\n        if (columnIndex < 0) {\n            return;\n        }\n\n        final Composite savedComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(\n                AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n        PlotOrientation orientation = plot.getOrientation();\n        Rectangle2D bounds = null;\n        if (marker.getDrawAsLine()) {\n            double v = axis.getCategoryMiddle(columnIndex,\n                    dataset.getColumnCount(), dataArea,\n                    plot.getDomainAxisEdge());\n            Line2D line = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                line = new Line2D.Double(dataArea.getMinX(), v,\n                        dataArea.getMaxX(), v);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                line = new Line2D.Double(v, dataArea.getMinY(), v,\n                        dataArea.getMaxY());\n            }\n            g2.setPaint(marker.getPaint());\n            g2.setStroke(marker.getStroke());\n            g2.draw(line);\n            bounds = line.getBounds2D();\n        }\n        else {\n            double v0 = axis.getCategoryStart(columnIndex,\n                    dataset.getColumnCount(), dataArea,\n                    plot.getDomainAxisEdge());\n            double v1 = axis.getCategoryEnd(columnIndex,\n                    dataset.getColumnCount(), dataArea,\n                    plot.getDomainAxisEdge());\n            Rectangle2D area = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                area = new Rectangle2D.Double(dataArea.getMinX(), v0,\n                        dataArea.getWidth(), (v1 - v0));\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                area = new Rectangle2D.Double(v0, dataArea.getMinY(),\n                        (v1 - v0), dataArea.getHeight());\n            }\n            g2.setPaint(marker.getPaint());\n            g2.fill(area);\n            bounds = area;\n        }\n\n        String label = marker.getLabel();\n        RectangleAnchor anchor = marker.getLabelAnchor();\n        if (label != null) {\n            Font labelFont = marker.getLabelFont();\n            g2.setFont(labelFont);\n            g2.setPaint(marker.getLabelPaint());\n            Point2D coordinates = calculateDomainMarkerTextAnchorPoint(\n                    g2, orientation, dataArea, bounds, marker.getLabelOffset(),\n                    marker.getLabelOffsetType(), anchor);\n            TextUtilities.drawAlignedString(label, g2,\n                    (float) coordinates.getX(), (float) coordinates.getY(),\n                    marker.getLabelTextAnchor());\n        }\n        g2.setComposite(savedComposite);\n    }\n\n    \n    public void drawRangeMarker(Graphics2D g2,\n                                CategoryPlot plot,\n                                ValueAxis axis,\n                                Marker marker,\n                                Rectangle2D dataArea) {\n\n        if (marker instanceof ValueMarker) {\n            ValueMarker vm = (ValueMarker) marker;\n            double value = vm.getValue();\n            Range range = axis.getRange();\n\n            if (!range.contains(value)) {\n                return;\n            }\n\n            final Composite savedComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n            PlotOrientation orientation = plot.getOrientation();\n            double v = axis.valueToJava2D(value, dataArea,\n                    plot.getRangeAxisEdge());\n            Line2D line = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                line = new Line2D.Double(v, dataArea.getMinY(), v,\n                        dataArea.getMaxY());\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                line = new Line2D.Double(dataArea.getMinX(), v,\n                        dataArea.getMaxX(), v);\n            }\n\n            g2.setPaint(marker.getPaint());\n            g2.setStroke(marker.getStroke());\n            g2.draw(line);\n\n            String label = marker.getLabel();\n            RectangleAnchor anchor = marker.getLabelAnchor();\n            if (label != null) {\n                Font labelFont = marker.getLabelFont();\n                g2.setFont(labelFont);\n                g2.setPaint(marker.getLabelPaint());\n                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\n                        g2, orientation, dataArea, line.getBounds2D(),\n                        marker.getLabelOffset(), LengthAdjustmentType.EXPAND,\n                        anchor);\n                TextUtilities.drawAlignedString(label, g2,\n                        (float) coordinates.getX(), (float) coordinates.getY(),\n                        marker.getLabelTextAnchor());\n            }\n            g2.setComposite(savedComposite);\n        }\n        else if (marker instanceof IntervalMarker) {\n            IntervalMarker im = (IntervalMarker) marker;\n            double start = im.getStartValue();\n            double end = im.getEndValue();\n            Range range = axis.getRange();\n            if (!(range.intersects(start, end))) {\n                return;\n            }\n\n            final Composite savedComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n            double start2d = axis.valueToJava2D(start, dataArea,\n                    plot.getRangeAxisEdge());\n            double end2d = axis.valueToJava2D(end, dataArea,\n                    plot.getRangeAxisEdge());\n            double low = Math.min(start2d, end2d);\n            double high = Math.max(start2d, end2d);\n\n            PlotOrientation orientation = plot.getOrientation();\n            Rectangle2D rect = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                \n                low = Math.max(low, dataArea.getMinX());\n                high = Math.min(high, dataArea.getMaxX());\n                rect = new Rectangle2D.Double(low,\n                        dataArea.getMinY(), high - low,\n                        dataArea.getHeight());\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                \n                low = Math.max(low, dataArea.getMinY());\n                high = Math.min(high, dataArea.getMaxY());\n                rect = new Rectangle2D.Double(dataArea.getMinX(),\n                        low, dataArea.getWidth(),\n                        high - low);\n            }\n            Paint p = marker.getPaint();\n            if (p instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) p;\n                GradientPaintTransformer t = im.getGradientPaintTransformer();\n                if (t != null) {\n                    gp = t.transform(gp, rect);\n                }\n                g2.setPaint(gp);\n            }\n            else {\n                g2.setPaint(p);\n            }\n            g2.fill(rect);\n\n            \n            if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {\n                if (orientation == PlotOrientation.VERTICAL) {\n                    Line2D line = new Line2D.Double();\n                    double x0 = dataArea.getMinX();\n                    double x1 = dataArea.getMaxX();\n                    g2.setPaint(im.getOutlinePaint());\n                    g2.setStroke(im.getOutlineStroke());\n                    if (range.contains(start)) {\n                        line.setLine(x0, start2d, x1, start2d);\n                        g2.draw(line);\n                    }\n                    if (range.contains(end)) {\n                        line.setLine(x0, end2d, x1, end2d);\n                        g2.draw(line);\n                    }\n                }\n                else { \n                    Line2D line = new Line2D.Double();\n                    double y0 = dataArea.getMinY();\n                    double y1 = dataArea.getMaxY();\n                    g2.setPaint(im.getOutlinePaint());\n                    g2.setStroke(im.getOutlineStroke());\n                    if (range.contains(start)) {\n                        line.setLine(start2d, y0, start2d, y1);\n                        g2.draw(line);\n                    }\n                    if (range.contains(end)) {\n                        line.setLine(end2d, y0, end2d, y1);\n                        g2.draw(line);\n                    }\n                }\n            }\n\n            String label = marker.getLabel();\n            RectangleAnchor anchor = marker.getLabelAnchor();\n            if (label != null) {\n                Font labelFont = marker.getLabelFont();\n                g2.setFont(labelFont);\n                g2.setPaint(marker.getLabelPaint());\n                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\n                        g2, orientation, dataArea, rect,\n                        marker.getLabelOffset(), marker.getLabelOffsetType(),\n                        anchor);\n                TextUtilities.drawAlignedString(label, g2,\n                        (float) coordinates.getX(), (float) coordinates.getY(),\n                        marker.getLabelTextAnchor());\n            }\n            g2.setComposite(savedComposite);\n        }\n    }\n\n    \n    protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,\n                                      PlotOrientation orientation,\n                                      Rectangle2D dataArea,\n                                      Rectangle2D markerArea,\n                                      RectangleInsets markerOffset,\n                                      LengthAdjustmentType labelOffsetType,\n                                      RectangleAnchor anchor) {\n\n        Rectangle2D anchorRect = null;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);\n        }\n        return RectangleAnchor.coordinates(anchorRect, anchor);\n\n    }\n\n    \n    protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,\n                                      PlotOrientation orientation,\n                                      Rectangle2D dataArea,\n                                      Rectangle2D markerArea,\n                                      RectangleInsets markerOffset,\n                                      LengthAdjustmentType labelOffsetType,\n                                      RectangleAnchor anchor) {\n\n        Rectangle2D anchorRect = null;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);\n        }\n        return RectangleAnchor.coordinates(anchorRect, anchor);\n\n    }\n\n    \n    public LegendItem getLegendItem(int datasetIndex, int series) {\n\n        CategoryPlot p = getPlot();\n        if (p == null) {\n            return null;\n        }\n\n        \n        if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {\n            return null;\n        }\n\n        CategoryDataset dataset = p.getDataset(datasetIndex);\n        String label = this.legendItemLabelGenerator.generateLabel(dataset,\n                series);\n        String description = label;\n        String toolTipText = null;\n        if (this.legendItemToolTipGenerator != null) {\n            toolTipText = this.legendItemToolTipGenerator.generateLabel(\n                    dataset, series);\n        }\n        String urlText = null;\n        if (this.legendItemURLGenerator != null) {\n            urlText = this.legendItemURLGenerator.generateLabel(dataset,\n                    series);\n        }\n        Shape shape = lookupLegendShape(series);\n        Paint paint = lookupSeriesPaint(series);\n        Paint outlinePaint = lookupSeriesOutlinePaint(series);\n        Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n\n        LegendItem item = new LegendItem(label, description, toolTipText,\n                urlText, shape, paint, outlineStroke, outlinePaint);\n        item.setLabelFont(lookupLegendTextFont(series));\n        Paint labelPaint = lookupLegendTextPaint(series);\n        if (labelPaint != null) {\n            item.setLabelPaint(labelPaint);\n        }\n        item.setSeriesKey(dataset.getRowKey(series));\n        item.setSeriesIndex(series);\n        item.setDataset(dataset);\n        item.setDatasetIndex(datasetIndex);\n        return item;\n    }\n\n    \n    public boolean equals(Object obj) {\n\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractCategoryItemRenderer)) {\n            return false;\n        }\n        AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj;\n\n        if (!ObjectUtilities.equal(this.itemLabelGeneratorList,\n                that.itemLabelGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseItemLabelGenerator,\n                that.baseItemLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.toolTipGeneratorList,\n                that.toolTipGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseToolTipGenerator,\n                that.baseToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.urlGeneratorList,\n                that.urlGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseURLGenerator,\n                that.baseURLGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemLabelGenerator,\n                that.legendItemLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,\n                that.legendItemToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemURLGenerator,\n                that.legendItemURLGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundAnnotations,\n                that.backgroundAnnotations)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundAnnotations,\n                that.foregroundAnnotations)) {\n            return false;\n        }\n        return super.equals(obj);\n    }\n\n    \n    public int hashCode() {\n        int result = super.hashCode();\n        return result;\n    }\n\n    \n    public DrawingSupplier getDrawingSupplier() {\n        DrawingSupplier result = null;\n        CategoryPlot cp = getPlot();\n        if (cp != null) {\n            result = cp.getDrawingSupplier();\n        }\n        return result;\n    }\n\n    \n    protected void updateCrosshairValues(CategoryCrosshairState crosshairState,\n            Comparable rowKey, Comparable columnKey, double value,\n            int datasetIndex,\n            double transX, double transY, PlotOrientation orientation) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n\n        if (crosshairState != null) {\n            if (this.plot.isRangeCrosshairLockedOnData()) {\n                \n                crosshairState.updateCrosshairPoint(rowKey, columnKey, value,\n                        datasetIndex, transX, transY, orientation);\n            }\n            else {\n                crosshairState.updateCrosshairX(rowKey, columnKey,\n                        datasetIndex, transX, orientation);\n            }\n        }\n    }\n\n    \n    protected void drawItemLabel(Graphics2D g2, PlotOrientation orientation,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            double x, double y, boolean negative) {\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\n                column, selected);\n        if (generator != null) {\n            Font labelFont = getItemLabelFont(row, column, selected);\n            Paint paint = getItemLabelPaint(row, column, selected);\n            g2.setFont(labelFont);\n            g2.setPaint(paint);\n            String label = generator.generateLabel(dataset, row, column);\n            ItemLabelPosition position = null;\n            if (!negative) {\n                position = getPositiveItemLabelPosition(row, column, selected);\n            }\n            else {\n                position = getNegativeItemLabelPosition(row, column, selected);\n            }\n            Point2D anchorPoint = calculateLabelAnchorPoint(\n                    position.getItemLabelAnchor(), x, y, orientation);\n            TextUtilities.drawRotatedString(label, g2,\n                    (float) anchorPoint.getX(), (float) anchorPoint.getY(),\n                    position.getTextAnchor(),\n                    position.getAngle(), position.getRotationAnchor());\n        }\n\n    }\n\n    \n    public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,\n            CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer,\n            PlotRenderingInfo info) {\n\n        Iterator iterator = null;\n        if (layer.equals(Layer.FOREGROUND)) {\n            iterator = this.foregroundAnnotations.iterator();\n        }\n        else if (layer.equals(Layer.BACKGROUND)) {\n            iterator = this.backgroundAnnotations.iterator();\n        }\n        else {\n            \n            throw new RuntimeException(\"Unknown layer.\");\n        }\n        while (iterator.hasNext()) {\n            CategoryAnnotation annotation = (CategoryAnnotation) iterator.next();\n            annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis,\n                    0, info);\n        }\n\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n\n        AbstractCategoryItemRenderer clone\n                = (AbstractCategoryItemRenderer) super.clone();\n\n\n        if (this.itemLabelGeneratorList != null) {\n            clone.itemLabelGeneratorList\n                    = (ObjectList) this.itemLabelGeneratorList.clone();\n        }\n\n        if (this.baseItemLabelGenerator != null) {\n            if (this.baseItemLabelGenerator instanceof PublicCloneable) {\n                PublicCloneable pc\n                        = (PublicCloneable) this.baseItemLabelGenerator;\n                clone.baseItemLabelGenerator\n                        = (CategoryItemLabelGenerator) pc.clone();\n            }\n            else {\n                throw new CloneNotSupportedException(\n                        \"ItemLabelGenerator not cloneable.\");\n            }\n        }\n\n        if (this.toolTipGeneratorList != null) {\n            clone.toolTipGeneratorList\n                    = (ObjectList) this.toolTipGeneratorList.clone();\n        }\n\n        if (this.baseToolTipGenerator != null) {\n            if (this.baseToolTipGenerator instanceof PublicCloneable) {\n                PublicCloneable pc\n                        = (PublicCloneable) this.baseToolTipGenerator;\n                clone.baseToolTipGenerator\n                        = (CategoryToolTipGenerator) pc.clone();\n            }\n            else {\n                throw new CloneNotSupportedException(\n                        \"Base tool tip generator not cloneable.\");\n            }\n        }\n\n        if (this.urlGeneratorList != null) {\n            clone.urlGeneratorList = (ObjectList) this.urlGeneratorList.clone();\n        }\n\n        if (this.baseURLGenerator != null) {\n            if (this.baseURLGenerator instanceof PublicCloneable) {\n                PublicCloneable pc = (PublicCloneable) this.baseURLGenerator;\n                clone.baseURLGenerator = (CategoryURLGenerator) pc.clone();\n            }\n            else {\n                throw new CloneNotSupportedException(\n                        \"Base item URL generator not cloneable.\");\n            }\n        }\n\n        if (this.legendItemLabelGenerator instanceof PublicCloneable) {\n            clone.legendItemLabelGenerator = (CategorySeriesLabelGenerator)\n                    ObjectUtilities.clone(this.legendItemLabelGenerator);\n        }\n        if (this.legendItemToolTipGenerator instanceof PublicCloneable) {\n            clone.legendItemToolTipGenerator = (CategorySeriesLabelGenerator)\n                    ObjectUtilities.clone(this.legendItemToolTipGenerator);\n        }\n        if (this.legendItemURLGenerator instanceof PublicCloneable) {\n            clone.legendItemURLGenerator = (CategorySeriesLabelGenerator)\n                    ObjectUtilities.clone(this.legendItemURLGenerator);\n        }\n        return clone;\n    }\n\n    \n    protected CategoryAxis getDomainAxis(CategoryPlot plot, \n            CategoryDataset dataset) {\n        int datasetIndex = plot.indexOf(dataset);\n        return plot.getDomainAxisForDataset(datasetIndex);\n    }\n\n    \n    protected ValueAxis getRangeAxis(CategoryPlot plot, int index) {\n        ValueAxis result = plot.getRangeAxis(index);\n        if (result == null) {\n            result = plot.getRangeAxis();\n        }\n        return result;\n    }\n\n    \n    public LegendItemCollection getLegendItems() {\n        LegendItemCollection result = new LegendItemCollection();\n        if (this.plot == null) {\n            return result;\n        }\n        int index = this.plot.getIndexOf(this);\n        CategoryDataset dataset = this.plot.getDataset(index);\n        if (dataset == null) {\n            return result;\n        }\n        int seriesCount = dataset.getRowCount();\n        if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n            for (int i = 0; i < seriesCount; i++) {\n                if (isSeriesVisibleInLegend(i)) {\n                    LegendItem item = getLegendItem(index, i);\n                    if (item != null) {\n                        result.add(item);\n                    }\n                }\n            }\n        }\n        else {\n            for (int i = seriesCount - 1; i >= 0; i--) {\n                if (isSeriesVisibleInLegend(i)) {\n                    LegendItem item = getLegendItem(index, i);\n                    if (item != null) {\n                        result.add(item);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    \n    protected void addEntity(EntityCollection entities, Shape hotspot,\n            CategoryDataset dataset, int row, int column, boolean selected) {\n\n        if (hotspot == null) {\n            throw new IllegalArgumentException(\"Null 'hotspot' argument.\");\n        }\n        addEntity(entities, hotspot, dataset, row, column, selected, 0.0, 0.0);\n    }\n\n    \n    protected void addEntity(EntityCollection entities, Shape hotspot,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            double entityX, double entityY) {\n        if (!getItemCreateEntity(row, column, selected)) {\n            return;\n        }\n        Shape s = hotspot;\n        if (hotspot == null) {\n            double r = getDefaultEntityRadius();\n            double w = r * 2;\n            if (getPlot().getOrientation() == PlotOrientation.VERTICAL) {\n                s = new Ellipse2D.Double(entityX - r, entityY - r, w, w);\n            }\n            else {\n                s = new Ellipse2D.Double(entityY - r, entityX - r, w, w);\n            }\n        }\n        String tip = null;\n        CategoryToolTipGenerator generator = getToolTipGenerator(row, column,\n                selected);\n        if (generator != null) {\n            tip = generator.generateToolTip(dataset, row, column);\n        }\n        String url = null;\n        CategoryURLGenerator urlster = getURLGenerator(row, column, selected);\n        if (urlster != null) {\n            url = urlster.generateURL(dataset, row, column);\n        }\n        CategoryItemEntity entity = new CategoryItemEntity(s, tip, url,\n                dataset, dataset.getRowKey(row), dataset.getColumnKey(column));\n        entities.add(entity);\n    }\n\n        \n    public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            CategoryItemRendererState state) {\n        throw new RuntimeException(\"Not implemented.\");\n    }\n\n    \n    public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            CategoryItemRendererState state, Rectangle2D result) {\n        if (result == null) {\n            result = new Rectangle();\n        }\n        Comparable key = dataset.getColumnKey(column);\n        Number y = dataset.getValue(row, column);\n        if (y == null) {\n            return null;\n        }\n        double xx = domainAxis.getCategoryMiddle(key,\n                plot.getCategoriesForAxis(domainAxis),\n                dataArea, plot.getDomainAxisEdge());\n        double yy = rangeAxis.valueToJava2D(y.doubleValue(), dataArea,\n                plot.getRangeAxisEdge());\n        result.setRect(xx - 2, yy - 2, 4, 4);\n        return result;\n    }\n\n    \n    public boolean hitTest(double xx, double yy, Graphics2D g2,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            boolean selected, CategoryItemRendererState state) {\n        Rectangle2D bounds = createHotSpotBounds(g2, dataArea, plot,\n                domainAxis, rangeAxis, dataset, row, column, selected,\n                state, null);\n        if (bounds == null) {\n            return false;\n        }\n        \n        \n        return bounds.contains(xx, yy);\n    }\n    \n}\n",
      "buggy_signatures": [
        "protected AbstractCategoryItemRenderer()",
        "public int getPassCount()",
        "public CategoryPlot getPlot()",
        "public void setPlot(CategoryPlot plot)",
        "public CategoryItemLabelGenerator getItemLabelGenerator(int row, int column, boolean selected)",
        "public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series)",
        "public void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator)",
        "public void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator, boolean notify)",
        "public CategoryItemLabelGenerator getBaseItemLabelGenerator()",
        "public void setBaseItemLabelGenerator( CategoryItemLabelGenerator generator)",
        "public void setBaseItemLabelGenerator( CategoryItemLabelGenerator generator, boolean notify)",
        "public CategoryToolTipGenerator getToolTipGenerator(int row, int column, boolean selected)",
        "public CategoryToolTipGenerator getSeriesToolTipGenerator(int series)",
        "public void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator)",
        "public void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator, boolean notify)",
        "public CategoryToolTipGenerator getBaseToolTipGenerator()",
        "public void setBaseToolTipGenerator(CategoryToolTipGenerator generator)",
        "public void setBaseToolTipGenerator(CategoryToolTipGenerator generator, boolean notify)",
        "public CategoryURLGenerator getURLGenerator(int row, int column, boolean selected)",
        "public CategoryURLGenerator getSeriesURLGenerator(int series)",
        "public void setSeriesURLGenerator(int series, CategoryURLGenerator generator)",
        "public void setSeriesURLGenerator(int series, CategoryURLGenerator generator, boolean notify)",
        "public CategoryURLGenerator getBaseURLGenerator()",
        "public void setBaseURLGenerator(CategoryURLGenerator generator)",
        "public void setBaseURLGenerator(CategoryURLGenerator generator, boolean notify)",
        "public void addAnnotation(CategoryAnnotation annotation)",
        "public void addAnnotation(CategoryAnnotation annotation, Layer layer)",
        "public boolean removeAnnotation(CategoryAnnotation annotation)",
        "public void removeAnnotations()",
        "public CategorySeriesLabelGenerator getLegendItemLabelGenerator()",
        "public void setLegendItemLabelGenerator( CategorySeriesLabelGenerator generator)",
        "public CategorySeriesLabelGenerator getLegendItemToolTipGenerator()",
        "public void setLegendItemToolTipGenerator( CategorySeriesLabelGenerator generator)",
        "public CategorySeriesLabelGenerator getLegendItemURLGenerator()",
        "public void setLegendItemURLGenerator( CategorySeriesLabelGenerator generator)",
        "public int getRowCount()",
        "public int getColumnCount()",
        "protected CategoryItemRendererState createState(PlotRenderingInfo info)",
        "public CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info)",
        "public Range findRangeBounds(CategoryDataset dataset)",
        "protected Range findRangeBounds(CategoryDataset dataset, boolean includeInterval)",
        "public double getItemMiddle(Comparable rowKey, Comparable columnKey, CategoryDataset dataset, CategoryAxis axis, Rectangle2D area, RectangleEdge edge)",
        "public void drawBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea)",
        "public void drawOutline(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea)",
        "public void drawDomainLine(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea, double value, Paint paint, Stroke stroke)",
        "public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Rectangle2D dataArea, double value, Paint paint, Stroke stroke)",
        "public void drawDomainMarker(Graphics2D g2, CategoryPlot plot, CategoryAxis axis, CategoryMarker marker, Rectangle2D dataArea)",
        "public void drawRangeMarker(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Marker marker, Rectangle2D dataArea)",
        "protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2, PlotOrientation orientation, Rectangle2D dataArea, Rectangle2D markerArea, RectangleInsets markerOffset, LengthAdjustmentType labelOffsetType, RectangleAnchor anchor)",
        "protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2, PlotOrientation orientation, Rectangle2D dataArea, Rectangle2D markerArea, RectangleInsets markerOffset, LengthAdjustmentType labelOffsetType, RectangleAnchor anchor)",
        "public LegendItem getLegendItem(int datasetIndex, int series)",
        "public boolean equals(Object obj)",
        "public int hashCode()",
        "public DrawingSupplier getDrawingSupplier()",
        "protected void updateCrosshairValues(CategoryCrosshairState crosshairState, Comparable rowKey, Comparable columnKey, double value, int datasetIndex, double transX, double transY, PlotOrientation orientation)",
        "protected void drawItemLabel(Graphics2D g2, PlotOrientation orientation, CategoryDataset dataset, int row, int column, boolean selected, double x, double y, boolean negative)",
        "public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer, PlotRenderingInfo info)",
        "public Object clone() throws CloneNotSupportedException",
        "protected CategoryAxis getDomainAxis(CategoryPlot plot, CategoryDataset dataset)",
        "protected ValueAxis getRangeAxis(CategoryPlot plot, int index)",
        "public LegendItemCollection getLegendItems()",
        "protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected)",
        "protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected, double entityX, double entityY)",
        "public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state)",
        "public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state, Rectangle2D result)",
        "public boolean hitTest(double xx, double yy, Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state)"
      ],
      "fixed_signatures": [
        "protected AbstractCategoryItemRenderer()",
        "public int getPassCount()",
        "public CategoryPlot getPlot()",
        "public void setPlot(CategoryPlot plot)",
        "public CategoryItemLabelGenerator getItemLabelGenerator(int row, int column, boolean selected)",
        "public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series)",
        "public void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator)",
        "public void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator, boolean notify)",
        "public CategoryItemLabelGenerator getBaseItemLabelGenerator()",
        "public void setBaseItemLabelGenerator( CategoryItemLabelGenerator generator)",
        "public void setBaseItemLabelGenerator( CategoryItemLabelGenerator generator, boolean notify)",
        "public CategoryToolTipGenerator getToolTipGenerator(int row, int column, boolean selected)",
        "public CategoryToolTipGenerator getSeriesToolTipGenerator(int series)",
        "public void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator)",
        "public void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator, boolean notify)",
        "public CategoryToolTipGenerator getBaseToolTipGenerator()",
        "public void setBaseToolTipGenerator(CategoryToolTipGenerator generator)",
        "public void setBaseToolTipGenerator(CategoryToolTipGenerator generator, boolean notify)",
        "public CategoryURLGenerator getURLGenerator(int row, int column, boolean selected)",
        "public CategoryURLGenerator getSeriesURLGenerator(int series)",
        "public void setSeriesURLGenerator(int series, CategoryURLGenerator generator)",
        "public void setSeriesURLGenerator(int series, CategoryURLGenerator generator, boolean notify)",
        "public CategoryURLGenerator getBaseURLGenerator()",
        "public void setBaseURLGenerator(CategoryURLGenerator generator)",
        "public void setBaseURLGenerator(CategoryURLGenerator generator, boolean notify)",
        "public void addAnnotation(CategoryAnnotation annotation)",
        "public void addAnnotation(CategoryAnnotation annotation, Layer layer)",
        "public boolean removeAnnotation(CategoryAnnotation annotation)",
        "public void removeAnnotations()",
        "public CategorySeriesLabelGenerator getLegendItemLabelGenerator()",
        "public void setLegendItemLabelGenerator( CategorySeriesLabelGenerator generator)",
        "public CategorySeriesLabelGenerator getLegendItemToolTipGenerator()",
        "public void setLegendItemToolTipGenerator( CategorySeriesLabelGenerator generator)",
        "public CategorySeriesLabelGenerator getLegendItemURLGenerator()",
        "public void setLegendItemURLGenerator( CategorySeriesLabelGenerator generator)",
        "public int getRowCount()",
        "public int getColumnCount()",
        "protected CategoryItemRendererState createState(PlotRenderingInfo info)",
        "public CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info)",
        "public Range findRangeBounds(CategoryDataset dataset)",
        "protected Range findRangeBounds(CategoryDataset dataset, boolean includeInterval)",
        "public double getItemMiddle(Comparable rowKey, Comparable columnKey, CategoryDataset dataset, CategoryAxis axis, Rectangle2D area, RectangleEdge edge)",
        "public void drawBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea)",
        "public void drawOutline(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea)",
        "public void drawDomainLine(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea, double value, Paint paint, Stroke stroke)",
        "public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Rectangle2D dataArea, double value, Paint paint, Stroke stroke)",
        "public void drawDomainMarker(Graphics2D g2, CategoryPlot plot, CategoryAxis axis, CategoryMarker marker, Rectangle2D dataArea)",
        "public void drawRangeMarker(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Marker marker, Rectangle2D dataArea)",
        "protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2, PlotOrientation orientation, Rectangle2D dataArea, Rectangle2D markerArea, RectangleInsets markerOffset, LengthAdjustmentType labelOffsetType, RectangleAnchor anchor)",
        "protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2, PlotOrientation orientation, Rectangle2D dataArea, Rectangle2D markerArea, RectangleInsets markerOffset, LengthAdjustmentType labelOffsetType, RectangleAnchor anchor)",
        "public LegendItem getLegendItem(int datasetIndex, int series)",
        "public boolean equals(Object obj)",
        "public int hashCode()",
        "public DrawingSupplier getDrawingSupplier()",
        "protected void updateCrosshairValues(CategoryCrosshairState crosshairState, Comparable rowKey, Comparable columnKey, double value, int datasetIndex, double transX, double transY, PlotOrientation orientation)",
        "protected void drawItemLabel(Graphics2D g2, PlotOrientation orientation, CategoryDataset dataset, int row, int column, boolean selected, double x, double y, boolean negative)",
        "public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer, PlotRenderingInfo info)",
        "public Object clone() throws CloneNotSupportedException",
        "protected CategoryAxis getDomainAxis(CategoryPlot plot, CategoryDataset dataset)",
        "protected ValueAxis getRangeAxis(CategoryPlot plot, int index)",
        "public LegendItemCollection getLegendItems()",
        "protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected)",
        "protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected, double entityX, double entityY)",
        "public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state)",
        "public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state, Rectangle2D result)",
        "public boolean hitTest(double xx, double yy, Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state)"
      ],
      "methods": [
        {
          "buggy_method": "  public LegendItemCollection getLegendItems() {\n  LegendItemCollection result = new LegendItemCollection();\n  if (this.plot == null) {\n  return result;\n  }\n  int index = this.plot.getIndexOf(this);\n  CategoryDataset dataset = this.plot.getDataset(index);\n  if (dataset != null) {\n  return result;\n  }\n  int seriesCount = dataset.getRowCount();\n  if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n  for (int i = 0; i < seriesCount; i++) {\n  if (isSeriesVisibleInLegend(i)) {\n  LegendItem item = getLegendItem(index, i);\n  if (item != null) {\n  result.add(item);\n  }\n  }\n  }\n  }\n  else {\n  for (int i = seriesCount - 1; i >= 0; i--) {\n  if (isSeriesVisibleInLegend(i)) {\n  LegendItem item = getLegendItem(index, i);\n  if (item != null) {\n  result.add(item);\n  }\n  }\n  }\n  }\n  return result;\n  }",
          "fixed_method": "  public LegendItemCollection getLegendItems() {\n  LegendItemCollection result = new LegendItemCollection();\n  if (this.plot == null) {\n  return result;\n  }\n  int index = this.plot.getIndexOf(this);\n  CategoryDataset dataset = this.plot.getDataset(index);\n  if (dataset == null) {\n  return result;\n  }\n  int seriesCount = dataset.getRowCount();\n  if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n  for (int i = 0; i < seriesCount; i++) {\n  if (isSeriesVisibleInLegend(i)) {\n  LegendItem item = getLegendItem(index, i);\n  if (item != null) {\n  result.add(item);\n  }\n  }\n  }\n  }\n  else {\n  for (int i = seriesCount - 1; i >= 0; i--) {\n  if (isSeriesVisibleInLegend(i)) {\n  LegendItem item = getLegendItem(index, i);\n  if (item != null) {\n  result.add(item);\n  }\n  }\n  }\n  }\n  return result;\n  }",
          "diff": [
            "@@ -1794,7 +1794,7 @@",
            "         }\n",
            "         int index = this.plot.getIndexOf(this);\n",
            "         CategoryDataset dataset = this.plot.getDataset(index);\n",
            "-        if (dataset != null) {\n",
            "+        if (dataset == null) {\n",
            "             return result;\n",
            "         }\n",
            "         int seriesCount = dataset.getRowCount();\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}