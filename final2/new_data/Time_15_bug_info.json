{
  "bug_id": "15",
  "failed_tests": {
    "org.joda.time.field.TestFieldUtils": [
      {
        "methodName": "testSafeMultiplyLongInt",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "            fail();",
        "test_source": "  public void testSafeMultiplyLongInt() {\n  assertEquals(0L, FieldUtils.safeMultiply(0L, 0));\n  \n  assertEquals(1L, FieldUtils.safeMultiply(1L, 1));\n  assertEquals(3L, FieldUtils.safeMultiply(1L, 3));\n  assertEquals(3L, FieldUtils.safeMultiply(3L, 1));\n  \n  assertEquals(6L, FieldUtils.safeMultiply(2L, 3));\n  assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));\n  assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));\n  assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));\n  \n  assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));\n  \n  assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));\n  assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));\n  assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));\n  \n  try {\n  FieldUtils.safeMultiply(Long.MIN_VALUE, -1);\n  fail();\n  } catch (ArithmeticException e) {\n  }\n  \n  try {\n  FieldUtils.safeMultiply(Long.MIN_VALUE, 100);\n  fail();\n  } catch (ArithmeticException e) {\n  }\n  \n  try {\n  FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);\n  fail();\n  } catch (ArithmeticException e) {\n  }\n  \n  try {\n  FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);\n  fail();\n  } catch (ArithmeticException e) {\n  }\n  }",
        "stack": [
          "TestFieldUtils.testSafeMultiplyLongInt line 261"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/joda/time/field/FieldUtils.java",
      "buggy_full_code": "\npackage org.joda.time.field;\n\nimport org.joda.time.DateTimeField;\nimport org.joda.time.DateTimeFieldType;\nimport org.joda.time.IllegalFieldValueException;\n\n\npublic class FieldUtils { private FieldUtils() {\n        super();\n    }\n    \n    \n    \n    public static int safeNegate(int value) {\n        if (value == Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"Integer.MIN_VALUE cannot be negated\");\n        }\n        return -value;\n    }\n    \n    \n    public static int safeAdd(int val1, int val2) {\n        int sum = val1 + val2;\n        \n        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n            throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);\n        }\n        return sum;\n    }\n    \n    \n    public static long safeAdd(long val1, long val2) {\n        long sum = val1 + val2;\n        \n        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n            throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);\n        }\n        return sum;\n    }\n    \n    \n    public static long safeSubtract(long val1, long val2) {\n        long diff = val1 - val2;\n        \n        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\n            throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" - \" + val2);\n        }\n        return diff;\n    }\n    \n    \n    public static int safeMultiply(int val1, int val2) {\n        long total = (long) val1 * (long) val2;\n        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\n          throw new ArithmeticException(\"Multiplication overflows an int: \" + val1 + \" * \" + val2);\n        }\n        return (int) total;\n    }\n\n    \n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n\n    \n    public static long safeMultiply(long val1, long val2) {\n        if (val2 == 1) {\n            return val1;\n        }\n        if (val1 == 1) {\n            return val2;\n        }\n        if (val1 == 0 || val2 == 0) {\n            return 0;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n    \n    \n    public static int safeToInt(long value) {\n        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\n            return (int) value;\n        }\n        throw new ArithmeticException(\"Value cannot fit in an int: \" + value);\n    }\n    \n    \n    public static int safeMultiplyToInt(long val1, long val2) {\n        long val = FieldUtils.safeMultiply(val1, val2);\n        return FieldUtils.safeToInt(val);\n    }\n\n    \n    \n    public static void verifyValueBounds(DateTimeField field, int value, int lowerBound, int upperBound) {\n        if ((value < lowerBound) || (value > upperBound)) {\n            throw new IllegalFieldValueException\n                (field.getType(), Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n        }\n    }\n\n    \n    public static void verifyValueBounds(DateTimeFieldType fieldType, int value, int lowerBound, int upperBound) {\n        if ((value < lowerBound) || (value > upperBound)) {\n            throw new IllegalFieldValueException\n                (fieldType, Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n        }\n    }\n\n    \n    public static void verifyValueBounds(String fieldName, int value, int lowerBound, int upperBound) {\n        if ((value < lowerBound) || (value > upperBound)) {\n            throw new IllegalFieldValueException\n                (fieldName, Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n        }\n    }\n\n    \n    public static int getWrappedValue(int currentValue, int wrapValue, int minValue, int maxValue) {\n        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);\n    }\n\n    \n    public static int getWrappedValue(int value, int minValue, int maxValue) {\n        if (minValue >= maxValue) {\n            throw new IllegalArgumentException(\"MIN > MAX\");\n        }\n\n        int wrapRange = maxValue - minValue + 1;\n        value -= minValue;\n\n        if (value >= 0) {\n            return (value % wrapRange) + minValue;\n        }\n\n        int remByRange = (-value) % wrapRange;\n\n        if (remByRange == 0) {\n            return 0 + minValue;\n        }\n        return (wrapRange - remByRange) + minValue;\n    }\n\n    \n    \n    public static boolean equals(Object object1, Object object2) {\n        if (object1 == object2) {\n            return true;\n        }\n        if (object1 == null || object2 == null) {\n            return false;\n        }\n        return object1.equals(object2);\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.joda.time.field;\n\nimport org.joda.time.DateTimeField;\nimport org.joda.time.DateTimeFieldType;\nimport org.joda.time.IllegalFieldValueException;\n\n\npublic class FieldUtils { private FieldUtils() {\n        super();\n    }\n    \n    \n    \n    public static int safeNegate(int value) {\n        if (value == Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"Integer.MIN_VALUE cannot be negated\");\n        }\n        return -value;\n    }\n    \n    \n    public static int safeAdd(int val1, int val2) {\n        int sum = val1 + val2;\n        \n        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n            throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);\n        }\n        return sum;\n    }\n    \n    \n    public static long safeAdd(long val1, long val2) {\n        long sum = val1 + val2;\n        \n        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n            throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);\n        }\n        return sum;\n    }\n    \n    \n    public static long safeSubtract(long val1, long val2) {\n        long diff = val1 - val2;\n        \n        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\n            throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" - \" + val2);\n        }\n        return diff;\n    }\n    \n    \n    public static int safeMultiply(int val1, int val2) {\n        long total = (long) val1 * (long) val2;\n        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\n          throw new ArithmeticException(\"Multiplication overflows an int: \" + val1 + \" * \" + val2);\n        }\n        return (int) total;\n    }\n\n    \n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n\n    \n    public static long safeMultiply(long val1, long val2) {\n        if (val2 == 1) {\n            return val1;\n        }\n        if (val1 == 1) {\n            return val2;\n        }\n        if (val1 == 0 || val2 == 0) {\n            return 0;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n    \n    \n    public static int safeToInt(long value) {\n        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\n            return (int) value;\n        }\n        throw new ArithmeticException(\"Value cannot fit in an int: \" + value);\n    }\n    \n    \n    public static int safeMultiplyToInt(long val1, long val2) {\n        long val = FieldUtils.safeMultiply(val1, val2);\n        return FieldUtils.safeToInt(val);\n    }\n\n    \n    \n    public static void verifyValueBounds(DateTimeField field, int value, int lowerBound, int upperBound) {\n        if ((value < lowerBound) || (value > upperBound)) {\n            throw new IllegalFieldValueException\n                (field.getType(), Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n        }\n    }\n\n    \n    public static void verifyValueBounds(DateTimeFieldType fieldType, int value, int lowerBound, int upperBound) {\n        if ((value < lowerBound) || (value > upperBound)) {\n            throw new IllegalFieldValueException\n                (fieldType, Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n        }\n    }\n\n    \n    public static void verifyValueBounds(String fieldName, int value, int lowerBound, int upperBound) {\n        if ((value < lowerBound) || (value > upperBound)) {\n            throw new IllegalFieldValueException\n                (fieldName, Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n        }\n    }\n\n    \n    public static int getWrappedValue(int currentValue, int wrapValue, int minValue, int maxValue) {\n        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);\n    }\n\n    \n    public static int getWrappedValue(int value, int minValue, int maxValue) {\n        if (minValue >= maxValue) {\n            throw new IllegalArgumentException(\"MIN > MAX\");\n        }\n\n        int wrapRange = maxValue - minValue + 1;\n        value -= minValue;\n\n        if (value >= 0) {\n            return (value % wrapRange) + minValue;\n        }\n\n        int remByRange = (-value) % wrapRange;\n\n        if (remByRange == 0) {\n            return 0 + minValue;\n        }\n        return (wrapRange - remByRange) + minValue;\n    }\n\n    \n    \n    public static boolean equals(Object object1, Object object2) {\n        if (object1 == object2) {\n            return true;\n        }\n        if (object1 == null || object2 == null) {\n            return false;\n        }\n        return object1.equals(object2);\n    }\n\n}\n",
      "buggy_signatures": [
        "public class FieldUtils { private FieldUtils()",
        "public static int safeNegate(int value)",
        "public static int safeAdd(int val1, int val2)",
        "public static long safeAdd(long val1, long val2)",
        "public static long safeSubtract(long val1, long val2)",
        "public static int safeMultiply(int val1, int val2)",
        "public static long safeMultiply(long val1, int val2)",
        "public static long safeMultiply(long val1, long val2)",
        "public static int safeToInt(long value)",
        "public static int safeMultiplyToInt(long val1, long val2)",
        "public static void verifyValueBounds(DateTimeField field, int value, int lowerBound, int upperBound)",
        "public static void verifyValueBounds(DateTimeFieldType fieldType, int value, int lowerBound, int upperBound)",
        "public static void verifyValueBounds(String fieldName, int value, int lowerBound, int upperBound)",
        "public static int getWrappedValue(int currentValue, int wrapValue, int minValue, int maxValue)",
        "public static int getWrappedValue(int value, int minValue, int maxValue)",
        "public static boolean equals(Object object1, Object object2)"
      ],
      "fixed_signatures": [
        "public class FieldUtils { private FieldUtils()",
        "public static int safeNegate(int value)",
        "public static int safeAdd(int val1, int val2)",
        "public static long safeAdd(long val1, long val2)",
        "public static long safeSubtract(long val1, long val2)",
        "public static int safeMultiply(int val1, int val2)",
        "public static long safeMultiply(long val1, int val2)",
        "public static long safeMultiply(long val1, long val2)",
        "public static int safeToInt(long value)",
        "public static int safeMultiplyToInt(long val1, long val2)",
        "public static void verifyValueBounds(DateTimeField field, int value, int lowerBound, int upperBound)",
        "public static void verifyValueBounds(DateTimeFieldType fieldType, int value, int lowerBound, int upperBound)",
        "public static void verifyValueBounds(String fieldName, int value, int lowerBound, int upperBound)",
        "public static int getWrappedValue(int currentValue, int wrapValue, int minValue, int maxValue)",
        "public static int getWrappedValue(int value, int minValue, int maxValue)",
        "public static boolean equals(Object object1, Object object2)"
      ],
      "methods": [
        {
          "buggy_method": "  public static long safeMultiply(long val1, int val2) {\n  switch (val2) {\n  case -1:\n  return -val1;\n  case 0:\n  return 0L;\n  case 1:\n  return val1;\n  }\n  long total = val1 * val2;\n  if (total / val2 != val1) {\n  throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n  }\n  return total;\n  }",
          "fixed_method": "  public static long safeMultiply(long val1, int val2) {\n  switch (val2) {\n  case -1:\n  if (val1 == Long.MIN_VALUE) {\n  throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n  }\n  return -val1;\n  case 0:\n  return 0L;\n  case 1:\n  return val1;\n  }\n  long total = val1 * val2;\n  if (total / val2 != val1) {\n  throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n  }\n  return total;\n  }",
          "diff": [
            "@@ -135,6 +135,9 @@",
            "     public static long safeMultiply(long val1, int val2) {\n",
            "         switch (val2) {\n",
            "             case -1:\n",
            "+                if (val1 == Long.MIN_VALUE) {\n",
            "+                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n",
            "+                }\n",
            "                 return -val1;\n",
            "             case 0:\n",
            "                 return 0L;\n"
          ],
          "changed_lines": 3
        }
      ]
    }
  ]
}
