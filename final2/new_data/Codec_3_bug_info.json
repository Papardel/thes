{
  "bug_id": "3",
  "failed_tests": {
    "org.apache.commons.codec.language.DoubleMetaphone2Test": [
      {
        "methodName": "testDoubleMetaphoneAlternate",
        "error": "junit.framework.ComparisonFailure",
        "message": "Test [19]=Angier expected:<AN[J]R> but was:<AN[K]R>",
        "fail_line": "            assertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][2], doubleMetaphone.doubleMetaphone(value, true));",
        "test_source": "  public void testDoubleMetaphoneAlternate() {\n  String value = null;\n  for (int i = 0; i < TEST_DATA.length; i++) {\n  value = TEST_DATA[i][0];\n  assertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][2], doubleMetaphone.doubleMetaphone(value, true));\n  }\n  }",
        "stack": [
          "DoubleMetaphone2Test.testDoubleMetaphoneAlternate line 84"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/codec/language/DoubleMetaphone.java",
      "buggy_full_code": "\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\npublic class DoubleMetaphone implements StringEncoder {\n\n    \n    private static final String VOWELS = \"AEIOUY\";\n\n    \n    private static final String[] SILENT_START = \n    { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };\n    private static final String[] L_R_N_M_B_H_F_V_W_SPACE = \n    { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };\n    private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = \n    { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };\n    private static final String[] L_T_K_S_N_M_B_Z = \n    { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };\n\n    \n    protected int maxCodeLen = 4;\n\n    \n    public DoubleMetaphone() {\n        super();\n    }\n    \n    \n    public String doubleMetaphone(String value) {\n        return doubleMetaphone(value, false);\n    }\n    \n    \n    public String doubleMetaphone(String value, boolean alternate) {\n        value = cleanInput(value);\n        if (value == null) {\n            return null;\n        }\n        \n        boolean slavoGermanic = isSlavoGermanic(value);\n        int index = isSilentStart(value) ? 1 : 0;\n        \n        DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());\n        \n        while (!result.isComplete() && index <= value.length() - 1) {\n            switch (value.charAt(index)) {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n            case 'Y':\n                index = handleAEIOUY(value, result, index);\n                break;\n            case 'B':\n                result.append('P');\n                index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\n                break;\n            case '\\u00C7':\n                \n                result.append('S');\n                index++;\n                break; \n            case 'C':\n                index = handleC(value, result, index);\n                break;\n            case 'D':\n                index = handleD(value, result, index);\n                break;\n            case 'F':\n                result.append('F');\n                index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;\n                break;\n            case 'G':\n                index = handleG(value, result, index, slavoGermanic);\n                break;\n            case 'H':\n                index = handleH(value, result, index);\n                break;\n            case 'J':\n                index = handleJ(value, result, index, slavoGermanic);\n                break;\n            case 'K':\n                result.append('K');\n                index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\n                break;\n            case 'L':\n                index = handleL(value, result, index);\n                break;\n            case 'M':\n                result.append('M');\n                index = conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case 'N':\n                result.append('N');\n                index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\n                break;\n            case '\\u00D1':\n                \n                result.append('N');\n                index++;\n                break;\n            case 'P':\n                index = handleP(value, result, index);\n                break;\n            case 'Q':\n                result.append('K');\n                index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;\n                break;\n            case 'R':\n                index = handleR(value, result, index, slavoGermanic);\n                break;\n            case 'S':\n                index = handleS(value, result, index, slavoGermanic);\n                break;\n            case 'T':\n                index = handleT(value, result, index);\n                break;\n            case 'V':\n                result.append('F');\n                index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\n                break;\n            case 'W':\n                index = handleW(value, result, index);\n                break;\n            case 'X':\n                index = handleX(value, result, index);\n                break;\n            case 'Z':\n                index = handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n            }\n        }\n\n        return alternate ? result.getAlternate() : result.getPrimary();\n    }\n    \n    \n    public Object encode(Object obj) throws EncoderException {\n        if (!(obj instanceof String)) {\n            throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\"); \n        } \n        return doubleMetaphone((String) obj);\n    }\n\n    \n    public String encode(String value) {\n        return doubleMetaphone(value);   \n    }\n\n    \n    public boolean isDoubleMetaphoneEqual(String value1, String value2) {\n        return isDoubleMetaphoneEqual(value1, value2, false);\n    }\n    \n    \n    public boolean isDoubleMetaphoneEqual(String value1, \n                                          String value2, \n                                          boolean alternate) {\n        return doubleMetaphone(value1, alternate).equals(doubleMetaphone\n                                                         (value2, alternate));\n    }\n    \n    \n    public int getMaxCodeLen() {\n        return this.maxCodeLen;\n    }\n\n    \n    public void setMaxCodeLen(int maxCodeLen) {\n        this.maxCodeLen = maxCodeLen;\n    }\n\n    \n\n    \n    private int handleAEIOUY(String value, DoubleMetaphoneResult result, int \n                             index) {\n        if (index == 0) {\n            result.append('A');\n        }\n        return index + 1;\n    }\n    \n    \n    private int handleC(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (conditionC0(value, index)) {  \n            result.append('K');\n            index += 2;\n        } else if (index == 0 && contains(value, index, 6, \"CAESAR\")) {\n            result.append('S');\n            index += 2;\n        } else if (contains(value, index, 2, \"CH\")) {\n            index = handleCH(value, result, index);\n        } else if (contains(value, index, 2, \"CZ\") && \n                   !contains(value, index - 2, 4, \"WICZ\")) {\n            \n            result.append('S', 'X');\n            index += 2;\n        } else if (contains(value, index + 1, 3, \"CIA\")) {\n            \n            result.append('X');\n            index += 3;\n        } else if (contains(value, index, 2, \"CC\") && \n                   !(index == 1 && charAt(value, 0) == 'M')) {\n            \n            return handleCC(value, result, index);\n        } else if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n            result.append('K');\n            index += 2;\n        } else if (contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n            \n            if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                result.append('S', 'X');\n            } else {\n                result.append('S');\n            }\n            index += 2;\n        } else {\n            result.append('K');\n            if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) { \n                \n                index += 3;\n            } else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && \n                       !contains(value, index + 1, 2, \"CE\", \"CI\")) {\n                index += 2;\n            } else {\n                index++;\n            }\n        }\n        \n        return index;\n    }\n\n    \n    private int handleCC(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && \n            !contains(value, index + 2, 2, \"HU\")) {\n            \n            if ((index == 1 && charAt(value, index - 1) == 'A') || \n                contains(value, index - 1, 5, \"UCCEE\", \"UCCES\")) {\n                \n                result.append(\"KS\");\n            } else {\n                \n                result.append('X');\n            }\n            index += 3;\n        } else {    \n            result.append('K');\n            index += 2;\n        }\n        \n        return index;\n    }\n    \n    \n    private int handleCH(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (index > 0 && contains(value, index, 4, \"CHAE\")) {   \n            result.append('K', 'X');\n            return index + 2;\n        } else if (conditionCH0(value, index)) {\n            \n            result.append('K');\n            return index + 2;\n        } else if (conditionCH1(value, index)) {\n            \n            result.append('K');\n            return index + 2;\n        } else {\n            if (index > 0) {\n                if (contains(value, 0, 2, \"MC\")) {\n                    result.append('K');\n                } else {\n                    result.append('X', 'K');\n                }\n            } else {\n                result.append('X');\n            }\n            return index + 2;\n        }\n    }\n\n    \n    private int handleD(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (contains(value, index, 2, \"DG\")) {\n            \n            if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n                result.append('J');\n                index += 3;\n                \n            } else {\n                result.append(\"TK\");\n                index += 2;\n            }\n        } else if (contains(value, index, 2, \"DT\", \"DD\")) {\n            result.append('T');\n            index += 2;\n        } else {\n            result.append('T');\n            index++;\n        }\n        return index;\n    }\n\n    \n    private int handleG(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n        if (charAt(value, index + 1) == 'H') {\n            index = handleGH(value, result, index);\n        } else if (charAt(value, index + 1) == 'N') {\n            if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n                result.append(\"KN\", \"N\");\n            } else if (!contains(value, index + 2, 2, \"EY\") && \n                       charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n                result.append(\"N\", \"KN\");\n            } else {\n                result.append(\"KN\");\n            }\n            index = index + 2;\n        } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n            result.append(\"KL\", \"L\");\n            index += 2;\n        } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n            \n            result.append('K', 'J');\n            index += 2;\n        } else if ((contains(value, index + 1, 2, \"ER\") || \n                    charAt(value, index + 1) == 'Y') &&\n                   !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n                   !contains(value, index - 1, 1, \"E\", \"I\") && \n                   !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n            \n            result.append('K', 'J');\n            index += 2;\n        } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n                   contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n            \n            if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n                \n                result.append('K');\n            } else if (contains(value, index + 1, 4, \"IER\")) {\n                result.append('J');\n            } else {\n                result.append('J', 'K');\n            }\n            index += 2;\n        } else if (charAt(value, index + 1) == 'G') {\n            index += 2;\n            result.append('K');\n        } else {\n            index++;\n            result.append('K');\n        }\n        return index;\n    }\n    \n    \n    private int handleGH(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (index > 0 && !isVowel(charAt(value, index - 1))) {\n            result.append('K');\n            index += 2;\n        } else if (index == 0) {\n            if (charAt(value, index + 2) == 'I') {\n                result.append('J');\n            } else {\n                result.append('K');\n            }\n            index += 2;\n        } else if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 3 && contains(value, index - 4, 1, \"B\", \"H\"))) {\n            \n            index += 2;\n        } else {\n            if (index > 2 && charAt(value, index - 1) == 'U' && \n                contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\")) {\n                \n                result.append('F');\n            } else if (index > 0 && charAt(value, index - 1) != 'I') {\n                result.append('K');\n            }\n            index += 2;\n        }\n        return index;\n    }\n\n    \n    private int handleH(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        \n        if ((index == 0 || isVowel(charAt(value, index - 1))) && \n            isVowel(charAt(value, index + 1))) {\n            result.append('H');\n            index += 2;\n            \n        } else {\n            index++;\n        }\n        return index;\n    }\n    \n    \n    private int handleJ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic) {\n        if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) {\n                \n                if ((index == 0 && (charAt(value, index + 4) == ' ') || \n                     value.length() == 4) || contains(value, 0, 4, \"SAN \")) {\n                    result.append('H');\n                } else {\n                    result.append('J', 'H');\n                }\n                index++;\n            } else {\n                if (index == 0 && !contains(value, index, 4, \"JOSE\")) {\n                    result.append('J', 'A');\n                } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic && \n                              (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) {\n                    result.append('J', 'H');\n                } else if (index == value.length() - 1) {\n                    result.append('J', ' ');\n                } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n                    result.append('J');\n                }\n\n                if (charAt(value, index + 1) == 'J') {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n        return index;\n    }\n    \n    \n    private int handleL(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (charAt(value, index + 1) == 'L') {\n            if (conditionL0(value, index)) {\n                result.appendPrimary('L');\n            } else {\n                result.append('L');\n            }\n            index += 2;\n        } else {\n            index++;\n            result.append('L');\n        }\n        return index;\n    }\n\n    \n    private int handleP(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (charAt(value, index + 1) == 'H') {\n            result.append('F');\n            index += 2;\n        } else {\n            result.append('P');\n            index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1;\n        }\n        return index;\n    }\n\n    \n    private int handleR(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n        if (index == value.length() - 1 && !slavoGermanic && \n            contains(value, index - 2, 2, \"IE\") && \n            !contains(value, index - 4, 2, \"ME\", \"MA\")) {\n            result.appendAlternate('R');\n        } else {\n            result.append('R');\n        }\n        return charAt(value, index + 1) == 'R' ? index + 2 : index + 1;\n    }\n\n    \n    private int handleS(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n        if (contains(value, index - 1, 3, \"ISL\", \"YSL\")) {\n            \n            index++;\n        } else if (index == 0 && contains(value, index, 5, \"SUGAR\")) {\n            \n            result.append('X', 'S');\n            index++;\n        } else if (contains(value, index, 2, \"SH\")) {\n            if (contains(value, index + 1, 4, \n                         \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                \n                result.append('S');\n            } else {\n                result.append('X');\n            }\n            index += 2;\n        } else if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\")) {\n            \n            if (slavoGermanic) {\n                result.append('S');\n            } else {\n                result.append('S', 'X');\n            }\n            index += 3;\n        } else if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\")) {\n            \n            \n            \n            \n            result.append('S', 'X');\n            index = contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1;\n        } else if (contains(value, index, 2, \"SC\")) {\n            index = handleSC(value, result, index);\n        } else {\n            if (index == value.length() - 1 && contains(value, index - 2, \n                                                        2, \"AI\", \"OI\")){\n                \n                result.appendAlternate('S');\n            } else {\n                result.append('S');\n            }\n            index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1;\n        }\n        return index;\n    }\n\n    \n    private int handleSC(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (charAt(value, index + 2) == 'H') {\n            \n            if (contains(value, index + 3, \n                         2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                \n                if (contains(value, index + 3, 2, \"ER\", \"EN\")) {\n                    \n                    result.append(\"X\", \"SK\");\n                } else {\n                    result.append(\"SK\");\n                }\n            } else {\n                if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W') {\n                    result.append('X', 'S');\n                } else {\n                    result.append('X');\n                }\n            }\n        } else if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n            result.append('S');\n        } else {\n            result.append(\"SK\");\n        }\n        return index + 3;\n    }\n\n    \n    private int handleT(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (contains(value, index, 4, \"TION\")) {\n            result.append('X');\n            index += 3;\n        } else if (contains(value, index, 3, \"TIA\", \"TCH\")) {\n            result.append('X');\n            index += 3;\n        } else if (contains(value, index, 2, \"TH\") || contains(value, index, \n                                                               3, \"TTH\")) {\n            if (contains(value, index + 2, 2, \"OM\", \"AM\") || \n                \n                contains(value, 0, 4, \"VAN \", \"VON \") || \n                contains(value, 0, 3, \"SCH\")) {\n                result.append('T');\n            } else {\n                result.append('0', 'T');\n            }\n            index += 2;\n        } else {\n            result.append('T');\n            index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;\n        }\n        return index;\n    }\n\n    \n    private int handleW(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (contains(value, index, 2, \"WR\")) {\n            \n            result.append('R');\n            index += 2;\n        } else {\n            if (index == 0 && (isVowel(charAt(value, index + 1)) || \n                               contains(value, index, 2, \"WH\"))) {\n                if (isVowel(charAt(value, index + 1))) {\n                    \n                    result.append('A', 'F');\n                } else {\n                    \n                    result.append('A');\n                }\n                index++;\n            } else if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n                       contains(value, index - 1, \n                                5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                       contains(value, 0, 3, \"SCH\")) {\n                \n                result.appendAlternate('F');\n                index++;\n            } else if (contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n                \n                result.append(\"TS\", \"FX\");\n                index += 4;\n            } else {\n                index++;\n            }\n        }\n        return index;\n    }\n    \n    \n    private int handleX(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (index == 0) {\n            result.append('S');\n            index++;\n        } else {\n            if (!((index == value.length() - 1) && \n                  (contains(value, index - 3, 3, \"IAU\", \"EAU\") || \n                   contains(value, index - 2, 2, \"AU\", \"OU\")))) {\n                \n                result.append(\"KS\");\n            }\n            index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1;\n        }\n        return index;\n    }\n\n    \n    private int handleZ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic) {\n        if (charAt(value, index + 1) == 'H') {\n            \n            result.append('J');\n            index += 2;\n        } else {\n            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T'))) {\n                result.append(\"S\", \"TS\");\n            } else {\n                result.append('S');\n            }\n            index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1;\n        }\n        return index;\n    }\n\n    \n\n    \n    private boolean conditionC0(String value, int index) {\n        if (contains(value, index, 4, \"CHIA\")) {\n            return true;\n        } else if (index <= 1) {\n            return false;\n        } else if (isVowel(charAt(value, index - 2))) {\n            return false;\n        } else if (!contains(value, index - 1, 3, \"ACH\")) {\n            return false;\n        } else {\n            char c = charAt(value, index + 2);\n            return (c != 'I' && c != 'E') ||\n                    contains(value, index - 2, 6, \"BACHER\", \"MACHER\");\n        }\n    }\n    \n    \n    private boolean conditionCH0(String value, int index) {\n        if (index != 0) {\n            return false;\n        } else if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") && \n                   !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")) {\n            return false;\n        } else if (contains(value, 0, 5, \"CHORE\")) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    \n    \n    private boolean conditionCH1(String value, int index) {\n        return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, \n                                                                   3, \"SCH\")) ||\n                contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                contains(value, index + 2, 1, \"T\", \"S\") ||\n                ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) &&\n                 (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));\n    }\n    \n    \n    private boolean conditionL0(String value, int index) {\n        if (index == value.length() - 3 && \n            contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) {\n            return true;\n        } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || \n                    contains(value, value.length() - 1, 1, \"A\", \"O\")) &&\n                   contains(value, index - 1, 4, \"ALLE\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    \n    private boolean conditionM0(String value, int index) {\n        if (charAt(value, index + 1) == 'M') {\n            return true;\n        }\n        return contains(value, index - 1, 3, \"UMB\") &&\n                ((index + 1) == value.length() - 1 || contains(value,\n                        index + 2, 2, \"ER\"));\n    }\n    \n    \n\n    \n    private boolean isSlavoGermanic(String value) {\n        return value.indexOf('W') > -1 || value.indexOf('K') > -1 || \n            value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1;\n    }\n\n    \n    private boolean isVowel(char ch) {\n        return VOWELS.indexOf(ch) != -1;\n    }\n\n        \n    private boolean isSilentStart(String value) {\n        boolean result = false;\n        for (int i = 0; i < SILENT_START.length; i++) {\n            if (value.startsWith(SILENT_START[i])) {\n                result = true;\n                break;\n            }\n        }\n        return result;\n    }\n\n        \n    private String cleanInput(String input) {\n        if (input == null) {\n            return null;\n        }\n        input = input.trim();\n        if (input.length() == 0) {\n            return null;\n        }\n        return input.toUpperCase(java.util.Locale.ENGLISH);\n    }\n\n        \n    protected char charAt(String value, int index) {\n        if (index < 0 || index >= value.length()) {\n            return Character.MIN_VALUE;\n        } \n        return value.charAt(index);\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria) {\n        return contains(value, start, length, \n                        new String[] { criteria });\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2) {\n        return contains(value, start, length, \n                        new String[] { criteria1, criteria2 });\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3) {\n        return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3 });\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4) {\n        return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4 });\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4, \n                                    String criteria5) {\n        return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4, criteria5 });\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4, \n                                    String criteria5, String criteria6) {\n        return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4, criteria5, criteria6 });\n    }\n    \n    \n    protected static boolean contains(String value, int start, int length, \n                                      String[] criteria) {\n        boolean result = false;\n        if (start >= 0 && start + length <= value.length()) {\n            String target = value.substring(start, start + length);\n\n            for (int i = 0; i < criteria.length; i++) {\n                if (target.equals(criteria[i])) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    \n    \n    \n    \n    public class DoubleMetaphoneResult {\n\n        private StringBuffer primary = new StringBuffer(getMaxCodeLen());\n        private StringBuffer alternate = new StringBuffer(getMaxCodeLen());\n        private int maxLength;\n\n        public DoubleMetaphoneResult(int maxLength) {\n            this.maxLength = maxLength;\n        }\n\n        public void append(char value) {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n\n        public void append(char primary, char alternate) {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n\n        public void appendPrimary(char value) {\n            if (this.primary.length() < this.maxLength) {\n                this.primary.append(value);\n            }\n        }\n\n        public void appendAlternate(char value) {\n            if (this.alternate.length() < this.maxLength) {\n                this.alternate.append(value);\n            }\n        }\n\n        public void append(String value) {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n\n        public void append(String primary, String alternate) {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n\n        public void appendPrimary(String value) {\n            int addChars = this.maxLength - this.primary.length();\n            if (value.length() <= addChars) {\n                this.primary.append(value);\n            } else {\n                this.primary.append(value.substring(0, addChars));\n            }\n        }\n\n        public void appendAlternate(String value) {\n            int addChars = this.maxLength - this.alternate.length();\n            if (value.length() <= addChars) {\n                this.alternate.append(value);\n            } else {\n                this.alternate.append(value.substring(0, addChars));\n            }\n        }\n\n        public String getPrimary() {\n            return this.primary.toString();\n        }\n\n        public String getAlternate() {\n            return this.alternate.toString();\n        }\n\n        public boolean isComplete() {\n            return this.primary.length() >= this.maxLength && \n                this.alternate.length() >= this.maxLength;\n        }\n    }\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\npublic class DoubleMetaphone implements StringEncoder {\n\n    \n    private static final String VOWELS = \"AEIOUY\";\n\n    \n    private static final String[] SILENT_START = \n    { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };\n    private static final String[] L_R_N_M_B_H_F_V_W_SPACE = \n    { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };\n    private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = \n    { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };\n    private static final String[] L_T_K_S_N_M_B_Z = \n    { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };\n\n    \n    protected int maxCodeLen = 4;\n\n    \n    public DoubleMetaphone() {\n        super();\n    }\n    \n    \n    public String doubleMetaphone(String value) {\n        return doubleMetaphone(value, false);\n    }\n    \n    \n    public String doubleMetaphone(String value, boolean alternate) {\n        value = cleanInput(value);\n        if (value == null) {\n            return null;\n        }\n        \n        boolean slavoGermanic = isSlavoGermanic(value);\n        int index = isSilentStart(value) ? 1 : 0;\n        \n        DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());\n        \n        while (!result.isComplete() && index <= value.length() - 1) {\n            switch (value.charAt(index)) {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n            case 'Y':\n                index = handleAEIOUY(value, result, index);\n                break;\n            case 'B':\n                result.append('P');\n                index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\n                break;\n            case '\\u00C7':\n                \n                result.append('S');\n                index++;\n                break; \n            case 'C':\n                index = handleC(value, result, index);\n                break;\n            case 'D':\n                index = handleD(value, result, index);\n                break;\n            case 'F':\n                result.append('F');\n                index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;\n                break;\n            case 'G':\n                index = handleG(value, result, index, slavoGermanic);\n                break;\n            case 'H':\n                index = handleH(value, result, index);\n                break;\n            case 'J':\n                index = handleJ(value, result, index, slavoGermanic);\n                break;\n            case 'K':\n                result.append('K');\n                index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\n                break;\n            case 'L':\n                index = handleL(value, result, index);\n                break;\n            case 'M':\n                result.append('M');\n                index = conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case 'N':\n                result.append('N');\n                index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\n                break;\n            case '\\u00D1':\n                \n                result.append('N');\n                index++;\n                break;\n            case 'P':\n                index = handleP(value, result, index);\n                break;\n            case 'Q':\n                result.append('K');\n                index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;\n                break;\n            case 'R':\n                index = handleR(value, result, index, slavoGermanic);\n                break;\n            case 'S':\n                index = handleS(value, result, index, slavoGermanic);\n                break;\n            case 'T':\n                index = handleT(value, result, index);\n                break;\n            case 'V':\n                result.append('F');\n                index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\n                break;\n            case 'W':\n                index = handleW(value, result, index);\n                break;\n            case 'X':\n                index = handleX(value, result, index);\n                break;\n            case 'Z':\n                index = handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n            }\n        }\n\n        return alternate ? result.getAlternate() : result.getPrimary();\n    }\n    \n    \n    public Object encode(Object obj) throws EncoderException {\n        if (!(obj instanceof String)) {\n            throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\"); \n        } \n        return doubleMetaphone((String) obj);\n    }\n\n    \n    public String encode(String value) {\n        return doubleMetaphone(value);   \n    }\n\n    \n    public boolean isDoubleMetaphoneEqual(String value1, String value2) {\n        return isDoubleMetaphoneEqual(value1, value2, false);\n    }\n    \n    \n    public boolean isDoubleMetaphoneEqual(String value1, \n                                          String value2, \n                                          boolean alternate) {\n        return doubleMetaphone(value1, alternate).equals(doubleMetaphone\n                                                         (value2, alternate));\n    }\n    \n    \n    public int getMaxCodeLen() {\n        return this.maxCodeLen;\n    }\n\n    \n    public void setMaxCodeLen(int maxCodeLen) {\n        this.maxCodeLen = maxCodeLen;\n    }\n\n    \n\n    \n    private int handleAEIOUY(String value, DoubleMetaphoneResult result, int \n                             index) {\n        if (index == 0) {\n            result.append('A');\n        }\n        return index + 1;\n    }\n    \n    \n    private int handleC(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (conditionC0(value, index)) {  \n            result.append('K');\n            index += 2;\n        } else if (index == 0 && contains(value, index, 6, \"CAESAR\")) {\n            result.append('S');\n            index += 2;\n        } else if (contains(value, index, 2, \"CH\")) {\n            index = handleCH(value, result, index);\n        } else if (contains(value, index, 2, \"CZ\") && \n                   !contains(value, index - 2, 4, \"WICZ\")) {\n            \n            result.append('S', 'X');\n            index += 2;\n        } else if (contains(value, index + 1, 3, \"CIA\")) {\n            \n            result.append('X');\n            index += 3;\n        } else if (contains(value, index, 2, \"CC\") && \n                   !(index == 1 && charAt(value, 0) == 'M')) {\n            \n            return handleCC(value, result, index);\n        } else if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n            result.append('K');\n            index += 2;\n        } else if (contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n            \n            if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                result.append('S', 'X');\n            } else {\n                result.append('S');\n            }\n            index += 2;\n        } else {\n            result.append('K');\n            if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) { \n                \n                index += 3;\n            } else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && \n                       !contains(value, index + 1, 2, \"CE\", \"CI\")) {\n                index += 2;\n            } else {\n                index++;\n            }\n        }\n        \n        return index;\n    }\n\n    \n    private int handleCC(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && \n            !contains(value, index + 2, 2, \"HU\")) {\n            \n            if ((index == 1 && charAt(value, index - 1) == 'A') || \n                contains(value, index - 1, 5, \"UCCEE\", \"UCCES\")) {\n                \n                result.append(\"KS\");\n            } else {\n                \n                result.append('X');\n            }\n            index += 3;\n        } else {    \n            result.append('K');\n            index += 2;\n        }\n        \n        return index;\n    }\n    \n    \n    private int handleCH(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (index > 0 && contains(value, index, 4, \"CHAE\")) {   \n            result.append('K', 'X');\n            return index + 2;\n        } else if (conditionCH0(value, index)) {\n            \n            result.append('K');\n            return index + 2;\n        } else if (conditionCH1(value, index)) {\n            \n            result.append('K');\n            return index + 2;\n        } else {\n            if (index > 0) {\n                if (contains(value, 0, 2, \"MC\")) {\n                    result.append('K');\n                } else {\n                    result.append('X', 'K');\n                }\n            } else {\n                result.append('X');\n            }\n            return index + 2;\n        }\n    }\n\n    \n    private int handleD(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (contains(value, index, 2, \"DG\")) {\n            \n            if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n                result.append('J');\n                index += 3;\n                \n            } else {\n                result.append(\"TK\");\n                index += 2;\n            }\n        } else if (contains(value, index, 2, \"DT\", \"DD\")) {\n            result.append('T');\n            index += 2;\n        } else {\n            result.append('T');\n            index++;\n        }\n        return index;\n    }\n\n    \n    private int handleG(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n        if (charAt(value, index + 1) == 'H') {\n            index = handleGH(value, result, index);\n        } else if (charAt(value, index + 1) == 'N') {\n            if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n                result.append(\"KN\", \"N\");\n            } else if (!contains(value, index + 2, 2, \"EY\") && \n                       charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n                result.append(\"N\", \"KN\");\n            } else {\n                result.append(\"KN\");\n            }\n            index = index + 2;\n        } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n            result.append(\"KL\", \"L\");\n            index += 2;\n        } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n            \n            result.append('K', 'J');\n            index += 2;\n        } else if ((contains(value, index + 1, 2, \"ER\") || \n                    charAt(value, index + 1) == 'Y') &&\n                   !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n                   !contains(value, index - 1, 1, \"E\", \"I\") && \n                   !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n            \n            result.append('K', 'J');\n            index += 2;\n        } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n                   contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n            \n            if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n                \n                result.append('K');\n            } else if (contains(value, index + 1, 3, \"IER\")) {\n                result.append('J');\n            } else {\n                result.append('J', 'K');\n            }\n            index += 2;\n        } else if (charAt(value, index + 1) == 'G') {\n            index += 2;\n            result.append('K');\n        } else {\n            index++;\n            result.append('K');\n        }\n        return index;\n    }\n    \n    \n    private int handleGH(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (index > 0 && !isVowel(charAt(value, index - 1))) {\n            result.append('K');\n            index += 2;\n        } else if (index == 0) {\n            if (charAt(value, index + 2) == 'I') {\n                result.append('J');\n            } else {\n                result.append('K');\n            }\n            index += 2;\n        } else if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 3 && contains(value, index - 4, 1, \"B\", \"H\"))) {\n            \n            index += 2;\n        } else {\n            if (index > 2 && charAt(value, index - 1) == 'U' && \n                contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\")) {\n                \n                result.append('F');\n            } else if (index > 0 && charAt(value, index - 1) != 'I') {\n                result.append('K');\n            }\n            index += 2;\n        }\n        return index;\n    }\n\n    \n    private int handleH(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        \n        if ((index == 0 || isVowel(charAt(value, index - 1))) && \n            isVowel(charAt(value, index + 1))) {\n            result.append('H');\n            index += 2;\n            \n        } else {\n            index++;\n        }\n        return index;\n    }\n    \n    \n    private int handleJ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic) {\n        if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) {\n                \n                if ((index == 0 && (charAt(value, index + 4) == ' ') || \n                     value.length() == 4) || contains(value, 0, 4, \"SAN \")) {\n                    result.append('H');\n                } else {\n                    result.append('J', 'H');\n                }\n                index++;\n            } else {\n                if (index == 0 && !contains(value, index, 4, \"JOSE\")) {\n                    result.append('J', 'A');\n                } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic && \n                              (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) {\n                    result.append('J', 'H');\n                } else if (index == value.length() - 1) {\n                    result.append('J', ' ');\n                } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n                    result.append('J');\n                }\n\n                if (charAt(value, index + 1) == 'J') {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n        return index;\n    }\n    \n    \n    private int handleL(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (charAt(value, index + 1) == 'L') {\n            if (conditionL0(value, index)) {\n                result.appendPrimary('L');\n            } else {\n                result.append('L');\n            }\n            index += 2;\n        } else {\n            index++;\n            result.append('L');\n        }\n        return index;\n    }\n\n    \n    private int handleP(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (charAt(value, index + 1) == 'H') {\n            result.append('F');\n            index += 2;\n        } else {\n            result.append('P');\n            index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1;\n        }\n        return index;\n    }\n\n    \n    private int handleR(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n        if (index == value.length() - 1 && !slavoGermanic && \n            contains(value, index - 2, 2, \"IE\") && \n            !contains(value, index - 4, 2, \"ME\", \"MA\")) {\n            result.appendAlternate('R');\n        } else {\n            result.append('R');\n        }\n        return charAt(value, index + 1) == 'R' ? index + 2 : index + 1;\n    }\n\n    \n    private int handleS(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n        if (contains(value, index - 1, 3, \"ISL\", \"YSL\")) {\n            \n            index++;\n        } else if (index == 0 && contains(value, index, 5, \"SUGAR\")) {\n            \n            result.append('X', 'S');\n            index++;\n        } else if (contains(value, index, 2, \"SH\")) {\n            if (contains(value, index + 1, 4, \n                         \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                \n                result.append('S');\n            } else {\n                result.append('X');\n            }\n            index += 2;\n        } else if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\")) {\n            \n            if (slavoGermanic) {\n                result.append('S');\n            } else {\n                result.append('S', 'X');\n            }\n            index += 3;\n        } else if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\")) {\n            \n            \n            \n            \n            result.append('S', 'X');\n            index = contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1;\n        } else if (contains(value, index, 2, \"SC\")) {\n            index = handleSC(value, result, index);\n        } else {\n            if (index == value.length() - 1 && contains(value, index - 2, \n                                                        2, \"AI\", \"OI\")){\n                \n                result.appendAlternate('S');\n            } else {\n                result.append('S');\n            }\n            index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1;\n        }\n        return index;\n    }\n\n    \n    private int handleSC(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (charAt(value, index + 2) == 'H') {\n            \n            if (contains(value, index + 3, \n                         2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                \n                if (contains(value, index + 3, 2, \"ER\", \"EN\")) {\n                    \n                    result.append(\"X\", \"SK\");\n                } else {\n                    result.append(\"SK\");\n                }\n            } else {\n                if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W') {\n                    result.append('X', 'S');\n                } else {\n                    result.append('X');\n                }\n            }\n        } else if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n            result.append('S');\n        } else {\n            result.append(\"SK\");\n        }\n        return index + 3;\n    }\n\n    \n    private int handleT(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (contains(value, index, 4, \"TION\")) {\n            result.append('X');\n            index += 3;\n        } else if (contains(value, index, 3, \"TIA\", \"TCH\")) {\n            result.append('X');\n            index += 3;\n        } else if (contains(value, index, 2, \"TH\") || contains(value, index, \n                                                               3, \"TTH\")) {\n            if (contains(value, index + 2, 2, \"OM\", \"AM\") || \n                \n                contains(value, 0, 4, \"VAN \", \"VON \") || \n                contains(value, 0, 3, \"SCH\")) {\n                result.append('T');\n            } else {\n                result.append('0', 'T');\n            }\n            index += 2;\n        } else {\n            result.append('T');\n            index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;\n        }\n        return index;\n    }\n\n    \n    private int handleW(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (contains(value, index, 2, \"WR\")) {\n            \n            result.append('R');\n            index += 2;\n        } else {\n            if (index == 0 && (isVowel(charAt(value, index + 1)) || \n                               contains(value, index, 2, \"WH\"))) {\n                if (isVowel(charAt(value, index + 1))) {\n                    \n                    result.append('A', 'F');\n                } else {\n                    \n                    result.append('A');\n                }\n                index++;\n            } else if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n                       contains(value, index - 1, \n                                5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                       contains(value, 0, 3, \"SCH\")) {\n                \n                result.appendAlternate('F');\n                index++;\n            } else if (contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n                \n                result.append(\"TS\", \"FX\");\n                index += 4;\n            } else {\n                index++;\n            }\n        }\n        return index;\n    }\n    \n    \n    private int handleX(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (index == 0) {\n            result.append('S');\n            index++;\n        } else {\n            if (!((index == value.length() - 1) && \n                  (contains(value, index - 3, 3, \"IAU\", \"EAU\") || \n                   contains(value, index - 2, 2, \"AU\", \"OU\")))) {\n                \n                result.append(\"KS\");\n            }\n            index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1;\n        }\n        return index;\n    }\n\n    \n    private int handleZ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic) {\n        if (charAt(value, index + 1) == 'H') {\n            \n            result.append('J');\n            index += 2;\n        } else {\n            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T'))) {\n                result.append(\"S\", \"TS\");\n            } else {\n                result.append('S');\n            }\n            index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1;\n        }\n        return index;\n    }\n\n    \n\n    \n    private boolean conditionC0(String value, int index) {\n        if (contains(value, index, 4, \"CHIA\")) {\n            return true;\n        } else if (index <= 1) {\n            return false;\n        } else if (isVowel(charAt(value, index - 2))) {\n            return false;\n        } else if (!contains(value, index - 1, 3, \"ACH\")) {\n            return false;\n        } else {\n            char c = charAt(value, index + 2);\n            return (c != 'I' && c != 'E') ||\n                    contains(value, index - 2, 6, \"BACHER\", \"MACHER\");\n        }\n    }\n    \n    \n    private boolean conditionCH0(String value, int index) {\n        if (index != 0) {\n            return false;\n        } else if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") && \n                   !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")) {\n            return false;\n        } else if (contains(value, 0, 5, \"CHORE\")) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    \n    \n    private boolean conditionCH1(String value, int index) {\n        return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, \n                                                                   3, \"SCH\")) ||\n                contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                contains(value, index + 2, 1, \"T\", \"S\") ||\n                ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) &&\n                 (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));\n    }\n    \n    \n    private boolean conditionL0(String value, int index) {\n        if (index == value.length() - 3 && \n            contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) {\n            return true;\n        } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || \n                    contains(value, value.length() - 1, 1, \"A\", \"O\")) &&\n                   contains(value, index - 1, 4, \"ALLE\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    \n    private boolean conditionM0(String value, int index) {\n        if (charAt(value, index + 1) == 'M') {\n            return true;\n        }\n        return contains(value, index - 1, 3, \"UMB\") &&\n                ((index + 1) == value.length() - 1 || contains(value,\n                        index + 2, 2, \"ER\"));\n    }\n    \n    \n\n    \n    private boolean isSlavoGermanic(String value) {\n        return value.indexOf('W') > -1 || value.indexOf('K') > -1 || \n            value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1;\n    }\n\n    \n    private boolean isVowel(char ch) {\n        return VOWELS.indexOf(ch) != -1;\n    }\n\n        \n    private boolean isSilentStart(String value) {\n        boolean result = false;\n        for (int i = 0; i < SILENT_START.length; i++) {\n            if (value.startsWith(SILENT_START[i])) {\n                result = true;\n                break;\n            }\n        }\n        return result;\n    }\n\n        \n    private String cleanInput(String input) {\n        if (input == null) {\n            return null;\n        }\n        input = input.trim();\n        if (input.length() == 0) {\n            return null;\n        }\n        return input.toUpperCase(java.util.Locale.ENGLISH);\n    }\n\n        \n    protected char charAt(String value, int index) {\n        if (index < 0 || index >= value.length()) {\n            return Character.MIN_VALUE;\n        } \n        return value.charAt(index);\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria) {\n        return contains(value, start, length, \n                        new String[] { criteria });\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2) {\n        return contains(value, start, length, \n                        new String[] { criteria1, criteria2 });\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3) {\n        return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3 });\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4) {\n        return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4 });\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4, \n                                    String criteria5) {\n        return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4, criteria5 });\n    }\n\n        \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4, \n                                    String criteria5, String criteria6) {\n        return contains(value, start, length, \n                        new String[] { criteria1, criteria2, criteria3, \n                                       criteria4, criteria5, criteria6 });\n    }\n    \n    \n    protected static boolean contains(String value, int start, int length, \n                                      String[] criteria) {\n        boolean result = false;\n        if (start >= 0 && start + length <= value.length()) {\n            String target = value.substring(start, start + length);\n\n            for (int i = 0; i < criteria.length; i++) {\n                if (target.equals(criteria[i])) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    \n    \n    \n    \n    public class DoubleMetaphoneResult {\n\n        private StringBuffer primary = new StringBuffer(getMaxCodeLen());\n        private StringBuffer alternate = new StringBuffer(getMaxCodeLen());\n        private int maxLength;\n\n        public DoubleMetaphoneResult(int maxLength) {\n            this.maxLength = maxLength;\n        }\n\n        public void append(char value) {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n\n        public void append(char primary, char alternate) {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n\n        public void appendPrimary(char value) {\n            if (this.primary.length() < this.maxLength) {\n                this.primary.append(value);\n            }\n        }\n\n        public void appendAlternate(char value) {\n            if (this.alternate.length() < this.maxLength) {\n                this.alternate.append(value);\n            }\n        }\n\n        public void append(String value) {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n\n        public void append(String primary, String alternate) {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }\n\n        public void appendPrimary(String value) {\n            int addChars = this.maxLength - this.primary.length();\n            if (value.length() <= addChars) {\n                this.primary.append(value);\n            } else {\n                this.primary.append(value.substring(0, addChars));\n            }\n        }\n\n        public void appendAlternate(String value) {\n            int addChars = this.maxLength - this.alternate.length();\n            if (value.length() <= addChars) {\n                this.alternate.append(value);\n            } else {\n                this.alternate.append(value.substring(0, addChars));\n            }\n        }\n\n        public String getPrimary() {\n            return this.primary.toString();\n        }\n\n        public String getAlternate() {\n            return this.alternate.toString();\n        }\n\n        public boolean isComplete() {\n            return this.primary.length() >= this.maxLength && \n                this.alternate.length() >= this.maxLength;\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public DoubleMetaphone()",
        "public String doubleMetaphone(String value)",
        "public String doubleMetaphone(String value, boolean alternate)",
        "public Object encode(Object obj) throws EncoderException",
        "public String encode(String value)",
        "public boolean isDoubleMetaphoneEqual(String value1, String value2)",
        "public boolean isDoubleMetaphoneEqual(String value1, String value2, boolean alternate)",
        "public int getMaxCodeLen()",
        "public void setMaxCodeLen(int maxCodeLen)",
        "private int handleAEIOUY(String value, DoubleMetaphoneResult result, int index)",
        "private int handleC(String value, DoubleMetaphoneResult result, int index)",
        "private int handleCC(String value, DoubleMetaphoneResult result, int index)",
        "private int handleCH(String value, DoubleMetaphoneResult result, int index)",
        "private int handleD(String value, DoubleMetaphoneResult result, int index)",
        "private int handleG(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic)",
        "private int handleGH(String value, DoubleMetaphoneResult result, int index)",
        "private int handleH(String value, DoubleMetaphoneResult result, int index)",
        "private int handleJ(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic)",
        "private int handleL(String value, DoubleMetaphoneResult result, int index)",
        "private int handleP(String value, DoubleMetaphoneResult result, int index)",
        "private int handleR(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic)",
        "private int handleS(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic)",
        "private int handleSC(String value, DoubleMetaphoneResult result, int index)",
        "private int handleT(String value, DoubleMetaphoneResult result, int index)",
        "private int handleW(String value, DoubleMetaphoneResult result, int index)",
        "private int handleX(String value, DoubleMetaphoneResult result, int index)",
        "private int handleZ(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic)",
        "private boolean conditionC0(String value, int index)",
        "private boolean conditionCH0(String value, int index)",
        "private boolean conditionCH1(String value, int index)",
        "private boolean conditionL0(String value, int index)",
        "private boolean conditionM0(String value, int index)",
        "private boolean isSlavoGermanic(String value)",
        "private boolean isVowel(char ch)",
        "private boolean isSilentStart(String value)",
        "private String cleanInput(String input)",
        "protected char charAt(String value, int index)",
        "private static boolean contains(String value, int start, int length, String criteria)",
        "private static boolean contains(String value, int start, int length, String criteria1, String criteria2)",
        "private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3)",
        "private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3, String criteria4)",
        "private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3, String criteria4, String criteria5)",
        "private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3, String criteria4, String criteria5, String criteria6)",
        "protected static boolean contains(String value, int start, int length, String[] criteria)",
        "private StringBuffer primary = new StringBuffer(getMaxCodeLen())",
        "private StringBuffer alternate = new StringBuffer(getMaxCodeLen())",
        "public DoubleMetaphoneResult(int maxLength)",
        "public void append(char value)",
        "public void append(char primary, char alternate)",
        "public void appendPrimary(char value)",
        "public void appendAlternate(char value)",
        "public void append(String value)",
        "public void append(String primary, String alternate)",
        "public void appendPrimary(String value)",
        "public void appendAlternate(String value)",
        "public String getPrimary()",
        "public String getAlternate()",
        "public boolean isComplete()"
      ],
      "fixed_signatures": [
        "public DoubleMetaphone()",
        "public String doubleMetaphone(String value)",
        "public String doubleMetaphone(String value, boolean alternate)",
        "public Object encode(Object obj) throws EncoderException",
        "public String encode(String value)",
        "public boolean isDoubleMetaphoneEqual(String value1, String value2)",
        "public boolean isDoubleMetaphoneEqual(String value1, String value2, boolean alternate)",
        "public int getMaxCodeLen()",
        "public void setMaxCodeLen(int maxCodeLen)",
        "private int handleAEIOUY(String value, DoubleMetaphoneResult result, int index)",
        "private int handleC(String value, DoubleMetaphoneResult result, int index)",
        "private int handleCC(String value, DoubleMetaphoneResult result, int index)",
        "private int handleCH(String value, DoubleMetaphoneResult result, int index)",
        "private int handleD(String value, DoubleMetaphoneResult result, int index)",
        "private int handleG(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic)",
        "private int handleGH(String value, DoubleMetaphoneResult result, int index)",
        "private int handleH(String value, DoubleMetaphoneResult result, int index)",
        "private int handleJ(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic)",
        "private int handleL(String value, DoubleMetaphoneResult result, int index)",
        "private int handleP(String value, DoubleMetaphoneResult result, int index)",
        "private int handleR(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic)",
        "private int handleS(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic)",
        "private int handleSC(String value, DoubleMetaphoneResult result, int index)",
        "private int handleT(String value, DoubleMetaphoneResult result, int index)",
        "private int handleW(String value, DoubleMetaphoneResult result, int index)",
        "private int handleX(String value, DoubleMetaphoneResult result, int index)",
        "private int handleZ(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic)",
        "private boolean conditionC0(String value, int index)",
        "private boolean conditionCH0(String value, int index)",
        "private boolean conditionCH1(String value, int index)",
        "private boolean conditionL0(String value, int index)",
        "private boolean conditionM0(String value, int index)",
        "private boolean isSlavoGermanic(String value)",
        "private boolean isVowel(char ch)",
        "private boolean isSilentStart(String value)",
        "private String cleanInput(String input)",
        "protected char charAt(String value, int index)",
        "private static boolean contains(String value, int start, int length, String criteria)",
        "private static boolean contains(String value, int start, int length, String criteria1, String criteria2)",
        "private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3)",
        "private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3, String criteria4)",
        "private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3, String criteria4, String criteria5)",
        "private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3, String criteria4, String criteria5, String criteria6)",
        "protected static boolean contains(String value, int start, int length, String[] criteria)",
        "private StringBuffer primary = new StringBuffer(getMaxCodeLen())",
        "private StringBuffer alternate = new StringBuffer(getMaxCodeLen())",
        "public DoubleMetaphoneResult(int maxLength)",
        "public void append(char value)",
        "public void append(char primary, char alternate)",
        "public void appendPrimary(char value)",
        "public void appendAlternate(char value)",
        "public void append(String value)",
        "public void append(String primary, String alternate)",
        "public void appendPrimary(String value)",
        "public void appendAlternate(String value)",
        "public String getPrimary()",
        "public String getAlternate()",
        "public boolean isComplete()"
      ],
      "methods": [
        {
          "buggy_method": "  private int handleG(String value, \n  DoubleMetaphoneResult result, \n  int index, \n  boolean slavoGermanic) {\n  if (charAt(value, index + 1) == 'H') {\n  index = handleGH(value, result, index);\n  } else if (charAt(value, index + 1) == 'N') {\n  if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n  result.append(\"KN\", \"N\");\n  } else if (!contains(value, index + 2, 2, \"EY\") && \n  charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n  result.append(\"N\", \"KN\");\n  } else {\n  result.append(\"KN\");\n  }\n  index = index + 2;\n  } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n  result.append(\"KL\", \"L\");\n  index += 2;\n  } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n  \n  result.append('K', 'J');\n  index += 2;\n  } else if ((contains(value, index + 1, 2, \"ER\") || \n  charAt(value, index + 1) == 'Y') &&\n  !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n  !contains(value, index - 1, 1, \"E\", \"I\") && \n  !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n  \n  result.append('K', 'J');\n  index += 2;\n  } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n  contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n  \n  if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n  \n  result.append('K');\n  } else if (contains(value, index + 1, 4, \"IER\")) {\n  result.append('J');\n  } else {\n  result.append('J', 'K');\n  }\n  index += 2;\n  } else if (charAt(value, index + 1) == 'G') {\n  index += 2;\n  result.append('K');\n  } else {\n  index++;\n  result.append('K');\n  }\n  return index;\n  }",
          "fixed_method": "  private int handleG(String value, \n  DoubleMetaphoneResult result, \n  int index, \n  boolean slavoGermanic) {\n  if (charAt(value, index + 1) == 'H') {\n  index = handleGH(value, result, index);\n  } else if (charAt(value, index + 1) == 'N') {\n  if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n  result.append(\"KN\", \"N\");\n  } else if (!contains(value, index + 2, 2, \"EY\") && \n  charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n  result.append(\"N\", \"KN\");\n  } else {\n  result.append(\"KN\");\n  }\n  index = index + 2;\n  } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n  result.append(\"KL\", \"L\");\n  index += 2;\n  } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n  \n  result.append('K', 'J');\n  index += 2;\n  } else if ((contains(value, index + 1, 2, \"ER\") || \n  charAt(value, index + 1) == 'Y') &&\n  !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n  !contains(value, index - 1, 1, \"E\", \"I\") && \n  !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n  \n  result.append('K', 'J');\n  index += 2;\n  } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n  contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n  \n  if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n  \n  result.append('K');\n  } else if (contains(value, index + 1, 3, \"IER\")) {\n  result.append('J');\n  } else {\n  result.append('J', 'K');\n  }\n  index += 2;\n  } else if (charAt(value, index + 1) == 'G') {\n  index += 2;\n  result.append('K');\n  } else {\n  index++;\n  result.append('K');\n  }\n  return index;\n  }",
          "diff": [
            "@@ -452,7 +452,7 @@",
            "             if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n",
            "                 //-- obvious germanic --//\n",
            "                 result.append('K');\n",
            "-            } else if (contains(value, index + 1, 4, \"IER\")) {\n",
            "+            } else if (contains(value, index + 1, 3, \"IER\")) {\n",
            "                 result.append('J');\n",
            "             } else {\n",
            "                 result.append('J', 'K');\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}