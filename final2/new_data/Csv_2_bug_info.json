{
  "bug_id": "2",
  "failed_tests": {
    "org.apache.commons.csv.CSVRecordTest": [
      {
        "methodName": "testGetStringInconsistentRecord",
        "error": "java.lang.Exception",
        "message": "Unexpected exception, expected<java.lang.IllegalArgumentException> but was<java.lang.ArrayIndexOutOfBoundsException>",
        "fail_line": "        recordWithHeader.get(\"fourth\");",
        "test_source": "  public void testGetStringInconsistentRecord() {\n  header.put(\"fourth\", Integer.valueOf(4));\n  recordWithHeader.get(\"fourth\");\n  }",
        "stack": [
          "CSVRecord.get line 85, CSVRecordTest.testGetStringInconsistentRecord line 69"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/csv/CSVRecord.java",
      "buggy_full_code": "\n\npackage org.apache.commons.csv;\n\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.Map;\n\n\npublic class CSVRecord implements Serializable, Iterable<String> { private static final long serialVersionUID = 1L; private static final String[] EMPTY_STRING_ARRAY = new String[0]; private final String[] values; private final Map<String, Integer> mapping; private final String comment; private final long recordNumber; CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber) {\n        this.recordNumber = recordNumber;\n        this.values = values != null ? values : EMPTY_STRING_ARRAY;\n        this.mapping = mapping;\n        this.comment = comment;\n    }\n\n    \n    public String get(final int i) {\n        return values[i];\n    }\n\n    \n    public String get(final String name) {\n        if (mapping == null) {\n            throw new IllegalStateException(\n                    \"No header mapping was specified, the record values can't be accessed by name\");\n        }\n        final Integer index = mapping.get(name);\n            return index != null ? values[index.intValue()] : null;\n    }\n\n    \n    public boolean isConsistent() {\n        return mapping == null ? true : mapping.size() == values.length;\n    }\n\n    \n    public boolean isMapped(final String name) {\n        return mapping != null ? mapping.containsKey(name) : false;\n    }\n\n    \n    public boolean isSet(final String name) {\n        return isMapped(name) && mapping.get(name).intValue() < values.length;\n    }\n\n    \n    public Iterator<String> iterator() {\n        return Arrays.asList(values).iterator();\n    }\n\n    String[] values() {\n        return values;\n    }\n\n    \n    public String getComment() {\n        return comment;\n    }\n\n    \n    public long getRecordNumber() {\n        return recordNumber;\n    }\n\n    \n    public int size() {\n        return values.length;\n    }\n\n    @Override\n    public String toString() {\n        return Arrays.toString(values);\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.csv;\n\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.Map;\n\n\npublic class CSVRecord implements Serializable, Iterable<String> { private static final long serialVersionUID = 1L; private static final String[] EMPTY_STRING_ARRAY = new String[0]; private final String[] values; private final Map<String, Integer> mapping; private final String comment; private final long recordNumber; CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber) {\n        this.recordNumber = recordNumber;\n        this.values = values != null ? values : EMPTY_STRING_ARRAY;\n        this.mapping = mapping;\n        this.comment = comment;\n    }\n\n    \n    public String get(final int i) {\n        return values[i];\n    }\n\n    \n    public String get(final String name) {\n        if (mapping == null) {\n            throw new IllegalStateException(\n                    \"No header mapping was specified, the record values can't be accessed by name\");\n        }\n        final Integer index = mapping.get(name);\n        try {\n            return index != null ? values[index.intValue()] : null;\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\n                    String.format(\n                            \"Index for header '%s' is %d but CSVRecord only has %d values!\",\n                            name, index.intValue(), values.length));\n        }\n    }\n\n    \n    public boolean isConsistent() {\n        return mapping == null ? true : mapping.size() == values.length;\n    }\n\n    \n    public boolean isMapped(final String name) {\n        return mapping != null ? mapping.containsKey(name) : false;\n    }\n\n    \n    public boolean isSet(final String name) {\n        return isMapped(name) && mapping.get(name).intValue() < values.length;\n    }\n\n    \n    public Iterator<String> iterator() {\n        return Arrays.asList(values).iterator();\n    }\n\n    String[] values() {\n        return values;\n    }\n\n    \n    public String getComment() {\n        return comment;\n    }\n\n    \n    public long getRecordNumber() {\n        return recordNumber;\n    }\n\n    \n    public int size() {\n        return values.length;\n    }\n\n    @Override\n    public String toString() {\n        return Arrays.toString(values);\n    }\n\n}\n",
      "buggy_signatures": [
        "public String get(final int i)",
        "public String get(final String name)",
        "public boolean isConsistent()",
        "public boolean isMapped(final String name)",
        "public boolean isSet(final String name)",
        "public Iterator<String> iterator()",
        "public String getComment()",
        "public long getRecordNumber()",
        "public int size()",
        "public String toString()"
      ],
      "fixed_signatures": [
        "public String get(final int i)",
        "public String get(final String name)",
        "public boolean isConsistent()",
        "public boolean isMapped(final String name)",
        "public boolean isSet(final String name)",
        "public Iterator<String> iterator()",
        "public String getComment()",
        "public long getRecordNumber()",
        "public int size()",
        "public String toString()"
      ],
      "methods": [
        {
          "buggy_method": "  public String get(final String name) {\n  if (mapping == null) {\n  throw new IllegalStateException(\n  \"No header mapping was specified, the record values can't be accessed by name\");\n  }\n  final Integer index = mapping.get(name);\n  return index != null ? values[index.intValue()] : null;\n  }",
          "fixed_method": "  public String get(final String name) {\n  if (mapping == null) {\n  throw new IllegalStateException(\n  \"No header mapping was specified, the record values can't be accessed by name\");\n  }\n  final Integer index = mapping.get(name);\n  try {\n  return index != null ? values[index.intValue()] : null;\n  } catch (ArrayIndexOutOfBoundsException e) {\n  throw new IllegalArgumentException(\n  String.format(\n  \"Index for header '%s' is %d but CSVRecord only has %d values!\",\n  name, index.intValue(), values.length));\n  }\n  }",
          "diff": [
            "@@ -82,7 +82,14 @@",
            "                     \"No header mapping was specified, the record values can't be accessed by name\");\n",
            "         }\n",
            "         final Integer index = mapping.get(name);\n",
            "+        try {\n",
            "             return index != null ? values[index.intValue()] : null;\n",
            "+        } catch (ArrayIndexOutOfBoundsException e) {\n",
            "+            throw new IllegalArgumentException(\n",
            "+                    String.format(\n",
            "+                            \"Index for header '%s' is %d but CSVRecord only has %d values!\",\n",
            "+                            name, index.intValue(), values.length));\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     /**\n"
          ],
          "changed_lines": 7
        }
      ]
    }
  ]
}
