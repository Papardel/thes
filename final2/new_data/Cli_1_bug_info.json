{
  "bug_id": "1",
  "failed_tests": {
    "org.apache.commons.cli.bug.BugCLI13Test": [
      {
        "methodName": "testCLI13",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(commandLine.hasOption( debugOpt));",
        "test_source": "  public void testCLI13()\n  throws ParseException\n  {\n  final String debugOpt = \"debug\";\n  Option debug = OptionBuilder\n  .withArgName( debugOpt )\n  .withDescription( \"turn on debugging\" )\n  .withLongOpt( debugOpt )\n  .hasArg()\n  .create( 'd' );\n  Options options = new Options();\n  options.addOption( debug );\n  CommandLine commandLine = new PosixParser().parse( options, new String[]{\"-d\", \"true\"} );\n\n  assertEquals(\"true\", commandLine.getOptionValue( debugOpt ));\n  assertEquals(\"true\", commandLine.getOptionValue( 'd' ));\n  assertTrue(commandLine.hasOption( 'd'));\n  assertTrue(commandLine.hasOption( debugOpt));\n  }",
        "stack": [
          "BugCLI13Test.testCLI13 line 50"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/cli/CommandLine.java",
      "buggy_full_code": "\npackage org.apache.commons.cli;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\n\npublic class CommandLine {\n\n    \n    private List args = new LinkedList();\n\n    \n    private Map options = new HashMap();\n    private Map names = new HashMap();\n\n    \n\n    private Map hashcodeMap = new HashMap();\n\n    \n    CommandLine()\n    {\n        \n    }\n\n    \n    public boolean hasOption(String opt)\n    {\n        return options.containsKey(opt);\n    }\n\n    \n    public boolean hasOption(char opt)\n    {\n        return hasOption(String.valueOf(opt));\n    }\n\n    \n    public Object getOptionObject(String opt)\n    {\n        String res = getOptionValue(opt);\n\n        if (!options.containsKey(opt))\n        {\n            return null;\n        }\n\n        Object type = ((Option) options.get(opt)).getType();\n\n        return (res == null)        ? null : TypeHandler.createValue(res, type);\n    }\n\n    \n    public Object getOptionObject(char opt)\n    {\n        return getOptionObject(String.valueOf(opt));\n    }\n\n    \n    public String getOptionValue(String opt)\n    {\n        String[] values = getOptionValues(opt);\n\n        return (values == null) ? null : values[0];\n    }\n\n    \n    public String getOptionValue(char opt)\n    {\n        return getOptionValue(String.valueOf(opt));\n    }\n\n    \n    public String[] getOptionValues(String opt)\n    {\n        opt = Util.stripLeadingHyphens(opt);\n\n        String key = opt;\n        if (names.containsKey(opt))\n        {\n            key = (String) names.get(opt);\n        }\n        if (options.containsKey(key))\n        {\n            return ((Option) options.get(key)).getValues();\n        }\n\n        return null;\n        }\n\n    \n\n\n    \n    public String[] getOptionValues(char opt)\n    {\n        return getOptionValues(String.valueOf(opt));\n    }\n\n    \n    public String getOptionValue(String opt, String defaultValue)\n    {\n        String answer = getOptionValue(opt);\n\n        return (answer != null) ? answer : defaultValue;\n    }\n\n    \n    public String getOptionValue(char opt, String defaultValue)\n    {\n        return getOptionValue(String.valueOf(opt), defaultValue);\n    }\n\n    \n    public String[] getArgs()\n    {\n        String[] answer = new String[args.size()];\n\n        args.toArray(answer);\n\n        return answer;\n    }\n\n    \n    public List getArgList()\n    {\n        return args;\n    }\n\n    \n\n    \n\n    \n    void addArg(String arg)\n    {\n        args.add(arg);\n    }\n\n    \n    void addOption(Option opt)\n    {\n        hashcodeMap.put(new Integer(opt.hashCode()), opt);\n        String key = opt.getKey();\n        if (key == null)\n        {\n            key = opt.getLongOpt();\n        }\n        else\n        {\n            names.put(opt.getLongOpt(), key);\n        }\n        options.put(key, opt);\n    }\n\n    \n    public Iterator iterator()\n    {\n        return hashcodeMap.values().iterator();\n    }\n\n    \n    public Option[] getOptions()\n    {\n        Collection processed = options.values();\n\n        \n        Option[] optionsArray = new Option[processed.size()];\n\n        \n        return (Option[]) processed.toArray(optionsArray);\n    }\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.cli;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.HashSet;\n\n\npublic class CommandLine {\n\n    \n    private List args = new LinkedList();\n\n    \n    private Set options = new HashSet();\n\n    \n\n\n    \n    CommandLine()\n    {\n        \n    }\n\n    \n    public boolean hasOption(String opt)\n    {\n        return options.contains( resolveOption(opt));\n    }\n\n    \n    public boolean hasOption(char opt)\n    {\n        return hasOption(String.valueOf(opt));\n    }\n\n    \n    public Object getOptionObject(String opt)\n    {\n        String res = getOptionValue(opt);\n\n        Option option = resolveOption(opt);\n        if (option == null)\n        {\n            return null;\n        }\n\n        Object type = option.getType();\n\n        return (res == null)        ? null : TypeHandler.createValue(res, type);\n    }\n\n    \n    public Object getOptionObject(char opt)\n    {\n        return getOptionObject(String.valueOf(opt));\n    }\n\n    \n    public String getOptionValue(String opt)\n    {\n        String[] values = getOptionValues(opt);\n\n        return (values == null) ? null : values[0];\n    }\n\n    \n    public String getOptionValue(char opt)\n    {\n        return getOptionValue(String.valueOf(opt));\n    }\n\n    \n    public String[] getOptionValues(String opt)\n    {\n        Option key = resolveOption( opt );\n\n        if (options.contains(key))\n        {\n            return key.getValues();\n        }\n\n        return null;\n        }\n\n    \n    private Option resolveOption( String opt )\n    {\n        opt = Util.stripLeadingHyphens(opt);\n        for ( Iterator it = options.iterator(); it.hasNext(); )\n        {\n            Option option = (Option) it.next();\n            if (opt.equals(option.getOpt()))\n            {\n                return option;\n            }\n            if (opt.equals( option.getLongOpt()))\n            {\n                return option;\n        }\n\n        }\n        return null;\n    }\n\n    \n    public String[] getOptionValues(char opt)\n    {\n        return getOptionValues(String.valueOf(opt));\n    }\n\n    \n    public String getOptionValue(String opt, String defaultValue)\n    {\n        String answer = getOptionValue(opt);\n\n        return (answer != null) ? answer : defaultValue;\n    }\n\n    \n    public String getOptionValue(char opt, String defaultValue)\n    {\n        return getOptionValue(String.valueOf(opt), defaultValue);\n    }\n\n    \n    public String[] getArgs()\n    {\n        String[] answer = new String[args.size()];\n\n        args.toArray(answer);\n\n        return answer;\n    }\n\n    \n    public List getArgList()\n    {\n        return args;\n    }\n\n    \n\n    \n\n    \n    void addArg(String arg)\n    {\n        args.add(arg);\n    }\n\n    \n    void addOption(Option opt)\n    {\n        options.add(opt);\n    }\n\n    \n    public Iterator iterator()\n    {\n        return options.iterator();\n    }\n\n    \n    public Option[] getOptions()\n    {\n        Collection processed = options;\n\n        \n        Option[] optionsArray = new Option[processed.size()];\n\n        \n        return (Option[]) processed.toArray(optionsArray);\n    }\n}",
      "buggy_signatures": [
        "private List args = new LinkedList()",
        "private Map options = new HashMap()",
        "private Map names = new HashMap()",
        "private Map hashcodeMap = new HashMap()",
        "public boolean hasOption(String opt)",
        "public boolean hasOption(char opt)",
        "public Object getOptionObject(String opt)",
        "public Object getOptionObject(char opt)",
        "public String getOptionValue(String opt)",
        "public String getOptionValue(char opt)",
        "public String[] getOptionValues(String opt)",
        "public String[] getOptionValues(char opt)",
        "public String getOptionValue(String opt, String defaultValue)",
        "public String getOptionValue(char opt, String defaultValue)",
        "public String[] getArgs()",
        "public List getArgList()",
        "public Iterator iterator()",
        "public Option[] getOptions()"
      ],
      "fixed_signatures": [
        "private List args = new LinkedList()",
        "private Set options = new HashSet()",
        "public boolean hasOption(String opt)",
        "public boolean hasOption(char opt)",
        "public Object getOptionObject(String opt)",
        "public Object getOptionObject(char opt)",
        "public String getOptionValue(String opt)",
        "public String getOptionValue(char opt)",
        "public String[] getOptionValues(String opt)",
        "private Option resolveOption( String opt )",
        "public String[] getOptionValues(char opt)",
        "public String getOptionValue(String opt, String defaultValue)",
        "public String getOptionValue(char opt, String defaultValue)",
        "public String[] getArgs()",
        "public List getArgList()",
        "public Iterator iterator()",
        "public Option[] getOptions()"
      ],
      "methods": [
        {
          "buggy_method": "  private Map hashcodeMap = new HashMap();\n\n  \n  CommandLine()\n  {\n  \n  }",
          "fixed_method": "\n\n  \n  CommandLine()\n  {\n  \n  }",
          "diff": [
            "@@ -43,12 +43,10 @@",
            "     private List args = new LinkedList();\n",
            " \n",
            "     /** the processed options */\n",
            "-    private Map options = new HashMap();\n",
            "-    private Map names = new HashMap();\n",
            "+    private Set options = new HashSet();\n",
            " \n",
            "     /** Map of unique options for ease to get complete list of options */\n",
            " //    private Set allOptions = new HashSet();\n",
            "-    private Map hashcodeMap = new HashMap();\n",
            " \n",
            "     /**\n",
            "      * Creates a command line.\n"
          ],
          "changed_lines": 4
        },
        {
          "buggy_method": "  public boolean hasOption(String opt)\n  {\n  return options.containsKey(opt);\n  }",
          "fixed_method": "  public boolean hasOption(String opt)\n  {\n  return options.contains( resolveOption(opt));\n  }",
          "diff": [
            "@@ -66,7 +64,7 @@",
            "      */\n",
            "     public boolean hasOption(String opt)\n",
            "     {\n",
            "-        return options.containsKey(opt);\n",
            "+        return options.contains( resolveOption(opt));\n",
            "     }\n",
            " \n",
            "     /** \n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public Object getOptionObject(String opt)\n  {\n  String res = getOptionValue(opt);\n\n  if (!options.containsKey(opt))\n  {\n  return null;\n  }\n\n  Object type = ((Option) options.get(opt)).getType();\n\n  return (res == null)  ? null : TypeHandler.createValue(res, type);\n  }",
          "fixed_method": "  public Object getOptionObject(String opt)\n  {\n  String res = getOptionValue(opt);\n\n  Option option = resolveOption(opt);\n  if (option == null)\n  {\n  return null;\n  }\n\n  Object type = option.getType();\n\n  return (res == null)  ? null : TypeHandler.createValue(res, type);\n  }",
          "diff": [
            "@@ -90,12 +88,13 @@",
            "     {\n",
            "         String res = getOptionValue(opt);\n",
            " \n",
            "-        if (!options.containsKey(opt))\n",
            "+        Option option = resolveOption(opt);\n",
            "+        if (option == null)\n",
            "         {\n",
            "             return null;\n",
            "         }\n",
            " \n",
            "-        Object type = ((Option) options.get(opt)).getType();\n",
            "+        Object type = option.getType();\n",
            " \n",
            "         return (res == null)        ? null : TypeHandler.createValue(res, type);\n",
            "     }\n"
          ],
          "changed_lines": 5
        },
        {
          "buggy_method": "  public String[] getOptionValues(String opt)\n  {\n  opt = Util.stripLeadingHyphens(opt);\n\n  String key = opt;\n  if (names.containsKey(opt))\n  {\n  key = (String) names.get(opt);\n  }\n  if (options.containsKey(key))\n  {\n  return ((Option) options.get(key)).getValues();\n  }\n\n  return null;\n  }",
          "fixed_method": "  public String[] getOptionValues(String opt)\n  {\n  Option key = resolveOption( opt );\n\n  if (options.contains(key))\n  {\n  return key.getValues();\n  }\n\n  return null;\n  }",
          "diff": [
            "@@ -146,16 +145,11 @@",
            "      */\n",
            "     public String[] getOptionValues(String opt)\n",
            "     {\n",
            "-        opt = Util.stripLeadingHyphens(opt);\n",
            "-\n",
            "-        String key = opt;\n",
            "-        if (names.containsKey(opt))\n",
            "+        Option key = resolveOption( opt );\n",
            "+\n",
            "+        if (options.contains(key))\n",
            "         {\n",
            "-            key = (String) names.get(opt);\n",
            "-        }\n",
            "-        if (options.containsKey(key))\n",
            "-        {\n",
            "-            return ((Option) options.get(key)).getValues();\n",
            "+            return key.getValues();\n",
            "         }\n",
            " \n",
            "         return null;\n",
            "@@ -166,7 +160,24 @@",
            "      * @param opt short or long name of the option\n",
            "      * @return Canonicalized option\n",
            "      */\n",
            "-\n",
            "+    private Option resolveOption( String opt )\n",
            "+    {\n",
            "+        opt = Util.stripLeadingHyphens(opt);\n",
            "+        for ( Iterator it = options.iterator(); it.hasNext(); )\n",
            "+        {\n",
            "+            Option option = (Option) it.next();\n",
            "+            if (opt.equals(option.getOpt()))\n",
            "+            {\n",
            "+                return option;\n",
            "+            }\n",
            "+            if (opt.equals( option.getLongOpt()))\n",
            "+            {\n",
            "+                return option;\n",
            "+        }\n",
            "+\n",
            "+        }\n",
            "+        return null;\n",
            "+    }\n",
            " \n",
            "     /** \n",
            "      * Retrieves the array of values, if any, of an option.\n"
          ],
          "changed_lines": 32
        },
        {
          "buggy_method": "  public String toString() {\n  StringBuffer buf = new StringBuffer();\n  \n  buf.append(\"[ CommandLine: [ options: \");\n  buf.append(options.toString());\n  buf.append(\" ] [ args: \");\n  buf.append(args.toString());\n  buf.append(\" ] ]\");\n  \n  return buf.toString();\n  }",
          "fixed_method": "  public String toString() {\n  StringBuffer buf = new StringBuffer();\n  \n  buf.append(\"[ CommandLine: [ options: \");\n  buf.append(options.toString());\n  buf.append(\" ] [ args: \");\n  buf.append(args.toString());\n  buf.append(\" ] ]\");\n  \n  return buf.toString();\n  }",
          "diff": [
            "@@ -274,17 +285,7 @@",
            "      */\n",
            "     void addOption(Option opt)\n",
            "     {\n",
            "-        hashcodeMap.put(new Integer(opt.hashCode()), opt);\n",
            "-        String key = opt.getKey();\n",
            "-        if (key == null)\n",
            "-        {\n",
            "-            key = opt.getLongOpt();\n",
            "-        }\n",
            "-        else\n",
            "-        {\n",
            "-            names.put(opt.getLongOpt(), key);\n",
            "-        }\n",
            "-        options.put(key, opt);\n",
            "+        options.add(opt);\n",
            "     }\n",
            " \n",
            "     /**\n"
          ],
          "changed_lines": 12
        },
        {
          "buggy_method": "  public Iterator iterator()\n  {\n  return hashcodeMap.values().iterator();\n  }",
          "fixed_method": "  public Iterator iterator()\n  {\n  return options.iterator();\n  }",
          "diff": [
            "@@ -295,7 +296,7 @@",
            "      */\n",
            "     public Iterator iterator()\n",
            "     {\n",
            "-        return hashcodeMap.values().iterator();\n",
            "+        return options.iterator();\n",
            "     }\n",
            " \n",
            "     /**\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public Option[] getOptions()\n  {\n  Collection processed = options.values();\n\n  \n  Option[] optionsArray = new Option[processed.size()];\n\n  \n  return (Option[]) processed.toArray(optionsArray);\n  }",
          "fixed_method": "  public Option[] getOptions()\n  {\n  Collection processed = options;\n\n  \n  Option[] optionsArray = new Option[processed.size()];\n\n  \n  return (Option[]) processed.toArray(optionsArray);\n  }",
          "diff": [
            "@@ -305,7 +306,7 @@",
            "      */\n",
            "     public Option[] getOptions()\n",
            "     {\n",
            "-        Collection processed = options.values();\n",
            "+        Collection processed = options;\n",
            " \n",
            "         // reinitialise array\n",
            "         Option[] optionsArray = new Option[processed.size()];\n",
            "@@ -313,4 +314,4 @@",
            "         // return the array\n",
            "         return (Option[]) processed.toArray(optionsArray);\n",
            "     }\n",
            "-}\n",
            "+}"
          ],
          "changed_lines": 4
        }
      ]
    }
  ]
}