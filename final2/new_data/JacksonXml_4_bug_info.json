{
  "bug_id": "4",
  "failed_tests": {
    "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest": [
      {
        "methodName": "testDynamicRootName",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<<[rudy]/>> but was:<<[null]/>>",
        "fail_line": "        assertEquals(\"<rudy/>\", xml);",
        "test_source": "  public void testDynamicRootName() throws IOException {\n  String xml;\n\n  ObjectWriter w = _xmlMapper.writer().withRootName(\"rudy\");\n\n  xml = w.writeValueAsString(new StringBean(\"foo\"));\n  assertEquals(\"<rudy><text>foo</text></rudy>\", xml);\n\n  xml = w.writeValueAsString(new StringBean(null));\n  assertEquals(\"<rudy><text/></rudy>\", xml);\n\n  // and even with null will respect configured root name\n  xml = w.writeValueAsString(null);\n  assertEquals(\"<rudy/>\", xml);\n  }",
        "stack": [
          "RootNameTest.testDynamicRootName line 81"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
      "buggy_full_code": "package com.fasterxml.jackson.dataformat.xml.ser;\n\nimport java.io.IOException;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.XMLStreamException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.PropertyName;\nimport com.fasterxml.jackson.databind.SerializationConfig;\nimport com.fasterxml.jackson.databind.ser.SerializerFactory;\nimport com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\nimport com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\nimport com.fasterxml.jackson.dataformat.xml.util.TypeUtil;\nimport com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n\n\npublic class XmlSerializerProvider extends DefaultSerializerProvider { private static final long serialVersionUID = 1L; protected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\"); protected final XmlRootNameLookup _rootNameLookup; public XmlSerializerProvider(XmlRootNameLookup rootNames) {\n        super();\n        _rootNameLookup = rootNames;\n    }\n\n    public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f) {\n        super(src, config, f);\n        _rootNameLookup  = src._rootNameLookup;\n    }\n\n    \n\n    @Override\n    public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf) {\n        return new XmlSerializerProvider(this, config, jsf);\n    }\n\n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { \n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        \n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { \n            throw ioe;\n        } catch (Exception e) { \n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        \n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }\n\n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { \n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(rootType, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(rootType);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n\n        final JsonSerializer<Object> ser = findTypedValueSerializer(rootType, true, null);\n        \n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { \n            throw ioe;\n        } catch (Exception e) { \n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        \n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }\n    \n    \n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { \n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(rootType, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(rootType);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        if (ser == null) {\n            ser = findTypedValueSerializer(rootType, true, null);\n        }\n        \n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { \n            throw ioe;\n        } catch (Exception e) { \n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        \n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }\n\n    protected void _serializeXmlNull(JsonGenerator jgen) throws IOException {\n        \n        \n        if (jgen instanceof ToXmlGenerator) {\n            _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);\n        }\n        super.serializeValue(jgen, null);\n    }\n    \n    protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException {\n        xgen.writeStartObject();\n        \n        xgen.writeFieldName(\"item\");\n    }    \n\n    protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException {\n        \n        if (!xgen.setNextNameIfMissing(rootName)) {\n            \n            if (xgen.inRoot()) {\n                xgen.setNextName(rootName);\n            }\n        }\n        xgen.initGenerator();\n        String ns = rootName.getNamespaceURI();\n        \n        if (ns != null && ns.length() > 0) {\n            try {\n                xgen.getStaxWriter().setDefaultNamespace(ns);\n            } catch (XMLStreamException e) {\n                StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n    }\n\n    protected QName _rootNameFromConfig() {\n        PropertyName name = _config.getFullRootName();\n        if (name == null) {\n            return null;\n        }\n        String ns = name.getNamespace();\n        if (ns == null || ns.isEmpty()) {\n            return new QName(name.getSimpleName());\n        }\n        return new QName(ns, name.getSimpleName());\n    }\n\n    protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException {\n        \n        if (!(gen instanceof ToXmlGenerator)) {\n            \n            if (!(gen instanceof TokenBuffer)) {\n                throw JsonMappingException.from(gen,\n                        \"XmlMapper does not with generators of type other than ToXmlGenerator; got: \"+gen.getClass().getName());\n            }\n            return null;\n        }\n        return (ToXmlGenerator) gen;\n    }    \n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.dataformat.xml.ser;\n\nimport java.io.IOException;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.XMLStreamException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.PropertyName;\nimport com.fasterxml.jackson.databind.SerializationConfig;\nimport com.fasterxml.jackson.databind.ser.SerializerFactory;\nimport com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\nimport com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\nimport com.fasterxml.jackson.dataformat.xml.util.TypeUtil;\nimport com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n\n\npublic class XmlSerializerProvider extends DefaultSerializerProvider { private static final long serialVersionUID = 1L; protected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\"); protected final XmlRootNameLookup _rootNameLookup; public XmlSerializerProvider(XmlRootNameLookup rootNames) {\n        super();\n        _rootNameLookup = rootNames;\n    }\n\n    public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f) {\n        super(src, config, f);\n        _rootNameLookup  = src._rootNameLookup;\n    }\n\n    \n\n    @Override\n    public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf) {\n        return new XmlSerializerProvider(this, config, jsf);\n    }\n\n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { \n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        \n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { \n            throw ioe;\n        } catch (Exception e) { \n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        \n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }\n\n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { \n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(rootType, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(rootType);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n\n        final JsonSerializer<Object> ser = findTypedValueSerializer(rootType, true, null);\n        \n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { \n            throw ioe;\n        } catch (Exception e) { \n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        \n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }\n    \n    \n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { \n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(rootType, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(rootType);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        if (ser == null) {\n            ser = findTypedValueSerializer(rootType, true, null);\n        }\n        \n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { \n            throw ioe;\n        } catch (Exception e) { \n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        \n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }\n\n    protected void _serializeXmlNull(JsonGenerator jgen) throws IOException {\n        \n        \n        QName rootName = _rootNameFromConfig();\n        if (rootName == null) {\n            rootName = ROOT_NAME_FOR_NULL;\n        }\n        if (jgen instanceof ToXmlGenerator) {\n            _initWithRootName((ToXmlGenerator) jgen, rootName);\n        }\n        super.serializeValue(jgen, null);\n    }\n    \n    protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException {\n        xgen.writeStartObject();\n        \n        xgen.writeFieldName(\"item\");\n    }    \n\n    protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException {\n        \n        if (!xgen.setNextNameIfMissing(rootName)) {\n            \n            if (xgen.inRoot()) {\n                xgen.setNextName(rootName);\n            }\n        }\n        xgen.initGenerator();\n        String ns = rootName.getNamespaceURI();\n        \n        if (ns != null && ns.length() > 0) {\n            try {\n                xgen.getStaxWriter().setDefaultNamespace(ns);\n            } catch (XMLStreamException e) {\n                StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n    }\n\n    protected QName _rootNameFromConfig() {\n        PropertyName name = _config.getFullRootName();\n        if (name == null) {\n            return null;\n        }\n        String ns = name.getNamespace();\n        if (ns == null || ns.isEmpty()) {\n            return new QName(name.getSimpleName());\n        }\n        return new QName(ns, name.getSimpleName());\n    }\n\n    protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException {\n        \n        if (!(gen instanceof ToXmlGenerator)) {\n            \n            if (!(gen instanceof TokenBuffer)) {\n                throw JsonMappingException.from(gen,\n                        \"XmlMapper does not with generators of type other than ToXmlGenerator; got: \"+gen.getClass().getName());\n            }\n            return null;\n        }\n        return (ToXmlGenerator) gen;\n    }    \n}\n",
      "buggy_signatures": [
        "public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f)",
        "public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf)",
        "public void serializeValue(JsonGenerator gen, Object value) throws IOException",
        "public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException",
        "public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException",
        "protected void _serializeXmlNull(JsonGenerator jgen) throws IOException",
        "protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException",
        "protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException",
        "protected QName _rootNameFromConfig()",
        "protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException"
      ],
      "fixed_signatures": [
        "public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f)",
        "public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf)",
        "public void serializeValue(JsonGenerator gen, Object value) throws IOException",
        "public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException",
        "public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException",
        "protected void _serializeXmlNull(JsonGenerator jgen) throws IOException",
        "protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException",
        "protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException",
        "protected QName _rootNameFromConfig()",
        "protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException"
      ],
      "methods": [
        {
          "buggy_method": "  protected void _serializeXmlNull(JsonGenerator jgen) throws IOException {\n  \n  \n  if (jgen instanceof ToXmlGenerator) {\n  _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);\n  }\n  super.serializeValue(jgen, null);\n  }",
          "fixed_method": "  protected void _serializeXmlNull(JsonGenerator jgen) throws IOException {\n  \n  \n  QName rootName = _rootNameFromConfig();\n  if (rootName == null) {\n  rootName = ROOT_NAME_FOR_NULL;\n  }\n  if (jgen instanceof ToXmlGenerator) {\n  _initWithRootName((ToXmlGenerator) jgen, rootName);\n  }\n  super.serializeValue(jgen, null);\n  }",
          "diff": [
            "@@ -201,8 +201,12 @@",
            "     {\n",
            "         // 14-Nov-2016, tatu: As per [dataformat-xml#213], we may have explicitly\n",
            "         //    configured root name...\n",
            "+        QName rootName = _rootNameFromConfig();\n",
            "+        if (rootName == null) {\n",
            "+            rootName = ROOT_NAME_FOR_NULL;\n",
            "+        }\n",
            "         if (jgen instanceof ToXmlGenerator) {\n",
            "-            _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);\n",
            "+            _initWithRootName((ToXmlGenerator) jgen, rootName);\n",
            "         }\n",
            "         super.serializeValue(jgen, null);\n",
            "     }\n"
          ],
          "changed_lines": 6
        }
      ]
    }
  ]
}
