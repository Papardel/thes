{
  "bug_id": "5",
  "failed_tests": {
    "com.fasterxml.jackson.dataformat.xml.MapperCopyTest": [
      {
        "methodName": "testCopyWith",
        "error": "junit.framework.AssertionFailedError",
        "message": "Should NOT use name 'AnnotatedName' but 'Pojo282', xml = <AnnotatedName><a>3</a></AnnotatedName>",
        "fail_line": "            fail(\"Should NOT use name 'AnnotatedName' but 'Pojo282', xml = \"+xml1);",
        "test_source": "  public void testCopyWith() throws Exception {\n  XmlMapper xmlMapper = newMapper();\n  final ObjectMapper xmlMapperNoAnno = xmlMapper.copy()\n  .disable(MapperFeature.USE_ANNOTATIONS)\n  .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n\n  String xml1 = xmlMapper.writeValueAsString(new Pojo282());\n  String xml2 = xmlMapperNoAnno.writeValueAsString(new Pojo282());\n\n  if (!xml1.contains(\"AnnotatedName\")) {\n  fail(\"Should use name 'AnnotatedName', xml = \"+xml1);\n  }\n  if (!xml2.contains(\"Pojo282\")\n  || xml2.contains(\"AnnotatedName\")) {\n  fail(\"Should NOT use name 'AnnotatedName' but 'Pojo282', xml = \"+xml1);\n  }\n  }",
        "stack": [
          "MapperCopyTest.testCopyWith line 89"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
      "buggy_full_code": "package com.fasterxml.jackson.dataformat.xml.ser;\n\nimport java.io.IOException;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.XMLStreamException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.PropertyName;\nimport com.fasterxml.jackson.databind.SerializationConfig;\nimport com.fasterxml.jackson.databind.ser.SerializerFactory;\nimport com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\nimport com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\nimport com.fasterxml.jackson.dataformat.xml.util.TypeUtil;\nimport com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n\n\npublic class XmlSerializerProvider extends DefaultSerializerProvider { private static final long serialVersionUID = 1L; protected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\"); protected final XmlRootNameLookup _rootNameLookup; public XmlSerializerProvider(XmlRootNameLookup rootNames) {\n        super();\n        _rootNameLookup = rootNames;\n    }\n\n    public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f) {\n        super(src, config, f);\n        _rootNameLookup  = src._rootNameLookup;\n    }\n\n    \n    protected XmlSerializerProvider(XmlSerializerProvider src) {\n        super(src);\n        \n        \n        _rootNameLookup = src._rootNameLookup;\n    }\n\n    \n\n    @Override\n    public DefaultSerializerProvider copy() {\n        return new XmlSerializerProvider(this);\n    }\n\n    @Override\n    public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf) {\n        return new XmlSerializerProvider(this, config, jsf);\n    }\n\n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { \n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        \n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (Exception e) { \n            throw _wrapAsIOE(gen, e);\n        }\n        \n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }\n\n    \n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { \n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(rootType, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(rootType);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        if (ser == null) {\n            ser = findTypedValueSerializer(rootType, true, null);\n        }\n        \n        try {\n            ser.serialize(value, gen, this);\n        } catch (Exception e) { \n            throw _wrapAsIOE(gen, e);\n        }\n        \n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }\n\n    protected void _serializeXmlNull(JsonGenerator jgen) throws IOException {\n        \n        \n        QName rootName = _rootNameFromConfig();\n        if (rootName == null) {\n            rootName = ROOT_NAME_FOR_NULL;\n        }\n        if (jgen instanceof ToXmlGenerator) {\n            _initWithRootName((ToXmlGenerator) jgen, rootName);\n        }\n        super.serializeValue(jgen, null);\n    }\n    \n    protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException {\n        xgen.writeStartObject();\n        \n        xgen.writeFieldName(\"item\");\n    }    \n\n    protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException {\n        \n        if (!xgen.setNextNameIfMissing(rootName)) {\n            \n            if (xgen.inRoot()) {\n                xgen.setNextName(rootName);\n            }\n        }\n        xgen.initGenerator();\n        String ns = rootName.getNamespaceURI();\n        \n        if (ns != null && ns.length() > 0) {\n            try {\n                xgen.getStaxWriter().setDefaultNamespace(ns);\n            } catch (XMLStreamException e) {\n                StaxUtil.throwAsGenerationException(e, xgen);\n            }\n        }\n    }\n\n    protected QName _rootNameFromConfig() {\n        PropertyName name = _config.getFullRootName();\n        if (name == null) {\n            return null;\n        }\n        String ns = name.getNamespace();\n        if (ns == null || ns.isEmpty()) {\n            return new QName(name.getSimpleName());\n        }\n        return new QName(ns, name.getSimpleName());\n    }\n\n    protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException {\n        \n        if (!(gen instanceof ToXmlGenerator)) {\n            \n            if (!(gen instanceof TokenBuffer)) {\n                throw JsonMappingException.from(gen,\n                        \"XmlMapper does not with generators of type other than ToXmlGenerator; got: \"+gen.getClass().getName());\n            }\n            return null;\n        }\n        return (ToXmlGenerator) gen;\n    }    \n\n    protected IOException _wrapAsIOE(JsonGenerator g, Exception e) {\n        if (e instanceof IOException) {\n            return (IOException) e;\n        }\n        String msg = e.getMessage();\n        if (msg == null) {\n            msg = \"[no message for \"+e.getClass().getName()+\"]\";\n        }\n        return new JsonMappingException(g, msg, e);\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.dataformat.xml.ser;\n\nimport java.io.IOException;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.XMLStreamException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.PropertyName;\nimport com.fasterxml.jackson.databind.SerializationConfig;\nimport com.fasterxml.jackson.databind.ser.SerializerFactory;\nimport com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\nimport com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\nimport com.fasterxml.jackson.dataformat.xml.util.TypeUtil;\nimport com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n\n\npublic class XmlSerializerProvider extends DefaultSerializerProvider { private static final long serialVersionUID = 1L; protected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\"); protected final XmlRootNameLookup _rootNameLookup; public XmlSerializerProvider(XmlRootNameLookup rootNames) {\n        super();\n        _rootNameLookup = rootNames;\n    }\n\n    public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f) {\n        super(src, config, f);\n        _rootNameLookup  = src._rootNameLookup;\n    }\n\n    \n    protected XmlSerializerProvider(XmlSerializerProvider src) {\n        super(src);\n        \n        \n        _rootNameLookup = new XmlRootNameLookup();\n    }\n\n    \n\n    @Override\n    public DefaultSerializerProvider copy() {\n        return new XmlSerializerProvider(this);\n    }\n\n    @Override\n    public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf) {\n        return new XmlSerializerProvider(this, config, jsf);\n    }\n\n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { \n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(cls, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        \n        \n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (Exception e) { \n            throw _wrapAsIOE(gen, e);\n        }\n        \n\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }\n\n    \n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { \n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(rootType, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(rootType);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        if (ser == null) {\n            ser = findTypedValueSerializer(rootType, true, null);\n        }\n        \n        try {\n            ser.serialize(value, gen, this);\n        } catch (Exception e) { \n            throw _wrapAsIOE(gen, e);\n        }\n        \n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }\n\n    protected void _serializeXmlNull(JsonGenerator jgen) throws IOException {\n        \n        \n        QName rootName = _rootNameFromConfig();\n        if (rootName == null) {\n            rootName = ROOT_NAME_FOR_NULL;\n        }\n        if (jgen instanceof ToXmlGenerator) {\n            _initWithRootName((ToXmlGenerator) jgen, rootName);\n        }\n        super.serializeValue(jgen, null);\n    }\n    \n    protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException {\n        xgen.writeStartObject();\n        \n        xgen.writeFieldName(\"item\");\n    }    \n\n    protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException {\n        \n        if (!xgen.setNextNameIfMissing(rootName)) {\n            \n            if (xgen.inRoot()) {\n                xgen.setNextName(rootName);\n            }\n        }\n        xgen.initGenerator();\n        String ns = rootName.getNamespaceURI();\n        \n        if (ns != null && ns.length() > 0) {\n            try {\n                xgen.getStaxWriter().setDefaultNamespace(ns);\n            } catch (XMLStreamException e) {\n                StaxUtil.throwAsGenerationException(e, xgen);\n            }\n        }\n    }\n\n    protected QName _rootNameFromConfig() {\n        PropertyName name = _config.getFullRootName();\n        if (name == null) {\n            return null;\n        }\n        String ns = name.getNamespace();\n        if (ns == null || ns.isEmpty()) {\n            return new QName(name.getSimpleName());\n        }\n        return new QName(ns, name.getSimpleName());\n    }\n\n    protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException {\n        \n        if (!(gen instanceof ToXmlGenerator)) {\n            \n            if (!(gen instanceof TokenBuffer)) {\n                throw JsonMappingException.from(gen,\n                        \"XmlMapper does not with generators of type other than ToXmlGenerator; got: \"+gen.getClass().getName());\n            }\n            return null;\n        }\n        return (ToXmlGenerator) gen;\n    }    \n\n    protected IOException _wrapAsIOE(JsonGenerator g, Exception e) {\n        if (e instanceof IOException) {\n            return (IOException) e;\n        }\n        String msg = e.getMessage();\n        if (msg == null) {\n            msg = \"[no message for \"+e.getClass().getName()+\"]\";\n        }\n        return new JsonMappingException(g, msg, e);\n    }\n}\n",
      "buggy_signatures": [
        "public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f)",
        "protected XmlSerializerProvider(XmlSerializerProvider src)",
        "public DefaultSerializerProvider copy()",
        "public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf)",
        "public void serializeValue(JsonGenerator gen, Object value) throws IOException",
        "public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException",
        "protected void _serializeXmlNull(JsonGenerator jgen) throws IOException",
        "protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException",
        "protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException",
        "protected QName _rootNameFromConfig()",
        "protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException",
        "protected IOException _wrapAsIOE(JsonGenerator g, Exception e)"
      ],
      "fixed_signatures": [
        "public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f)",
        "protected XmlSerializerProvider(XmlSerializerProvider src)",
        "public DefaultSerializerProvider copy()",
        "public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf)",
        "public void serializeValue(JsonGenerator gen, Object value) throws IOException",
        "public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException",
        "protected void _serializeXmlNull(JsonGenerator jgen) throws IOException",
        "protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException",
        "protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException",
        "protected QName _rootNameFromConfig()",
        "protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException",
        "protected IOException _wrapAsIOE(JsonGenerator g, Exception e)"
      ],
      "methods": [
        {
          "buggy_method": "  protected XmlSerializerProvider(XmlSerializerProvider src) {\n  super(src);\n  \n  \n  _rootNameLookup = src._rootNameLookup;\n  }",
          "fixed_method": "  protected XmlSerializerProvider(XmlSerializerProvider src) {\n  super(src);\n  \n  \n  _rootNameLookup = new XmlRootNameLookup();\n  }",
          "diff": [
            "@@ -56,7 +56,7 @@",
            "         super(src);\n",
            "         // 21-May-2018, tatu: As per [dataformat-xml#282], should NOT really copy\n",
            "         //    root name lookup as that may link back to diff version, configuration\n",
            "-        _rootNameLookup = src._rootNameLookup;\n",
            "+        _rootNameLookup = new XmlRootNameLookup();\n",
            "     }\n",
            " \n",
            "     /*\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
