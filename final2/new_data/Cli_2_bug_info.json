{
  "bug_id": "2",
  "failed_tests": {
    "org.apache.commons.cli.bug.BugCLI51Test": [
      {
        "methodName": "test",
        "error": "org.apache.commons.cli.UnrecognizedOptionException",
        "message": "Unrecognized option: -o",
        "fail_line": "        commandLine = parser.parse( options, args );",
        "test_source": "  public void test() throws Exception\n  {\n  Options options = buildCommandLineOptions();\n  CommandLineParser parser = new PosixParser();\n  String[] args = new String[] {\"-t\", \"-something\" };\n  CommandLine commandLine;\n  commandLine = parser.parse( options, args );\n  assertEquals(\"-something\", commandLine.getOptionValue( 't'));\n  }",
        "stack": [
          "Parser.processOption line 368, Parser.parse line 185, Parser.parse line 70, BugCLI51Test.test line 40"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/cli/PosixParser.java",
      "buggy_full_code": "\npackage org.apache.commons.cli;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\n\n\npublic class PosixParser extends Parser {\n\n    \n    private ArrayList tokens = new ArrayList();\n\n    \n    private boolean eatTheRest;\n\n    \n    private Option currentOption;\n\n    \n    private Options options;\n\n    \n    private void init()\n    {\n        eatTheRest = false;\n        tokens.clear();\n        currentOption = null;\n    }\n\n    \n    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        \n        Iterator iter = Arrays.asList(arguments).iterator();\n        String token;\n\n        \n        while (iter.hasNext())\n        {\n            \n            token = (String) iter.next();\n\n            \n            if (token.startsWith(\"--\"))\n            {\n                if (token.indexOf('=') != -1)\n                {\n                    tokens.add(token.substring(0, token.indexOf('=')));\n                    tokens.add(token.substring(token.indexOf('=') + 1, \n                                               token.length()));\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            \n            else if (\"-\".equals(token))\n            {\n                processSingleHyphen(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                int tokenLength = token.length();\n\n                if (tokenLength == 2)\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n                else if (options.hasOption(token)) {\n                \ttokens.add(token);\n                }\n                \n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            else\n            {\n                if (stopAtNonOption)\n                {\n                    process(token);\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }\n\n    \n    private void gobble(Iterator iter)\n    {\n        if (eatTheRest)\n        {\n            while (iter.hasNext())\n            {\n                tokens.add(iter.next());\n            }\n        }\n    }\n\n    \n    private void process(String value)\n    {\n        if ((currentOption != null) && currentOption.hasArg())\n        {\n            if (currentOption.hasArg())\n            {\n                tokens.add(value);\n                currentOption = null;\n            }\n            else if (currentOption.hasArgs())\n            {\n                tokens.add(value);\n            }\n        }\n        else\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n            tokens.add(value);\n        }\n    }\n\n    \n    private void processSingleHyphen(String hyphen)\n    {\n        tokens.add(hyphen);\n    }\n\n    \n    private void processOptionToken(String token, boolean stopAtNonOption)\n    {\n        if (this.options.hasOption(token))\n        {\n            currentOption = this.options.getOption(token);\n            tokens.add(token);\n        }\n        else if (stopAtNonOption)\n        {\n            eatTheRest = true;\n        }\n    }\n\n    \n    protected void burstToken(String token, boolean stopAtNonOption)\n    {\n        int tokenLength = token.length();\n\n        for (int i = 1; i < tokenLength; i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n            boolean hasOption = options.hasOption(ch);\n\n            if (hasOption)\n            {\n                tokens.add(\"-\" + ch);\n                currentOption = options.getOption(ch);\n\n                if (currentOption.hasArg() && (token.length() != (i + 1)))\n                {\n                    tokens.add(token.substring(i + 1));\n\n                    break;\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                process(token.substring(i));\n            }\n            else\n            {\n                tokens.add(\"-\" + ch);\n            }\n        }\n    }\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.cli;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\n\n\npublic class PosixParser extends Parser {\n\n    \n    private ArrayList tokens = new ArrayList();\n\n    \n    private boolean eatTheRest;\n\n    \n    private Option currentOption;\n\n    \n    private Options options;\n\n    \n    private void init()\n    {\n        eatTheRest = false;\n        tokens.clear();\n        currentOption = null;\n    }\n\n    \n    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        \n        Iterator iter = Arrays.asList(arguments).iterator();\n        String token;\n\n        \n        while (iter.hasNext())\n        {\n            \n            token = (String) iter.next();\n\n            \n            if (token.startsWith(\"--\"))\n            {\n                if (token.indexOf('=') != -1)\n                {\n                    tokens.add(token.substring(0, token.indexOf('=')));\n                    tokens.add(token.substring(token.indexOf('=') + 1, \n                                               token.length()));\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            \n            else if (\"-\".equals(token))\n            {\n                processSingleHyphen(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                int tokenLength = token.length();\n\n                if (tokenLength == 2)\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n                else if (options.hasOption(token)) {\n                \ttokens.add(token);\n                }\n                \n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            else\n            {\n                if (stopAtNonOption)\n                {\n                    process(token);\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }\n\n    \n    private void gobble(Iterator iter)\n    {\n        if (eatTheRest)\n        {\n            while (iter.hasNext())\n            {\n                tokens.add(iter.next());\n            }\n        }\n    }\n\n    \n    private void process(String value)\n    {\n        if ((currentOption != null) && currentOption.hasArg())\n        {\n            if (currentOption.hasArg())\n            {\n                tokens.add(value);\n                currentOption = null;\n            }\n            else if (currentOption.hasArgs())\n            {\n                tokens.add(value);\n            }\n        }\n        else\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n            tokens.add(value);\n        }\n    }\n\n    \n    private void processSingleHyphen(String hyphen)\n    {\n        tokens.add(hyphen);\n    }\n\n    \n    private void processOptionToken(String token, boolean stopAtNonOption)\n    {\n        if (this.options.hasOption(token))\n        {\n            currentOption = this.options.getOption(token);\n            tokens.add(token);\n        }\n        else if (stopAtNonOption)\n        {\n            eatTheRest = true;\n        }\n    }\n\n    \n    protected void burstToken(String token, boolean stopAtNonOption)\n    {\n        int tokenLength = token.length();\n\n        for (int i = 1; i < tokenLength; i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n            boolean hasOption = options.hasOption(ch);\n\n            if (hasOption)\n            {\n                tokens.add(\"-\" + ch);\n                currentOption = options.getOption(ch);\n\n                if (currentOption.hasArg() && (token.length() != (i + 1)))\n                {\n                    tokens.add(token.substring(i + 1));\n\n                    break;\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                process(token.substring(i));\n            }\n            else\n            {\n                tokens.add(token);\n                break;\n            }\n        }\n    }\n}",
      "buggy_signatures": [
        "private ArrayList tokens = new ArrayList()",
        "private void init()",
        "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
        "private void gobble(Iterator iter)",
        "private void process(String value)",
        "private void processSingleHyphen(String hyphen)",
        "private void processOptionToken(String token, boolean stopAtNonOption)",
        "protected void burstToken(String token, boolean stopAtNonOption)"
      ],
      "fixed_signatures": [
        "private ArrayList tokens = new ArrayList()",
        "private void init()",
        "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
        "private void gobble(Iterator iter)",
        "private void process(String value)",
        "private void processSingleHyphen(String hyphen)",
        "private void processOptionToken(String token, boolean stopAtNonOption)",
        "protected void burstToken(String token, boolean stopAtNonOption)"
      ],
      "methods": [
        {
          "buggy_method": "  protected void burstToken(String token, boolean stopAtNonOption)\n  {\n  int tokenLength = token.length();\n\n  for (int i = 1; i < tokenLength; i++)\n  {\n  String ch = String.valueOf(token.charAt(i));\n  boolean hasOption = options.hasOption(ch);\n\n  if (hasOption)\n  {\n  tokens.add(\"-\" + ch);\n  currentOption = options.getOption(ch);\n\n  if (currentOption.hasArg() && (token.length() != (i + 1)))\n  {\n  tokens.add(token.substring(i + 1));\n\n  break;\n  }\n  }\n  else if (stopAtNonOption)\n  {\n  process(token.substring(i));\n  }\n  else\n  {\n  tokens.add(\"-\" + ch);\n  }\n  }\n  }",
          "fixed_method": "  protected void burstToken(String token, boolean stopAtNonOption)\n  {\n  int tokenLength = token.length();\n\n  for (int i = 1; i < tokenLength; i++)\n  {\n  String ch = String.valueOf(token.charAt(i));\n  boolean hasOption = options.hasOption(ch);\n\n  if (hasOption)\n  {\n  tokens.add(\"-\" + ch);\n  currentOption = options.getOption(ch);\n\n  if (currentOption.hasArg() && (token.length() != (i + 1)))\n  {\n  tokens.add(token.substring(i + 1));\n\n  break;\n  }\n  }\n  else if (stopAtNonOption)\n  {\n  process(token.substring(i));\n  }\n  else\n  {\n  tokens.add(token);\n  break;\n  }\n  }\n  }",
          "diff": [
            "@@ -302,8 +302,9 @@",
            "             }\n",
            "             else\n",
            "             {\n",
            "-                tokens.add(\"-\" + ch);\n",
            "-            }\n",
            "-        }\n",
            "-    }\n",
            "-}\n",
            "+                tokens.add(token);\n",
            "+                break;\n",
            "+            }\n",
            "+        }\n",
            "+    }\n",
            "+}"
          ],
          "changed_lines": 11
        }
      ]
    }
  ]
}