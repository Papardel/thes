{
  "bug_id": "Compress_1_bug_info",
  "results": [
    {
      "prompt_index": 1,
      "prompt": "Bug ID: 1\nTest Class: org.apache.commons.compress.archivers.CpioTestCase\nMethod: testCpioUnarchive\nError: java.io.EOFException\nMessage: \nFailing Line:         while ((entry = in.getNextEntry()) != null) {\nTest Source:\npublic void testCpioUnarchive() throws Exception {\n  final File output = new File(dir, \"bla.cpio\");\n  {\n  final File file1 = getFile(\"test1.xml\");\n  final File file2 = getFile(\"test2.xml\");\n\n  final OutputStream out = new FileOutputStream(output);\n  final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out);\n  os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length()));\n  IOUtils.copy(new FileInputStream(file1), os);\n  os.closeArchiveEntry();\n\n  os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length()));\n  IOUtils.copy(new FileInputStream(file2), os);\n  os.closeArchiveEntry();\n\n  os.close();\n  out.close();\n  }\n\n  \n  final File input = output;\n  final InputStream is = new FileInputStream(input);\n  final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is);\n\n\n  Map result = new HashMap();\n  ArchiveEntry entry = null;\n  while ((entry = in.getNextEntry()) != null) {\n  File target = new File(dir, entry.getName());\n  final OutputStream out = new FileOutputStream(target);\n  IOUtils.copy(in, out);\n  out.close();\n  result.put(entry.getName(), target);\n  }\n  in.close();\n\n  int lineSepLength = System.getProperty(\"line.separator\").length();\n\n  File t = (File)result.get(\"test1.xml\");\n  assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists());\n  assertEquals(\"length of \" + t.getAbsolutePath(),\n  72 + 4 * lineSepLength, t.length());\n\n  t = (File)result.get(\"test2.xml\");\n  assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists());\n  assertEquals(\"length of \" + t.getAbsolutePath(),\n  73 + 5 * lineSepLength, t.length());\n  }\nStack Trace:\nCpioArchiveInputStream.readFully line 293, CpioArchiveInputStream.getNextCPIOEntry line 168, CpioArchiveInputStream.getNextEntry line 421, CpioTestCase.testCpioUnarchive line 82\n\nReturn **only** the fully-qualified Java *source* class that contains the bug.\nDo **not** return:\n- the test class itself (e.g. com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdWithEnum1328Test),\n- any class whose simple name starts or ends with Test, Tests, TestUtil, TestUtils, or TestHelper,\n- any test-utility class such as org.junit.Assert or org.junit.jupiter.api.Assertions.\nOutput just the class name on a single line - nothing else in this format:\nRESPONSE: <fully-qualified-class-name>\n",
      "response": "Bug ID: 1\nSource: org.apache.commons.compress.archivers.CpioTestCase\nMethod: testCpioUnarchive\nError: java.io.EOFException\nMessage: \nFailing Line:         while ((entry = in.getNextEntry()) != null) {\n\nClass that contains the bug: CpioArchiveInputStream\n\nFully-qualified class name: org.apache.commons.compress.archivers.CpioArchiveInputStream\n\n**Output:**\n\nCpioArchiveInputStream"
    }
  ],
  "classes": [
    "CpioArchiveOutputStream"
  ]
}