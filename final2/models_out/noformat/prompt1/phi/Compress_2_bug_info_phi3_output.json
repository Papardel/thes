{
  "bug_id": "Compress_2_bug_info",
  "results": [
    {
      "prompt_index": 1,
      "prompt": "Bug ID: 2\nTest Class: org.apache.commons.compress.archivers.ArTestCase\nMethod: testArDelete\nError: junit.framework.AssertionFailedError\nMessage: expected:<1> but was:<0>\nFailing Line:         assertEquals(1, deleted);\nTest Source:\npublic void testArDelete() throws Exception {\n  final File output = new File(dir, \"bla.ar\");\n\n  final File file1 = getFile(\"test1.xml\");\n  final File file2 = getFile(\"test2.xml\");\n  {\n  \n\n  final OutputStream out = new FileOutputStream(output);\n  final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n  os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n  IOUtils.copy(new FileInputStream(file1), os);\n  os.closeArchiveEntry();\n\n  os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n  IOUtils.copy(new FileInputStream(file2), os);\n  os.closeArchiveEntry();\n  os.close();\n  out.close();\n  }\n\n  assertEquals(8\n  + 60 + file1.length() + (file1.length() % 2)\n  + 60 + file2.length() + (file2.length() % 2),\n  output.length());\n\n  final File output2 = new File(dir, \"bla2.ar\");\n\n  int copied = 0;\n  int deleted = 0;\n\n  {\n  \n\n  final InputStream is = new FileInputStream(output);\n  final OutputStream os = new FileOutputStream(output2);\n  final ArchiveOutputStream aos = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", os);\n  final ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n  while(true) {\n  final ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();\n  if (entry == null) {\n  break;\n  }\n\n  if (\"test1.xml\".equals(entry.getName())) {\n  aos.putArchiveEntry(entry);\n  IOUtils.copy(ais, aos);\n  aos.closeArchiveEntry();\n  copied++;\n  } else {\n  IOUtils.copy(ais, new ByteArrayOutputStream());\n  deleted++;\n  }\n\n  }\n  ais.close();\n  aos.close();\n  is.close();\n  os.close();\n  }\n\n  assertEquals(1, copied);\n  assertEquals(1, deleted);\n  assertEquals(144, output2.length());\n\n  long files = 0;\n  long sum = 0;\n\n  {\n  final InputStream is = new FileInputStream(output2);\n  final ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n  while(true) {\n  final ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();\n  if (entry == null) {\n  break;\n  }\n\n  IOUtils.copy(ais, new ByteArrayOutputStream());\n\n  sum +=  entry.getLength();\n  files++;\n  }\n  ais.close();\n  is.close();\n  }\n\n  assertEquals(1, files);\n  assertEquals(76, sum);\n\n  }\nStack Trace:\nArTestCase.testArDelete line 151\n\nReturn **only** the fully-qualified Java *source* class that contains the bug.\nDo **not** return:\n- the test class itself (e.g. com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdWithEnum1328Test),\n- any class whose simple name starts or ends with Test, Tests, TestUtil, TestUtils, or TestHelper,\n- any test-utility class such as org.junit.Assert or org.junit.jupiter.api.Assertions.\nOutput just the class name on a single line - nothing else in this format:\nRESPONSE: <fully-qualified-class-name>\n",
      "response": "Input:\nError:\njava.lang.AssertionError: \nExpected :1\nActual   :0\n\nFAILED: testArDelete\norg.apache.commons.compress.archivers.ArTestCase$10$1$1.testArDelete(ArTestCase.java:151)\nat org.apache.commons.compress.archivers.ArTestCase.runTest(ArTestCase.java:180)\nat org.apache.commons.compress.archivers.ArTestCase.runTest(ArTestCase.java:125)\nat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\nat org.junit.jupiter.engine.impl.MethodAttributeInterceptor.intercept(MethodAttributeInterceptor.java:44)\nat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:104)\nat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:53)\nat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\nat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\nat org.junit.jupiter.engine.execution.MethodInvocation.invokeForTesting(MethodInvocation.java:126)\nat org.junit.jupiter.engine.execution.InvocationInvoker$ExecutionWorker.invoke(InvocationInvoker.java:34)\nat org.junit.jupiter.engine.execution.InvocationInvoker.invoke(InvocationInvoker.java:127)\nat org.junit.jupiter.engine.execution.InvocationInvoker$Invocation.proceed(InvocationInvoker.java:646)\nat org.junit.jupiter.engine.execution.InvocationInvoker.proceedToNext(InvocationInvoker.java:105)\nat org.junit.jupiter.engine.execution.AbstractInvoker$StopAtFailedInvocationException.failWithException(AbstractInvoker.java:1"
    }
  ],
  "classes": [
    "ArArchiveInputStream"
  ]
}