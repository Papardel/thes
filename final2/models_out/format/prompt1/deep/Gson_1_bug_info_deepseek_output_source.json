{
  "bug_id": "Gson_1_bug_info",
  "results": [
    {
      "prompt_index": 1,
      "prompt": "IMPORTANT: You must reply _exactly_ in this form: \nRESPONSE: <fully-qualified-class-name>\n -and nothing else. No extra text, no newlines before/after, no explanations.Bug ID: 1\nTest Class: com.google.gson.functional.TypeVariableTest\nMethod: testSingle\nError: java.lang.UnsupportedOperationException\nMessage: Expecting parameterized type, got class com.google.gson.functional.TypeVariableTest$Bar.\nFailing Line:     String json = gson.toJson(bar1);\nTest Source:\npublic void testSingle() throws Exception {\n  Gson gson = new Gson();\n  Bar bar1 = new Bar(\"someString\", 1);\n  ArrayList<Integer> arrayList = new ArrayList<Integer>();\n  arrayList.add(1);\n  arrayList.add(2);\n  bar1.map.put(\"key1\", arrayList);\n  bar1.map.put(\"key2\", new ArrayList<Integer>());\n  String json = gson.toJson(bar1);\n  System.out.println(json);\n\n  Bar bar2 = gson.fromJson(json, Bar.class);\n  assertEquals(bar1, bar2);\n  }\nStack Trace:\nTypeInfoFactory.getActualType line 97, TypeInfoFactory.getTypeInfoForField line 54, ObjectNavigator.navigateClassFields line 156, ObjectNavigator.accept line 131, JsonSerializationContextDefault.serialize line 56, Gson.toJsonTree line 231, Gson.toJson line 271, Gson.toJson line 251, TypeVariableTest.testSingle line 41\n\nReturn **only** the fully-qualified Java *source* class that contains the bug.\nDo **not** return:\n- the test class itself (e.g. com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdWithEnum1328Test),\n- any class whose simple name starts or ends with Test, Tests, TestUtil, TestUtils, or TestHelper,\n- any test-utility class such as org.junit.Assert or org.junit.jupiter.api.Assertions.\n",
      "response": "**Note:** You must reply _exactly_ in this form: \nRESPONSE: <fully-qualified-class-name>\n -and nothing else. No extra text, no newlines before/after, no explanations.Bug ID: 1"
    }
  ]
}