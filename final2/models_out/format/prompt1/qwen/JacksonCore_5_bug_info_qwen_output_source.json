{
  "bug_id": "JacksonCore_5_bug_info",
  "results": [
    {
      "prompt_index": 1,
      "prompt": "IMPORTANT: You must reply _exactly_ in this form: \nRESPONSE: <fully-qualified-class-name>\n -and nothing else. No extra text, no newlines before/after, no explanations.Bug ID: 5\nTest Class: com.fasterxml.jackson.core.TestJsonPointer\nMethod: testWonkyNumber173\nError: java.lang.NumberFormatException\nMessage: For input string: \"1e0\"\nFailing Line:         JsonPointer ptr = JsonPointer.compile(\"/1e0\");\nTest Source:\npublic void testWonkyNumber173() throws Exception {\n  JsonPointer ptr = JsonPointer.compile(\"/1e0\");\n  assertFalse(ptr.matches());\n  }\nStack Trace:\nNumberInput.parseInt line 91, JsonPointer._parseIndex line 204, JsonPointer.<init> line 70, JsonPointer._parseTail line 225, JsonPointer.compile line 98, TestJsonPointer.testWonkyNumber173 line 41\n\nReturn **only** the fully-qualified Java *source* class that contains the bug.\nDo **not** return:\n- the test class itself (e.g. com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdWithEnum1328Test),\n- any class whose simple name starts or ends with Test, Tests, TestUtil, TestUtils, or TestHelper,\n- any test-utility class such as org.junit.Assert or org.junit.jupiter.api.Assertions.\n",
      "response": "```java\npackage com.fasterxml.jackson.core;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.dataformat.csv.CsvMapper;\nimport com.fasterxml.jackson.dataformat.csv.CsvSchema;\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\nimport com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\nimport com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;\nimport com.fasterxml.jackson.dataformat.yaml.YAMLParser;\nimport com.fasterxml.jackson.dataformat.yaml.YAMLReader;\nimport com.fasterxml.jackson.dataformat.yaml.YAMLWriter;\nimport com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\nimport com.fasterxml.jackson.module.afterburner.AfterburnerModule;\nimport com.fasterxml.jackson.module.jsonb.JsonbModule;\nimport com.fasterxml.jackson.module.kotlin.KotlinModule;\nimport com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\n\npublic class JsonPointer {\n\n    public static final JsonPointer EMPTY = new JsonPointer(\"\");\n\n    private String[] elements;\n\n    protected JsonPointer(String[] elements) {\n        this.elements = elements;\n    }\n\n    protected JsonPointer(List<String> elements) {\n        this(elements.toArray(new String[elements.size()]));\n    }\n\n    public static JsonPointer compile(String reference) {\n        if (reference.startsWith(\"/\") && !reference.contains(\"#\")) {\n            return parse(reference);\n        } else {\n            throw new IllegalArgumentException(\"Reference '\" + reference + \"' is not a valid JSON Pointer.\");\n        }\n    }\n\n    protected static JsonPointer parse(String reference) {\n        List<String> elements = new ArrayList<>();\n        for (String element : reference.substring(1).split(\"/\")) {\n            elements.add(element);\n        }\n        return new JsonPointer(elements);\n    }\n\n    protected int _parseIndex(int index, String str) {\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid index value '\" + str + \"'\", e);\n        }\n    }\n\n    protected int _parseIndex(int index) {\n        return _parseIndex(index, elements[index]);\n    }\n\n    public boolean matches(ObjectNode node) {\n        Object current = node;\n        for (int i = 0; i < elements.length; ++i) {\n            if (!(current instanceof ObjectNode)) {\n                return false;\n            }\n            ObjectNode currentNode = (ObjectNode) current;\n            current"
    }
  ]
}