{
  "bug_id": "2",
  "failed_tests": {
    "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest": [
      {
        "methodName": "testMixedContent",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<27> but was:<0>",
        "fail_line": "        assertEquals(27, result.value);",
        "test_source": "  public void testMixedContent() throws Exception {\n  WindSpeed result = MAPPER.readValue(\"<windSpeed units='kt'> 27 <radius>20</radius></windSpeed>\",\n  WindSpeed.class);\n  assertEquals(27, result.value);\n  assertNotNull(result.radius);\n  assertEquals(20, result.radius.value);\n  }",
        "stack": [
          "XmlTextTest.testMixedContent line 70"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java",
      "buggy_full_code": "package com.fasterxml.jackson.dataformat.xml.deser;\n\nimport java.io.IOException;\nimport javax.xml.stream.*;\n\nimport org.codehaus.stax2.XMLStreamLocation2;\nimport org.codehaus.stax2.XMLStreamReader2;\nimport org.codehaus.stax2.ri.Stax2ReaderAdapter;\n\nimport com.fasterxml.jackson.core.JsonLocation;\nimport com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n\n\npublic class XmlTokenStream { public final static int XML_START_ELEMENT = 1; public final static int XML_END_ELEMENT = 2; public final static int XML_ATTRIBUTE_NAME = 3; public final static int XML_ATTRIBUTE_VALUE = 4; public final static int XML_TEXT = 5; public final static int XML_END = 6; private final static int REPLAY_START_DUP = 1; private final static int REPLAY_END = 2; private final static int REPLAY_START_DELAYED = 3; final protected XMLStreamReader2 _xmlReader; final protected Object _sourceReference; protected int _currentState; protected int _attributeCount; protected int _nextAttributeIndex = 0; protected String _localName; protected String _namespaceURI; protected String _textValue; protected int _repeatElement; protected ElementWrapper _currentWrapper; protected String _nextLocalName; protected String _nextNamespaceURI; public XmlTokenStream(XMLStreamReader xmlReader, Object sourceRef) {\n        _sourceReference = sourceRef;\n        \n        if (xmlReader.getEventType() != XMLStreamConstants.START_ELEMENT) {\n            throw new IllegalArgumentException(\"Invalid XMLStreamReader passed: should be pointing to START_ELEMENT (\"\n                    +XMLStreamConstants.START_ELEMENT+\"), instead got \"+xmlReader.getEventType());\n        }\n        _xmlReader = Stax2ReaderAdapter.wrapIfNecessary(xmlReader);\n        _currentState = XML_START_ELEMENT;\n        _localName = _xmlReader.getLocalName();\n        _namespaceURI = _xmlReader.getNamespaceURI();\n        _attributeCount = _xmlReader.getAttributeCount();\n    }\n\n    public XMLStreamReader2 getXmlReader() {\n        return _xmlReader;\n    }\n\n    \n\n    \n    \n\n    public int next() throws IOException {\n        if (_repeatElement != 0) {\n            return (_currentState = _handleRepeatElement());\n        }\n        try {\n            return _next();\n        } catch (XMLStreamException e) {\n            StaxUtil.throwXmlAsIOException(e);\n            return -1;\n        }\n    }\n    \n    public void skipEndElement() throws IOException {\n        int type = next();\n        if (type != XML_END_ELEMENT) {\n            throw new IOException(\"Expected END_ELEMENT, got event of type \"+type);\n        }\n    }\n\n    public int getCurrentToken() { return _currentState; }\n\n    public String getText() { return _textValue; }\n    public String getLocalName() { return _localName; }\n    public String getNamespaceURI() { return _namespaceURI; }\n    public boolean hasAttributes() {\n        return (_currentState == XML_START_ELEMENT) && (_attributeCount > 0);\n    }\n    \n    public void closeCompletely() throws IOException {\n        try {\n            _xmlReader.closeCompletely();\n        } catch (XMLStreamException e) {\n            StaxUtil.throwXmlAsIOException(e);\n        }\n    }\n\n    public void close() throws IOException {\n        try {\n            _xmlReader.close();\n        } catch (XMLStreamException e) {\n            StaxUtil.throwXmlAsIOException(e);\n        }\n    }\n\n    public JsonLocation getCurrentLocation() {\n        return _extractLocation(_xmlReader.getLocationInfo().getCurrentLocation());\n    }\n    public JsonLocation getTokenLocation() {\n        return _extractLocation(_xmlReader.getLocationInfo().getStartLocation());\n    }\n\n    \n    \n    \n    protected void repeatStartElement() {\n\n        \n        if (_currentState != XML_START_ELEMENT) {\n            throw new IllegalStateException(\"Current state not XML_START_ELEMENT (\"\n                    +XML_START_ELEMENT+\") but \"+_currentState);\n        }\n        \n        if (_currentWrapper == null) {\n            _currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper, _localName, _namespaceURI);\n        } else {\n            _currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper.getParent(), _localName, _namespaceURI);\n        }\n        _repeatElement = REPLAY_START_DUP;\n    }\n\n    \n    protected void skipAttributes() {\n        if (_currentState == XML_ATTRIBUTE_NAME) {\n            _attributeCount = 0;\n            _currentState = XML_START_ELEMENT;\n        } else if (_currentState == XML_START_ELEMENT) {\n            \n\n        } else if (_currentState == XML_TEXT) {\n            ; \n        } else {\n            throw new IllegalStateException(\"Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (\"\n                    +XML_START_ELEMENT+\") but \"+_currentState);\n        }\n    }\n\n    protected String convertToString() throws IOException {\n        \n        if (_currentState != XML_ATTRIBUTE_NAME || _nextAttributeIndex != 0) {\n            return null;\n        }\n        try {\n            String text = _collectUntilTag();\n            \n            \n            if (_xmlReader.getEventType() == XMLStreamReader.END_ELEMENT) {\n                if (text == null) {\n                    text = \"\";\n                }\n                if (_currentWrapper != null) {\n                    _currentWrapper = _currentWrapper.getParent();\n                }\n                \n                _localName = _xmlReader.getLocalName();\n                _namespaceURI = _xmlReader.getNamespaceURI();\n                _attributeCount = 0;\n                _currentState = XML_TEXT;\n                _textValue = text;\n                return text;\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwXmlAsIOException(e);\n        }\n        \n        return null;\n    }\n\n    \n\n    private final int _next() throws XMLStreamException {\n        switch (_currentState) {\n        case XML_ATTRIBUTE_VALUE:\n            ++_nextAttributeIndex;\n            \n        case XML_START_ELEMENT: \n            if (_nextAttributeIndex < _attributeCount) {\n                _localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);\n                _namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);\n                _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);\n                return (_currentState = XML_ATTRIBUTE_NAME);\n            }\n            \n            String text = _collectUntilTag();\n            \n            if (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {\n                    return _initStartElement();\n            }\n            \n            if (text != null) {\n                _textValue = text;\n                return (_currentState = XML_TEXT);\n            }\n            return _handleEndElement();\n\n        case XML_ATTRIBUTE_NAME:\n            \n            return (_currentState = XML_ATTRIBUTE_VALUE);\n        case XML_TEXT:\n            \n            \n            return _handleEndElement();\n        case XML_END:\n            return XML_END;\n\n        }\n\n        \n        switch (_skipUntilTag()) {\n        case XMLStreamConstants.END_DOCUMENT:\n            return (_currentState = XML_END);\n        case XMLStreamConstants.END_ELEMENT:\n            return _handleEndElement();\n        }\n        \n        return _initStartElement();\n    }\n    \n    private final String _collectUntilTag() throws XMLStreamException {\n        String text = null;\n        while (true) {\n            switch (_xmlReader.next()) {\n            case XMLStreamConstants.START_ELEMENT:\n            case XMLStreamConstants.END_ELEMENT:\n            case XMLStreamConstants.END_DOCUMENT:\n                return text;\n                \n            case XMLStreamConstants.CHARACTERS:\n            case XMLStreamConstants.CDATA:\n                if (text == null) {\n                    text = _xmlReader.getText();\n                } else { \n                    text += _xmlReader.getText();\n                }\n                break;\n            default:\n                \n            }\n        }\n    }\n\n    private final int _skipUntilTag() throws XMLStreamException {\n        while (_xmlReader.hasNext()) {\n            int type;\n            switch (type = _xmlReader.next()) {\n            case XMLStreamConstants.START_ELEMENT:\n            case XMLStreamConstants.END_ELEMENT:\n            case XMLStreamConstants.END_DOCUMENT:\n                return type;\n            default:\n                \n            }\n        }\n        throw new IllegalStateException(\"Expected to find a tag, instead reached end of input\");\n    }\n    \n    \n    \n    private final int _initStartElement() throws XMLStreamException {\n        final String ns = _xmlReader.getNamespaceURI();\n        final String localName = _xmlReader.getLocalName();\n        _attributeCount = _xmlReader.getAttributeCount();\n        _nextAttributeIndex = 0;\n\n        \n        if (_currentWrapper != null) {\n            if (_currentWrapper.matchesWrapper(localName, ns)) {\n                _currentWrapper = _currentWrapper.intermediateWrapper();\n            } else {\n                \n                _localName = _currentWrapper.getWrapperLocalName();\n                _namespaceURI = _currentWrapper.getWrapperNamespace();\n                _currentWrapper = _currentWrapper.getParent();\n\n                \n                _nextLocalName = localName;\n                _nextNamespaceURI = ns;\n                _repeatElement = REPLAY_START_DELAYED;\n                return (_currentState = XML_END_ELEMENT);\n            }\n        }\n        _localName = localName;\n        _namespaceURI = ns;\n        return (_currentState = XML_START_ELEMENT);\n    }\n\n    \n    protected int _handleRepeatElement() throws IOException {\n        int type = _repeatElement;\n        _repeatElement = 0;\n        if (type == REPLAY_START_DUP) {\n\n            \n            _currentWrapper = _currentWrapper.intermediateWrapper();\n            return XML_START_ELEMENT;\n        }\n        if (type == REPLAY_END) {\n\n            _localName = _xmlReader.getLocalName();\n            _namespaceURI = _xmlReader.getNamespaceURI();\n            if (_currentWrapper != null) {\n                _currentWrapper = _currentWrapper.getParent();\n            }\n            return XML_END_ELEMENT;\n        }\n        if (type == REPLAY_START_DELAYED) {\n            if (_currentWrapper != null) {\n                _currentWrapper = _currentWrapper.intermediateWrapper();\n            }\n            _localName = _nextLocalName;\n            _namespaceURI = _nextNamespaceURI;\n            _nextLocalName = null;\n            _nextNamespaceURI = null;\n            \n\n\n            return XML_START_ELEMENT;\n        }\n        throw new IllegalStateException(\"Unrecognized type to repeat: \"+type);\n    }\n    \n    private final int _handleEndElement() {\n        if (_currentWrapper != null) {\n            ElementWrapper w = _currentWrapper;\n            \n            if (w.isMatching()) {\n                _repeatElement = REPLAY_END;\n                _localName = w.getWrapperLocalName();\n                _namespaceURI = w.getWrapperNamespace();\n                _currentWrapper = _currentWrapper.getParent();\n\n            } else {\n                _currentWrapper = _currentWrapper.getParent();\n            }\n        }\n        return (_currentState = XML_END_ELEMENT);\n    }\n    \n    private JsonLocation _extractLocation(XMLStreamLocation2 location) {\n        if (location == null) { \n            return new JsonLocation(_sourceReference, -1, -1, -1);\n        }\n        return new JsonLocation(_sourceReference,\n                location.getCharacterOffset(),\n                location.getLineNumber(),\n                location.getColumnNumber());\n    }\n\n\n    \n    \n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"(Token stream:\");\n        sb.append(\" state=\").append(_currentState);\n        sb.append(\" attr#=\").append(_attributeCount);\n        sb.append(\" nextAttr#=\").append(_nextAttributeIndex);\n        sb.append(\" name=\").append(_localName);\n        sb.append(\" text=\").append(_textValue);\n        sb.append(\" repeat?=\").append(_repeatElement);\n        sb.append(\" wrapper=[\").append(_currentWrapper);\n        sb.append(\"] repeatElement=\").append(_repeatElement);\n        sb.append(\" nextName=\").append(_nextLocalName);\n        sb.append(\")\");\n        return sb.toString();\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.dataformat.xml.deser;\n\nimport java.io.IOException;\nimport javax.xml.stream.*;\n\nimport org.codehaus.stax2.XMLStreamLocation2;\nimport org.codehaus.stax2.XMLStreamReader2;\nimport org.codehaus.stax2.ri.Stax2ReaderAdapter;\n\nimport com.fasterxml.jackson.core.JsonLocation;\nimport com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n\n\npublic class XmlTokenStream { public final static int XML_START_ELEMENT = 1; public final static int XML_END_ELEMENT = 2; public final static int XML_ATTRIBUTE_NAME = 3; public final static int XML_ATTRIBUTE_VALUE = 4; public final static int XML_TEXT = 5; public final static int XML_END = 6; private final static int REPLAY_START_DUP = 1; private final static int REPLAY_END = 2; private final static int REPLAY_START_DELAYED = 3; final protected XMLStreamReader2 _xmlReader; final protected Object _sourceReference; protected int _currentState; protected int _attributeCount; protected boolean _mixedText; protected int _nextAttributeIndex = 0; protected String _localName; protected String _namespaceURI; protected String _textValue; protected int _repeatElement; protected ElementWrapper _currentWrapper; protected String _nextLocalName; protected String _nextNamespaceURI; public XmlTokenStream(XMLStreamReader xmlReader, Object sourceRef) {\n        _sourceReference = sourceRef;\n        \n        if (xmlReader.getEventType() != XMLStreamConstants.START_ELEMENT) {\n            throw new IllegalArgumentException(\"Invalid XMLStreamReader passed: should be pointing to START_ELEMENT (\"\n                    +XMLStreamConstants.START_ELEMENT+\"), instead got \"+xmlReader.getEventType());\n        }\n        _xmlReader = Stax2ReaderAdapter.wrapIfNecessary(xmlReader);\n        _currentState = XML_START_ELEMENT;\n        _localName = _xmlReader.getLocalName();\n        _namespaceURI = _xmlReader.getNamespaceURI();\n        _attributeCount = _xmlReader.getAttributeCount();\n    }\n\n    public XMLStreamReader2 getXmlReader() {\n        return _xmlReader;\n    }\n\n    \n\n    \n    \n\n    public int next() throws IOException {\n        if (_repeatElement != 0) {\n            return (_currentState = _handleRepeatElement());\n        }\n        try {\n            return _next();\n        } catch (XMLStreamException e) {\n            StaxUtil.throwXmlAsIOException(e);\n            return -1;\n        }\n    }\n    \n    public void skipEndElement() throws IOException {\n        int type = next();\n        if (type != XML_END_ELEMENT) {\n            throw new IOException(\"Expected END_ELEMENT, got event of type \"+type);\n        }\n    }\n\n    public int getCurrentToken() { return _currentState; }\n\n    public String getText() { return _textValue; }\n    public String getLocalName() { return _localName; }\n    public String getNamespaceURI() { return _namespaceURI; }\n    public boolean hasAttributes() {\n        return (_currentState == XML_START_ELEMENT) && (_attributeCount > 0);\n    }\n    \n    public void closeCompletely() throws IOException {\n        try {\n            _xmlReader.closeCompletely();\n        } catch (XMLStreamException e) {\n            StaxUtil.throwXmlAsIOException(e);\n        }\n    }\n\n    public void close() throws IOException {\n        try {\n            _xmlReader.close();\n        } catch (XMLStreamException e) {\n            StaxUtil.throwXmlAsIOException(e);\n        }\n    }\n\n    public JsonLocation getCurrentLocation() {\n        return _extractLocation(_xmlReader.getLocationInfo().getCurrentLocation());\n    }\n    public JsonLocation getTokenLocation() {\n        return _extractLocation(_xmlReader.getLocationInfo().getStartLocation());\n    }\n\n    \n    \n    \n    protected void repeatStartElement() {\n\n        \n        if (_currentState != XML_START_ELEMENT) {\n            throw new IllegalStateException(\"Current state not XML_START_ELEMENT (\"\n                    +XML_START_ELEMENT+\") but \"+_currentState);\n        }\n        \n        if (_currentWrapper == null) {\n            _currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper, _localName, _namespaceURI);\n        } else {\n            _currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper.getParent(), _localName, _namespaceURI);\n        }\n        _repeatElement = REPLAY_START_DUP;\n    }\n\n    \n    protected void skipAttributes() {\n        if (_currentState == XML_ATTRIBUTE_NAME) {\n            _attributeCount = 0;\n            _currentState = XML_START_ELEMENT;\n        } else if (_currentState == XML_START_ELEMENT) {\n            \n\n        } else if (_currentState == XML_TEXT) {\n            ; \n        } else {\n            throw new IllegalStateException(\"Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (\"\n                    +XML_START_ELEMENT+\") but \"+_currentState);\n        }\n    }\n\n    protected String convertToString() throws IOException {\n        \n        if (_currentState != XML_ATTRIBUTE_NAME || _nextAttributeIndex != 0) {\n            return null;\n        }\n        try {\n            String text = _collectUntilTag();\n            \n            \n            if (_xmlReader.getEventType() == XMLStreamReader.END_ELEMENT) {\n                if (text == null) {\n                    text = \"\";\n                }\n                if (_currentWrapper != null) {\n                    _currentWrapper = _currentWrapper.getParent();\n                }\n                \n                _localName = _xmlReader.getLocalName();\n                _namespaceURI = _xmlReader.getNamespaceURI();\n                _attributeCount = 0;\n                _currentState = XML_TEXT;\n                _textValue = text;\n                return text;\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwXmlAsIOException(e);\n        }\n        \n        return null;\n    }\n\n    \n\n    private final int _next() throws XMLStreamException {\n        switch (_currentState) {\n        case XML_ATTRIBUTE_VALUE:\n            ++_nextAttributeIndex;\n            \n        case XML_START_ELEMENT: \n            if (_nextAttributeIndex < _attributeCount) {\n                _localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);\n                _namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);\n                _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);\n                return (_currentState = XML_ATTRIBUTE_NAME);\n            }\n            \n            String text = _collectUntilTag();\n            final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;\n            \n            if (startElementNext) {\n                if (text == null || _allWs(text)) {\n                    _mixedText = false;\n                    return _initStartElement();\n                }\n                _mixedText = true;\n                _textValue = text;\n                return (_currentState = XML_TEXT);\n            }\n            \n            if (text != null) {\n                _mixedText = false;\n                _textValue = text;\n                return (_currentState = XML_TEXT);\n            }\n            _mixedText = false;\n            return _handleEndElement();\n\n        case XML_ATTRIBUTE_NAME:\n            \n            return (_currentState = XML_ATTRIBUTE_VALUE);\n        case XML_TEXT:\n            \n            if (_mixedText){\n                _mixedText = false;\n                return _initStartElement();\n            }\n            \n            return _handleEndElement();\n        case XML_END:\n            return XML_END;\n\n        }\n\n        \n        switch (_skipUntilTag()) {\n        case XMLStreamConstants.END_DOCUMENT:\n            return (_currentState = XML_END);\n        case XMLStreamConstants.END_ELEMENT:\n            return _handleEndElement();\n        }\n        \n        return _initStartElement();\n    }\n    \n    private final String _collectUntilTag() throws XMLStreamException {\n        String text = null;\n        while (true) {\n            switch (_xmlReader.next()) {\n            case XMLStreamConstants.START_ELEMENT:\n            case XMLStreamConstants.END_ELEMENT:\n            case XMLStreamConstants.END_DOCUMENT:\n                return text;\n                \n            case XMLStreamConstants.CHARACTERS:\n            case XMLStreamConstants.CDATA:\n                if (text == null) {\n                    text = _xmlReader.getText();\n                } else { \n                    text += _xmlReader.getText();\n                }\n                break;\n            default:\n                \n            }\n        }\n    }\n\n    private final int _skipUntilTag() throws XMLStreamException {\n        while (_xmlReader.hasNext()) {\n            int type;\n            switch (type = _xmlReader.next()) {\n            case XMLStreamConstants.START_ELEMENT:\n            case XMLStreamConstants.END_ELEMENT:\n            case XMLStreamConstants.END_DOCUMENT:\n                return type;\n            default:\n                \n            }\n        }\n        throw new IllegalStateException(\"Expected to find a tag, instead reached end of input\");\n    }\n    \n    \n    \n    private final int _initStartElement() throws XMLStreamException {\n        final String ns = _xmlReader.getNamespaceURI();\n        final String localName = _xmlReader.getLocalName();\n        _attributeCount = _xmlReader.getAttributeCount();\n        _nextAttributeIndex = 0;\n\n        \n        if (_currentWrapper != null) {\n            if (_currentWrapper.matchesWrapper(localName, ns)) {\n                _currentWrapper = _currentWrapper.intermediateWrapper();\n            } else {\n                \n                _localName = _currentWrapper.getWrapperLocalName();\n                _namespaceURI = _currentWrapper.getWrapperNamespace();\n                _currentWrapper = _currentWrapper.getParent();\n\n                \n                _nextLocalName = localName;\n                _nextNamespaceURI = ns;\n                _repeatElement = REPLAY_START_DELAYED;\n                return (_currentState = XML_END_ELEMENT);\n            }\n        }\n        _localName = localName;\n        _namespaceURI = ns;\n        return (_currentState = XML_START_ELEMENT);\n    }\n\n    \n    protected int _handleRepeatElement() throws IOException {\n        int type = _repeatElement;\n        _repeatElement = 0;\n        if (type == REPLAY_START_DUP) {\n\n            \n            _currentWrapper = _currentWrapper.intermediateWrapper();\n            return XML_START_ELEMENT;\n        }\n        if (type == REPLAY_END) {\n\n            _localName = _xmlReader.getLocalName();\n            _namespaceURI = _xmlReader.getNamespaceURI();\n            if (_currentWrapper != null) {\n                _currentWrapper = _currentWrapper.getParent();\n            }\n            return XML_END_ELEMENT;\n        }\n        if (type == REPLAY_START_DELAYED) {\n            if (_currentWrapper != null) {\n                _currentWrapper = _currentWrapper.intermediateWrapper();\n            }\n            _localName = _nextLocalName;\n            _namespaceURI = _nextNamespaceURI;\n            _nextLocalName = null;\n            _nextNamespaceURI = null;\n            \n\n\n            return XML_START_ELEMENT;\n        }\n        throw new IllegalStateException(\"Unrecognized type to repeat: \"+type);\n    }\n    \n    private final int _handleEndElement() {\n        if (_currentWrapper != null) {\n            ElementWrapper w = _currentWrapper;\n            \n            if (w.isMatching()) {\n                _repeatElement = REPLAY_END;\n                _localName = w.getWrapperLocalName();\n                _namespaceURI = w.getWrapperNamespace();\n                _currentWrapper = _currentWrapper.getParent();\n\n            } else {\n                _currentWrapper = _currentWrapper.getParent();\n            }\n        }\n        return (_currentState = XML_END_ELEMENT);\n    }\n    \n    private JsonLocation _extractLocation(XMLStreamLocation2 location) {\n        if (location == null) { \n            return new JsonLocation(_sourceReference, -1, -1, -1);\n        }\n        return new JsonLocation(_sourceReference,\n                location.getCharacterOffset(),\n                location.getLineNumber(),\n                location.getColumnNumber());\n    }\n\n\n    protected boolean _allWs(String str) {\n        final int len = (str == null) ? 0 : str.length();\n        if (len > 0) {\n            for (int i = 0; i < len; ++i) {\n                if (str.charAt(i) > ' ') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    \n    \n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"(Token stream:\");\n        sb.append(\" state=\").append(_currentState);\n        sb.append(\" attr#=\").append(_attributeCount);\n        sb.append(\" nextAttr#=\").append(_nextAttributeIndex);\n        sb.append(\" name=\").append(_localName);\n        sb.append(\" text=\").append(_textValue);\n        sb.append(\" repeat?=\").append(_repeatElement);\n        sb.append(\" wrapper=[\").append(_currentWrapper);\n        sb.append(\"] repeatElement=\").append(_repeatElement);\n        sb.append(\" nextName=\").append(_nextLocalName);\n        sb.append(\")\");\n        return sb.toString();\n    }\n}\n",
      "buggy_signatures": [
        "public XMLStreamReader2 getXmlReader()",
        "public int next() throws IOException",
        "public void skipEndElement() throws IOException",
        "public int getCurrentToken()",
        "public String getText()",
        "public String getLocalName()",
        "public String getNamespaceURI()",
        "public boolean hasAttributes()",
        "public void closeCompletely() throws IOException",
        "public void close() throws IOException",
        "public JsonLocation getCurrentLocation()",
        "public JsonLocation getTokenLocation()",
        "protected void repeatStartElement()",
        "protected void skipAttributes()",
        "protected String convertToString() throws IOException",
        "private final int _next() throws XMLStreamException",
        "private final String _collectUntilTag() throws XMLStreamException",
        "private final int _skipUntilTag() throws XMLStreamException",
        "private final int _initStartElement() throws XMLStreamException",
        "protected int _handleRepeatElement() throws IOException",
        "private final int _handleEndElement()",
        "private JsonLocation _extractLocation(XMLStreamLocation2 location)",
        "public String toString()"
      ],
      "fixed_signatures": [
        "public XMLStreamReader2 getXmlReader()",
        "public int next() throws IOException",
        "public void skipEndElement() throws IOException",
        "public int getCurrentToken()",
        "public String getText()",
        "public String getLocalName()",
        "public String getNamespaceURI()",
        "public boolean hasAttributes()",
        "public void closeCompletely() throws IOException",
        "public void close() throws IOException",
        "public JsonLocation getCurrentLocation()",
        "public JsonLocation getTokenLocation()",
        "protected void repeatStartElement()",
        "protected void skipAttributes()",
        "protected String convertToString() throws IOException",
        "private final int _next() throws XMLStreamException",
        "private final String _collectUntilTag() throws XMLStreamException",
        "private final int _skipUntilTag() throws XMLStreamException",
        "private final int _initStartElement() throws XMLStreamException",
        "protected int _handleRepeatElement() throws IOException",
        "private final int _handleEndElement()",
        "private JsonLocation _extractLocation(XMLStreamLocation2 location)",
        "protected boolean _allWs(String str)",
        "public String toString()"
      ],
      "methods": [
        {
          "buggy_method": "  private final int _next() throws XMLStreamException {\n  switch (_currentState) {\n  case XML_ATTRIBUTE_VALUE:\n  ++_nextAttributeIndex;\n  \n  case XML_START_ELEMENT: \n  if (_nextAttributeIndex < _attributeCount) {\n  _localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);\n  _namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);\n  _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);\n  return (_currentState = XML_ATTRIBUTE_NAME);\n  }\n  \n  String text = _collectUntilTag();\n  \n  if (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {\n  return _initStartElement();\n  }\n  \n  if (text != null) {\n  _textValue = text;\n  return (_currentState = XML_TEXT);\n  }\n  return _handleEndElement();\n\n  case XML_ATTRIBUTE_NAME:\n  \n  return (_currentState = XML_ATTRIBUTE_VALUE);\n  case XML_TEXT:\n  \n  \n  return _handleEndElement();\n  case XML_END:\n  return XML_END;\n\n  }\n\n  \n  switch (_skipUntilTag()) {\n  case XMLStreamConstants.END_DOCUMENT:\n  return (_currentState = XML_END);\n  case XMLStreamConstants.END_ELEMENT:\n  return _handleEndElement();\n  }\n  \n  return _initStartElement();\n  }",
          "fixed_method": "  private final int _next() throws XMLStreamException {\n  switch (_currentState) {\n  case XML_ATTRIBUTE_VALUE:\n  ++_nextAttributeIndex;\n  \n  case XML_START_ELEMENT: \n  if (_nextAttributeIndex < _attributeCount) {\n  _localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);\n  _namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);\n  _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);\n  return (_currentState = XML_ATTRIBUTE_NAME);\n  }\n  \n  String text = _collectUntilTag();\n  final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;\n  \n  if (startElementNext) {\n  if (text == null || _allWs(text)) {\n  _mixedText = false;\n  return _initStartElement();\n  }\n  _mixedText = true;\n  _textValue = text;\n  return (_currentState = XML_TEXT);\n  }\n  \n  if (text != null) {\n  _mixedText = false;\n  _textValue = text;\n  return (_currentState = XML_TEXT);\n  }\n  _mixedText = false;\n  return _handleEndElement();\n\n  case XML_ATTRIBUTE_NAME:\n  \n  return (_currentState = XML_ATTRIBUTE_VALUE);\n  case XML_TEXT:\n  \n  if (_mixedText){\n  _mixedText = false;\n  return _initStartElement();\n  }\n  \n  return _handleEndElement();\n  case XML_END:\n  return XML_END;\n\n  }\n\n  \n  switch (_skipUntilTag()) {\n  case XMLStreamConstants.END_DOCUMENT:\n  return (_currentState = XML_END);\n  case XMLStreamConstants.END_ELEMENT:\n  return _handleEndElement();\n  }\n  \n  return _initStartElement();\n  }",
          "diff": [
            "@@ -321,15 +322,24 @@",
            "             }\n",
            "             // otherwise need to find START/END_ELEMENT or text\n",
            "             String text = _collectUntilTag();\n",
            "+            final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;\n",
            "             // If we have no/all-whitespace text followed by START_ELEMENT, ignore text\n",
            "-            if (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {\n",
            "+            if (startElementNext) {\n",
            "+                if (text == null || _allWs(text)) {\n",
            "+                    _mixedText = false;\n",
            "                     return _initStartElement();\n",
            "+                }\n",
            "+                _mixedText = true;\n",
            "+                _textValue = text;\n",
            "+                return (_currentState = XML_TEXT);\n",
            "             }\n",
            "             // For END_ELEMENT we will return text, if any\n",
            "             if (text != null) {\n",
            "+                _mixedText = false;\n",
            "                 _textValue = text;\n",
            "                 return (_currentState = XML_TEXT);\n",
            "             }\n",
            "+            _mixedText = false;\n",
            "             return _handleEndElement();\n",
            " \n",
            "         case XML_ATTRIBUTE_NAME:\n",
            "@@ -337,6 +347,10 @@",
            "             return (_currentState = XML_ATTRIBUTE_VALUE);\n",
            "         case XML_TEXT:\n",
            "             // mixed text with other elements\n",
            "+            if (_mixedText){\n",
            "+                _mixedText = false;\n",
            "+                return _initStartElement();\n",
            "+            }\n",
            "             // text followed by END_ELEMENT\n",
            "             return _handleEndElement();\n",
            "         case XML_END:\n"
          ],
          "changed_lines": 15
        },
        {
          "buggy_method": "  public String toString() {\n  StringBuilder sb = new StringBuilder();\n  sb.append(\"(Token stream:\");\n  sb.append(\" state=\").append(_currentState);\n  sb.append(\" attr#=\").append(_attributeCount);\n  sb.append(\" nextAttr#=\").append(_nextAttributeIndex);\n  sb.append(\" name=\").append(_localName);\n  sb.append(\" text=\").append(_textValue);\n  sb.append(\" repeat?=\").append(_repeatElement);\n  sb.append(\" wrapper=[\").append(_currentWrapper);\n  sb.append(\"] repeatElement=\").append(_repeatElement);\n  sb.append(\" nextName=\").append(_nextLocalName);\n  sb.append(\")\");\n  return sb.toString();\n  }",
          "fixed_method": "  protected boolean _allWs(String str) {\n  final int len = (str == null) ? 0 : str.length();\n  if (len > 0) {\n  for (int i = 0; i < len; ++i) {\n  if (str.charAt(i) > ' ') {\n  return false;\n  }\n  }\n  }\n  return true;\n  }",
          "diff": [
            "@@ -503,6 +517,18 @@",
            "     }\n",
            " \n",
            " \n",
            "+    protected boolean _allWs(String str)\n",
            "+    {\n",
            "+        final int len = (str == null) ? 0 : str.length();\n",
            "+        if (len > 0) {\n",
            "+            for (int i = 0; i < len; ++i) {\n",
            "+                if (str.charAt(i) > ' ') {\n",
            "+                    return false;\n",
            "+                }\n",
            "+            }\n",
            "+        }\n",
            "+        return true;\n",
            "+    }\n",
            "     \n",
            "     // for DEBUGGING\n",
            "     @Override\n"
          ],
          "changed_lines": 12
        }
      ]
    }
  ]
}
