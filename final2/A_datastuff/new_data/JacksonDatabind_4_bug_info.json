{
  "bug_id": "4",
  "failed_tests": {
    "com.fasterxml.jackson.databind.deser.TestCollectionDeserialization": [
      {
        "methodName": "testArrayIndexForExceptions",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<1> but was:<0>",
        "fail_line": "            assertEquals(1, refs.size());",
        "test_source": "  public void testArrayIndexForExceptions() throws Exception {\n  final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n  try {\n  MAPPER.readValue(OBJECTS_JSON, Key[].class);\n  fail(\"Should not pass\");\n  } catch (JsonMappingException e) {\n  verifyException(e, \"Can not deserialize\");\n  List<JsonMappingException.Reference> refs = e.getPath();\n  assertEquals(1, refs.size());\n  assertEquals(1, refs.get(0).getIndex());\n  }\n\n  try {\n  MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n  fail(\"Should not pass\");\n  } catch (JsonMappingException e) {\n  verifyException(e, \"Can not deserialize\");\n  List<JsonMappingException.Reference> refs = e.getPath();\n  assertEquals(1, refs.size());\n  assertEquals(1, refs.get(0).getIndex());\n  }\n\n  try {\n  MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n  fail(\"Should not pass\");\n  } catch (JsonMappingException e) {\n  verifyException(e, \"Can not deserialize\");\n  List<JsonMappingException.Reference> refs = e.getPath();\n  assertEquals(2, refs.size());\n  // Bean has no index, but has name:\n  assertEquals(-1, refs.get(0).getIndex());\n  assertEquals(\"keys\", refs.get(0).getFieldName());\n\n  // and for List, reverse:\n  assertEquals(1, refs.get(1).getIndex());\n  assertNull(refs.get(1).getFieldName());\n  }\n  }",
        "stack": [
          "TestCollectionDeserialization.testArrayIndexForExceptions line 224"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.std;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\nimport com.fasterxml.jackson.databind.deser.ContextualDeserializer;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.ObjectBuffer;\n\n\n@JacksonStdImpl\npublic final class StringArrayDeserializer extends StdDeserializer<String[]> implements ContextualDeserializer { private static final long serialVersionUID = -7589512013334920693L; public final static StringArrayDeserializer instance = new StringArrayDeserializer(); protected JsonDeserializer<String> _elementDeserializer; public StringArrayDeserializer() {\n        super(String[].class);\n        _elementDeserializer = null;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected StringArrayDeserializer(JsonDeserializer<?> deser) {\n        super(String[].class);\n        _elementDeserializer = (JsonDeserializer<String>) deser;\n    }\n   \n    @Override\n    public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        \n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt);\n        }\n        if (_elementDeserializer != null) {\n            return _deserializeCustom(jp, ctxt);\n        }\n\n        final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n        Object[] chunk = buffer.resetAndStart();\n\n        int ix = 0;\n        JsonToken t;\n\n            while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n                \n                String value;\n                if (t == JsonToken.VALUE_STRING) {\n                    value = jp.getText();\n                } else if (t == JsonToken.VALUE_NULL) {\n                    value = null; \n                } else {\n                    value = _parseString(jp, ctxt);\n                }\n                if (ix >= chunk.length) {\n                    chunk = buffer.appendCompletedChunk(chunk);\n                    ix = 0;\n                }\n                chunk[ix++] = value;\n            }\n            \n        String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n        ctxt.returnObjectBuffer(buffer);\n        return result;\n    }\n\n    \n    protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n        Object[] chunk = buffer.resetAndStart();\n        final JsonDeserializer<String> deser = _elementDeserializer;\n        \n        int ix = 0;\n        JsonToken t;\n\n            while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n                \n                String value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n                if (ix >= chunk.length) {\n                    chunk = buffer.appendCompletedChunk(chunk);\n                    ix = 0;\n                }\n                chunk[ix++] = value;\n            }\n            \n        String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n        ctxt.returnObjectBuffer(buffer);\n        return result;\n    }\n    \n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n        return typeDeserializer.deserializeTypedFromArray(jp, ctxt);\n    }\n\n    private final String[] handleNonArray(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        \n        if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)) {\n            \n            if ((jp.getCurrentToken() == JsonToken.VALUE_STRING)\n                    && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                String str = jp.getText();\n                if (str.length() == 0) {\n                    return null;\n                }\n            }\n            throw ctxt.mappingException(_valueClass);\n        }\n        return new String[] { (jp.getCurrentToken() == JsonToken.VALUE_NULL) ? null : _parseString(jp, ctxt) };\n    }\n\n    \n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n        JsonDeserializer<?> deser = _elementDeserializer;\n        \n        deser = findConvertingContentDeserializer(ctxt, property, deser);\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n        } else { \n            deser = ctxt.handleSecondaryContextualization(deser, property);\n        }\n        \n        if (deser != null && this.isDefaultDeserializer(deser)) {\n            deser = null;\n        }\n        if (_elementDeserializer != deser) {\n            return new StringArrayDeserializer(deser);\n        }\n        return this;\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.std;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\nimport com.fasterxml.jackson.databind.deser.ContextualDeserializer;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.ObjectBuffer;\n\n\n@JacksonStdImpl\npublic final class StringArrayDeserializer extends StdDeserializer<String[]> implements ContextualDeserializer { private static final long serialVersionUID = -7589512013334920693L; public final static StringArrayDeserializer instance = new StringArrayDeserializer(); protected JsonDeserializer<String> _elementDeserializer; public StringArrayDeserializer() {\n        super(String[].class);\n        _elementDeserializer = null;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected StringArrayDeserializer(JsonDeserializer<?> deser) {\n        super(String[].class);\n        _elementDeserializer = (JsonDeserializer<String>) deser;\n    }\n   \n    @Override\n    public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        \n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt);\n        }\n        if (_elementDeserializer != null) {\n            return _deserializeCustom(jp, ctxt);\n        }\n\n        final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n        Object[] chunk = buffer.resetAndStart();\n\n        int ix = 0;\n        JsonToken t;\n\n        try {\n            while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n                \n                String value;\n                if (t == JsonToken.VALUE_STRING) {\n                    value = jp.getText();\n                } else if (t == JsonToken.VALUE_NULL) {\n                    value = null; \n                } else {\n                    value = _parseString(jp, ctxt);\n                }\n                if (ix >= chunk.length) {\n                    chunk = buffer.appendCompletedChunk(chunk);\n                    ix = 0;\n                }\n                chunk[ix++] = value;\n            }\n        } catch (Exception e) {\n            \n            throw JsonMappingException.wrapWithPath(e, String.class, ix);\n        }\n        String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n        ctxt.returnObjectBuffer(buffer);\n        return result;\n    }\n\n    \n    protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n        Object[] chunk = buffer.resetAndStart();\n        final JsonDeserializer<String> deser = _elementDeserializer;\n        \n        int ix = 0;\n        JsonToken t;\n\n        try {\n            while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n                \n                String value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n                if (ix >= chunk.length) {\n                    chunk = buffer.appendCompletedChunk(chunk);\n                    ix = 0;\n                }\n                chunk[ix++] = value;\n            }\n        } catch (Exception e) {\n            \n            throw JsonMappingException.wrapWithPath(e, String.class, ix);\n        }\n        String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n        ctxt.returnObjectBuffer(buffer);\n        return result;\n    }\n    \n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n        return typeDeserializer.deserializeTypedFromArray(jp, ctxt);\n    }\n\n    private final String[] handleNonArray(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        \n        if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)) {\n            \n            if ((jp.getCurrentToken() == JsonToken.VALUE_STRING)\n                    && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                String str = jp.getText();\n                if (str.length() == 0) {\n                    return null;\n                }\n            }\n            throw ctxt.mappingException(_valueClass);\n        }\n        return new String[] { (jp.getCurrentToken() == JsonToken.VALUE_NULL) ? null : _parseString(jp, ctxt) };\n    }\n\n    \n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n        JsonDeserializer<?> deser = _elementDeserializer;\n        \n        deser = findConvertingContentDeserializer(ctxt, property, deser);\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n        } else { \n            deser = ctxt.handleSecondaryContextualization(deser, property);\n        }\n        \n        if (deser != null && this.isDefaultDeserializer(deser)) {\n            deser = null;\n        }\n        if (_elementDeserializer != deser) {\n            return new StringArrayDeserializer(deser);\n        }\n        return this;\n    }\n}\n",
      "buggy_signatures": [
        "protected StringArrayDeserializer(JsonDeserializer<?> deser)",
        "public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException",
        "protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException",
        "public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException",
        "private final String[] handleNonArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
        "public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException"
      ],
      "fixed_signatures": [
        "protected StringArrayDeserializer(JsonDeserializer<?> deser)",
        "public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException",
        "protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException",
        "public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException",
        "private final String[] handleNonArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
        "public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException"
      ],
      "methods": [
        {
          "buggy_method": "  public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n  \n  if (!jp.isExpectedStartArrayToken()) {\n  return handleNonArray(jp, ctxt);\n  }\n  if (_elementDeserializer != null) {\n  return _deserializeCustom(jp, ctxt);\n  }\n\n  final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n  Object[] chunk = buffer.resetAndStart();\n\n  int ix = 0;\n  JsonToken t;\n\n  while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n  \n  String value;\n  if (t == JsonToken.VALUE_STRING) {\n  value = jp.getText();\n  } else if (t == JsonToken.VALUE_NULL) {\n  value = null; \n  } else {\n  value = _parseString(jp, ctxt);\n  }\n  if (ix >= chunk.length) {\n  chunk = buffer.appendCompletedChunk(chunk);\n  ix = 0;\n  }\n  chunk[ix++] = value;\n  }\n  \n  String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n  ctxt.returnObjectBuffer(buffer);\n  return result;\n  }",
          "fixed_method": "  public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n  \n  if (!jp.isExpectedStartArrayToken()) {\n  return handleNonArray(jp, ctxt);\n  }\n  if (_elementDeserializer != null) {\n  return _deserializeCustom(jp, ctxt);\n  }\n\n  final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n  Object[] chunk = buffer.resetAndStart();\n\n  int ix = 0;\n  JsonToken t;\n\n  try {\n  while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n  \n  String value;\n  if (t == JsonToken.VALUE_STRING) {\n  value = jp.getText();\n  } else if (t == JsonToken.VALUE_NULL) {\n  value = null; \n  } else {\n  value = _parseString(jp, ctxt);\n  }\n  if (ix >= chunk.length) {\n  chunk = buffer.appendCompletedChunk(chunk);\n  ix = 0;\n  }\n  chunk[ix++] = value;\n  }\n  } catch (Exception e) {\n  \n  throw JsonMappingException.wrapWithPath(e, String.class, ix);\n  }\n  String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n  ctxt.returnObjectBuffer(buffer);\n  return result;\n  }",
          "diff": [
            "@@ -56,6 +56,7 @@",
            "         int ix = 0;\n",
            "         JsonToken t;\n",
            " \n",
            "+        try {\n",
            "             while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n",
            "                 // Ok: no need to convert Strings, but must recognize nulls\n",
            "                 String value;\n",
            "@@ -72,7 +73,10 @@",
            "                 }\n",
            "                 chunk[ix++] = value;\n",
            "             }\n",
            "+        } catch (Exception e) {\n",
            "             // note: pass String.class, not String[].class, as we need element type for error info\n",
            "+            throw JsonMappingException.wrapWithPath(e, String.class, ix);\n",
            "+        }\n",
            "         String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n",
            "         ctxt.returnObjectBuffer(buffer);\n",
            "         return result;\n"
          ],
          "changed_lines": 4
        },
        {
          "buggy_method": "  protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException {\n  final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n  Object[] chunk = buffer.resetAndStart();\n  final JsonDeserializer<String> deser = _elementDeserializer;\n  \n  int ix = 0;\n  JsonToken t;\n\n  while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n  \n  String value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n  if (ix >= chunk.length) {\n  chunk = buffer.appendCompletedChunk(chunk);\n  ix = 0;\n  }\n  chunk[ix++] = value;\n  }\n  \n  String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n  ctxt.returnObjectBuffer(buffer);\n  return result;\n  }",
          "fixed_method": "  protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException {\n  final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n  Object[] chunk = buffer.resetAndStart();\n  final JsonDeserializer<String> deser = _elementDeserializer;\n  \n  int ix = 0;\n  JsonToken t;\n\n  try {\n  while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n  \n  String value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n  if (ix >= chunk.length) {\n  chunk = buffer.appendCompletedChunk(chunk);\n  ix = 0;\n  }\n  chunk[ix++] = value;\n  }\n  } catch (Exception e) {\n  \n  throw JsonMappingException.wrapWithPath(e, String.class, ix);\n  }\n  String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n  ctxt.returnObjectBuffer(buffer);\n  return result;\n  }",
          "diff": [
            "@@ -90,6 +94,7 @@",
            "         int ix = 0;\n",
            "         JsonToken t;\n",
            " \n",
            "+        try {\n",
            "             while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n",
            "                 // Ok: no need to convert Strings, but must recognize nulls\n",
            "                 String value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n",
            "@@ -99,7 +104,10 @@",
            "                 }\n",
            "                 chunk[ix++] = value;\n",
            "             }\n",
            "+        } catch (Exception e) {\n",
            "             // note: pass String.class, not String[].class, as we need element type for error info\n",
            "+            throw JsonMappingException.wrapWithPath(e, String.class, ix);\n",
            "+        }\n",
            "         String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n",
            "         ctxt.returnObjectBuffer(buffer);\n",
            "         return result;\n"
          ],
          "changed_lines": 4
        }
      ]
    }
  ]
}
