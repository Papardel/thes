{
  "bug_id": "Time_18_bug_info",
  "results": [
    {
      "prompt_index": 1,
      "prompt": "IMPORTANT: You must reply _exactly_ in this form: \nRESPONSE: <fully-qualified-class-name>\n -and nothing else. No extra text, no newlines before/after, no explanations.Bug ID: 18\nTest Class: org.joda.time.chrono.TestGJChronology\nMethod: testLeapYearRulesConstruction\nError: org.joda.time.IllegalFieldValueException\nMessage: Value 29 for dayOfMonth must be in the range [1,28]\nFailing Line:         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\nTest Source:\npublic void testLeapYearRulesConstruction() {\n  \n  DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n  assertEquals(dt.getYear(), 1500);\n  assertEquals(dt.getMonthOfYear(), 2);\n  assertEquals(dt.getDayOfMonth(), 29);\n  }\nStack Trace:\nFieldUtils.verifyValueBounds line 235, BasicChronology.getDateMidnightMillis line 605, BasicChronology.getDateTimeMillis line 177, GregorianChronology.getDateTimeMillis line 45, GJChronology.getDateTimeMillis line 365, BaseDateTime.<init> line 254, DateMidnight.<init> line 343, TestGJChronology.testLeapYearRulesConstruction line 496\n\nReturn **only** the fully-qualified Java *source* class that contains the bug.\nDo **not** return:\n- the test class itself (e.g. com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdWithEnum1328Test),\n- any class whose simple name starts or ends with Test, Tests, TestUtil, TestUtils, or TestHelper,\n- any test-utility class such as org.junit.Assert or org.junit.jupiter.api.Assertions.\n",
      "response": "- Any third-party library class.\n- The source class is not the one causing the error; it's a dependency of the failing class.\n\n**Note:** If you're unsure about the exact source class causing the issue, consider using tools like `grep`, `awk`, `sed`, or similar to search through your project's codebase. However, do not post entire files here. Just mention the file path if necessary. \n\n```java\npublic class DateMidnight {\n    private final int year;\n    private final int monthOfYear;\n    private final int dayOfMonth;\n\n    public DateMidnight(int year, int monthOfYear, int dayOfMonth, Chronology chronology) {\n        FieldUtils.verifyValueBounds(\"dayOfMonth\", dayOfMonth, 1, chronology.dayOfMonth().getMaximumValue(year, monthOfYear));\n        this.year = year;\n        this.monthOfYear = monthOfYear;\n        this.dayOfMonth = dayOfMonth;\n    }\n\n    // Getters and other methods\n}\n```\n\nRESPONSE: org.joda.time.DateMidnight"
    }
  ]
}