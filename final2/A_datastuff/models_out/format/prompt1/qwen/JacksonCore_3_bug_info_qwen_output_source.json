{
  "bug_id": "JacksonCore_3_bug_info",
  "results": [
    {
      "prompt_index": 1,
      "prompt": "IMPORTANT: You must reply _exactly_ in this form: \nRESPONSE: <fully-qualified-class-name>\n -and nothing else. No extra text, no newlines before/after, no explanations.Bug ID: 3\nTest Class: com.fasterxml.jackson.core.json.TestLocation\nMethod: testOffsetWithInputOffset\nError: junit.framework.AssertionFailedError\nMessage: expected:<0> but was:<3>\nFailing Line:         assertEquals(0L, loc.getByteOffset());\nTest Source:\npublic void testOffsetWithInputOffset() throws Exception {\n  final JsonFactory f = new JsonFactory();\n  JsonLocation loc;\n  JsonParser p;\n  \n  byte[] b = \"  { }  \".getBytes(\"UTF-8\");\n\n  \n  p = f.createParser(b, 3, b.length-5);\n  assertToken(JsonToken.START_OBJECT, p.nextToken());\n\n  loc = p.getTokenLocation();\n  assertEquals(0L, loc.getByteOffset());\n  assertEquals(-1L, loc.getCharOffset());\n  assertEquals(1, loc.getLineNr());\n  assertEquals(1, loc.getColumnNr());\n  \n  loc = p.getCurrentLocation();\n  assertEquals(1L, loc.getByteOffset());\n  assertEquals(-1L, loc.getCharOffset());\n  assertEquals(1, loc.getLineNr());\n  assertEquals(2, loc.getColumnNr());\n\n  p.close();\n  }\nStack Trace:\nTestLocation.testOffsetWithInputOffset line 68\n\nReturn **only** the fully-qualified Java *source* class that contains the bug.\nDo **not** return:\n- the test class itself (e.g. com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdWithEnum1328Test),\n- any class whose simple name starts or ends with Test, Tests, TestUtil, TestUtils, or TestHelper,\n- any test-utility class such as org.junit.Assert or org.junit.jupiter.api.Assertions.\n",
      "response": "```java\npackage com.fasterxml.jackson.core.json;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonLocation;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\n\npublic class TestLocation {\n\n    public void testOffsetWithInputOffset() throws Exception {\n        final JsonFactory f = new JsonFactory();\n        JsonLocation loc;\n        JsonParser p;\n\n        byte[] b = \"  { }  \".getBytes(\"UTF-8\");\n\n        p = f.createParser(b, 3, b.length-5);\n        assertToken(JsonToken.START_OBJECT, p.nextToken());\n\n        loc = p.getTokenLocation();\n        assertEquals(0L, loc.getByteOffset()); // Expected 0, actual 3\n        assertEquals(-1L, loc.getCharOffset());\n        assertEquals(1, loc.getLineNr());\n        assertEquals(1, loc.getColumnNr());\n\n        loc = p.getCurrentLocation();\n        assertEquals(1L, loc.getByteOffset());\n        assertEquals(-1L, loc.getCharOffset());\n        assertEquals(1, loc.getLineNr());\n        assertEquals(2, loc.getColumnNr());\n\n        p.close();\n    }\n\n    private void assertToken(JsonToken token, JsonParser p) throws IOException {\n        JsonToken t = p.nextToken();\n        if (t != token) {\n            throw new AssertionError(\"Expected token \" + token + \", but got \" + t);\n        }\n    }\n}\n```\n\n```java\npackage com.fasterxml.jackson.core;\n\npublic class JsonLocation {\n    private long byteOffset;\n    private long charOffset;\n    private int lineNr;\n    private int columnNr;\n\n    public JsonLocation(long byteOffset, long charOffset, int lineNr, int columnNr) {\n        this.byteOffset = byteOffset;\n        this.charOffset = charOffset;\n        this.lineNr = lineNr;\n        this.columnNr = columnNr;\n    }\n\n    public long getByteOffset() {\n        return byteOffset;\n    }\n\n    public long getCharOffset() {\n        return charOffset;\n    }\n\n    public int getLineNr() {\n        return lineNr;\n    }\n\n    public int getColumnNr() {\n        return columnNr;\n    }\n\n    public static JsonLocation build(int lineNr, int colNr, long totalBytes, long totalChars) {\n        return new JsonLocation(totalBytes, totalChars, lineNr, colNr);\n    }\n}\n```\n```java\npackage com.fasterxml.jackson.core;\n\npublic class JsonFactory {\n    public JsonParser createParser(byte"
    }
  ]
}