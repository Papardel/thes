{
  "bug_id": "93",
  "failed_tests": {
    "org.jsoup.nodes.FormElementTest": [
      {
        "methodName": "createsFormData",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<6> but was:<7>",
        "fail_line": "        assertEquals(6, data.size());",
        "test_source": "",
        "stack": [
          "FormElementTest.createsFormData line 39"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jsoup/nodes/FormElement.java",
      "buggy_full_code": "package org.jsoup.nodes;\n\nimport org.jsoup.Connection;\nimport org.jsoup.Jsoup;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class FormElement extends Element { private final Elements elements = new Elements(); public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    \n    public Elements elements() {\n        return elements;\n    }\n\n    \n    public FormElement addElement(Element element) {\n        elements.add(element);\n        return this;\n    }\n\n    @Override\n    protected void removeChild(Node out) {\n        super.removeChild(out);\n        elements.remove(out);\n    }\n\n    \n    public Connection submit() {\n        String action = hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\n        Validate.notEmpty(action, \"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\");\n        Connection.Method method = attr(\"method\").toUpperCase().equals(\"POST\") ?\n                Connection.Method.POST : Connection.Method.GET;\n\n        return Jsoup.connect(action)\n                .data(formData())\n                .method(method);\n    }\n\n    \n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        \n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; \n            if (el.hasAttr(\"disabled\")) continue; \n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n\n            if (\"select\".equals(el.normalName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                \n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n}\n",
      "fixed_full_code": "package org.jsoup.nodes;\n\nimport org.jsoup.Connection;\nimport org.jsoup.Jsoup;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class FormElement extends Element { private final Elements elements = new Elements(); public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    \n    public Elements elements() {\n        return elements;\n    }\n\n    \n    public FormElement addElement(Element element) {\n        elements.add(element);\n        return this;\n    }\n\n    @Override\n    protected void removeChild(Node out) {\n        super.removeChild(out);\n        elements.remove(out);\n    }\n\n    \n    public Connection submit() {\n        String action = hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\n        Validate.notEmpty(action, \"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\");\n        Connection.Method method = attr(\"method\").toUpperCase().equals(\"POST\") ?\n                Connection.Method.POST : Connection.Method.GET;\n\n        return Jsoup.connect(action)\n                .data(formData())\n                .method(method);\n    }\n\n    \n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        \n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; \n            if (el.hasAttr(\"disabled\")) continue; \n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (type.equalsIgnoreCase(\"button\")) continue; \n\n            if (\"select\".equals(el.normalName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                \n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n}\n",
      "buggy_signatures": [
        "public Elements elements()",
        "public FormElement addElement(Element element)",
        "protected void removeChild(Node out)",
        "public Connection submit()",
        "public List<Connection.KeyVal> formData()"
      ],
      "fixed_signatures": [
        "public Elements elements()",
        "public FormElement addElement(Element element)",
        "protected void removeChild(Node out)",
        "public Connection submit()",
        "public List<Connection.KeyVal> formData()"
      ],
      "methods": [
        {
          "buggy_method": "  public List<Connection.KeyVal> formData() {\n  ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n  \n  for (Element el: elements) {\n  if (!el.tag().isFormSubmittable()) continue; \n  if (el.hasAttr(\"disabled\")) continue; \n  String name = el.attr(\"name\");\n  if (name.length() == 0) continue;\n  String type = el.attr(\"type\");\n\n\n  if (\"select\".equals(el.normalName())) {\n  Elements options = el.select(\"option[selected]\");\n  boolean set = false;\n  for (Element option: options) {\n  data.add(HttpConnection.KeyVal.create(name, option.val()));\n  set = true;\n  }\n  if (!set) {\n  Element option = el.select(\"option\").first();\n  if (option != null)\n  data.add(HttpConnection.KeyVal.create(name, option.val()));\n  }\n  } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n  \n  if (el.hasAttr(\"checked\")) {\n  final String val = el.val().length() >  0 ? el.val() : \"on\";\n  data.add(HttpConnection.KeyVal.create(name, val));\n  }\n  } else {\n  data.add(HttpConnection.KeyVal.create(name, el.val()));\n  }\n  }\n  return data;\n  }",
          "fixed_method": "  public List<Connection.KeyVal> formData() {\n  ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n  \n  for (Element el: elements) {\n  if (!el.tag().isFormSubmittable()) continue; \n  if (el.hasAttr(\"disabled\")) continue; \n  String name = el.attr(\"name\");\n  if (name.length() == 0) continue;\n  String type = el.attr(\"type\");\n\n  if (type.equalsIgnoreCase(\"button\")) continue; \n\n  if (\"select\".equals(el.normalName())) {\n  Elements options = el.select(\"option[selected]\");\n  boolean set = false;\n  for (Element option: options) {\n  data.add(HttpConnection.KeyVal.create(name, option.val()));\n  set = true;\n  }\n  if (!set) {\n  Element option = el.select(\"option\").first();\n  if (option != null)\n  data.add(HttpConnection.KeyVal.create(name, option.val()));\n  }\n  } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n  \n  if (el.hasAttr(\"checked\")) {\n  final String val = el.val().length() >  0 ? el.val() : \"on\";\n  data.add(HttpConnection.KeyVal.create(name, val));\n  }\n  } else {\n  data.add(HttpConnection.KeyVal.create(name, el.val()));\n  }\n  }\n  return data;\n  }",
          "diff": [
            "@@ -86,6 +86,7 @@",
            "             if (name.length() == 0) continue;\n",
            "             String type = el.attr(\"type\");\n",
            " \n",
            "+            if (type.equalsIgnoreCase(\"button\")) continue; // browsers don't submit these\n",
            " \n",
            "             if (\"select\".equals(el.normalName())) {\n",
            "                 Elements options = el.select(\"option[selected]\");\n"
          ],
          "changed_lines": 1
        }
      ]
    }
  ]
}
