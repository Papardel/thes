{
  "bug_id": "23",
  "failed_tests": {
    "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests": [
      {
        "methodName": "testEquals",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertFalse(r1.equals(r2));",
        "test_source": "  public void testEquals() {\n  MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n  MinMaxCategoryRenderer r2 = new MinMaxCategoryRenderer();\n  assertEquals(r1, r2);\n  \n  r1.setDrawLines(true);\n  assertFalse(r1.equals(r2));\n  r2.setDrawLines(true);\n  assertTrue(r1.equals(r2));\n  \n  r1.setGroupPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n  Color.yellow));\n  assertFalse(r1.equals(r2));\n  r2.setGroupPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n  Color.yellow));\n  assertTrue(r1.equals(r2));\n  \n  r1.setGroupStroke(new BasicStroke(1.2f));\n  assertFalse(r1.equals(r2));\n  r2.setGroupStroke(new BasicStroke(1.2f));\n  assertTrue(r1.equals(r2));\n  }",
        "stack": [
          "MinMaxCategoryRendererTests.testEquals line 99"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
      "buggy_full_code": "\n\npackage org.jfree.chart.renderer.category;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Paint;\nimport java.awt.Shape;\nimport java.awt.Stroke;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\nimport javax.swing.Icon;\n\nimport org.jfree.chart.axis.CategoryAxis;\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.chart.entity.EntityCollection;\nimport org.jfree.chart.event.RendererChangeEvent;\nimport org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.util.PaintUtilities;\nimport org.jfree.chart.util.SerialUtilities;\nimport org.jfree.data.category.CategoryDataset;\n\n\npublic class MinMaxCategoryRenderer extends AbstractCategoryItemRenderer { private static final long serialVersionUID = 2935615937671064911L; private boolean plotLines = false; private transient Paint groupPaint = Color.black; private transient Stroke groupStroke = new BasicStroke(1.0f); private transient Icon minIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0, 360, Arc2D.OPEN), null, Color.black); private transient Icon maxIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0, 360, Arc2D.OPEN), null, Color.black); private transient Icon objectIcon = getIcon(new Line2D.Double(-4, 0, 4, 0), false, true); private int lastCategory = -1; private double min; private double max; public MinMaxCategoryRenderer() {\n        super();\n    }\n\n    \n    public boolean isDrawLines() {\n        return this.plotLines;\n    }\n\n    \n    public void setDrawLines(boolean draw) {\n        if (this.plotLines != draw) {\n            this.plotLines = draw;\n            this.notifyListeners(new RendererChangeEvent(this));\n        }\n        \n    }\n\n    \n    public Paint getGroupPaint() {\n        return this.groupPaint;\n    }\n\n    \n    public void setGroupPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.groupPaint = paint;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n\n    \n    public Stroke getGroupStroke() {\n        return this.groupStroke;\n    }\n\n    \n    public void setGroupStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.groupStroke = stroke;\n        notifyListeners(new RendererChangeEvent(this));        \n    }\n\n    \n    public Icon getObjectIcon() {\n        return this.objectIcon;\n    }\n\n    \n    public void setObjectIcon(Icon icon) {\n        if (icon == null) {\n            throw new IllegalArgumentException(\"Null 'icon' argument.\");\n        }\n        this.objectIcon = icon;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n\n    \n    public Icon getMaxIcon() {\n        return this.maxIcon;\n    }\n\n    \n    public void setMaxIcon(Icon icon) {\n        if (icon == null) {\n            throw new IllegalArgumentException(\"Null 'icon' argument.\");\n        }\n        this.maxIcon = icon;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n\n    \n    public Icon getMinIcon() {\n        return this.minIcon;\n    }\n\n    \n    public void setMinIcon(Icon icon) {\n        if (icon == null) {\n            throw new IllegalArgumentException(\"Null 'icon' argument.\");\n        }\n        this.minIcon = icon;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n\n    \n    public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, int pass) {\n\n        \n        Number value = dataset.getValue(row, column);\n        if (value != null) {\n            \n            double x1 = domainAxis.getCategoryMiddle(column, getColumnCount(), \n                    dataArea, plot.getDomainAxisEdge());\n            double y1 = rangeAxis.valueToJava2D(value.doubleValue(), dataArea, \n                    plot.getRangeAxisEdge());\n            g2.setPaint(getItemPaint(row, column));\n            g2.setStroke(getItemStroke(row, column));\n            Shape shape = null;\n            shape = new Rectangle2D.Double(x1 - 4, y1 - 4, 8.0, 8.0);\n            \n            PlotOrientation orient = plot.getOrientation();\n            if (orient == PlotOrientation.VERTICAL) {\n                this.objectIcon.paintIcon(null, g2, (int) x1, (int) y1);\n            }\n            else {\n                this.objectIcon.paintIcon(null, g2, (int) y1, (int) x1);                \n            }\n            \n            if (this.lastCategory == column) {\n                if (this.min > value.doubleValue()) {\n                    this.min = value.doubleValue();\n                }\n                if (this.max < value.doubleValue()) {\n                    this.max = value.doubleValue();\n                }\n                \n                \n                if (dataset.getRowCount() - 1 == row) {\n                    g2.setPaint(this.groupPaint);\n                    g2.setStroke(this.groupStroke);\n                    double minY = rangeAxis.valueToJava2D(this.min, dataArea, \n                            plot.getRangeAxisEdge());\n                    double maxY = rangeAxis.valueToJava2D(this.max, dataArea, \n                            plot.getRangeAxisEdge());\n                    \n                    if (orient == PlotOrientation.VERTICAL) {\n                        g2.draw(new Line2D.Double(x1, minY, x1, maxY));\n                        this.minIcon.paintIcon(null, g2, (int) x1, (int) minY);\n                        this.maxIcon.paintIcon(null, g2, (int) x1, (int) maxY);\n                    }\n                    else {\n                        g2.draw(new Line2D.Double(minY, x1, maxY, x1));\n                        this.minIcon.paintIcon(null, g2, (int) minY, (int) x1);\n                        this.maxIcon.paintIcon(null, g2, (int) maxY, (int) x1);                        \n                    }\n                }\n            }\n            else {  \n                this.lastCategory = column;\n                this.min = value.doubleValue();\n                this.max = value.doubleValue();\n            }\n            \n            \n            if (this.plotLines) {\n                if (column != 0) {\n                    Number previousValue = dataset.getValue(row, column - 1);\n                    if (previousValue != null) {\n                        \n                        double previous = previousValue.doubleValue();\n                        double x0 = domainAxis.getCategoryMiddle(column - 1, \n                                getColumnCount(), dataArea,\n                                plot.getDomainAxisEdge());\n                        double y0 = rangeAxis.valueToJava2D(previous, dataArea,\n                                plot.getRangeAxisEdge());\n                        g2.setPaint(getItemPaint(row, column));\n                        g2.setStroke(getItemStroke(row, column));\n                        Line2D line;\n                        if (orient == PlotOrientation.VERTICAL) {\n                            line = new Line2D.Double(x0, y0, x1, y1);\n                        }\n                        else {\n                            line = new Line2D.Double(y0, x0, y1, x1);                            \n                        }\n                        g2.draw(line);\n                    }\n                }\n            }\n\n            \n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null && shape != null) {\n                addItemEntity(entities, dataset, row, column, shape);\n            }\n        }\n    }\n    \n    \n\n    \n    private Icon getIcon(Shape shape, final Paint fillPaint, final Paint outlinePaint) {\n\n      final int width = shape.getBounds().width;\n      final int height = shape.getBounds().height;\n      final GeneralPath path = new GeneralPath(shape);\n      return new Icon() {\n          public void paintIcon(Component c, Graphics g, int x, int y) {\n              Graphics2D g2 = (Graphics2D) g;\n              path.transform(AffineTransform.getTranslateInstance(x, y));\n              if (fillPaint != null) {\n                  g2.setPaint(fillPaint);\n                  g2.fill(path);\n              }\n              if (outlinePaint != null) {\n                  g2.setPaint(outlinePaint);\n                  g2.draw(path);\n              }\n              path.transform(AffineTransform.getTranslateInstance(-x, -y));\n        }\n\n        public int getIconWidth() {\n            return width;\n        }\n\n        public int getIconHeight() {\n            return height;\n        }\n\n      };\n    }\n\n    \n    private Icon getIcon(Shape shape, final boolean fill, final boolean outline) {\n        final int width = shape.getBounds().width;\n        final int height = shape.getBounds().height;\n        final GeneralPath path = new GeneralPath(shape);\n        return new Icon() {\n            public void paintIcon(Component c, Graphics g, int x, int y) {\n                Graphics2D g2 = (Graphics2D) g;\n                path.transform(AffineTransform.getTranslateInstance(x, y));\n                if (fill) {\n                    g2.fill(path);\n                }\n                if (outline) {\n                    g2.draw(path);\n                }\n                path.transform(AffineTransform.getTranslateInstance(-x, -y));\n            }\n\n            public int getIconWidth() {\n                return width;\n            }\n\n            public int getIconHeight() {\n                return height;\n            }\n        };\n    }\n    \n    \n    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writeStroke(this.groupStroke, stream);\n        SerialUtilities.writePaint(this.groupPaint, stream);\n    }\n    \n    \n    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.groupStroke = SerialUtilities.readStroke(stream);\n        this.groupPaint = SerialUtilities.readPaint(stream);\n          \n        this.minIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0, 360, \n                Arc2D.OPEN), null, Color.black);\n        this.maxIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0, 360, \n                Arc2D.OPEN), null, Color.black);\n        this.objectIcon = getIcon(new Line2D.Double(-4, 0, 4, 0), false, true);\n    }\n    \n}\n",
      "fixed_full_code": "\n\npackage org.jfree.chart.renderer.category;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Paint;\nimport java.awt.Shape;\nimport java.awt.Stroke;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\nimport javax.swing.Icon;\n\nimport org.jfree.chart.axis.CategoryAxis;\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.chart.entity.EntityCollection;\nimport org.jfree.chart.event.RendererChangeEvent;\nimport org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.util.PaintUtilities;\nimport org.jfree.chart.util.SerialUtilities;\nimport org.jfree.data.category.CategoryDataset;\n\n\npublic class MinMaxCategoryRenderer extends AbstractCategoryItemRenderer { private static final long serialVersionUID = 2935615937671064911L; private boolean plotLines = false; private transient Paint groupPaint = Color.black; private transient Stroke groupStroke = new BasicStroke(1.0f); private transient Icon minIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0, 360, Arc2D.OPEN), null, Color.black); private transient Icon maxIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0, 360, Arc2D.OPEN), null, Color.black); private transient Icon objectIcon = getIcon(new Line2D.Double(-4, 0, 4, 0), false, true); private int lastCategory = -1; private double min; private double max; public MinMaxCategoryRenderer() {\n        super();\n    }\n\n    \n    public boolean isDrawLines() {\n        return this.plotLines;\n    }\n\n    \n    public void setDrawLines(boolean draw) {\n        if (this.plotLines != draw) {\n            this.plotLines = draw;\n            this.notifyListeners(new RendererChangeEvent(this));\n        }\n        \n    }\n\n    \n    public Paint getGroupPaint() {\n        return this.groupPaint;\n    }\n\n    \n    public void setGroupPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.groupPaint = paint;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n\n    \n    public Stroke getGroupStroke() {\n        return this.groupStroke;\n    }\n\n    \n    public void setGroupStroke(Stroke stroke) {\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        this.groupStroke = stroke;\n        notifyListeners(new RendererChangeEvent(this));        \n    }\n\n    \n    public Icon getObjectIcon() {\n        return this.objectIcon;\n    }\n\n    \n    public void setObjectIcon(Icon icon) {\n        if (icon == null) {\n            throw new IllegalArgumentException(\"Null 'icon' argument.\");\n        }\n        this.objectIcon = icon;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n\n    \n    public Icon getMaxIcon() {\n        return this.maxIcon;\n    }\n\n    \n    public void setMaxIcon(Icon icon) {\n        if (icon == null) {\n            throw new IllegalArgumentException(\"Null 'icon' argument.\");\n        }\n        this.maxIcon = icon;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n\n    \n    public Icon getMinIcon() {\n        return this.minIcon;\n    }\n\n    \n    public void setMinIcon(Icon icon) {\n        if (icon == null) {\n            throw new IllegalArgumentException(\"Null 'icon' argument.\");\n        }\n        this.minIcon = icon;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n\n    \n    public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, int pass) {\n\n        \n        Number value = dataset.getValue(row, column);\n        if (value != null) {\n            \n            double x1 = domainAxis.getCategoryMiddle(column, getColumnCount(), \n                    dataArea, plot.getDomainAxisEdge());\n            double y1 = rangeAxis.valueToJava2D(value.doubleValue(), dataArea, \n                    plot.getRangeAxisEdge());\n            g2.setPaint(getItemPaint(row, column));\n            g2.setStroke(getItemStroke(row, column));\n            Shape shape = null;\n            shape = new Rectangle2D.Double(x1 - 4, y1 - 4, 8.0, 8.0);\n            \n            PlotOrientation orient = plot.getOrientation();\n            if (orient == PlotOrientation.VERTICAL) {\n                this.objectIcon.paintIcon(null, g2, (int) x1, (int) y1);\n            }\n            else {\n                this.objectIcon.paintIcon(null, g2, (int) y1, (int) x1);                \n            }\n            \n            if (this.lastCategory == column) {\n                if (this.min > value.doubleValue()) {\n                    this.min = value.doubleValue();\n                }\n                if (this.max < value.doubleValue()) {\n                    this.max = value.doubleValue();\n                }\n                \n                \n                if (dataset.getRowCount() - 1 == row) {\n                    g2.setPaint(this.groupPaint);\n                    g2.setStroke(this.groupStroke);\n                    double minY = rangeAxis.valueToJava2D(this.min, dataArea, \n                            plot.getRangeAxisEdge());\n                    double maxY = rangeAxis.valueToJava2D(this.max, dataArea, \n                            plot.getRangeAxisEdge());\n                    \n                    if (orient == PlotOrientation.VERTICAL) {\n                        g2.draw(new Line2D.Double(x1, minY, x1, maxY));\n                        this.minIcon.paintIcon(null, g2, (int) x1, (int) minY);\n                        this.maxIcon.paintIcon(null, g2, (int) x1, (int) maxY);\n                    }\n                    else {\n                        g2.draw(new Line2D.Double(minY, x1, maxY, x1));\n                        this.minIcon.paintIcon(null, g2, (int) minY, (int) x1);\n                        this.maxIcon.paintIcon(null, g2, (int) maxY, (int) x1);                        \n                    }\n                }\n            }\n            else {  \n                this.lastCategory = column;\n                this.min = value.doubleValue();\n                this.max = value.doubleValue();\n            }\n            \n            \n            if (this.plotLines) {\n                if (column != 0) {\n                    Number previousValue = dataset.getValue(row, column - 1);\n                    if (previousValue != null) {\n                        \n                        double previous = previousValue.doubleValue();\n                        double x0 = domainAxis.getCategoryMiddle(column - 1, \n                                getColumnCount(), dataArea,\n                                plot.getDomainAxisEdge());\n                        double y0 = rangeAxis.valueToJava2D(previous, dataArea,\n                                plot.getRangeAxisEdge());\n                        g2.setPaint(getItemPaint(row, column));\n                        g2.setStroke(getItemStroke(row, column));\n                        Line2D line;\n                        if (orient == PlotOrientation.VERTICAL) {\n                            line = new Line2D.Double(x0, y0, x1, y1);\n                        }\n                        else {\n                            line = new Line2D.Double(y0, x0, y1, x1);                            \n                        }\n                        g2.draw(line);\n                    }\n                }\n            }\n\n            \n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null && shape != null) {\n                addItemEntity(entities, dataset, row, column, shape);\n            }\n        }\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof MinMaxCategoryRenderer)) {\n            return false;\n        }\n        MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;\n        if (this.plotLines != that.plotLines) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {\n            return false;\n        }\n        if (!this.groupStroke.equals(that.groupStroke)) {\n            return false;\n        }\n        return super.equals(obj);\n    }\n\n    \n    private Icon getIcon(Shape shape, final Paint fillPaint, final Paint outlinePaint) {\n\n      final int width = shape.getBounds().width;\n      final int height = shape.getBounds().height;\n      final GeneralPath path = new GeneralPath(shape);\n      return new Icon() {\n          public void paintIcon(Component c, Graphics g, int x, int y) {\n              Graphics2D g2 = (Graphics2D) g;\n              path.transform(AffineTransform.getTranslateInstance(x, y));\n              if (fillPaint != null) {\n                  g2.setPaint(fillPaint);\n                  g2.fill(path);\n              }\n              if (outlinePaint != null) {\n                  g2.setPaint(outlinePaint);\n                  g2.draw(path);\n              }\n              path.transform(AffineTransform.getTranslateInstance(-x, -y));\n        }\n\n        public int getIconWidth() {\n            return width;\n        }\n\n        public int getIconHeight() {\n            return height;\n        }\n\n      };\n    }\n\n    \n    private Icon getIcon(Shape shape, final boolean fill, final boolean outline) {\n        final int width = shape.getBounds().width;\n        final int height = shape.getBounds().height;\n        final GeneralPath path = new GeneralPath(shape);\n        return new Icon() {\n            public void paintIcon(Component c, Graphics g, int x, int y) {\n                Graphics2D g2 = (Graphics2D) g;\n                path.transform(AffineTransform.getTranslateInstance(x, y));\n                if (fill) {\n                    g2.fill(path);\n                }\n                if (outline) {\n                    g2.draw(path);\n                }\n                path.transform(AffineTransform.getTranslateInstance(-x, -y));\n            }\n\n            public int getIconWidth() {\n                return width;\n            }\n\n            public int getIconHeight() {\n                return height;\n            }\n        };\n    }\n    \n    \n    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writeStroke(this.groupStroke, stream);\n        SerialUtilities.writePaint(this.groupPaint, stream);\n    }\n    \n    \n    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.groupStroke = SerialUtilities.readStroke(stream);\n        this.groupPaint = SerialUtilities.readPaint(stream);\n          \n        this.minIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0, 360, \n                Arc2D.OPEN), null, Color.black);\n        this.maxIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0, 360, \n                Arc2D.OPEN), null, Color.black);\n        this.objectIcon = getIcon(new Line2D.Double(-4, 0, 4, 0), false, true);\n    }\n    \n}\n",
      "buggy_signatures": [
        "public boolean isDrawLines()",
        "public void setDrawLines(boolean draw)",
        "public Paint getGroupPaint()",
        "public void setGroupPaint(Paint paint)",
        "public Stroke getGroupStroke()",
        "public void setGroupStroke(Stroke stroke)",
        "public Icon getObjectIcon()",
        "public void setObjectIcon(Icon icon)",
        "public Icon getMaxIcon()",
        "public void setMaxIcon(Icon icon)",
        "public Icon getMinIcon()",
        "public void setMinIcon(Icon icon)",
        "public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, int pass)",
        "private Icon getIcon(Shape shape, final Paint fillPaint, final Paint outlinePaint)",
        "public void paintIcon(Component c, Graphics g, int x, int y)",
        "public int getIconWidth()",
        "public int getIconHeight()",
        "private Icon getIcon(Shape shape, final boolean fill, final boolean outline)",
        "public void paintIcon(Component c, Graphics g, int x, int y)",
        "public int getIconWidth()",
        "public int getIconHeight()",
        "private void writeObject(ObjectOutputStream stream) throws IOException",
        "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException"
      ],
      "fixed_signatures": [
        "public boolean isDrawLines()",
        "public void setDrawLines(boolean draw)",
        "public Paint getGroupPaint()",
        "public void setGroupPaint(Paint paint)",
        "public Stroke getGroupStroke()",
        "public void setGroupStroke(Stroke stroke)",
        "public Icon getObjectIcon()",
        "public void setObjectIcon(Icon icon)",
        "public Icon getMaxIcon()",
        "public void setMaxIcon(Icon icon)",
        "public Icon getMinIcon()",
        "public void setMinIcon(Icon icon)",
        "public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, int pass)",
        "public boolean equals(Object obj)",
        "private Icon getIcon(Shape shape, final Paint fillPaint, final Paint outlinePaint)",
        "public void paintIcon(Component c, Graphics g, int x, int y)",
        "public int getIconWidth()",
        "public int getIconHeight()",
        "private Icon getIcon(Shape shape, final boolean fill, final boolean outline)",
        "public void paintIcon(Component c, Graphics g, int x, int y)",
        "public int getIconWidth()",
        "public int getIconHeight()",
        "private void writeObject(ObjectOutputStream stream) throws IOException",
        "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException"
      ],
      "methods": [
        {
          "buggy_method": "  public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, int pass) {\n\n  \n  Number value = dataset.getValue(row, column);\n  if (value != null) {\n  \n  double x1 = domainAxis.getCategoryMiddle(column, getColumnCount(), \n  dataArea, plot.getDomainAxisEdge());\n  double y1 = rangeAxis.valueToJava2D(value.doubleValue(), dataArea, \n  plot.getRangeAxisEdge());\n  g2.setPaint(getItemPaint(row, column));\n  g2.setStroke(getItemStroke(row, column));\n  Shape shape = null;\n  shape = new Rectangle2D.Double(x1 - 4, y1 - 4, 8.0, 8.0);\n  \n  PlotOrientation orient = plot.getOrientation();\n  if (orient == PlotOrientation.VERTICAL) {\n  this.objectIcon.paintIcon(null, g2, (int) x1, (int) y1);\n  }\n  else {\n  this.objectIcon.paintIcon(null, g2, (int) y1, (int) x1);  \n  }\n  \n  if (this.lastCategory == column) {\n  if (this.min > value.doubleValue()) {\n  this.min = value.doubleValue();\n  }\n  if (this.max < value.doubleValue()) {\n  this.max = value.doubleValue();\n  }\n  \n  \n  if (dataset.getRowCount() - 1 == row) {\n  g2.setPaint(this.groupPaint);\n  g2.setStroke(this.groupStroke);\n  double minY = rangeAxis.valueToJava2D(this.min, dataArea, \n  plot.getRangeAxisEdge());\n  double maxY = rangeAxis.valueToJava2D(this.max, dataArea, \n  plot.getRangeAxisEdge());\n  \n  if (orient == PlotOrientation.VERTICAL) {\n  g2.draw(new Line2D.Double(x1, minY, x1, maxY));\n  this.minIcon.paintIcon(null, g2, (int) x1, (int) minY);\n  this.maxIcon.paintIcon(null, g2, (int) x1, (int) maxY);\n  }\n  else {\n  g2.draw(new Line2D.Double(minY, x1, maxY, x1));\n  this.minIcon.paintIcon(null, g2, (int) minY, (int) x1);\n  this.maxIcon.paintIcon(null, g2, (int) maxY, (int) x1);  \n  }\n  }\n  }\n  else {  \n  this.lastCategory = column;\n  this.min = value.doubleValue();\n  this.max = value.doubleValue();\n  }\n  \n  \n  if (this.plotLines) {\n  if (column != 0) {\n  Number previousValue = dataset.getValue(row, column - 1);\n  if (previousValue != null) {\n  \n  double previous = previousValue.doubleValue();\n  double x0 = domainAxis.getCategoryMiddle(column - 1, \n  getColumnCount(), dataArea,\n  plot.getDomainAxisEdge());\n  double y0 = rangeAxis.valueToJava2D(previous, dataArea,\n  plot.getRangeAxisEdge());\n  g2.setPaint(getItemPaint(row, column));\n  g2.setStroke(getItemStroke(row, column));\n  Line2D line;\n  if (orient == PlotOrientation.VERTICAL) {\n  line = new Line2D.Double(x0, y0, x1, y1);\n  }\n  else {\n  line = new Line2D.Double(y0, x0, y1, x1);  \n  }\n  g2.draw(line);\n  }\n  }\n  }\n\n  \n  EntityCollection entities = state.getEntityCollection();\n  if (entities != null && shape != null) {\n  addItemEntity(entities, dataset, row, column, shape);\n  }\n  }\n  }",
          "fixed_method": "  public boolean equals(Object obj) {\n  if (obj == this) {\n  return true;\n  }\n  if (!(obj instanceof MinMaxCategoryRenderer)) {\n  return false;\n  }\n  MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;\n  if (this.plotLines != that.plotLines) {\n  return false;\n  }\n  if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {\n  return false;\n  }\n  if (!this.groupStroke.equals(that.groupStroke)) {\n  return false;\n  }\n  return super.equals(obj);\n  }",
          "diff": [
            "@@ -432,6 +432,25 @@",
            "      *\n",
            "      * @since 1.0.7\n",
            "      */\n",
            "+    public boolean equals(Object obj) {\n",
            "+        if (obj == this) {\n",
            "+            return true;\n",
            "+        }\n",
            "+        if (!(obj instanceof MinMaxCategoryRenderer)) {\n",
            "+            return false;\n",
            "+        }\n",
            "+        MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;\n",
            "+        if (this.plotLines != that.plotLines) {\n",
            "+            return false;\n",
            "+        }\n",
            "+        if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {\n",
            "+            return false;\n",
            "+        }\n",
            "+        if (!this.groupStroke.equals(that.groupStroke)) {\n",
            "+            return false;\n",
            "+        }\n",
            "+        return super.equals(obj);\n",
            "+    }\n",
            " \n",
            "     /**\n",
            "      * Returns an icon.\n"
          ],
          "changed_lines": 19
        }
      ]
    }
  ]
}
