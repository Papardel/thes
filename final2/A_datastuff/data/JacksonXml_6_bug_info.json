{
  "bug_id": "6",
  "failed_tests": {
    "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization": [
      {
        "methodName": "testWith0Bytes",
        "error": "com.fasterxml.jackson.databind.JsonMappingException",
        "message": "Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[\"field\"])",
        "fail_line": "        String xml = MAPPER.writeValueAsString(createPojo());",
        "test_source": "  public void testWith0Bytes() throws Exception {\n  String xml = MAPPER.writeValueAsString(createPojo());\n  assertEquals(\"<TestPojo><field/></TestPojo>\", xml);\n  }",
        "stack": [
          "JsonMappingException.wrapWithPath line 394, JsonMappingException.wrapWithPath line 353, StdSerializer.wrapAndThrow line 316, XmlBeanSerializerBase.serializeFields line 219, XmlBeanSerializer.serialize line 117, XmlSerializerProvider.serializeValue line 107, ObjectMapper._configAndWriteValue line 3905, ObjectMapper.writeValueAsString line 3219, TestBinaryStreamToXMLSerialization.testWith0Bytes line 18, JsonGenerator._reportUnsupportedOperation line 1967, GeneratorBase.writeBinary line 341, JsonGenerator.writeBinary line 1181, ByteBufferSerializer.serialize line 33, ByteBufferSerializer.serialize line 13, BeanPropertyWriter.serializeAsField line 727, XmlBeanSerializerBase.serializeFields line 202"
        ]
      },
      {
        "methodName": "testWith2Bytes",
        "error": "com.fasterxml.jackson.databind.JsonMappingException",
        "message": "Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[\"field\"])",
        "fail_line": "        String xml = MAPPER.writeValueAsString(createPojo( 'A', 'B' ));",
        "test_source": "  public void testWith2Bytes() throws Exception {\n  String xml = MAPPER.writeValueAsString(createPojo( 'A', 'B' ));\n  assertEquals(\"<TestPojo><field>QUI=</field></TestPojo>\", xml);\n  }",
        "stack": [
          "JsonMappingException.wrapWithPath line 394, JsonMappingException.wrapWithPath line 353, StdSerializer.wrapAndThrow line 316, XmlBeanSerializerBase.serializeFields line 219, XmlBeanSerializer.serialize line 117, XmlSerializerProvider.serializeValue line 107, ObjectMapper._configAndWriteValue line 3905, ObjectMapper.writeValueAsString line 3219, TestBinaryStreamToXMLSerialization.testWith2Bytes line 30, JsonGenerator._reportUnsupportedOperation line 1967, GeneratorBase.writeBinary line 341, JsonGenerator.writeBinary line 1181, ByteBufferSerializer.serialize line 33, ByteBufferSerializer.serialize line 13, BeanPropertyWriter.serializeAsField line 727, XmlBeanSerializerBase.serializeFields line 202"
        ]
      },
      {
        "methodName": "testWith3Bytes",
        "error": "com.fasterxml.jackson.databind.JsonMappingException",
        "message": "Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[\"field\"])",
        "fail_line": "        String xml = MAPPER.writeValueAsString(createPojo( 'A', 'B', 'C' ));",
        "test_source": "  public void testWith3Bytes() throws Exception {\n  String xml = MAPPER.writeValueAsString(createPojo( 'A', 'B', 'C' ));\n  assertEquals(\"<TestPojo><field>QUJD</field></TestPojo>\", xml);\n  }",
        "stack": [
          "JsonMappingException.wrapWithPath line 394, JsonMappingException.wrapWithPath line 353, StdSerializer.wrapAndThrow line 316, XmlBeanSerializerBase.serializeFields line 219, XmlBeanSerializer.serialize line 117, XmlSerializerProvider.serializeValue line 107, ObjectMapper._configAndWriteValue line 3905, ObjectMapper.writeValueAsString line 3219, TestBinaryStreamToXMLSerialization.testWith3Bytes line 36, JsonGenerator._reportUnsupportedOperation line 1967, GeneratorBase.writeBinary line 341, JsonGenerator.writeBinary line 1181, ByteBufferSerializer.serialize line 33, ByteBufferSerializer.serialize line 13, BeanPropertyWriter.serializeAsField line 727, XmlBeanSerializerBase.serializeFields line 202"
        ]
      },
      {
        "methodName": "testWith4Bytes",
        "error": "com.fasterxml.jackson.databind.JsonMappingException",
        "message": "Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[\"field\"])",
        "fail_line": "        String xml = MAPPER.writeValueAsString(createPojo( 'A', 'B', 'C', 'D' ));",
        "test_source": "  public void testWith4Bytes() throws Exception {\n  String xml = MAPPER.writeValueAsString(createPojo( 'A', 'B', 'C', 'D' ));\n  assertEquals(\"<TestPojo><field>QUJDRA==</field></TestPojo>\", xml);\n  }",
        "stack": [
          "JsonMappingException.wrapWithPath line 394, JsonMappingException.wrapWithPath line 353, StdSerializer.wrapAndThrow line 316, XmlBeanSerializerBase.serializeFields line 219, XmlBeanSerializer.serialize line 117, XmlSerializerProvider.serializeValue line 107, ObjectMapper._configAndWriteValue line 3905, ObjectMapper.writeValueAsString line 3219, TestBinaryStreamToXMLSerialization.testWith4Bytes line 42, JsonGenerator._reportUnsupportedOperation line 1967, GeneratorBase.writeBinary line 341, JsonGenerator.writeBinary line 1181, ByteBufferSerializer.serialize line 33, ByteBufferSerializer.serialize line 13, BeanPropertyWriter.serializeAsField line 727, XmlBeanSerializerBase.serializeFields line 202"
        ]
      },
      {
        "methodName": "testWith1Byte",
        "error": "com.fasterxml.jackson.databind.JsonMappingException",
        "message": "Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[\"field\"])",
        "fail_line": "        String xml = MAPPER.writeValueAsString(createPojo( 'A' ));",
        "test_source": "  public void testWith1Byte() throws Exception {\n  String xml = MAPPER.writeValueAsString(createPojo( 'A' ));\n  assertEquals(\"<TestPojo><field>QQ==</field></TestPojo>\", xml);\n  }",
        "stack": [
          "JsonMappingException.wrapWithPath line 394, JsonMappingException.wrapWithPath line 353, StdSerializer.wrapAndThrow line 316, XmlBeanSerializerBase.serializeFields line 219, XmlBeanSerializer.serialize line 117, XmlSerializerProvider.serializeValue line 107, ObjectMapper._configAndWriteValue line 3905, ObjectMapper.writeValueAsString line 3219, TestBinaryStreamToXMLSerialization.testWith1Byte line 24, JsonGenerator._reportUnsupportedOperation line 1967, GeneratorBase.writeBinary line 341, JsonGenerator.writeBinary line 1181, ByteBufferSerializer.serialize line 33, ByteBufferSerializer.serialize line 13, BeanPropertyWriter.serializeAsField line 727, XmlBeanSerializerBase.serializeFields line 202"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
      "buggy_full_code": "package com.fasterxml.jackson.dataformat.xml.ser;\n\nimport java.io.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.*;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\n\nimport org.codehaus.stax2.XMLStreamWriter2;\nimport org.codehaus.stax2.ri.Stax2WriterAdapter;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.base.GeneratorBase;\nimport com.fasterxml.jackson.core.io.IOContext;\nimport com.fasterxml.jackson.core.json.JsonWriteContext;\nimport com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;\nimport com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;\nimport com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n\n\npublic final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\"; public enum Feature implements FormatFeature { WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() {\n            int flags = 0;\n            for (Feature f : values()) {\n                if (f.enabledByDefault()) {\n                    flags |= f.getMask();\n                }\n            }\n            return flags;\n        }\n\n        private Feature(boolean defaultState) {\n            _defaultState = defaultState;\n            _mask = (1 << ordinal());\n        }\n\n        @Override public boolean enabledByDefault() { return _defaultState; }\n        @Override public int getMask() { return _mask; }\n        @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n    }\n\n    \n\n    final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures; protected XmlPrettyPrinter _xmlPrettyPrinter; protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) {\n        super(stdFeatures, codec);\n        _formatFeatures = xmlFeatures;\n        _ioContext = ctxt;\n        _originalXmlWriter = sw;\n        _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw);\n        _stax2Emulation = (_xmlWriter != sw);\n        _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ?\n        \t\t(XmlPrettyPrinter) _cfgPrettyPrinter : null;\n    }\n\n    \n    public void initGenerator() throws IOException {\n        if (_initialized) {\n            return;\n        }\n        _initialized = true;\n        try {\n            if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) {\n                _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\");\n            } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) {\n                _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");\n            } else {\n                return;\n            }\n            \n            if (_xmlPrettyPrinter != null) {\n                \n                if (!_stax2Emulation) {\n                    _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter);\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    \n\n    @Override\n    protected PrettyPrinter _constructDefaultPrettyPrinter() {\n        return new DefaultXmlPrettyPrinter();\n    }\n\n    @Override\n    public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {\n        _cfgPrettyPrinter = pp;\n        _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ?\n               (XmlPrettyPrinter) pp : null;\n        return this;\n    }\n\n    @Override\n    public Object getOutputTarget() {\n        \n        \n        return _originalXmlWriter;\n    }\n\n    \n    @Override\n    public int getOutputBuffered() {\n        return -1;\n    }\n\n    @Override\n    public int getFormatFeatures() {\n        return _formatFeatures;\n    }\n\n    @Override \n    public JsonGenerator overrideFormatFeatures(int values, int mask) {\n        int oldF = _formatFeatures;\n        int newF = (_formatFeatures & ~mask) | (values & mask);\n\n        if (oldF != newF) {\n            _formatFeatures = newF;\n        }\n        return this;\n    }\n\n    \n\n    public ToXmlGenerator enable(Feature f) {\n        _formatFeatures |= f.getMask();\n        return this;\n    }\n\n    public ToXmlGenerator disable(Feature f) {\n        _formatFeatures &= ~f.getMask();\n        return this;\n    }\n\n    public final boolean isEnabled(Feature f) {\n        return (_formatFeatures & f.getMask()) != 0;\n    }\n\n    public ToXmlGenerator configure(Feature f, boolean state) {\n        if (state) {\n            enable(f);\n        } else {\n            disable(f);\n        }\n        return this;\n    }\n\n    @Override\n    public boolean canWriteFormattedNumbers() { return true; }\n\n    \n    public boolean inRoot() {\n        return _writeContext.inRoot();\n    }\n\n    \n\n    \n    public XMLStreamWriter getStaxWriter() {\n        return _xmlWriter;\n    }\n    \n    \n\n    public void setNextIsAttribute(boolean isAttribute) {\n        _nextIsAttribute = isAttribute;\n    }\n\n    public void setNextIsUnwrapped(boolean isUnwrapped) {\n        _nextIsUnwrapped = isUnwrapped;\n    }\n\n    public void setNextIsCData(boolean isCData) {\n        _nextIsCData = isCData;\n    }\n    \n    public final void setNextName(QName name) {\n        _nextName = name;\n    }\n\n    \n    public final boolean setNextNameIfMissing(QName name) {\n        if (_nextName == null) {\n            _nextName = name;\n            return true;\n        }\n        return false;\n    }\n    \n    \n    public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException {\n        if (wrapperName != null) {\n            try {\n                if (_xmlPrettyPrinter != null) {\n                    _xmlPrettyPrinter.writeStartElement(_xmlWriter,\n                            wrapperName.getNamespaceURI(), wrapperName.getLocalPart());\n                } else {\n                    _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart());\n                }\n            } catch (XMLStreamException e) {\n                StaxUtil.throwAsGenerationException(e, this);\n            }\n        }\n        this.setNextName(wrappedName);\n    }\n\n    \n    public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException {\n        \n        if (wrapperName != null) {\n            try {\n                if (_xmlPrettyPrinter != null) {\n                    _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount());\n                } else {\n                    _xmlWriter.writeEndElement();\n                }\n            } catch (XMLStreamException e) {\n                StaxUtil.throwAsGenerationException(e, this);\n            }\n        }\n    }\n\n    \n    public void writeRepeatedFieldName() throws IOException {\n        if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) {\n            _reportError(\"Can not write a field name, expecting a value\");\n        }\n    }\n    \n    \n    \n    \n\n    @Override\n    public final void writeFieldName(String name) throws IOException {\n        if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) {\n            _reportError(\"Can not write a field name, expecting a value\");\n        }\n        \n        String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI();\n        setNextName(new QName(ns, name));\n    }\n    \n    @Override\n    public final void writeStringField(String fieldName, String value) throws IOException {\n        writeFieldName(fieldName);\n        writeString(value);\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n\n    @Override\n    public final void writeStartArray() throws IOException {\n        _verifyValueWrite(\"start an array\");\n        _writeContext = _writeContext.createChildArrayContext();\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeStartArray(this);\n        } else {\n            \n        }\n    }\n    \n    @Override\n    public final void writeEndArray() throws IOException {\n        if (!_writeContext.inArray()) {\n            _reportError(\"Current context not Array but \"+_writeContext.typeDesc());\n        }\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());\n        } else {\n            \n        }\n        _writeContext = _writeContext.getParent();\n    }\n\n    @Override\n    public final void writeStartObject() throws IOException {\n        _verifyValueWrite(\"start an object\");\n        _writeContext = _writeContext.createChildObjectContext();\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeStartObject(this);\n        } else {\n            _handleStartObject();\n        }\n    }\n\n    @Override\n    public final void writeEndObject() throws IOException {\n        if (!_writeContext.inObject()) {\n            _reportError(\"Current context not Object but \"+_writeContext.typeDesc());\n        }\n        _writeContext = _writeContext.getParent();\n        if (_cfgPrettyPrinter != null) {\n            \n            int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount();\n            _cfgPrettyPrinter.writeEndObject(this, count);\n        } else {\n            _handleEndObject();\n        }\n    }\n\n    \n    public final void _handleStartObject() throws IOException {\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        \n        _elementNameStack.addLast(_nextName);\n        try {\n            _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n    \n    \n    public final void _handleEndObject() throws IOException {\n        \n        if (_elementNameStack.isEmpty()) {\n            throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this);\n        }\n        _nextName = _elementNameStack.removeLast();\n        try {\n            \n            _nextIsAttribute = false;\n            _xmlWriter.writeEndElement();\n            \n            if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) {\n                \n                if (!_stax2Emulation) {\n                    _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter);\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n    \n    \n\n    @Override\n    public void writeFieldName(SerializableString name) throws IOException {\n        writeFieldName(name.getValue());\n    }\n    \n    @Override\n    public void writeString(String text) throws IOException {\n        _verifyValueWrite(\"write String value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) { \n                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);\n            } else if (checkNextIsUnwrapped()) {\n                \n                \n                \n                if(_nextIsCData) {\n                    _xmlWriter.writeCData(text);\n                } else {\n                    _xmlWriter.writeCharacters(text);\n                }\n            } else if (_xmlPrettyPrinter != null) {\n                _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                        _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                        text, _nextIsCData);\n            } else {\n                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                if(_nextIsCData) {\n                    _xmlWriter.writeCData(text);\n                } else {\n                    _xmlWriter.writeCharacters(text);\n                }\n                _xmlWriter.writeEndElement();\n            } \n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }    \n    \n    @Override\n    public void writeString(char[] text, int offset, int len) throws IOException {\n        _verifyValueWrite(\"write String value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));\n            } else if (checkNextIsUnwrapped()) {\n            \t\n                if(_nextIsCData) {\n                    _xmlWriter.writeCData(text, offset, len);\n                } else {\n                    _xmlWriter.writeCharacters(text, offset, len);\n                }\n            } else if (_xmlPrettyPrinter != null) {\n                _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                        _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                        text, offset, len, _nextIsCData);\n            } else {\n                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                if(_nextIsCData) {\n                    _xmlWriter.writeCData(text, offset, len);\n                } else {\n                    _xmlWriter.writeCharacters(text, offset, len);\n                }\n                _xmlWriter.writeEndElement();\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeString(SerializableString text) throws IOException {\n        writeString(text.getValue());\n    }\n    \n    @Override\n    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {\n        \n        _reportUnsupportedOperation();\n    }\n\n    @Override\n    public void writeUTF8String(byte[] text, int offset, int length) throws IOException {\n        \n        _reportUnsupportedOperation();\n    }\n\n    \n\n    @Override\n    public void writeRawValue(String text) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRawValue\");\n        }\n        try {\n            _verifyValueWrite(\"write raw value\");\n            if (_nextName == null) {\n                handleMissingName();\n            }\n\n            if (_nextIsAttribute) {\n                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);\n            } else {\n                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                _xmlWriter.writeRaw(text);\n                _xmlWriter.writeEndElement();\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRawValue(String text, int offset, int len) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRawValue\");\n        }\n        try {\n            _verifyValueWrite(\"write raw value\");\n            if (_nextName == null) {\n                handleMissingName();\n            }\n\n            if (_nextIsAttribute) {\n                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len));\n            } else {\n                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                _xmlWriter.writeRaw(text, offset, len);\n                _xmlWriter.writeEndElement();\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRawValue(char[] text, int offset, int len) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRawValue\");\n        }\n        _verifyValueWrite(\"write raw value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));\n            } else {\n                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                _xmlWriter.writeRaw(text, offset, len);\n                _xmlWriter.writeEndElement();\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRawValue(SerializableString text) throws IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @Override\n    public void writeRaw(String text) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRaw\");\n        }\n        try {\n            _xmlWriter.writeRaw(text);\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRaw(String text, int offset, int len) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRaw\");\n        }\n        try {\n            _xmlWriter.writeRaw(text, offset, len);\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRaw(char[] text, int offset, int len) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRaw\");\n        }\n        try {\n            _xmlWriter.writeRaw(text, offset, len);\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRaw(char c) throws IOException {\n        writeRaw(String.valueOf(c));\n    }\n    \n    \n\n    @Override\n    public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {\n        if (data == null) {\n            writeNull();\n            return;\n        }\n        _verifyValueWrite(\"write Binary value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                \n                byte[] fullBuffer = toFullBuffer(data, offset, len);\n                _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);\n            } else if (checkNextIsUnwrapped()) {\n            \t\n                _xmlWriter.writeBinary(data, offset, len);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                    _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                            _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                            data, offset, len);\n                } else {\n                    _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                    _xmlWriter.writeBinary(data, offset, len);\n                    _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n                \n              \n\n\n\n        \n\n        \n\n    \n    private byte[] toFullBuffer(byte[] data, int offset, int len) {\n        \n        if (offset == 0 && len == data.length) {\n            return data;\n        }\n        byte[] result = new byte[len];\n        if (len > 0) {\n            System.arraycopy(data, offset, result, 0, len);\n        }\n        return result;\n    }\n\n\n\n    \n\n    @Override\n    public void writeBoolean(boolean value) throws IOException {\n        _verifyValueWrite(\"write boolean value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value);\n            } else if (checkNextIsUnwrapped()) {\n            \t\n                _xmlWriter.writeBoolean(value);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\tvalue);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeBoolean(value);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNull() throws IOException {\n        _verifyValueWrite(\"write null value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        \n        try {\n            if (_nextIsAttribute) {\n                \n            } else if (checkNextIsUnwrapped()) {\n            \t\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafNullElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                } else {\n\t            \t_xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(int i) throws IOException {\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i);\n            } else if (checkNextIsUnwrapped()) {\n            \t\n                _xmlWriter.writeInt(i);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\ti);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeInt(i);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(long l) throws IOException {\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);\n            } else if (checkNextIsUnwrapped()) {\n                _xmlWriter.writeLong(l);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\tl);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeLong(l);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(double d) throws IOException {\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);\n            } else if (checkNextIsUnwrapped()) {\n                _xmlWriter.writeDouble(d);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\td);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeDouble(d);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(float f) throws IOException {\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f);\n            } else if (checkNextIsUnwrapped()) {\n                _xmlWriter.writeFloat(f);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\tf);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeFloat(f);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(BigDecimal dec) throws IOException {\n        if (dec == null) {\n            writeNull();\n            return;\n        }\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n        try {\n            if (_nextIsAttribute) {\n                if (usePlain) {\n                    _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                            dec.toPlainString());\n                } else {\n                    _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec);\n                }\n            } else if (checkNextIsUnwrapped()) {\n                if (usePlain) {\n                    _xmlWriter.writeCharacters(dec.toPlainString());\n                } else {\n                    _xmlWriter.writeDecimal(dec);\n                }\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\tdec);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                if (usePlain) {\n                         _xmlWriter.writeCharacters(dec.toPlainString());\n\t                } else {\n                         _xmlWriter.writeDecimal(dec);\n\t                }\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(BigInteger value) throws IOException {\n        if (value == null) {\n            writeNull();\n            return;\n        }\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeIntegerAttribute(\"\",\n                \t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(), value);\n            } else if (checkNextIsUnwrapped()) {\n                _xmlWriter.writeInteger(value);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\tvalue);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeInteger(value);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException {\n        writeString(encodedValue);\n    }\n\n    \n\n    @Override\n    protected final void _verifyValueWrite(String typeMsg) throws IOException {\n        int status = _writeContext.writeValue();\n        if (status == JsonWriteContext.STATUS_EXPECT_NAME) {\n            _reportError(\"Can not \"+typeMsg+\", expecting field name\");\n        }\n    }\n\n    \n\n    @Override\n    public void flush() throws IOException {\n        if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) {\n            try {\n                _xmlWriter.flush();\n            } catch (XMLStreamException e) {\n                StaxUtil.throwAsGenerationException(e, this);\n            }\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n\n        super.close();\n\n        \n        if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            try {\n                while (true) {\n\t\t    \n\n\t\t    JsonStreamContext ctxt = _writeContext;\n                    if (ctxt.inArray()) {\n                        writeEndArray();\n                    } else if (ctxt.inObject()) {\n                        writeEndObject();\n                    } else {\n                        break;\n                    }\n                }\n            } catch (ArrayIndexOutOfBoundsException e) {\n                \n                throw new JsonGenerationException(e, this);\n            }\n        }\n        try {\n            if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) {\n                _xmlWriter.closeCompletely();\n            } else {\n                _xmlWriter.close();\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    protected void _releaseBuffers() {\n        \n    }\n\n    \n\n    \n    protected boolean checkNextIsUnwrapped() {\n        if (_nextIsUnwrapped) {\n    \t\t    _nextIsUnwrapped = false;\n    \t\t    return true;\n        }\n        return false;\n    }\n    \n    protected void handleMissingName() {\n        throw new IllegalStateException(\"No element/attribute name specified when trying to output element\");\n    }\n\n    \n    protected void _reportUnimplementedStax2(String missingMethod) throws IOException {\n        throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \"\n                +_originalXmlWriter.getClass().getName()\n                +\") does not implement Stax2 API natively and is missing method '\"\n                +missingMethod+\"': this breaks functionality such as indentation that relies on it. \"\n                +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\",\n                this);\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.dataformat.xml.ser;\n\nimport java.io.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.*;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\n\nimport org.codehaus.stax2.XMLStreamWriter2;\nimport org.codehaus.stax2.ri.Stax2WriterAdapter;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.base.GeneratorBase;\nimport com.fasterxml.jackson.core.io.IOContext;\nimport com.fasterxml.jackson.core.json.JsonWriteContext;\nimport com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;\nimport com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;\nimport com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n\n\npublic final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\"; public enum Feature implements FormatFeature { WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() {\n            int flags = 0;\n            for (Feature f : values()) {\n                if (f.enabledByDefault()) {\n                    flags |= f.getMask();\n                }\n            }\n            return flags;\n        }\n\n        private Feature(boolean defaultState) {\n            _defaultState = defaultState;\n            _mask = (1 << ordinal());\n        }\n\n        @Override public boolean enabledByDefault() { return _defaultState; }\n        @Override public int getMask() { return _mask; }\n        @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n    }\n\n    \n\n    final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures; protected XmlPrettyPrinter _xmlPrettyPrinter; protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) {\n        super(stdFeatures, codec);\n        _formatFeatures = xmlFeatures;\n        _ioContext = ctxt;\n        _originalXmlWriter = sw;\n        _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw);\n        _stax2Emulation = (_xmlWriter != sw);\n        _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ?\n        \t\t(XmlPrettyPrinter) _cfgPrettyPrinter : null;\n    }\n\n    \n    public void initGenerator() throws IOException {\n        if (_initialized) {\n            return;\n        }\n        _initialized = true;\n        try {\n            if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) {\n                _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\");\n            } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) {\n                _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");\n            } else {\n                return;\n            }\n            \n            if (_xmlPrettyPrinter != null) {\n                \n                if (!_stax2Emulation) {\n                    _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter);\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    \n\n    @Override\n    protected PrettyPrinter _constructDefaultPrettyPrinter() {\n        return new DefaultXmlPrettyPrinter();\n    }\n\n    @Override\n    public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {\n        _cfgPrettyPrinter = pp;\n        _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ?\n               (XmlPrettyPrinter) pp : null;\n        return this;\n    }\n\n    @Override\n    public Object getOutputTarget() {\n        \n        \n        return _originalXmlWriter;\n    }\n\n    \n    @Override\n    public int getOutputBuffered() {\n        return -1;\n    }\n\n    @Override\n    public int getFormatFeatures() {\n        return _formatFeatures;\n    }\n\n    @Override \n    public JsonGenerator overrideFormatFeatures(int values, int mask) {\n        int oldF = _formatFeatures;\n        int newF = (_formatFeatures & ~mask) | (values & mask);\n\n        if (oldF != newF) {\n            _formatFeatures = newF;\n        }\n        return this;\n    }\n\n    \n\n    public ToXmlGenerator enable(Feature f) {\n        _formatFeatures |= f.getMask();\n        return this;\n    }\n\n    public ToXmlGenerator disable(Feature f) {\n        _formatFeatures &= ~f.getMask();\n        return this;\n    }\n\n    public final boolean isEnabled(Feature f) {\n        return (_formatFeatures & f.getMask()) != 0;\n    }\n\n    public ToXmlGenerator configure(Feature f, boolean state) {\n        if (state) {\n            enable(f);\n        } else {\n            disable(f);\n        }\n        return this;\n    }\n\n    @Override\n    public boolean canWriteFormattedNumbers() { return true; }\n\n    \n    public boolean inRoot() {\n        return _writeContext.inRoot();\n    }\n\n    \n\n    \n    public XMLStreamWriter getStaxWriter() {\n        return _xmlWriter;\n    }\n    \n    \n\n    public void setNextIsAttribute(boolean isAttribute) {\n        _nextIsAttribute = isAttribute;\n    }\n\n    public void setNextIsUnwrapped(boolean isUnwrapped) {\n        _nextIsUnwrapped = isUnwrapped;\n    }\n\n    public void setNextIsCData(boolean isCData) {\n        _nextIsCData = isCData;\n    }\n    \n    public final void setNextName(QName name) {\n        _nextName = name;\n    }\n\n    \n    public final boolean setNextNameIfMissing(QName name) {\n        if (_nextName == null) {\n            _nextName = name;\n            return true;\n        }\n        return false;\n    }\n    \n    \n    public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException {\n        if (wrapperName != null) {\n            try {\n                if (_xmlPrettyPrinter != null) {\n                    _xmlPrettyPrinter.writeStartElement(_xmlWriter,\n                            wrapperName.getNamespaceURI(), wrapperName.getLocalPart());\n                } else {\n                    _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart());\n                }\n            } catch (XMLStreamException e) {\n                StaxUtil.throwAsGenerationException(e, this);\n            }\n        }\n        this.setNextName(wrappedName);\n    }\n\n    \n    public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException {\n        \n        if (wrapperName != null) {\n            try {\n                if (_xmlPrettyPrinter != null) {\n                    _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount());\n                } else {\n                    _xmlWriter.writeEndElement();\n                }\n            } catch (XMLStreamException e) {\n                StaxUtil.throwAsGenerationException(e, this);\n            }\n        }\n    }\n\n    \n    public void writeRepeatedFieldName() throws IOException {\n        if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) {\n            _reportError(\"Can not write a field name, expecting a value\");\n        }\n    }\n    \n    \n    \n    \n\n    @Override\n    public final void writeFieldName(String name) throws IOException {\n        if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) {\n            _reportError(\"Can not write a field name, expecting a value\");\n        }\n        \n        String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI();\n        setNextName(new QName(ns, name));\n    }\n    \n    @Override\n    public final void writeStringField(String fieldName, String value) throws IOException {\n        writeFieldName(fieldName);\n        writeString(value);\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n\n    @Override\n    public final void writeStartArray() throws IOException {\n        _verifyValueWrite(\"start an array\");\n        _writeContext = _writeContext.createChildArrayContext();\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeStartArray(this);\n        } else {\n            \n        }\n    }\n    \n    @Override\n    public final void writeEndArray() throws IOException {\n        if (!_writeContext.inArray()) {\n            _reportError(\"Current context not Array but \"+_writeContext.typeDesc());\n        }\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());\n        } else {\n            \n        }\n        _writeContext = _writeContext.getParent();\n    }\n\n    @Override\n    public final void writeStartObject() throws IOException {\n        _verifyValueWrite(\"start an object\");\n        _writeContext = _writeContext.createChildObjectContext();\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeStartObject(this);\n        } else {\n            _handleStartObject();\n        }\n    }\n\n    @Override\n    public final void writeEndObject() throws IOException {\n        if (!_writeContext.inObject()) {\n            _reportError(\"Current context not Object but \"+_writeContext.typeDesc());\n        }\n        _writeContext = _writeContext.getParent();\n        if (_cfgPrettyPrinter != null) {\n            \n            int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount();\n            _cfgPrettyPrinter.writeEndObject(this, count);\n        } else {\n            _handleEndObject();\n        }\n    }\n\n    \n    public final void _handleStartObject() throws IOException {\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        \n        _elementNameStack.addLast(_nextName);\n        try {\n            _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n    \n    \n    public final void _handleEndObject() throws IOException {\n        \n        if (_elementNameStack.isEmpty()) {\n            throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this);\n        }\n        _nextName = _elementNameStack.removeLast();\n        try {\n            \n            _nextIsAttribute = false;\n            _xmlWriter.writeEndElement();\n            \n            if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) {\n                \n                if (!_stax2Emulation) {\n                    _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter);\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n    \n    \n\n    @Override\n    public void writeFieldName(SerializableString name) throws IOException {\n        writeFieldName(name.getValue());\n    }\n    \n    @Override\n    public void writeString(String text) throws IOException {\n        _verifyValueWrite(\"write String value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) { \n                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);\n            } else if (checkNextIsUnwrapped()) {\n                \n                \n                \n                if(_nextIsCData) {\n                    _xmlWriter.writeCData(text);\n                } else {\n                    _xmlWriter.writeCharacters(text);\n                }\n            } else if (_xmlPrettyPrinter != null) {\n                _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                        _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                        text, _nextIsCData);\n            } else {\n                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                if(_nextIsCData) {\n                    _xmlWriter.writeCData(text);\n                } else {\n                    _xmlWriter.writeCharacters(text);\n                }\n                _xmlWriter.writeEndElement();\n            } \n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }    \n    \n    @Override\n    public void writeString(char[] text, int offset, int len) throws IOException {\n        _verifyValueWrite(\"write String value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));\n            } else if (checkNextIsUnwrapped()) {\n            \t\n                if(_nextIsCData) {\n                    _xmlWriter.writeCData(text, offset, len);\n                } else {\n                    _xmlWriter.writeCharacters(text, offset, len);\n                }\n            } else if (_xmlPrettyPrinter != null) {\n                _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                        _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                        text, offset, len, _nextIsCData);\n            } else {\n                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                if(_nextIsCData) {\n                    _xmlWriter.writeCData(text, offset, len);\n                } else {\n                    _xmlWriter.writeCharacters(text, offset, len);\n                }\n                _xmlWriter.writeEndElement();\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeString(SerializableString text) throws IOException {\n        writeString(text.getValue());\n    }\n    \n    @Override\n    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {\n        \n        _reportUnsupportedOperation();\n    }\n\n    @Override\n    public void writeUTF8String(byte[] text, int offset, int length) throws IOException {\n        \n        _reportUnsupportedOperation();\n    }\n\n    \n\n    @Override\n    public void writeRawValue(String text) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRawValue\");\n        }\n        try {\n            _verifyValueWrite(\"write raw value\");\n            if (_nextName == null) {\n                handleMissingName();\n            }\n\n            if (_nextIsAttribute) {\n                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);\n            } else {\n                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                _xmlWriter.writeRaw(text);\n                _xmlWriter.writeEndElement();\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRawValue(String text, int offset, int len) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRawValue\");\n        }\n        try {\n            _verifyValueWrite(\"write raw value\");\n            if (_nextName == null) {\n                handleMissingName();\n            }\n\n            if (_nextIsAttribute) {\n                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len));\n            } else {\n                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                _xmlWriter.writeRaw(text, offset, len);\n                _xmlWriter.writeEndElement();\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRawValue(char[] text, int offset, int len) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRawValue\");\n        }\n        _verifyValueWrite(\"write raw value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));\n            } else {\n                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                _xmlWriter.writeRaw(text, offset, len);\n                _xmlWriter.writeEndElement();\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRawValue(SerializableString text) throws IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @Override\n    public void writeRaw(String text) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRaw\");\n        }\n        try {\n            _xmlWriter.writeRaw(text);\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRaw(String text, int offset, int len) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRaw\");\n        }\n        try {\n            _xmlWriter.writeRaw(text, offset, len);\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRaw(char[] text, int offset, int len) throws IOException {\n        \n        if (_stax2Emulation) {\n            _reportUnimplementedStax2(\"writeRaw\");\n        }\n        try {\n            _xmlWriter.writeRaw(text, offset, len);\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeRaw(char c) throws IOException {\n        writeRaw(String.valueOf(c));\n    }\n    \n    \n\n    @Override\n    public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {\n        if (data == null) {\n            writeNull();\n            return;\n        }\n        _verifyValueWrite(\"write Binary value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                \n                byte[] fullBuffer = toFullBuffer(data, offset, len);\n                _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);\n            } else if (checkNextIsUnwrapped()) {\n            \t\n                _xmlWriter.writeBinary(data, offset, len);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                    _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                            _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                            data, offset, len);\n                } else {\n                    _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                    _xmlWriter.writeBinary(data, offset, len);\n                    _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException {\n        if (data == null) {\n            writeNull();\n            return 0;\n        }\n        _verifyValueWrite(\"write Binary value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                \n                byte[] fullBuffer = toFullBuffer(data, dataLength);\n                _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);\n            } else if (checkNextIsUnwrapped()) {\n              \n                writeStreamAsBinary(data, dataLength);\n\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                    _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                            _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                            toFullBuffer(data, dataLength), 0, dataLength);\n                } else {\n                    _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                    writeStreamAsBinary(data, dataLength);\n                    _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n\n        return dataLength;\n    }\n\n    private void writeStreamAsBinary(InputStream data, int len) throws IOException, XMLStreamException {\n        \n        byte[] tmp = new byte[3];\n        int offset = 0;\n        int read;\n        while((read = data.read(tmp, offset, Math.min(3 - offset, len))) != -1) {\n            offset += read;\n            len -= read;\n            if(offset == 3) {\n                offset = 0;\n                _xmlWriter.writeBinary(tmp, 0, 3);\n            }\n            if (len == 0) {\n                break;\n            }\n        }\n\n        \n        if(offset > 0) {\n            _xmlWriter.writeBinary(tmp, 0, offset);\n        }\n    }\n\n    \n    private byte[] toFullBuffer(byte[] data, int offset, int len) {\n        \n        if (offset == 0 && len == data.length) {\n            return data;\n        }\n        byte[] result = new byte[len];\n        if (len > 0) {\n            System.arraycopy(data, offset, result, 0, len);\n        }\n        return result;\n    }\n\n    private byte[] toFullBuffer(InputStream data, final int len) throws IOException {\n        byte[] result = new byte[len];\n        int offset = 0;\n\n        for (; offset < len; ) {\n            int count = data.read(result, offset, len - offset);\n            if (count < 0) {\n                _reportError(\"Too few bytes available: missing \"+(len - offset)+\" bytes (out of \"+len+\")\");\n            }\n            offset += count;\n        }\n        return result;\n    }\n\n    \n\n    @Override\n    public void writeBoolean(boolean value) throws IOException {\n        _verifyValueWrite(\"write boolean value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value);\n            } else if (checkNextIsUnwrapped()) {\n            \t\n                _xmlWriter.writeBoolean(value);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\tvalue);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeBoolean(value);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNull() throws IOException {\n        _verifyValueWrite(\"write null value\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        \n        try {\n            if (_nextIsAttribute) {\n                \n            } else if (checkNextIsUnwrapped()) {\n            \t\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafNullElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                } else {\n\t            \t_xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(int i) throws IOException {\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i);\n            } else if (checkNextIsUnwrapped()) {\n            \t\n                _xmlWriter.writeInt(i);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\ti);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeInt(i);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(long l) throws IOException {\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);\n            } else if (checkNextIsUnwrapped()) {\n                _xmlWriter.writeLong(l);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\tl);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeLong(l);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(double d) throws IOException {\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);\n            } else if (checkNextIsUnwrapped()) {\n                _xmlWriter.writeDouble(d);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\td);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeDouble(d);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(float f) throws IOException {\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f);\n            } else if (checkNextIsUnwrapped()) {\n                _xmlWriter.writeFloat(f);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\tf);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeFloat(f);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(BigDecimal dec) throws IOException {\n        if (dec == null) {\n            writeNull();\n            return;\n        }\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n        try {\n            if (_nextIsAttribute) {\n                if (usePlain) {\n                    _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                            dec.toPlainString());\n                } else {\n                    _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec);\n                }\n            } else if (checkNextIsUnwrapped()) {\n                if (usePlain) {\n                    _xmlWriter.writeCharacters(dec.toPlainString());\n                } else {\n                    _xmlWriter.writeDecimal(dec);\n                }\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\tdec);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                if (usePlain) {\n                         _xmlWriter.writeCharacters(dec.toPlainString());\n\t                } else {\n                         _xmlWriter.writeDecimal(dec);\n\t                }\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(BigInteger value) throws IOException {\n        if (value == null) {\n            writeNull();\n            return;\n        }\n        _verifyValueWrite(\"write number\");\n        if (_nextName == null) {\n            handleMissingName();\n        }\n        try {\n            if (_nextIsAttribute) {\n                _xmlWriter.writeIntegerAttribute(\"\",\n                \t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(), value);\n            } else if (checkNextIsUnwrapped()) {\n                _xmlWriter.writeInteger(value);\n            } else {\n                if (_xmlPrettyPrinter != null) {\n                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n                \t\t\tvalue);\n                } else {\n\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n\t                _xmlWriter.writeInteger(value);\n\t                _xmlWriter.writeEndElement();\n                }\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException {\n        writeString(encodedValue);\n    }\n\n    \n\n    @Override\n    protected final void _verifyValueWrite(String typeMsg) throws IOException {\n        int status = _writeContext.writeValue();\n        if (status == JsonWriteContext.STATUS_EXPECT_NAME) {\n            _reportError(\"Can not \"+typeMsg+\", expecting field name\");\n        }\n    }\n\n    \n\n    @Override\n    public void flush() throws IOException {\n        if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) {\n            try {\n                _xmlWriter.flush();\n            } catch (XMLStreamException e) {\n                StaxUtil.throwAsGenerationException(e, this);\n            }\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n\n        super.close();\n\n        \n        if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            try {\n                while (true) {\n\t\t    \n\n\t\t    JsonStreamContext ctxt = _writeContext;\n                    if (ctxt.inArray()) {\n                        writeEndArray();\n                    } else if (ctxt.inObject()) {\n                        writeEndObject();\n                    } else {\n                        break;\n                    }\n                }\n            } catch (ArrayIndexOutOfBoundsException e) {\n                \n                throw new JsonGenerationException(e, this);\n            }\n        }\n        try {\n            if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) {\n                _xmlWriter.closeCompletely();\n            } else {\n                _xmlWriter.close();\n            }\n        } catch (XMLStreamException e) {\n            StaxUtil.throwAsGenerationException(e, this);\n        }\n    }\n\n    @Override\n    protected void _releaseBuffers() {\n        \n    }\n\n    \n\n    \n    protected boolean checkNextIsUnwrapped() {\n        if (_nextIsUnwrapped) {\n    \t\t    _nextIsUnwrapped = false;\n    \t\t    return true;\n        }\n        return false;\n    }\n    \n    protected void handleMissingName() {\n        throw new IllegalStateException(\"No element/attribute name specified when trying to output element\");\n    }\n\n    \n    protected void _reportUnimplementedStax2(String missingMethod) throws IOException {\n        throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \"\n                +_originalXmlWriter.getClass().getName()\n                +\") does not implement Stax2 API natively and is missing method '\"\n                +missingMethod+\"': this breaks functionality such as indentation that relies on it. \"\n                +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\",\n                this);\n    }\n}\n",
      "buggy_signatures": [
        "private Feature(boolean defaultState)",
        "public boolean enabledByDefault()",
        "public int getMask()",
        "public boolean enabledIn(int flags)",
        "public void initGenerator() throws IOException",
        "protected PrettyPrinter _constructDefaultPrettyPrinter()",
        "public JsonGenerator setPrettyPrinter(PrettyPrinter pp)",
        "public Object getOutputTarget()",
        "public int getOutputBuffered()",
        "public int getFormatFeatures()",
        "public JsonGenerator overrideFormatFeatures(int values, int mask)",
        "public ToXmlGenerator enable(Feature f)",
        "public ToXmlGenerator disable(Feature f)",
        "public final boolean isEnabled(Feature f)",
        "public ToXmlGenerator configure(Feature f, boolean state)",
        "public boolean canWriteFormattedNumbers()",
        "public boolean inRoot()",
        "public XMLStreamWriter getStaxWriter()",
        "public void setNextIsAttribute(boolean isAttribute)",
        "public void setNextIsUnwrapped(boolean isUnwrapped)",
        "public void setNextIsCData(boolean isCData)",
        "public final void setNextName(QName name)",
        "public final boolean setNextNameIfMissing(QName name)",
        "public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException",
        "public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException",
        "public void writeRepeatedFieldName() throws IOException",
        "public final void writeFieldName(String name) throws IOException",
        "public final void writeStringField(String fieldName, String value) throws IOException",
        "public final void writeStartArray() throws IOException",
        "public final void writeEndArray() throws IOException",
        "public final void writeStartObject() throws IOException",
        "public final void writeEndObject() throws IOException",
        "public final void _handleStartObject() throws IOException",
        "public final void _handleEndObject() throws IOException",
        "public void writeFieldName(SerializableString name) throws IOException",
        "public void writeString(String text) throws IOException",
        "public void writeString(char[] text, int offset, int len) throws IOException",
        "public void writeString(SerializableString text) throws IOException",
        "public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException",
        "public void writeUTF8String(byte[] text, int offset, int length) throws IOException",
        "public void writeRawValue(String text) throws IOException",
        "public void writeRawValue(String text, int offset, int len) throws IOException",
        "public void writeRawValue(char[] text, int offset, int len) throws IOException",
        "public void writeRawValue(SerializableString text) throws IOException",
        "public void writeRaw(String text) throws IOException",
        "public void writeRaw(String text, int offset, int len) throws IOException",
        "public void writeRaw(char[] text, int offset, int len) throws IOException",
        "public void writeRaw(char c) throws IOException",
        "public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException",
        "private byte[] toFullBuffer(byte[] data, int offset, int len)",
        "public void writeBoolean(boolean value) throws IOException",
        "public void writeNull() throws IOException",
        "public void writeNumber(int i) throws IOException",
        "public void writeNumber(long l) throws IOException",
        "public void writeNumber(double d) throws IOException",
        "public void writeNumber(float f) throws IOException",
        "public void writeNumber(BigDecimal dec) throws IOException",
        "public void writeNumber(BigInteger value) throws IOException",
        "public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException",
        "protected final void _verifyValueWrite(String typeMsg) throws IOException",
        "public void flush() throws IOException",
        "public void close() throws IOException",
        "protected void _releaseBuffers()",
        "protected boolean checkNextIsUnwrapped()",
        "protected void handleMissingName()",
        "protected void _reportUnimplementedStax2(String missingMethod) throws IOException"
      ],
      "fixed_signatures": [
        "private Feature(boolean defaultState)",
        "public boolean enabledByDefault()",
        "public int getMask()",
        "public boolean enabledIn(int flags)",
        "public void initGenerator() throws IOException",
        "protected PrettyPrinter _constructDefaultPrettyPrinter()",
        "public JsonGenerator setPrettyPrinter(PrettyPrinter pp)",
        "public Object getOutputTarget()",
        "public int getOutputBuffered()",
        "public int getFormatFeatures()",
        "public JsonGenerator overrideFormatFeatures(int values, int mask)",
        "public ToXmlGenerator enable(Feature f)",
        "public ToXmlGenerator disable(Feature f)",
        "public final boolean isEnabled(Feature f)",
        "public ToXmlGenerator configure(Feature f, boolean state)",
        "public boolean canWriteFormattedNumbers()",
        "public boolean inRoot()",
        "public XMLStreamWriter getStaxWriter()",
        "public void setNextIsAttribute(boolean isAttribute)",
        "public void setNextIsUnwrapped(boolean isUnwrapped)",
        "public void setNextIsCData(boolean isCData)",
        "public final void setNextName(QName name)",
        "public final boolean setNextNameIfMissing(QName name)",
        "public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException",
        "public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException",
        "public void writeRepeatedFieldName() throws IOException",
        "public final void writeFieldName(String name) throws IOException",
        "public final void writeStringField(String fieldName, String value) throws IOException",
        "public final void writeStartArray() throws IOException",
        "public final void writeEndArray() throws IOException",
        "public final void writeStartObject() throws IOException",
        "public final void writeEndObject() throws IOException",
        "public final void _handleStartObject() throws IOException",
        "public final void _handleEndObject() throws IOException",
        "public void writeFieldName(SerializableString name) throws IOException",
        "public void writeString(String text) throws IOException",
        "public void writeString(char[] text, int offset, int len) throws IOException",
        "public void writeString(SerializableString text) throws IOException",
        "public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException",
        "public void writeUTF8String(byte[] text, int offset, int length) throws IOException",
        "public void writeRawValue(String text) throws IOException",
        "public void writeRawValue(String text, int offset, int len) throws IOException",
        "public void writeRawValue(char[] text, int offset, int len) throws IOException",
        "public void writeRawValue(SerializableString text) throws IOException",
        "public void writeRaw(String text) throws IOException",
        "public void writeRaw(String text, int offset, int len) throws IOException",
        "public void writeRaw(char[] text, int offset, int len) throws IOException",
        "public void writeRaw(char c) throws IOException",
        "public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException",
        "public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException",
        "private void writeStreamAsBinary(InputStream data, int len) throws IOException, XMLStreamException",
        "private byte[] toFullBuffer(byte[] data, int offset, int len)",
        "private byte[] toFullBuffer(InputStream data, final int len) throws IOException",
        "public void writeBoolean(boolean value) throws IOException",
        "public void writeNull() throws IOException",
        "public void writeNumber(int i) throws IOException",
        "public void writeNumber(long l) throws IOException",
        "public void writeNumber(double d) throws IOException",
        "public void writeNumber(float f) throws IOException",
        "public void writeNumber(BigDecimal dec) throws IOException",
        "public void writeNumber(BigInteger value) throws IOException",
        "public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException",
        "protected final void _verifyValueWrite(String typeMsg) throws IOException",
        "public void flush() throws IOException",
        "public void close() throws IOException",
        "protected void _releaseBuffers()",
        "protected boolean checkNextIsUnwrapped()",
        "protected void handleMissingName()",
        "protected void _reportUnimplementedStax2(String missingMethod) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {\n  if (data == null) {\n  writeNull();\n  return;\n  }\n  _verifyValueWrite(\"write Binary value\");\n  if (_nextName == null) {\n  handleMissingName();\n  }\n  try {\n  if (_nextIsAttribute) {\n  \n  byte[] fullBuffer = toFullBuffer(data, offset, len);\n  _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);\n  } else if (checkNextIsUnwrapped()) {\n  \t\n  _xmlWriter.writeBinary(data, offset, len);\n  } else {\n  if (_xmlPrettyPrinter != null) {\n  _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n  _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n  data, offset, len);\n  } else {\n  _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n  _xmlWriter.writeBinary(data, offset, len);\n  _xmlWriter.writeEndElement();\n  }\n  }\n  } catch (XMLStreamException e) {\n  StaxUtil.throwAsGenerationException(e, this);\n  }\n  }",
          "fixed_method": "  public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException {\n  if (data == null) {\n  writeNull();\n  return 0;\n  }\n  _verifyValueWrite(\"write Binary value\");\n  if (_nextName == null) {\n  handleMissingName();\n  }\n  try {\n  if (_nextIsAttribute) {\n  \n  byte[] fullBuffer = toFullBuffer(data, dataLength);\n  _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);\n  } else if (checkNextIsUnwrapped()) {\n  \n  writeStreamAsBinary(data, dataLength);\n\n  } else {\n  if (_xmlPrettyPrinter != null) {\n  _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n  _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n  toFullBuffer(data, dataLength), 0, dataLength);\n  } else {\n  _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n  writeStreamAsBinary(data, dataLength);\n  _xmlWriter.writeEndElement();\n  }\n  }\n  } catch (XMLStreamException e) {\n  StaxUtil.throwAsGenerationException(e, this);\n  }\n\n  return dataLength;\n  }",
          "diff": [
            "@@ -840,14 +840,67 @@",
            "         }\n",
            "     }\n",
            " \n",
            "+    @Override\n",
            "+    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException\n",
            "+    {\n",
            "+        if (data == null) {\n",
            "+            writeNull();\n",
            "+            return 0;\n",
            "+        }\n",
            "+        _verifyValueWrite(\"write Binary value\");\n",
            "+        if (_nextName == null) {\n",
            "+            handleMissingName();\n",
            "+        }\n",
            "+        try {\n",
            "+            if (_nextIsAttribute) {\n",
            "                 // Stax2 API only has 'full buffer' write method:\n",
            "+                byte[] fullBuffer = toFullBuffer(data, dataLength);\n",
            "+                _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);\n",
            "+            } else if (checkNextIsUnwrapped()) {\n",
            "               // should we consider pretty-printing or not?\n",
            "-\n",
            "-\n",
            "-\n",
            "+                writeStreamAsBinary(data, dataLength);\n",
            "+\n",
            "+            } else {\n",
            "+                if (_xmlPrettyPrinter != null) {\n",
            "+                    _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n",
            "+                            _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n",
            "+                            toFullBuffer(data, dataLength), 0, dataLength);\n",
            "+                } else {\n",
            "+                    _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n",
            "+                    writeStreamAsBinary(data, dataLength);\n",
            "+                    _xmlWriter.writeEndElement();\n",
            "+                }\n",
            "+            }\n",
            "+        } catch (XMLStreamException e) {\n",
            "+            StaxUtil.throwAsGenerationException(e, this);\n",
            "+        }\n",
            "+\n",
            "+        return dataLength;\n",
            "+    }\n",
            "+\n",
            "+    private void writeStreamAsBinary(InputStream data, int len) throws IOException, XMLStreamException \n",
            "+    {\n",
            "         // base64 encodes up to 3 bytes into a 4 bytes string\n",
            "+        byte[] tmp = new byte[3];\n",
            "+        int offset = 0;\n",
            "+        int read;\n",
            "+        while((read = data.read(tmp, offset, Math.min(3 - offset, len))) != -1) {\n",
            "+            offset += read;\n",
            "+            len -= read;\n",
            "+            if(offset == 3) {\n",
            "+                offset = 0;\n",
            "+                _xmlWriter.writeBinary(tmp, 0, 3);\n",
            "+            }\n",
            "+            if (len == 0) {\n",
            "+                break;\n",
            "+            }\n",
            "+        }\n",
            " \n",
            "         // we still have < 3 bytes in the buffer\n",
            "+        if(offset > 0) {\n",
            "+            _xmlWriter.writeBinary(tmp, 0, offset);\n",
            "+        }\n",
            "+    }\n",
            " \n",
            "     \n",
            "     private byte[] toFullBuffer(byte[] data, int offset, int len)\n"
          ],
          "changed_lines": 59
        },
        {
          "buggy_method": "  private byte[] toFullBuffer(byte[] data, int offset, int len) {\n  \n  if (offset == 0 && len == data.length) {\n  return data;\n  }\n  byte[] result = new byte[len];\n  if (len > 0) {\n  System.arraycopy(data, offset, result, 0, len);\n  }\n  return result;\n  }",
          "fixed_method": "  private byte[] toFullBuffer(InputStream data, final int len) throws IOException {\n  byte[] result = new byte[len];\n  int offset = 0;\n\n  for (; offset < len; ) {\n  int count = data.read(result, offset, len - offset);\n  if (count < 0) {\n  _reportError(\"Too few bytes available: missing \"+(len - offset)+\" bytes (out of \"+len+\")\");\n  }\n  offset += count;\n  }\n  return result;\n  }",
          "diff": [
            "@@ -863,7 +916,20 @@",
            "         return result;\n",
            "     }\n",
            " \n",
            "-\n",
            "+    private byte[] toFullBuffer(InputStream data, final int len) throws IOException \n",
            "+    {\n",
            "+        byte[] result = new byte[len];\n",
            "+        int offset = 0;\n",
            "+\n",
            "+        for (; offset < len; ) {\n",
            "+            int count = data.read(result, offset, len - offset);\n",
            "+            if (count < 0) {\n",
            "+                _reportError(\"Too few bytes available: missing \"+(len - offset)+\" bytes (out of \"+len+\")\");\n",
            "+            }\n",
            "+            offset += count;\n",
            "+        }\n",
            "+        return result;\n",
            "+    }\n",
            " \n",
            "     /*\n",
            "     /**********************************************************\n"
          ],
          "changed_lines": 15
        }
      ]
    }
  ]
}
