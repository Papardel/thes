{
  "bug_id": "28",
  "failed_tests": {
    "org.apache.commons.cli.ValueTest": [
      {
        "methodName": "testPropertyOptionFlags",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue( cmd.hasOption(\"e\") ); // this option accepts as argument",
        "test_source": "  public void testPropertyOptionFlags() throws Exception {\n  Properties properties = new Properties();\n  properties.setProperty( \"a\", \"true\" );\n  properties.setProperty( \"c\", \"yes\" );\n  properties.setProperty( \"e\", \"1\" );\n\n  Parser parser = new PosixParser();\n\n  CommandLine cmd = parser.parse(opts, null, properties);\n  assertTrue( cmd.hasOption(\"a\") );\n  assertTrue( cmd.hasOption(\"c\") );\n  assertTrue( cmd.hasOption(\"e\") );\n\n\n  properties = new Properties();\n  properties.setProperty( \"a\", \"false\" );\n  properties.setProperty( \"c\", \"no\" );\n  properties.setProperty( \"e\", \"0\" );\n\n  cmd = parser.parse(opts, null, properties);\n  assertTrue( !cmd.hasOption(\"a\") );\n  assertTrue( !cmd.hasOption(\"c\") );\n  assertTrue( cmd.hasOption(\"e\") ); // this option accepts as argument\n\n\n  properties = new Properties();\n  properties.setProperty( \"a\", \"TRUE\" );\n  properties.setProperty( \"c\", \"nO\" );\n  properties.setProperty( \"e\", \"TrUe\" );\n\n  cmd = parser.parse(opts, null, properties);\n  assertTrue( cmd.hasOption(\"a\") );\n  assertTrue( !cmd.hasOption(\"c\") );\n  assertTrue( cmd.hasOption(\"e\") );\n\n  \n  properties = new Properties();\n  properties.setProperty( \"a\", \"just a string\" );\n  properties.setProperty( \"e\", \"\" );\n\n  cmd = parser.parse(opts, null, properties);\n  assertTrue( !cmd.hasOption(\"a\") );\n  assertTrue( !cmd.hasOption(\"c\") );\n  assertTrue( cmd.hasOption(\"e\") );\n  } ",
        "stack": [
          "ValueTest.testPropertyOptionFlags line 215"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/cli/Parser.java",
      "buggy_full_code": "\n\npackage org.apache.commons.cli;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Properties;\n\n\npublic abstract class Parser implements CommandLineParser { protected CommandLine cmd; private Options options; private List requiredOptions; protected void setOptions(final Options options) {\n        this.options = options;\n        this.requiredOptions = new ArrayList(options.getRequiredOptions());\n    }\n\n    protected Options getOptions() {\n        return options;\n    }\n\n    protected List getRequiredOptions() {\n        return requiredOptions;\n    }\n\n    \n    protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException; public CommandLine parse(Options options, String[] arguments) throws ParseException {\n        return parse(options, arguments, null, false);\n    }\n\n    \n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {\n        return parse(options, arguments, properties, false);\n    }\n\n    \n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\n        return parse(options, arguments, null, stopAtNonOption);\n    }\n\n    \n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n        \n        for (Iterator it = options.helpOptions().iterator(); it.hasNext();)\n        {\n            Option opt = (Option) it.next();\n            opt.clearValues();\n        }\n        \n        \n        for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)\n        {\n            OptionGroup group = (OptionGroup) it.next();\n            group.setSelected(null);\n        }        \n\n        \n        setOptions(options);\n\n        cmd = new CommandLine();\n\n        boolean eatTheRest = false;\n\n        if (arguments == null)\n        {\n            arguments = new String[0];\n        }\n\n        List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\n\n        ListIterator iterator = tokenList.listIterator();\n\n        \n        while (iterator.hasNext())\n        {\n            String t = (String) iterator.next();\n\n            \n            if (\"--\".equals(t))\n            {\n                eatTheRest = true;\n            }\n\n            \n            else if (\"-\".equals(t))\n            {\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n                else\n                {\n                    cmd.addArg(t);\n                }\n            }\n\n            \n            else if (t.startsWith(\"-\"))\n            {\n                if (stopAtNonOption && !getOptions().hasOption(t))\n                {\n                    eatTheRest = true;\n                    cmd.addArg(t);\n                }\n                else\n                {\n                    processOption(t, iterator);\n                }\n            }\n\n            \n            else\n            {\n                cmd.addArg(t);\n\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n            }\n\n            \n            if (eatTheRest)\n            {\n                while (iterator.hasNext())\n                {\n                    String str = (String) iterator.next();\n\n                    \n                    if (!\"--\".equals(str))\n                    {\n                        cmd.addArg(str);\n                    }\n                }\n            }\n        }\n\n        processProperties(properties);\n        checkRequiredOptions();\n\n        return cmd;\n    }\n\n    \n    protected void processProperties(Properties properties) {\n        if (properties == null)\n        {\n            return;\n        }\n\n        for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n        {\n            String option = e.nextElement().toString();\n\n            if (!cmd.hasOption(option))\n            {\n                Option opt = getOptions().getOption(option);\n\n                \n                String value = properties.getProperty(option);\n\n                if (opt.hasArg())\n                {\n                    if (opt.getValues() == null || opt.getValues().length == 0)\n                    {\n                        try\n                        {\n                            opt.addValueForProcessing(value);\n                        }\n                        catch (RuntimeException exp)\n                        {\n                            \n                        }\n                    }\n                }\n                else if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))\n                {\n                    \n                    \n                    break;\n                }\n\n                cmd.addOption(opt);\n            }\n        }\n    }\n\n    \n    protected void checkRequiredOptions() throws MissingOptionException {\n        \n        if (!getRequiredOptions().isEmpty())\n        {\n            throw new MissingOptionException(getRequiredOptions());\n        }\n    }\n\n    \n    public void processArgs(Option opt, ListIterator iter) throws ParseException {\n        \n        while (iter.hasNext())\n        {\n            String str = (String) iter.next();\n\n            \n            if (getOptions().hasOption(str) && str.startsWith(\"-\"))\n            {\n                iter.previous();\n                break;\n            }\n\n            \n            try\n            {\n                opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n            }\n            catch (RuntimeException exp)\n            {\n                iter.previous();\n                break;\n            }\n        }\n\n        if (opt.getValues() == null && !opt.hasOptionalArg())\n        {\n            throw new MissingArgumentException(opt);\n        }\n    }\n\n    \n    protected void processOption(String arg, ListIterator iter) throws ParseException {\n        boolean hasOption = getOptions().hasOption(arg);\n\n        \n        if (!hasOption)\n        {\n            throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\n        }\n\n        \n        Option opt = (Option) getOptions().getOption(arg).clone();\n\n        \n        \n        if (opt.isRequired())\n        {\n            getRequiredOptions().remove(opt.getKey());\n        }\n\n        \n        \n        if (getOptions().getOptionGroup(opt) != null)\n        {\n            OptionGroup group = getOptions().getOptionGroup(opt);\n\n            if (group.isRequired())\n            {\n                getRequiredOptions().remove(group);\n            }\n\n            group.setSelected(opt);\n        }\n\n        \n        if (opt.hasArg())\n        {\n            processArgs(opt, iter);\n        }\n\n        \n        cmd.addOption(opt);\n    }\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.cli;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Properties;\n\n\npublic abstract class Parser implements CommandLineParser { protected CommandLine cmd; private Options options; private List requiredOptions; protected void setOptions(final Options options) {\n        this.options = options;\n        this.requiredOptions = new ArrayList(options.getRequiredOptions());\n    }\n\n    protected Options getOptions() {\n        return options;\n    }\n\n    protected List getRequiredOptions() {\n        return requiredOptions;\n    }\n\n    \n    protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException; public CommandLine parse(Options options, String[] arguments) throws ParseException {\n        return parse(options, arguments, null, false);\n    }\n\n    \n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {\n        return parse(options, arguments, properties, false);\n    }\n\n    \n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\n        return parse(options, arguments, null, stopAtNonOption);\n    }\n\n    \n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n        \n        for (Iterator it = options.helpOptions().iterator(); it.hasNext();)\n        {\n            Option opt = (Option) it.next();\n            opt.clearValues();\n        }\n        \n        \n        for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)\n        {\n            OptionGroup group = (OptionGroup) it.next();\n            group.setSelected(null);\n        }        \n\n        \n        setOptions(options);\n\n        cmd = new CommandLine();\n\n        boolean eatTheRest = false;\n\n        if (arguments == null)\n        {\n            arguments = new String[0];\n        }\n\n        List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\n\n        ListIterator iterator = tokenList.listIterator();\n\n        \n        while (iterator.hasNext())\n        {\n            String t = (String) iterator.next();\n\n            \n            if (\"--\".equals(t))\n            {\n                eatTheRest = true;\n            }\n\n            \n            else if (\"-\".equals(t))\n            {\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n                else\n                {\n                    cmd.addArg(t);\n                }\n            }\n\n            \n            else if (t.startsWith(\"-\"))\n            {\n                if (stopAtNonOption && !getOptions().hasOption(t))\n                {\n                    eatTheRest = true;\n                    cmd.addArg(t);\n                }\n                else\n                {\n                    processOption(t, iterator);\n                }\n            }\n\n            \n            else\n            {\n                cmd.addArg(t);\n\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n            }\n\n            \n            if (eatTheRest)\n            {\n                while (iterator.hasNext())\n                {\n                    String str = (String) iterator.next();\n\n                    \n                    if (!\"--\".equals(str))\n                    {\n                        cmd.addArg(str);\n                    }\n                }\n            }\n        }\n\n        processProperties(properties);\n        checkRequiredOptions();\n\n        return cmd;\n    }\n\n    \n    protected void processProperties(Properties properties) {\n        if (properties == null)\n        {\n            return;\n        }\n\n        for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n        {\n            String option = e.nextElement().toString();\n\n            if (!cmd.hasOption(option))\n            {\n                Option opt = getOptions().getOption(option);\n\n                \n                String value = properties.getProperty(option);\n\n                if (opt.hasArg())\n                {\n                    if (opt.getValues() == null || opt.getValues().length == 0)\n                    {\n                        try\n                        {\n                            opt.addValueForProcessing(value);\n                        }\n                        catch (RuntimeException exp)\n                        {\n                            \n                        }\n                    }\n                }\n                else if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))\n                {\n                    \n                    \n                    continue;\n                }\n\n                cmd.addOption(opt);\n            }\n        }\n    }\n\n    \n    protected void checkRequiredOptions() throws MissingOptionException {\n        \n        if (!getRequiredOptions().isEmpty())\n        {\n            throw new MissingOptionException(getRequiredOptions());\n        }\n    }\n\n    \n    public void processArgs(Option opt, ListIterator iter) throws ParseException {\n        \n        while (iter.hasNext())\n        {\n            String str = (String) iter.next();\n\n            \n            if (getOptions().hasOption(str) && str.startsWith(\"-\"))\n            {\n                iter.previous();\n                break;\n            }\n\n            \n            try\n            {\n                opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n            }\n            catch (RuntimeException exp)\n            {\n                iter.previous();\n                break;\n            }\n        }\n\n        if (opt.getValues() == null && !opt.hasOptionalArg())\n        {\n            throw new MissingArgumentException(opt);\n        }\n    }\n\n    \n    protected void processOption(String arg, ListIterator iter) throws ParseException {\n        boolean hasOption = getOptions().hasOption(arg);\n\n        \n        if (!hasOption)\n        {\n            throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\n        }\n\n        \n        Option opt = (Option) getOptions().getOption(arg).clone();\n\n        \n        \n        if (opt.isRequired())\n        {\n            getRequiredOptions().remove(opt.getKey());\n        }\n\n        \n        \n        if (getOptions().getOptionGroup(opt) != null)\n        {\n            OptionGroup group = getOptions().getOptionGroup(opt);\n\n            if (group.isRequired())\n            {\n                getRequiredOptions().remove(group);\n            }\n\n            group.setSelected(opt);\n        }\n\n        \n        if (opt.hasArg())\n        {\n            processArgs(opt, iter);\n        }\n\n        \n        cmd.addOption(opt);\n    }\n}\n",
      "buggy_signatures": [
        "public abstract class Parser implements CommandLineParser { protected CommandLine cmd; private Options options; private List requiredOptions; protected void setOptions(final Options options)",
        "protected Options getOptions()",
        "protected List getRequiredOptions()",
        "protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException; public CommandLine parse(Options options, String[] arguments) throws ParseException",
        "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException",
        "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException",
        "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException",
        "protected void processProperties(Properties properties)",
        "protected void checkRequiredOptions() throws MissingOptionException",
        "public void processArgs(Option opt, ListIterator iter) throws ParseException",
        "protected void processOption(String arg, ListIterator iter) throws ParseException"
      ],
      "fixed_signatures": [
        "public abstract class Parser implements CommandLineParser { protected CommandLine cmd; private Options options; private List requiredOptions; protected void setOptions(final Options options)",
        "protected Options getOptions()",
        "protected List getRequiredOptions()",
        "protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException; public CommandLine parse(Options options, String[] arguments) throws ParseException",
        "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException",
        "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException",
        "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException",
        "protected void processProperties(Properties properties)",
        "protected void checkRequiredOptions() throws MissingOptionException",
        "public void processArgs(Option opt, ListIterator iter) throws ParseException",
        "protected void processOption(String arg, ListIterator iter) throws ParseException"
      ],
      "methods": [
        {
          "buggy_method": "  protected void processProperties(Properties properties) {\n  if (properties == null)\n  {\n  return;\n  }\n\n  for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n  {\n  String option = e.nextElement().toString();\n\n  if (!cmd.hasOption(option))\n  {\n  Option opt = getOptions().getOption(option);\n\n  \n  String value = properties.getProperty(option);\n\n  if (opt.hasArg())\n  {\n  if (opt.getValues() == null || opt.getValues().length == 0)\n  {\n  try\n  {\n  opt.addValueForProcessing(value);\n  }\n  catch (RuntimeException exp)\n  {\n  \n  }\n  }\n  }\n  else if (!(\"yes\".equalsIgnoreCase(value)\n  || \"true\".equalsIgnoreCase(value)\n  || \"1\".equalsIgnoreCase(value)))\n  {\n  \n  \n  break;\n  }\n\n  cmd.addOption(opt);\n  }\n  }\n  }",
          "fixed_method": "  protected void processProperties(Properties properties) {\n  if (properties == null)\n  {\n  return;\n  }\n\n  for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n  {\n  String option = e.nextElement().toString();\n\n  if (!cmd.hasOption(option))\n  {\n  Option opt = getOptions().getOption(option);\n\n  \n  String value = properties.getProperty(option);\n\n  if (opt.hasArg())\n  {\n  if (opt.getValues() == null || opt.getValues().length == 0)\n  {\n  try\n  {\n  opt.addValueForProcessing(value);\n  }\n  catch (RuntimeException exp)\n  {\n  \n  }\n  }\n  }\n  else if (!(\"yes\".equalsIgnoreCase(value)\n  || \"true\".equalsIgnoreCase(value)\n  || \"1\".equalsIgnoreCase(value)))\n  {\n  \n  \n  continue;\n  }\n\n  cmd.addOption(opt);\n  }\n  }\n  }",
          "diff": [
            "@@ -287,7 +287,7 @@",
            "                 {\n",
            "                     // if the value is not yes, true or 1 then don't add the\n",
            "                     // option to the CommandLine\n",
            "-                    break;\n",
            "+                    continue;\n",
            "                 }\n",
            " \n",
            "                 cmd.addOption(opt);\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
