{
  "bug_id": "3",
  "failed_tests": {
    "org.joda.time.TestMutableDateTime_Adds": [
      {
        "methodName": "testAddYears_int_dstOverlapWinter_addZero",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>",
        "fail_line": "        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());",
        "test_source": "  public void testAddYears_int_dstOverlapWinter_addZero() {\n  MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n  test.addHours(1);\n  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n  test.addYears(0);\n  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n  }",
        "stack": [
          "TestMutableDateTime_Adds.testAddYears_int_dstOverlapWinter_addZero line 227"
        ]
      },
      {
        "methodName": "testAddDays_int_dstOverlapWinter_addZero",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>",
        "fail_line": "        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());",
        "test_source": "  public void testAddDays_int_dstOverlapWinter_addZero() {\n  MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n  test.addHours(1);\n  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n  test.addDays(0);\n  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n  }",
        "stack": [
          "TestMutableDateTime_Adds.testAddDays_int_dstOverlapWinter_addZero line 271"
        ]
      },
      {
        "methodName": "testAddWeeks_int_dstOverlapWinter_addZero",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>",
        "fail_line": "        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());",
        "test_source": "  public void testAddWeeks_int_dstOverlapWinter_addZero() {\n  MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n  test.addHours(1);\n  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n  test.addWeeks(0);\n  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n  }",
        "stack": [
          "TestMutableDateTime_Adds.testAddWeeks_int_dstOverlapWinter_addZero line 300"
        ]
      },
      {
        "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>",
        "fail_line": "        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());",
        "test_source": "  public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero() {\n  MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n  test.addHours(1);\n  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n  test.add(DurationFieldType.years(), 0);\n  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n  }",
        "stack": [
          "TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapWinter_addZero line 187"
        ]
      },
      {
        "methodName": "testAddMonths_int_dstOverlapWinter_addZero",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>",
        "fail_line": "        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());",
        "test_source": "  public void testAddMonths_int_dstOverlapWinter_addZero() {\n  MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n  test.addHours(1);\n  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n  test.addMonths(0);\n  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n  }",
        "stack": [
          "TestMutableDateTime_Adds.testAddMonths_int_dstOverlapWinter_addZero line 249"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/joda/time/MutableDateTime.java",
      "buggy_full_code": "\npackage org.joda.time;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Locale;\n\nimport org.joda.convert.FromString;\nimport org.joda.convert.ToString;\nimport org.joda.time.base.BaseDateTime;\nimport org.joda.time.chrono.ISOChronology;\nimport org.joda.time.field.AbstractReadableInstantFieldProperty;\nimport org.joda.time.field.FieldUtils;\nimport org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\n\npublic class MutableDateTime extends BaseDateTime implements ReadWritableDateTime, Cloneable, Serializable { private static final long serialVersionUID = 2852608688135209575L; public static final int ROUND_NONE = 0; public static final int ROUND_FLOOR = 1; public static final int ROUND_CEILING = 2; public static final int ROUND_HALF_FLOOR = 3; public static final int ROUND_HALF_CEILING = 4; public static final int ROUND_HALF_EVEN = 5; private DateTimeField iRoundingField; private int iRoundingMode; public static MutableDateTime now() {\n        return new MutableDateTime();\n    }\n\n    \n    public static MutableDateTime now(DateTimeZone zone) {\n        if (zone == null) {\n            throw new NullPointerException(\"Zone must not be null\");\n        }\n        return new MutableDateTime(zone);\n    }\n\n    \n    public static MutableDateTime now(Chronology chronology) {\n        if (chronology == null) {\n            throw new NullPointerException(\"Chronology must not be null\");\n        }\n        return new MutableDateTime(chronology);\n    }\n\n    \n    \n    @FromString\n    public static MutableDateTime parse(String str) {\n        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());\n    }\n\n    \n    public static MutableDateTime parse(String str, DateTimeFormatter formatter) {\n        return formatter.parseDateTime(str).toMutableDateTime();\n    }\n\n    \n    \n    public MutableDateTime() {\n        super();\n    }\n\n    \n    public MutableDateTime(DateTimeZone zone) {\n        super(zone);\n    }\n\n    \n    public MutableDateTime(Chronology chronology) {\n        super(chronology);\n    }\n\n    \n    \n    public MutableDateTime(long instant) {\n        super(instant);\n    }\n\n    \n    public MutableDateTime(long instant, DateTimeZone zone) {\n        super(instant, zone);\n    }\n\n    \n    public MutableDateTime(long instant, Chronology chronology) {\n        super(instant, chronology);\n    }\n\n    \n    \n    public MutableDateTime(Object instant) {\n        super(instant, (Chronology) null);\n    }\n\n    \n    public MutableDateTime(Object instant, DateTimeZone zone) {\n        super(instant, zone);\n    }\n\n    \n    public MutableDateTime(Object instant, Chronology chronology) {\n        super(instant, DateTimeUtils.getChronology(chronology));\n    }\n\n    \n    \n    public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {\n        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    \n    public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, DateTimeZone zone) {\n        super(year, monthOfYear, dayOfMonth,\n              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone);\n    }\n\n    \n    public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, Chronology chronology) {\n        super(year, monthOfYear, dayOfMonth,\n              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);\n    }\n\n    \n    \n    public DateTimeField getRoundingField() {\n        return iRoundingField;\n    }\n\n    \n    public int getRoundingMode() {\n        return iRoundingMode;\n    }\n\n    \n    public void setRounding(DateTimeField field) {\n        setRounding(field, MutableDateTime.ROUND_FLOOR);\n    }\n\n    \n    public void setRounding(DateTimeField field, int mode) {\n        if (field != null && (mode < ROUND_NONE || mode > ROUND_HALF_EVEN)) {\n            throw new IllegalArgumentException(\"Illegal rounding mode: \" + mode);\n        }\n        iRoundingField = (mode == ROUND_NONE ? null : field);\n        iRoundingMode = (field == null ? ROUND_NONE : mode);\n        setMillis(getMillis());\n    }\n\n    \n    \n    public void setMillis(long instant) {\n        switch (iRoundingMode) {\n            case ROUND_NONE:\n                break;\n            case ROUND_FLOOR:\n                instant = iRoundingField.roundFloor(instant);\n                break;\n            case ROUND_CEILING:\n                instant = iRoundingField.roundCeiling(instant);\n                break;\n            case ROUND_HALF_FLOOR:\n                instant = iRoundingField.roundHalfFloor(instant);\n                break;\n            case ROUND_HALF_CEILING:\n                instant = iRoundingField.roundHalfCeiling(instant);\n                break;\n            case ROUND_HALF_EVEN:\n                instant = iRoundingField.roundHalfEven(instant);\n                break;\n        }\n        super.setMillis(instant);\n    }\n\n    \n    public void setMillis(ReadableInstant instant) {\n        long instantMillis = DateTimeUtils.getInstantMillis(instant);\n        setMillis(instantMillis);  \n    }\n\n    \n    \n    public void add(long duration) {\n        setMillis(FieldUtils.safeAdd(getMillis(), duration));  \n    }\n\n    \n    public void add(ReadableDuration duration) {\n        add(duration, 1);\n    }\n\n    \n    public void add(ReadableDuration duration, int scalar) {\n        if (duration != null) {\n            add(FieldUtils.safeMultiply(duration.getMillis(), scalar));\n        }\n    }\n\n    \n    public void add(ReadablePeriod period) {\n        add(period, 1);\n    }\n\n    \n    public void add(ReadablePeriod period, int scalar) {\n        if (period != null) {\n            setMillis(getChronology().add(period, getMillis(), scalar));  \n        }\n    }\n\n    \n    \n    public void setChronology(Chronology chronology) {\n        super.setChronology(chronology);\n    }\n\n    \n    \n    public void setZone(DateTimeZone newZone) {\n        newZone = DateTimeUtils.getZone(newZone);\n        Chronology chrono = getChronology();\n        if (chrono.getZone() != newZone) {\n            setChronology(chrono.withZone(newZone));  \n        }\n    }\n\n    \n    public void setZoneRetainFields(DateTimeZone newZone) {\n        newZone = DateTimeUtils.getZone(newZone);\n        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());\n        if (newZone == originalZone) {\n            return;\n        }\n        \n        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());\n        setChronology(getChronology().withZone(newZone));  \n        setMillis(millis);\n    }\n\n    \n    \n    public void set(DateTimeFieldType type, int value) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        setMillis(type.getField(getChronology()).set(getMillis(), value));\n    }\n\n    \n    public void add(DurationFieldType type, int amount) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n    }\n\n    \n    \n    public void setYear(final int year) {\n        setMillis(getChronology().year().set(getMillis(), year));\n    }\n\n    \n    public void addYears(final int years) {\n            setMillis(getChronology().years().add(getMillis(), years));\n    }\n\n    \n    \n    public void setWeekyear(final int weekyear) {\n        setMillis(getChronology().weekyear().set(getMillis(), weekyear));\n    }\n\n    \n    public void addWeekyears(final int weekyears) {\n            setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n    }\n\n    \n    \n    public void setMonthOfYear(final int monthOfYear) {\n        setMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));\n    }\n\n    \n    public void addMonths(final int months) {\n            setMillis(getChronology().months().add(getMillis(), months));\n    }\n\n    \n    \n    public void setWeekOfWeekyear(final int weekOfWeekyear) {\n        setMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));\n    }\n\n    \n    public void addWeeks(final int weeks) {\n            setMillis(getChronology().weeks().add(getMillis(), weeks));\n    }\n\n    \n    \n    public void setDayOfYear(final int dayOfYear) {\n        setMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));\n    }\n\n    \n    public void setDayOfMonth(final int dayOfMonth) {\n        setMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));\n    }\n\n    \n    public void setDayOfWeek(final int dayOfWeek) {\n        setMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));\n    }\n\n    \n    public void addDays(final int days) {\n            setMillis(getChronology().days().add(getMillis(), days));\n    }\n\n    \n    \n    public void setHourOfDay(final int hourOfDay) {\n        setMillis(getChronology().hourOfDay().set(getMillis(), hourOfDay));\n    }\n\n    \n    public void addHours(final int hours) {\n            setMillis(getChronology().hours().add(getMillis(), hours));\n    }\n    \n    \n    \n    public void setMinuteOfDay(final int minuteOfDay) {\n        setMillis(getChronology().minuteOfDay().set(getMillis(), minuteOfDay));\n    }\n\n    \n    public void setMinuteOfHour(final int minuteOfHour) {\n        setMillis(getChronology().minuteOfHour().set(getMillis(), minuteOfHour));\n    }\n\n    \n    public void addMinutes(final int minutes) {\n            setMillis(getChronology().minutes().add(getMillis(), minutes));\n    }\n\n    \n    \n    public void setSecondOfDay(final int secondOfDay) {\n        setMillis(getChronology().secondOfDay().set(getMillis(), secondOfDay));\n    }\n\n    \n    public void setSecondOfMinute(final int secondOfMinute) {\n        setMillis(getChronology().secondOfMinute().set(getMillis(), secondOfMinute));\n    }\n\n    \n    public void addSeconds(final int seconds) {\n            setMillis(getChronology().seconds().add(getMillis(), seconds));\n    }\n\n    \n    \n    public void setMillisOfDay(final int millisOfDay) {\n        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));\n    }\n\n    \n    public void setMillisOfSecond(final int millisOfSecond) {\n        setMillis(getChronology().millisOfSecond().set(getMillis(), millisOfSecond));\n    }\n\n    \n    public void addMillis(final int millis) {\n            setMillis(getChronology().millis().add(getMillis(), millis));\n    }\n\n    \n    \n    public void setDate(final long instant) {\n        setMillis(getChronology().millisOfDay().set(instant, getMillisOfDay()));\n    }\n\n    \n    public void setDate(final ReadableInstant instant) {\n        long instantMillis = DateTimeUtils.getInstantMillis(instant);\n        if (instant instanceof ReadableDateTime) {\n            ReadableDateTime rdt = (ReadableDateTime) instant;\n            Chronology instantChrono = DateTimeUtils.getChronology(rdt.getChronology());\n            DateTimeZone zone = instantChrono.getZone();\n            if (zone != null) {\n                instantMillis = zone.getMillisKeepLocal(getZone(), instantMillis);\n            }\n        }\n        setDate(instantMillis);\n    }\n\n    \n    public void setDate( final int year, final int monthOfYear, final int dayOfMonth) {\n        Chronology c = getChronology();\n        long instantMidnight = c.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n        setDate(instantMidnight);\n    }\n\n    \n    \n    public void setTime(final long millis) {\n        int millisOfDay = ISOChronology.getInstanceUTC().millisOfDay().get(millis);\n        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));\n    }\n\n    \n    public void setTime(final ReadableInstant instant) {\n        long instantMillis = DateTimeUtils.getInstantMillis(instant);\n        Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);\n        DateTimeZone zone = instantChrono.getZone();\n        if (zone != null) {\n            instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);\n        }\n        setTime(instantMillis);\n    }\n\n    \n    public void setTime( final int hour, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond) {\n        long instant = getChronology().getDateTimeMillis(\n            getMillis(), hour, minuteOfHour, secondOfMinute, millisOfSecond);\n        setMillis(instant);\n    }\n\n    \n    public void setDateTime( final int year, final int monthOfYear, final int dayOfMonth, final int hourOfDay, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond) {\n        long instant = getChronology().getDateTimeMillis(\n            year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        setMillis(instant);\n    }\n\n    \n    \n    public Property property(DateTimeFieldType type) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"The DateTimeFieldType must not be null\");\n        }\n        DateTimeField field = type.getField(getChronology());\n        if (field.isSupported() == false) {\n            throw new IllegalArgumentException(\"Field '\" + type + \"' is not supported\");\n        }\n        return new Property(this, field);\n    }\n\n    \n    public Property era() {\n        return new Property(this, getChronology().era());\n    }\n\n    \n    public Property centuryOfEra() {\n        return new Property(this, getChronology().centuryOfEra());\n    }\n\n    \n    public Property yearOfCentury() {\n        return new Property(this, getChronology().yearOfCentury());\n    }\n\n    \n    public Property yearOfEra() {\n        return new Property(this, getChronology().yearOfEra());\n    }\n\n    \n    public Property year() {\n        return new Property(this, getChronology().year());\n    }\n\n    \n    public Property weekyear() {\n        return new Property(this, getChronology().weekyear());\n    }\n\n    \n    public Property monthOfYear() {\n        return new Property(this, getChronology().monthOfYear());\n    }\n\n    \n    public Property weekOfWeekyear() {\n        return new Property(this, getChronology().weekOfWeekyear());\n    }\n\n    \n    public Property dayOfYear() {\n        return new Property(this, getChronology().dayOfYear());\n    }\n\n    \n    public Property dayOfMonth() {\n        return new Property(this, getChronology().dayOfMonth());\n    }\n\n    \n    public Property dayOfWeek() {\n        return new Property(this, getChronology().dayOfWeek());\n    }\n\n    \n    \n    public Property hourOfDay() {\n        return new Property(this, getChronology().hourOfDay());\n    }\n\n    \n    public Property minuteOfDay() {\n        return new Property(this, getChronology().minuteOfDay());\n    }\n\n    \n    public Property minuteOfHour() {\n        return new Property(this, getChronology().minuteOfHour());\n    }\n\n    \n    public Property secondOfDay() {\n        return new Property(this, getChronology().secondOfDay());\n    }\n\n    \n    public Property secondOfMinute() {\n        return new Property(this, getChronology().secondOfMinute());\n    }\n\n    \n    public Property millisOfDay() {\n        return new Property(this, getChronology().millisOfDay());\n    }\n\n    \n    public Property millisOfSecond() {\n        return new Property(this, getChronology().millisOfSecond());\n    }\n\n    \n    \n    public MutableDateTime copy() {\n        return (MutableDateTime) clone();\n    }\n\n    \n    \n    public Object clone() {\n        try {\n            return super.clone();\n        } catch (CloneNotSupportedException ex) {\n            throw new InternalError(\"Clone error\");\n        }\n    }\n\n    \n    @ToString\n    public String toString() {\n        return ISODateTimeFormat.dateTime().print(this);\n    }\n\n    \n    public static final class Property extends AbstractReadableInstantFieldProperty { private static final long serialVersionUID = -4481126543819298617L; private MutableDateTime iInstant; private DateTimeField iField; Property(MutableDateTime instant, DateTimeField field) {\n            super();\n            iInstant = instant;\n            iField = field;\n        }\n        \n        \n        private void writeObject(ObjectOutputStream oos) throws IOException {\n            oos.writeObject(iInstant);\n            oos.writeObject(iField.getType());\n        }\n\n        \n        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {\n            iInstant = (MutableDateTime) oos.readObject();\n            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();\n            iField = type.getField(iInstant.getChronology());\n        }\n\n        \n        \n        public DateTimeField getField() {\n            return iField;\n        }\n        \n        \n        protected long getMillis() {\n            return iInstant.getMillis();\n        }\n        \n        \n        protected Chronology getChronology() {\n            return iInstant.getChronology();\n        }\n        \n        \n        public MutableDateTime getMutableDateTime() {\n            return iInstant;\n        }\n        \n        \n        \n        public MutableDateTime add(int value) {\n            iInstant.setMillis(getField().add(iInstant.getMillis(), value));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime add(long value) {\n            iInstant.setMillis(getField().add(iInstant.getMillis(), value));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime addWrapField(int value) {\n            iInstant.setMillis(getField().addWrapField(iInstant.getMillis(), value));\n            return iInstant;\n        }\n        \n        \n        \n        public MutableDateTime set(int value) {\n            iInstant.setMillis(getField().set(iInstant.getMillis(), value));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime set(String text, Locale locale) {\n            iInstant.setMillis(getField().set(iInstant.getMillis(), text, locale));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime set(String text) {\n            set(text, null);\n            return iInstant;\n        }\n        \n        \n        \n        public MutableDateTime roundFloor() {\n            iInstant.setMillis(getField().roundFloor(iInstant.getMillis()));\n            return iInstant;\n        }\n\n        \n        public MutableDateTime roundCeiling() {\n            iInstant.setMillis(getField().roundCeiling(iInstant.getMillis()));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime roundHalfFloor() {\n            iInstant.setMillis(getField().roundHalfFloor(iInstant.getMillis()));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime roundHalfCeiling() {\n            iInstant.setMillis(getField().roundHalfCeiling(iInstant.getMillis()));\n            return iInstant;\n        }\n\n        \n        public MutableDateTime roundHalfEven() {\n            iInstant.setMillis(getField().roundHalfEven(iInstant.getMillis()));\n            return iInstant;\n        }\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.joda.time;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Locale;\n\nimport org.joda.convert.FromString;\nimport org.joda.convert.ToString;\nimport org.joda.time.base.BaseDateTime;\nimport org.joda.time.chrono.ISOChronology;\nimport org.joda.time.field.AbstractReadableInstantFieldProperty;\nimport org.joda.time.field.FieldUtils;\nimport org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\n\npublic class MutableDateTime extends BaseDateTime implements ReadWritableDateTime, Cloneable, Serializable { private static final long serialVersionUID = 2852608688135209575L; public static final int ROUND_NONE = 0; public static final int ROUND_FLOOR = 1; public static final int ROUND_CEILING = 2; public static final int ROUND_HALF_FLOOR = 3; public static final int ROUND_HALF_CEILING = 4; public static final int ROUND_HALF_EVEN = 5; private DateTimeField iRoundingField; private int iRoundingMode; public static MutableDateTime now() {\n        return new MutableDateTime();\n    }\n\n    \n    public static MutableDateTime now(DateTimeZone zone) {\n        if (zone == null) {\n            throw new NullPointerException(\"Zone must not be null\");\n        }\n        return new MutableDateTime(zone);\n    }\n\n    \n    public static MutableDateTime now(Chronology chronology) {\n        if (chronology == null) {\n            throw new NullPointerException(\"Chronology must not be null\");\n        }\n        return new MutableDateTime(chronology);\n    }\n\n    \n    \n    @FromString\n    public static MutableDateTime parse(String str) {\n        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());\n    }\n\n    \n    public static MutableDateTime parse(String str, DateTimeFormatter formatter) {\n        return formatter.parseDateTime(str).toMutableDateTime();\n    }\n\n    \n    \n    public MutableDateTime() {\n        super();\n    }\n\n    \n    public MutableDateTime(DateTimeZone zone) {\n        super(zone);\n    }\n\n    \n    public MutableDateTime(Chronology chronology) {\n        super(chronology);\n    }\n\n    \n    \n    public MutableDateTime(long instant) {\n        super(instant);\n    }\n\n    \n    public MutableDateTime(long instant, DateTimeZone zone) {\n        super(instant, zone);\n    }\n\n    \n    public MutableDateTime(long instant, Chronology chronology) {\n        super(instant, chronology);\n    }\n\n    \n    \n    public MutableDateTime(Object instant) {\n        super(instant, (Chronology) null);\n    }\n\n    \n    public MutableDateTime(Object instant, DateTimeZone zone) {\n        super(instant, zone);\n    }\n\n    \n    public MutableDateTime(Object instant, Chronology chronology) {\n        super(instant, DateTimeUtils.getChronology(chronology));\n    }\n\n    \n    \n    public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {\n        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    \n    public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, DateTimeZone zone) {\n        super(year, monthOfYear, dayOfMonth,\n              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone);\n    }\n\n    \n    public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, Chronology chronology) {\n        super(year, monthOfYear, dayOfMonth,\n              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);\n    }\n\n    \n    \n    public DateTimeField getRoundingField() {\n        return iRoundingField;\n    }\n\n    \n    public int getRoundingMode() {\n        return iRoundingMode;\n    }\n\n    \n    public void setRounding(DateTimeField field) {\n        setRounding(field, MutableDateTime.ROUND_FLOOR);\n    }\n\n    \n    public void setRounding(DateTimeField field, int mode) {\n        if (field != null && (mode < ROUND_NONE || mode > ROUND_HALF_EVEN)) {\n            throw new IllegalArgumentException(\"Illegal rounding mode: \" + mode);\n        }\n        iRoundingField = (mode == ROUND_NONE ? null : field);\n        iRoundingMode = (field == null ? ROUND_NONE : mode);\n        setMillis(getMillis());\n    }\n\n    \n    \n    public void setMillis(long instant) {\n        switch (iRoundingMode) {\n            case ROUND_NONE:\n                break;\n            case ROUND_FLOOR:\n                instant = iRoundingField.roundFloor(instant);\n                break;\n            case ROUND_CEILING:\n                instant = iRoundingField.roundCeiling(instant);\n                break;\n            case ROUND_HALF_FLOOR:\n                instant = iRoundingField.roundHalfFloor(instant);\n                break;\n            case ROUND_HALF_CEILING:\n                instant = iRoundingField.roundHalfCeiling(instant);\n                break;\n            case ROUND_HALF_EVEN:\n                instant = iRoundingField.roundHalfEven(instant);\n                break;\n        }\n        super.setMillis(instant);\n    }\n\n    \n    public void setMillis(ReadableInstant instant) {\n        long instantMillis = DateTimeUtils.getInstantMillis(instant);\n        setMillis(instantMillis);  \n    }\n\n    \n    \n    public void add(long duration) {\n        setMillis(FieldUtils.safeAdd(getMillis(), duration));  \n    }\n\n    \n    public void add(ReadableDuration duration) {\n        add(duration, 1);\n    }\n\n    \n    public void add(ReadableDuration duration, int scalar) {\n        if (duration != null) {\n            add(FieldUtils.safeMultiply(duration.getMillis(), scalar));\n        }\n    }\n\n    \n    public void add(ReadablePeriod period) {\n        add(period, 1);\n    }\n\n    \n    public void add(ReadablePeriod period, int scalar) {\n        if (period != null) {\n            setMillis(getChronology().add(period, getMillis(), scalar));  \n        }\n    }\n\n    \n    \n    public void setChronology(Chronology chronology) {\n        super.setChronology(chronology);\n    }\n\n    \n    \n    public void setZone(DateTimeZone newZone) {\n        newZone = DateTimeUtils.getZone(newZone);\n        Chronology chrono = getChronology();\n        if (chrono.getZone() != newZone) {\n            setChronology(chrono.withZone(newZone));  \n        }\n    }\n\n    \n    public void setZoneRetainFields(DateTimeZone newZone) {\n        newZone = DateTimeUtils.getZone(newZone);\n        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());\n        if (newZone == originalZone) {\n            return;\n        }\n        \n        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());\n        setChronology(getChronology().withZone(newZone));  \n        setMillis(millis);\n    }\n\n    \n    \n    public void set(DateTimeFieldType type, int value) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        setMillis(type.getField(getChronology()).set(getMillis(), value));\n    }\n\n    \n    public void add(DurationFieldType type, int amount) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        if (amount != 0) {\n            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n        }\n    }\n\n    \n    \n    public void setYear(final int year) {\n        setMillis(getChronology().year().set(getMillis(), year));\n    }\n\n    \n    public void addYears(final int years) {\n        if (years != 0) {\n            setMillis(getChronology().years().add(getMillis(), years));\n        }\n    }\n\n    \n    \n    public void setWeekyear(final int weekyear) {\n        setMillis(getChronology().weekyear().set(getMillis(), weekyear));\n    }\n\n    \n    public void addWeekyears(final int weekyears) {\n        if (weekyears != 0) {\n            setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n        }\n    }\n\n    \n    \n    public void setMonthOfYear(final int monthOfYear) {\n        setMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));\n    }\n\n    \n    public void addMonths(final int months) {\n        if (months != 0) {\n            setMillis(getChronology().months().add(getMillis(), months));\n        }\n    }\n\n    \n    \n    public void setWeekOfWeekyear(final int weekOfWeekyear) {\n        setMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));\n    }\n\n    \n    public void addWeeks(final int weeks) {\n        if (weeks != 0) {\n            setMillis(getChronology().weeks().add(getMillis(), weeks));\n        }\n    }\n\n    \n    \n    public void setDayOfYear(final int dayOfYear) {\n        setMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));\n    }\n\n    \n    public void setDayOfMonth(final int dayOfMonth) {\n        setMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));\n    }\n\n    \n    public void setDayOfWeek(final int dayOfWeek) {\n        setMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));\n    }\n\n    \n    public void addDays(final int days) {\n        if (days != 0) {\n            setMillis(getChronology().days().add(getMillis(), days));\n        }\n    }\n\n    \n    \n    public void setHourOfDay(final int hourOfDay) {\n        setMillis(getChronology().hourOfDay().set(getMillis(), hourOfDay));\n    }\n\n    \n    public void addHours(final int hours) {\n        if (hours != 0) {\n            setMillis(getChronology().hours().add(getMillis(), hours));\n        }\n    }\n    \n    \n    \n    public void setMinuteOfDay(final int minuteOfDay) {\n        setMillis(getChronology().minuteOfDay().set(getMillis(), minuteOfDay));\n    }\n\n    \n    public void setMinuteOfHour(final int minuteOfHour) {\n        setMillis(getChronology().minuteOfHour().set(getMillis(), minuteOfHour));\n    }\n\n    \n    public void addMinutes(final int minutes) {\n        if (minutes != 0) {\n            setMillis(getChronology().minutes().add(getMillis(), minutes));\n        }\n    }\n\n    \n    \n    public void setSecondOfDay(final int secondOfDay) {\n        setMillis(getChronology().secondOfDay().set(getMillis(), secondOfDay));\n    }\n\n    \n    public void setSecondOfMinute(final int secondOfMinute) {\n        setMillis(getChronology().secondOfMinute().set(getMillis(), secondOfMinute));\n    }\n\n    \n    public void addSeconds(final int seconds) {\n        if (seconds != 0) {\n            setMillis(getChronology().seconds().add(getMillis(), seconds));\n        }\n    }\n\n    \n    \n    public void setMillisOfDay(final int millisOfDay) {\n        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));\n    }\n\n    \n    public void setMillisOfSecond(final int millisOfSecond) {\n        setMillis(getChronology().millisOfSecond().set(getMillis(), millisOfSecond));\n    }\n\n    \n    public void addMillis(final int millis) {\n        if (millis != 0) {\n            setMillis(getChronology().millis().add(getMillis(), millis));\n        }\n    }\n\n    \n    \n    public void setDate(final long instant) {\n        setMillis(getChronology().millisOfDay().set(instant, getMillisOfDay()));\n    }\n\n    \n    public void setDate(final ReadableInstant instant) {\n        long instantMillis = DateTimeUtils.getInstantMillis(instant);\n        if (instant instanceof ReadableDateTime) {\n            ReadableDateTime rdt = (ReadableDateTime) instant;\n            Chronology instantChrono = DateTimeUtils.getChronology(rdt.getChronology());\n            DateTimeZone zone = instantChrono.getZone();\n            if (zone != null) {\n                instantMillis = zone.getMillisKeepLocal(getZone(), instantMillis);\n            }\n        }\n        setDate(instantMillis);\n    }\n\n    \n    public void setDate( final int year, final int monthOfYear, final int dayOfMonth) {\n        Chronology c = getChronology();\n        long instantMidnight = c.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n        setDate(instantMidnight);\n    }\n\n    \n    \n    public void setTime(final long millis) {\n        int millisOfDay = ISOChronology.getInstanceUTC().millisOfDay().get(millis);\n        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));\n    }\n\n    \n    public void setTime(final ReadableInstant instant) {\n        long instantMillis = DateTimeUtils.getInstantMillis(instant);\n        Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);\n        DateTimeZone zone = instantChrono.getZone();\n        if (zone != null) {\n            instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);\n        }\n        setTime(instantMillis);\n    }\n\n    \n    public void setTime( final int hour, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond) {\n        long instant = getChronology().getDateTimeMillis(\n            getMillis(), hour, minuteOfHour, secondOfMinute, millisOfSecond);\n        setMillis(instant);\n    }\n\n    \n    public void setDateTime( final int year, final int monthOfYear, final int dayOfMonth, final int hourOfDay, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond) {\n        long instant = getChronology().getDateTimeMillis(\n            year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        setMillis(instant);\n    }\n\n    \n    \n    public Property property(DateTimeFieldType type) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"The DateTimeFieldType must not be null\");\n        }\n        DateTimeField field = type.getField(getChronology());\n        if (field.isSupported() == false) {\n            throw new IllegalArgumentException(\"Field '\" + type + \"' is not supported\");\n        }\n        return new Property(this, field);\n    }\n\n    \n    public Property era() {\n        return new Property(this, getChronology().era());\n    }\n\n    \n    public Property centuryOfEra() {\n        return new Property(this, getChronology().centuryOfEra());\n    }\n\n    \n    public Property yearOfCentury() {\n        return new Property(this, getChronology().yearOfCentury());\n    }\n\n    \n    public Property yearOfEra() {\n        return new Property(this, getChronology().yearOfEra());\n    }\n\n    \n    public Property year() {\n        return new Property(this, getChronology().year());\n    }\n\n    \n    public Property weekyear() {\n        return new Property(this, getChronology().weekyear());\n    }\n\n    \n    public Property monthOfYear() {\n        return new Property(this, getChronology().monthOfYear());\n    }\n\n    \n    public Property weekOfWeekyear() {\n        return new Property(this, getChronology().weekOfWeekyear());\n    }\n\n    \n    public Property dayOfYear() {\n        return new Property(this, getChronology().dayOfYear());\n    }\n\n    \n    public Property dayOfMonth() {\n        return new Property(this, getChronology().dayOfMonth());\n    }\n\n    \n    public Property dayOfWeek() {\n        return new Property(this, getChronology().dayOfWeek());\n    }\n\n    \n    \n    public Property hourOfDay() {\n        return new Property(this, getChronology().hourOfDay());\n    }\n\n    \n    public Property minuteOfDay() {\n        return new Property(this, getChronology().minuteOfDay());\n    }\n\n    \n    public Property minuteOfHour() {\n        return new Property(this, getChronology().minuteOfHour());\n    }\n\n    \n    public Property secondOfDay() {\n        return new Property(this, getChronology().secondOfDay());\n    }\n\n    \n    public Property secondOfMinute() {\n        return new Property(this, getChronology().secondOfMinute());\n    }\n\n    \n    public Property millisOfDay() {\n        return new Property(this, getChronology().millisOfDay());\n    }\n\n    \n    public Property millisOfSecond() {\n        return new Property(this, getChronology().millisOfSecond());\n    }\n\n    \n    \n    public MutableDateTime copy() {\n        return (MutableDateTime) clone();\n    }\n\n    \n    \n    public Object clone() {\n        try {\n            return super.clone();\n        } catch (CloneNotSupportedException ex) {\n            throw new InternalError(\"Clone error\");\n        }\n    }\n\n    \n    @ToString\n    public String toString() {\n        return ISODateTimeFormat.dateTime().print(this);\n    }\n\n    \n    public static final class Property extends AbstractReadableInstantFieldProperty { private static final long serialVersionUID = -4481126543819298617L; private MutableDateTime iInstant; private DateTimeField iField; Property(MutableDateTime instant, DateTimeField field) {\n            super();\n            iInstant = instant;\n            iField = field;\n        }\n        \n        \n        private void writeObject(ObjectOutputStream oos) throws IOException {\n            oos.writeObject(iInstant);\n            oos.writeObject(iField.getType());\n        }\n\n        \n        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {\n            iInstant = (MutableDateTime) oos.readObject();\n            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();\n            iField = type.getField(iInstant.getChronology());\n        }\n\n        \n        \n        public DateTimeField getField() {\n            return iField;\n        }\n        \n        \n        protected long getMillis() {\n            return iInstant.getMillis();\n        }\n        \n        \n        protected Chronology getChronology() {\n            return iInstant.getChronology();\n        }\n        \n        \n        public MutableDateTime getMutableDateTime() {\n            return iInstant;\n        }\n        \n        \n        \n        public MutableDateTime add(int value) {\n            iInstant.setMillis(getField().add(iInstant.getMillis(), value));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime add(long value) {\n            iInstant.setMillis(getField().add(iInstant.getMillis(), value));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime addWrapField(int value) {\n            iInstant.setMillis(getField().addWrapField(iInstant.getMillis(), value));\n            return iInstant;\n        }\n        \n        \n        \n        public MutableDateTime set(int value) {\n            iInstant.setMillis(getField().set(iInstant.getMillis(), value));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime set(String text, Locale locale) {\n            iInstant.setMillis(getField().set(iInstant.getMillis(), text, locale));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime set(String text) {\n            set(text, null);\n            return iInstant;\n        }\n        \n        \n        \n        public MutableDateTime roundFloor() {\n            iInstant.setMillis(getField().roundFloor(iInstant.getMillis()));\n            return iInstant;\n        }\n\n        \n        public MutableDateTime roundCeiling() {\n            iInstant.setMillis(getField().roundCeiling(iInstant.getMillis()));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime roundHalfFloor() {\n            iInstant.setMillis(getField().roundHalfFloor(iInstant.getMillis()));\n            return iInstant;\n        }\n        \n        \n        public MutableDateTime roundHalfCeiling() {\n            iInstant.setMillis(getField().roundHalfCeiling(iInstant.getMillis()));\n            return iInstant;\n        }\n\n        \n        public MutableDateTime roundHalfEven() {\n            iInstant.setMillis(getField().roundHalfEven(iInstant.getMillis()));\n            return iInstant;\n        }\n    }\n\n}\n",
      "buggy_signatures": [
        "public static MutableDateTime now(DateTimeZone zone)",
        "public static MutableDateTime now(Chronology chronology)",
        "public static MutableDateTime parse(String str)",
        "public static MutableDateTime parse(String str, DateTimeFormatter formatter)",
        "public MutableDateTime()",
        "public MutableDateTime(DateTimeZone zone)",
        "public MutableDateTime(Chronology chronology)",
        "public MutableDateTime(long instant)",
        "public MutableDateTime(long instant, DateTimeZone zone)",
        "public MutableDateTime(long instant, Chronology chronology)",
        "public MutableDateTime(Object instant)",
        "public MutableDateTime(Object instant, DateTimeZone zone)",
        "public MutableDateTime(Object instant, Chronology chronology)",
        "public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)",
        "public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, DateTimeZone zone)",
        "public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, Chronology chronology)",
        "public DateTimeField getRoundingField()",
        "public int getRoundingMode()",
        "public void setRounding(DateTimeField field)",
        "public void setRounding(DateTimeField field, int mode)",
        "public void setMillis(long instant)",
        "public void setMillis(ReadableInstant instant)",
        "public void add(long duration)",
        "public void add(ReadableDuration duration)",
        "public void add(ReadableDuration duration, int scalar)",
        "public void add(ReadablePeriod period)",
        "public void add(ReadablePeriod period, int scalar)",
        "public void setChronology(Chronology chronology)",
        "public void setZone(DateTimeZone newZone)",
        "public void setZoneRetainFields(DateTimeZone newZone)",
        "public void set(DateTimeFieldType type, int value)",
        "public void add(DurationFieldType type, int amount)",
        "public void setYear(final int year)",
        "public void addYears(final int years)",
        "public void setWeekyear(final int weekyear)",
        "public void addWeekyears(final int weekyears)",
        "public void setMonthOfYear(final int monthOfYear)",
        "public void addMonths(final int months)",
        "public void setWeekOfWeekyear(final int weekOfWeekyear)",
        "public void addWeeks(final int weeks)",
        "public void setDayOfYear(final int dayOfYear)",
        "public void setDayOfMonth(final int dayOfMonth)",
        "public void setDayOfWeek(final int dayOfWeek)",
        "public void addDays(final int days)",
        "public void setHourOfDay(final int hourOfDay)",
        "public void addHours(final int hours)",
        "public void setMinuteOfDay(final int minuteOfDay)",
        "public void setMinuteOfHour(final int minuteOfHour)",
        "public void addMinutes(final int minutes)",
        "public void setSecondOfDay(final int secondOfDay)",
        "public void setSecondOfMinute(final int secondOfMinute)",
        "public void addSeconds(final int seconds)",
        "public void setMillisOfDay(final int millisOfDay)",
        "public void setMillisOfSecond(final int millisOfSecond)",
        "public void addMillis(final int millis)",
        "public void setDate(final long instant)",
        "public void setDate(final ReadableInstant instant)",
        "public void setDate( final int year, final int monthOfYear, final int dayOfMonth)",
        "public void setTime(final long millis)",
        "public void setTime(final ReadableInstant instant)",
        "public void setTime( final int hour, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond)",
        "public void setDateTime( final int year, final int monthOfYear, final int dayOfMonth, final int hourOfDay, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond)",
        "public Property property(DateTimeFieldType type)",
        "public Property era()",
        "public Property centuryOfEra()",
        "public Property yearOfCentury()",
        "public Property yearOfEra()",
        "public Property year()",
        "public Property weekyear()",
        "public Property monthOfYear()",
        "public Property weekOfWeekyear()",
        "public Property dayOfYear()",
        "public Property dayOfMonth()",
        "public Property dayOfWeek()",
        "public Property hourOfDay()",
        "public Property minuteOfDay()",
        "public Property minuteOfHour()",
        "public Property secondOfDay()",
        "public Property secondOfMinute()",
        "public Property millisOfDay()",
        "public Property millisOfSecond()",
        "public MutableDateTime copy()",
        "public Object clone()",
        "public String toString()",
        "private void writeObject(ObjectOutputStream oos) throws IOException",
        "private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException",
        "public DateTimeField getField()",
        "protected long getMillis()",
        "protected Chronology getChronology()",
        "public MutableDateTime getMutableDateTime()",
        "public MutableDateTime add(int value)",
        "public MutableDateTime add(long value)",
        "public MutableDateTime addWrapField(int value)",
        "public MutableDateTime set(int value)",
        "public MutableDateTime set(String text, Locale locale)",
        "public MutableDateTime set(String text)",
        "public MutableDateTime roundFloor()",
        "public MutableDateTime roundCeiling()",
        "public MutableDateTime roundHalfFloor()",
        "public MutableDateTime roundHalfCeiling()",
        "public MutableDateTime roundHalfEven()"
      ],
      "fixed_signatures": [
        "public static MutableDateTime now(DateTimeZone zone)",
        "public static MutableDateTime now(Chronology chronology)",
        "public static MutableDateTime parse(String str)",
        "public static MutableDateTime parse(String str, DateTimeFormatter formatter)",
        "public MutableDateTime()",
        "public MutableDateTime(DateTimeZone zone)",
        "public MutableDateTime(Chronology chronology)",
        "public MutableDateTime(long instant)",
        "public MutableDateTime(long instant, DateTimeZone zone)",
        "public MutableDateTime(long instant, Chronology chronology)",
        "public MutableDateTime(Object instant)",
        "public MutableDateTime(Object instant, DateTimeZone zone)",
        "public MutableDateTime(Object instant, Chronology chronology)",
        "public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)",
        "public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, DateTimeZone zone)",
        "public MutableDateTime( int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, Chronology chronology)",
        "public DateTimeField getRoundingField()",
        "public int getRoundingMode()",
        "public void setRounding(DateTimeField field)",
        "public void setRounding(DateTimeField field, int mode)",
        "public void setMillis(long instant)",
        "public void setMillis(ReadableInstant instant)",
        "public void add(long duration)",
        "public void add(ReadableDuration duration)",
        "public void add(ReadableDuration duration, int scalar)",
        "public void add(ReadablePeriod period)",
        "public void add(ReadablePeriod period, int scalar)",
        "public void setChronology(Chronology chronology)",
        "public void setZone(DateTimeZone newZone)",
        "public void setZoneRetainFields(DateTimeZone newZone)",
        "public void set(DateTimeFieldType type, int value)",
        "public void add(DurationFieldType type, int amount)",
        "public void setYear(final int year)",
        "public void addYears(final int years)",
        "public void setWeekyear(final int weekyear)",
        "public void addWeekyears(final int weekyears)",
        "public void setMonthOfYear(final int monthOfYear)",
        "public void addMonths(final int months)",
        "public void setWeekOfWeekyear(final int weekOfWeekyear)",
        "public void addWeeks(final int weeks)",
        "public void setDayOfYear(final int dayOfYear)",
        "public void setDayOfMonth(final int dayOfMonth)",
        "public void setDayOfWeek(final int dayOfWeek)",
        "public void addDays(final int days)",
        "public void setHourOfDay(final int hourOfDay)",
        "public void addHours(final int hours)",
        "public void setMinuteOfDay(final int minuteOfDay)",
        "public void setMinuteOfHour(final int minuteOfHour)",
        "public void addMinutes(final int minutes)",
        "public void setSecondOfDay(final int secondOfDay)",
        "public void setSecondOfMinute(final int secondOfMinute)",
        "public void addSeconds(final int seconds)",
        "public void setMillisOfDay(final int millisOfDay)",
        "public void setMillisOfSecond(final int millisOfSecond)",
        "public void addMillis(final int millis)",
        "public void setDate(final long instant)",
        "public void setDate(final ReadableInstant instant)",
        "public void setDate( final int year, final int monthOfYear, final int dayOfMonth)",
        "public void setTime(final long millis)",
        "public void setTime(final ReadableInstant instant)",
        "public void setTime( final int hour, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond)",
        "public void setDateTime( final int year, final int monthOfYear, final int dayOfMonth, final int hourOfDay, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond)",
        "public Property property(DateTimeFieldType type)",
        "public Property era()",
        "public Property centuryOfEra()",
        "public Property yearOfCentury()",
        "public Property yearOfEra()",
        "public Property year()",
        "public Property weekyear()",
        "public Property monthOfYear()",
        "public Property weekOfWeekyear()",
        "public Property dayOfYear()",
        "public Property dayOfMonth()",
        "public Property dayOfWeek()",
        "public Property hourOfDay()",
        "public Property minuteOfDay()",
        "public Property minuteOfHour()",
        "public Property secondOfDay()",
        "public Property secondOfMinute()",
        "public Property millisOfDay()",
        "public Property millisOfSecond()",
        "public MutableDateTime copy()",
        "public Object clone()",
        "public String toString()",
        "private void writeObject(ObjectOutputStream oos) throws IOException",
        "private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException",
        "public DateTimeField getField()",
        "protected long getMillis()",
        "protected Chronology getChronology()",
        "public MutableDateTime getMutableDateTime()",
        "public MutableDateTime add(int value)",
        "public MutableDateTime add(long value)",
        "public MutableDateTime addWrapField(int value)",
        "public MutableDateTime set(int value)",
        "public MutableDateTime set(String text, Locale locale)",
        "public MutableDateTime set(String text)",
        "public MutableDateTime roundFloor()",
        "public MutableDateTime roundCeiling()",
        "public MutableDateTime roundHalfFloor()",
        "public MutableDateTime roundHalfCeiling()",
        "public MutableDateTime roundHalfEven()"
      ],
      "methods": [
        {
          "buggy_method": "  public void add(DurationFieldType type, int amount) {\n  if (type == null) {\n  throw new IllegalArgumentException(\"Field must not be null\");\n  }\n  setMillis(type.getField(getChronology()).add(getMillis(), amount));\n  }",
          "fixed_method": "  public void add(DurationFieldType type, int amount) {\n  if (type == null) {\n  throw new IllegalArgumentException(\"Field must not be null\");\n  }\n  if (amount != 0) {\n  setMillis(type.getField(getChronology()).add(getMillis(), amount));\n  }\n  }",
          "diff": [
            "@@ -636,7 +636,9 @@",
            "         if (type == null) {\n",
            "             throw new IllegalArgumentException(\"Field must not be null\");\n",
            "         }\n",
            "+        if (amount != 0) {\n",
            "             setMillis(type.getField(getChronology()).add(getMillis(), amount));\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public void addYears(final int years) {\n  setMillis(getChronology().years().add(getMillis(), years));\n  }",
          "fixed_method": "  public void addYears(final int years) {\n  if (years != 0) {\n  setMillis(getChronology().years().add(getMillis(), years));\n  }\n  }",
          "diff": [
            "@@ -657,7 +659,9 @@",
            "      * @throws IllegalArgumentException if the value is invalid\n",
            "      */\n",
            "     public void addYears(final int years) {\n",
            "+        if (years != 0) {\n",
            "             setMillis(getChronology().years().add(getMillis(), years));\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public void addWeekyears(final int weekyears) {\n  setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n  }",
          "fixed_method": "  public void addWeekyears(final int weekyears) {\n  if (weekyears != 0) {\n  setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n  }\n  }",
          "diff": [
            "@@ -678,7 +682,9 @@",
            "      * @throws IllegalArgumentException if the value is invalid\n",
            "      */\n",
            "     public void addWeekyears(final int weekyears) {\n",
            "+        if (weekyears != 0) {\n",
            "             setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public void addMonths(final int months) {\n  setMillis(getChronology().months().add(getMillis(), months));\n  }",
          "fixed_method": "  public void addMonths(final int months) {\n  if (months != 0) {\n  setMillis(getChronology().months().add(getMillis(), months));\n  }\n  }",
          "diff": [
            "@@ -699,7 +705,9 @@",
            "      * @throws IllegalArgumentException if the value is invalid\n",
            "      */\n",
            "     public void addMonths(final int months) {\n",
            "+        if (months != 0) {\n",
            "             setMillis(getChronology().months().add(getMillis(), months));\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public void addWeeks(final int weeks) {\n  setMillis(getChronology().weeks().add(getMillis(), weeks));\n  }",
          "fixed_method": "  public void addWeeks(final int weeks) {\n  if (weeks != 0) {\n  setMillis(getChronology().weeks().add(getMillis(), weeks));\n  }\n  }",
          "diff": [
            "@@ -720,7 +728,9 @@",
            "      * @throws IllegalArgumentException if the value is invalid\n",
            "      */\n",
            "     public void addWeeks(final int weeks) {\n",
            "+        if (weeks != 0) {\n",
            "             setMillis(getChronology().weeks().add(getMillis(), weeks));\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public void addDays(final int days) {\n  setMillis(getChronology().days().add(getMillis(), days));\n  }",
          "fixed_method": "  public void addDays(final int days) {\n  if (days != 0) {\n  setMillis(getChronology().days().add(getMillis(), days));\n  }\n  }",
          "diff": [
            "@@ -761,7 +771,9 @@",
            "      * @throws IllegalArgumentException if the value is invalid\n",
            "      */\n",
            "     public void addDays(final int days) {\n",
            "+        if (days != 0) {\n",
            "             setMillis(getChronology().days().add(getMillis(), days));\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public void addHours(final int hours) {\n  setMillis(getChronology().hours().add(getMillis(), hours));\n  }",
          "fixed_method": "  public void addHours(final int hours) {\n  if (hours != 0) {\n  setMillis(getChronology().hours().add(getMillis(), hours));\n  }\n  }",
          "diff": [
            "@@ -782,7 +794,9 @@",
            "      * @throws IllegalArgumentException if the value is invalid\n",
            "      */\n",
            "     public void addHours(final int hours) {\n",
            "+        if (hours != 0) {\n",
            "             setMillis(getChronology().hours().add(getMillis(), hours));\n",
            "+        }\n",
            "     }\n",
            "     \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public void addMinutes(final int minutes) {\n  setMillis(getChronology().minutes().add(getMillis(), minutes));\n  }",
          "fixed_method": "  public void addMinutes(final int minutes) {\n  if (minutes != 0) {\n  setMillis(getChronology().minutes().add(getMillis(), minutes));\n  }\n  }",
          "diff": [
            "@@ -813,7 +827,9 @@",
            "      * @throws IllegalArgumentException if the value is invalid\n",
            "      */\n",
            "     public void addMinutes(final int minutes) {\n",
            "+        if (minutes != 0) {\n",
            "             setMillis(getChronology().minutes().add(getMillis(), minutes));\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public void addSeconds(final int seconds) {\n  setMillis(getChronology().seconds().add(getMillis(), seconds));\n  }",
          "fixed_method": "  public void addSeconds(final int seconds) {\n  if (seconds != 0) {\n  setMillis(getChronology().seconds().add(getMillis(), seconds));\n  }\n  }",
          "diff": [
            "@@ -844,7 +860,9 @@",
            "      * @throws IllegalArgumentException if the value is invalid\n",
            "      */\n",
            "     public void addSeconds(final int seconds) {\n",
            "+        if (seconds != 0) {\n",
            "             setMillis(getChronology().seconds().add(getMillis(), seconds));\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public void addMillis(final int millis) {\n  setMillis(getChronology().millis().add(getMillis(), millis));\n  }",
          "fixed_method": "  public void addMillis(final int millis) {\n  if (millis != 0) {\n  setMillis(getChronology().millis().add(getMillis(), millis));\n  }\n  }",
          "diff": [
            "@@ -877,7 +895,9 @@",
            "      * @throws IllegalArgumentException if the value is invalid\n",
            "      */\n",
            "     public void addMillis(final int millis) {\n",
            "+        if (millis != 0) {\n",
            "             setMillis(getChronology().millis().add(getMillis(), millis));\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     //-----------------------------------------------------------------------\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
