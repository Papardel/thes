{
  "bug_id": "54",
  "failed_tests": {
    "org.jsoup.helper.W3CDomTest": [
      {
        "methodName": "handlesInvalidAttributeNames",
        "error": "org.w3c.dom.DOMException",
        "message": "INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified.",
        "fail_line": "        Document w3Doc = new W3CDom().fromJsoup(jsoupDoc);",
        "test_source": "  public void handlesInvalidAttributeNames() {\n  String html = \"<html><head></head><body style=\\\"color: red\\\" \\\" name\\\"></body></html>\";\n  org.jsoup.nodes.Document jsoupDoc;\n  jsoupDoc = Jsoup.parse(html);\n  Element body = jsoupDoc.select(\"body\").first();\n  assertTrue(body.hasAttr(\"\\\"\")); // actually an attribute with key '\"'. Correct per HTML5 spec, but w3c xml dom doesn't dig it\n  assertTrue(body.hasAttr(\"name\\\"\"));\n\n  Document w3Doc = new W3CDom().fromJsoup(jsoupDoc);\n  }",
        "stack": [
          "W3CDom$W3CBuilder.copyAttributes line 126, W3CDom$W3CBuilder.head line 92, NodeTraversor.traverse line 31, W3CDom.convert line 66, W3CDom.fromJsoup line 46, W3CDomTest.handlesInvalidAttributeNames line 96"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jsoup/helper/W3CDom.java",
      "buggy_full_code": "package org.jsoup.helper;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.select.NodeTraversor;\nimport org.jsoup.select.NodeVisitor;\nimport org.w3c.dom.Comment;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Text;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.StringWriter;\nimport java.util.HashMap;\n\n\npublic class W3CDom { protected DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); public Document fromJsoup(org.jsoup.nodes.Document in) {\n        Validate.notNull(in);\n        DocumentBuilder builder;\n        try {\n        \t\n        \tfactory.setNamespaceAware(true);\n            builder = factory.newDocumentBuilder();\n            Document out = builder.newDocument();\n            convert(in, out);\n            return out;\n        } catch (ParserConfigurationException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    \n    public void convert(org.jsoup.nodes.Document in, Document out) {\n        if (!StringUtil.isBlank(in.location()))\n            out.setDocumentURI(in.location());\n\n        org.jsoup.nodes.Element rootEl = in.child(0); \n        NodeTraversor traversor = new NodeTraversor(new W3CBuilder(out));\n        traversor.traverse(rootEl);\n    }\n\n    \n    protected static class W3CBuilder implements NodeVisitor { private static final String xmlnsKey = \"xmlns\"; private static final String xmlnsPrefix = \"xmlns:\"; private final Document doc; private final HashMap<String, String> namespaces = new HashMap<String, String>(); private Element dest; public W3CBuilder(Document doc) {\n            this.doc = doc;\n        }\n\n        public void head(org.jsoup.nodes.Node source, int depth) {\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                String prefix = updateNamespaces(sourceEl);\n                String namespace = namespaces.get(prefix);\n\n                Element el = doc.createElementNS(namespace, sourceEl.tagName());\n                copyAttributes(sourceEl, el);\n                if (dest == null) { \n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; \n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                \n            }\n        }\n\n        public void tail(org.jsoup.nodes.Node source, int depth) {\n            if (source instanceof org.jsoup.nodes.Element && dest.getParentNode() instanceof Element) {\n                dest = (Element) dest.getParentNode(); \n            }\n        }\n\n        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                \n                String key = attribute.getKey().replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n                    el.setAttribute(key, attribute.getValue());\n            }\n        }\n\n        \n        private String updateNamespaces(org.jsoup.nodes.Element el) {\n            \n            \n            Attributes attributes = el.attributes();\n            for (Attribute attr : attributes) {\n                String key = attr.getKey();\n                String prefix;\n                if (key.equals(xmlnsKey)) {\n                    prefix = \"\";\n                } else if (key.startsWith(xmlnsPrefix)) {\n                    prefix = key.substring(xmlnsPrefix.length());\n                } else {\n                    continue;\n                }\n                namespaces.put(prefix, attr.getValue());\n            }\n\n            \n            int pos = el.tagName().indexOf(\":\");\n            return pos > 0 ? el.tagName().substring(0, pos) : \"\";\n        }\n\n    }\n\n    \n    public String asString(Document doc) {\n        try {\n            DOMSource domSource = new DOMSource(doc);\n            StringWriter writer = new StringWriter();\n            StreamResult result = new StreamResult(writer);\n            TransformerFactory tf = TransformerFactory.newInstance();\n            Transformer transformer = tf.newTransformer();\n            transformer.transform(domSource, result);\n            return writer.toString();\n        } catch (TransformerException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n}\n",
      "fixed_full_code": "package org.jsoup.helper;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.select.NodeTraversor;\nimport org.jsoup.select.NodeVisitor;\nimport org.w3c.dom.Comment;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Text;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.StringWriter;\nimport java.util.HashMap;\n\n\npublic class W3CDom { protected DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); public Document fromJsoup(org.jsoup.nodes.Document in) {\n        Validate.notNull(in);\n        DocumentBuilder builder;\n        try {\n        \t\n        \tfactory.setNamespaceAware(true);\n            builder = factory.newDocumentBuilder();\n            Document out = builder.newDocument();\n            convert(in, out);\n            return out;\n        } catch (ParserConfigurationException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    \n    public void convert(org.jsoup.nodes.Document in, Document out) {\n        if (!StringUtil.isBlank(in.location()))\n            out.setDocumentURI(in.location());\n\n        org.jsoup.nodes.Element rootEl = in.child(0); \n        NodeTraversor traversor = new NodeTraversor(new W3CBuilder(out));\n        traversor.traverse(rootEl);\n    }\n\n    \n    protected static class W3CBuilder implements NodeVisitor { private static final String xmlnsKey = \"xmlns\"; private static final String xmlnsPrefix = \"xmlns:\"; private final Document doc; private final HashMap<String, String> namespaces = new HashMap<String, String>(); private Element dest; public W3CBuilder(Document doc) {\n            this.doc = doc;\n        }\n\n        public void head(org.jsoup.nodes.Node source, int depth) {\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                String prefix = updateNamespaces(sourceEl);\n                String namespace = namespaces.get(prefix);\n\n                Element el = doc.createElementNS(namespace, sourceEl.tagName());\n                copyAttributes(sourceEl, el);\n                if (dest == null) { \n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; \n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                \n            }\n        }\n\n        public void tail(org.jsoup.nodes.Node source, int depth) {\n            if (source instanceof org.jsoup.nodes.Element && dest.getParentNode() instanceof Element) {\n                dest = (Element) dest.getParentNode(); \n            }\n        }\n\n        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                \n                String key = attribute.getKey().replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n                if (key.matches(\"[a-zA-Z_:]{1}[-a-zA-Z0-9_:.]*\"))\n                    el.setAttribute(key, attribute.getValue());\n            }\n        }\n\n        \n        private String updateNamespaces(org.jsoup.nodes.Element el) {\n            \n            \n            Attributes attributes = el.attributes();\n            for (Attribute attr : attributes) {\n                String key = attr.getKey();\n                String prefix;\n                if (key.equals(xmlnsKey)) {\n                    prefix = \"\";\n                } else if (key.startsWith(xmlnsPrefix)) {\n                    prefix = key.substring(xmlnsPrefix.length());\n                } else {\n                    continue;\n                }\n                namespaces.put(prefix, attr.getValue());\n            }\n\n            \n            int pos = el.tagName().indexOf(\":\");\n            return pos > 0 ? el.tagName().substring(0, pos) : \"\";\n        }\n\n    }\n\n    \n    public String asString(Document doc) {\n        try {\n            DOMSource domSource = new DOMSource(doc);\n            StringWriter writer = new StringWriter();\n            StreamResult result = new StreamResult(writer);\n            TransformerFactory tf = TransformerFactory.newInstance();\n            Transformer transformer = tf.newTransformer();\n            transformer.transform(domSource, result);\n            return writer.toString();\n        } catch (TransformerException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public void convert(org.jsoup.nodes.Document in, Document out)",
        "public void head(org.jsoup.nodes.Node source, int depth)",
        "public void tail(org.jsoup.nodes.Node source, int depth)",
        "private void copyAttributes(org.jsoup.nodes.Node source, Element el)",
        "private String updateNamespaces(org.jsoup.nodes.Element el)",
        "public String asString(Document doc)"
      ],
      "fixed_signatures": [
        "public void convert(org.jsoup.nodes.Document in, Document out)",
        "public void head(org.jsoup.nodes.Node source, int depth)",
        "public void tail(org.jsoup.nodes.Node source, int depth)",
        "private void copyAttributes(org.jsoup.nodes.Node source, Element el)",
        "private String updateNamespaces(org.jsoup.nodes.Element el)",
        "public String asString(Document doc)"
      ],
      "methods": [
        {
          "buggy_method": "  private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n  for (Attribute attribute : source.attributes()) {\n  \n  String key = attribute.getKey().replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n  el.setAttribute(key, attribute.getValue());\n  }\n  }",
          "fixed_method": "  private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n  for (Attribute attribute : source.attributes()) {\n  \n  String key = attribute.getKey().replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n  if (key.matches(\"[a-zA-Z_:]{1}[-a-zA-Z0-9_:.]*\"))\n  el.setAttribute(key, attribute.getValue());\n  }\n  }",
          "diff": [
            "@@ -123,6 +123,7 @@",
            "             for (Attribute attribute : source.attributes()) {\n",
            "                 // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]\n",
            "                 String key = attribute.getKey().replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n",
            "+                if (key.matches(\"[a-zA-Z_:]{1}[-a-zA-Z0-9_:.]*\"))\n",
            "                     el.setAttribute(key, attribute.getValue());\n",
            "             }\n",
            "         }\n"
          ],
          "changed_lines": 1
        }
      ]
    }
  ]
}
