{
  "bug_id": "8",
  "failed_tests": {
    "org.jfree.data.time.junit.WeekTests": [
      {
        "methodName": "testConstructor",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<35> but was:<34>",
        "fail_line": "        assertEquals(35, w.getWeek());",
        "test_source": "  public void testConstructor() {\n  Locale savedLocale = Locale.getDefault();\n  TimeZone savedZone = TimeZone.getDefault();\n  Locale.setDefault(new Locale(\"da\", \"DK\"));\n  TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n  GregorianCalendar cal = (GregorianCalendar) Calendar.getInstance(\n  TimeZone.getDefault(), Locale.getDefault());\n\n  // first day of week is monday\n  assertEquals(Calendar.MONDAY, cal.getFirstDayOfWeek());\n  cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0);\n  cal.set(Calendar.MILLISECOND, 0);\n  Date t = cal.getTime();\n  Week w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n  assertEquals(34, w.getWeek());\n\n  Locale.setDefault(Locale.US);\n  TimeZone.setDefault(TimeZone.getTimeZone(\"US/Detroit\"));\n  cal = (GregorianCalendar) Calendar.getInstance(TimeZone.getDefault());\n  // first day of week is Sunday\n  assertEquals(Calendar.SUNDAY, cal.getFirstDayOfWeek());\n  cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0);\n  cal.set(Calendar.MILLISECOND, 0);\n\n  t = cal.getTime();\n  w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n  assertEquals(35, w.getWeek());\n  w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"),\n  new Locale(\"da\", \"DK\"));\n  assertEquals(34, w.getWeek());\n\n  Locale.setDefault(savedLocale);\n  TimeZone.setDefault(savedZone);\n  }",
        "stack": [
          "WeekTests.testConstructor line 530"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/data/time/Week.java",
      "buggy_full_code": "\n\npackage org.jfree.data.time;\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\n\npublic class Week extends RegularTimePeriod implements Serializable { private static final long serialVersionUID = 1856387786939865061L; public static final int FIRST_WEEK_IN_YEAR = 1; public static final int LAST_WEEK_IN_YEAR = 53; private short year; private byte week; private long firstMillisecond; private long lastMillisecond; public Week() {\n        this(new Date());\n    }\n\n    \n    public Week(int week, int year) {\n        if ((week < FIRST_WEEK_IN_YEAR) && (week > LAST_WEEK_IN_YEAR)) {\n            throw new IllegalArgumentException(\n                    \"The 'week' argument must be in the range 1 - 53.\");\n        }\n        this.week = (byte) week;\n        this.year = (short) year;\n        peg(Calendar.getInstance());\n    }\n\n    \n    public Week(int week, Year year) {\n        if ((week < FIRST_WEEK_IN_YEAR) && (week > LAST_WEEK_IN_YEAR)) {\n            throw new IllegalArgumentException(\n                    \"The 'week' argument must be in the range 1 - 53.\");\n        }\n        this.week = (byte) week;\n        this.year = (short) year.getYear();\n        peg(Calendar.getInstance());\n   }\n\n    \n    public Week(Date time) {\n        \n        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n    }\n\n    \n    public Week(Date time, TimeZone zone) {\n        \n        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n    }\n\n    \n    public Week(Date time, TimeZone zone, Locale locale) {\n        if (time == null) {\n            throw new IllegalArgumentException(\"Null 'time' argument.\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        if (locale == null) {\n            throw new IllegalArgumentException(\"Null 'locale' argument.\");\n        }\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n\n        \n        \n        \n        int tempWeek = calendar.get(Calendar.WEEK_OF_YEAR);\n        if (tempWeek == 1\n                && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {\n            this.week = 1;\n            this.year = (short) (calendar.get(Calendar.YEAR) + 1);\n        }\n        else {\n            this.week = (byte) Math.min(tempWeek, LAST_WEEK_IN_YEAR);\n            int yyyy = calendar.get(Calendar.YEAR);\n            \n            \n            if (calendar.get(Calendar.MONTH) == Calendar.JANUARY\n                    && this.week >= 52) {\n                yyyy--;\n            }\n            this.year = (short) yyyy;\n        }\n        peg(calendar);\n    }\n\n    \n    public Year getYear() {\n        return new Year(this.year);\n    }\n\n    \n    public int getYearValue() {\n        return this.year;\n    }\n\n    \n    public int getWeek() {\n        return this.week;\n    }\n\n    \n    public long getFirstMillisecond() {\n        return this.firstMillisecond;\n    }\n\n    \n    public long getLastMillisecond() {\n        return this.lastMillisecond;\n    }\n\n    \n    public void peg(Calendar calendar) {\n        this.firstMillisecond = getFirstMillisecond(calendar);\n        this.lastMillisecond = getLastMillisecond(calendar);\n    }\n\n    \n    public RegularTimePeriod previous() {\n\n        Week result;\n        if (this.week != FIRST_WEEK_IN_YEAR) {\n            result = new Week(this.week - 1, this.year);\n        }\n        else {\n            \n            if (this.year > 1900) {\n                int yy = this.year - 1;\n                Calendar prevYearCalendar = Calendar.getInstance();\n                prevYearCalendar.set(yy, Calendar.DECEMBER, 31);\n                result = new Week(prevYearCalendar.getActualMaximum(\n                        Calendar.WEEK_OF_YEAR), yy);\n            }\n            else {\n                result = null;\n            }\n        }\n        return result;\n\n    }\n\n    \n    public RegularTimePeriod next() {\n\n        Week result;\n        if (this.week < 52) {\n            result = new Week(this.week + 1, this.year);\n        }\n        else {\n            Calendar calendar = Calendar.getInstance();\n            calendar.set(this.year, Calendar.DECEMBER, 31);\n            int actualMaxWeek\n                = calendar.getActualMaximum(Calendar.WEEK_OF_YEAR);\n            if (this.week < actualMaxWeek) {\n                result = new Week(this.week + 1, this.year);\n            }\n            else {\n                if (this.year < 9999) {\n                    result = new Week(FIRST_WEEK_IN_YEAR, this.year + 1);\n                }\n                else {\n                    result = null;\n                }\n            }\n        }\n        return result;\n\n    }\n\n    \n    public long getSerialIndex() {\n        return this.year * 53L + this.week;\n    }\n\n    \n    public long getFirstMillisecond(Calendar calendar) {\n        Calendar c = (Calendar) calendar.clone();\n        c.clear();\n        c.set(Calendar.YEAR, this.year);\n        c.set(Calendar.WEEK_OF_YEAR, this.week);\n        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());\n        c.set(Calendar.HOUR, 0);\n        c.set(Calendar.MINUTE, 0);\n        c.set(Calendar.SECOND, 0);\n        c.set(Calendar.MILLISECOND, 0);\n        \n        return c.getTime().getTime();\n    }\n\n    \n    public long getLastMillisecond(Calendar calendar) {\n        Calendar c = (Calendar) calendar.clone();\n        c.clear();\n        c.set(Calendar.YEAR, this.year);\n        c.set(Calendar.WEEK_OF_YEAR, this.week + 1);\n        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());\n        c.set(Calendar.HOUR, 0);\n        c.set(Calendar.MINUTE, 0);\n        c.set(Calendar.SECOND, 0);\n        c.set(Calendar.MILLISECOND, 0);\n        \n        return c.getTime().getTime() - 1;\n    }\n\n    \n    public String toString() {\n        return \"Week \" + this.week + \", \" + this.year;\n    }\n\n    \n    public boolean equals(Object obj) {\n\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Week)) {\n            return false;\n        }\n        Week that = (Week) obj;\n        if (this.week != that.week) {\n            return false;\n        }\n        if (this.year != that.year) {\n            return false;\n        }\n        return true;\n\n    }\n\n    \n    public int hashCode() {\n        int result = 17;\n        result = 37 * result + this.week;\n        result = 37 * result + this.year;\n        return result;\n    }\n\n    \n    public int compareTo(Object o1) {\n\n        int result;\n\n        \n        \n        if (o1 instanceof Week) {\n            Week w = (Week) o1;\n            result = this.year - w.getYear().getYear();\n            if (result == 0) {\n                result = this.week - w.getWeek();\n            }\n        }\n\n        \n        \n        else if (o1 instanceof RegularTimePeriod) {\n            \n            result = 0;\n        }\n\n        \n        \n        else {\n            \n            result = 1;\n        }\n\n        return result;\n\n    }\n\n    \n    public static Week parseWeek(String s) {\n\n        Week result = null;\n        if (s != null) {\n\n            \n            s = s.trim();\n\n            int i = Week.findSeparator(s);\n            if (i != -1) {\n                String s1 = s.substring(0, i).trim();\n                String s2 = s.substring(i + 1, s.length()).trim();\n\n                Year y = Week.evaluateAsYear(s1);\n                int w;\n                if (y != null) {\n                    w = Week.stringToWeek(s2);\n                    if (w == -1) {\n                        throw new TimePeriodFormatException(\n                                \"Can't evaluate the week.\");\n                    }\n                    result = new Week(w, y);\n                }\n                else {\n                    y = Week.evaluateAsYear(s2);\n                    if (y != null) {\n                        w = Week.stringToWeek(s1);\n                        if (w == -1) {\n                            throw new TimePeriodFormatException(\n                                    \"Can't evaluate the week.\");\n                        }\n                        result = new Week(w, y);\n                    }\n                    else {\n                        throw new TimePeriodFormatException(\n                                \"Can't evaluate the year.\");\n                    }\n                }\n\n            }\n            else {\n                throw new TimePeriodFormatException(\n                        \"Could not find separator.\");\n            }\n\n        }\n        return result;\n\n    }\n\n    \n    private static int findSeparator(String s) {\n\n        int result = s.indexOf('-');\n        if (result == -1) {\n            result = s.indexOf(',');\n        }\n        if (result == -1) {\n            result = s.indexOf(' ');\n        }\n        if (result == -1) {\n            result = s.indexOf('.');\n        }\n        return result;\n    }\n\n    \n    private static Year evaluateAsYear(String s) {\n\n        Year result = null;\n        try {\n            result = Year.parseYear(s);\n        }\n        catch (TimePeriodFormatException e) {\n            \n        }\n        return result;\n\n    }\n\n    \n    private static int stringToWeek(String s) {\n\n        int result = -1;\n        s = s.replace('W', ' ');\n        s = s.trim();\n        try {\n            result = Integer.parseInt(s);\n            if ((result < 1) || (result > LAST_WEEK_IN_YEAR)) {\n                result = -1;\n            }\n        }\n        catch (NumberFormatException e) {\n            \n        }\n        return result;\n\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.jfree.data.time;\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\n\npublic class Week extends RegularTimePeriod implements Serializable { private static final long serialVersionUID = 1856387786939865061L; public static final int FIRST_WEEK_IN_YEAR = 1; public static final int LAST_WEEK_IN_YEAR = 53; private short year; private byte week; private long firstMillisecond; private long lastMillisecond; public Week() {\n        this(new Date());\n    }\n\n    \n    public Week(int week, int year) {\n        if ((week < FIRST_WEEK_IN_YEAR) && (week > LAST_WEEK_IN_YEAR)) {\n            throw new IllegalArgumentException(\n                    \"The 'week' argument must be in the range 1 - 53.\");\n        }\n        this.week = (byte) week;\n        this.year = (short) year;\n        peg(Calendar.getInstance());\n    }\n\n    \n    public Week(int week, Year year) {\n        if ((week < FIRST_WEEK_IN_YEAR) && (week > LAST_WEEK_IN_YEAR)) {\n            throw new IllegalArgumentException(\n                    \"The 'week' argument must be in the range 1 - 53.\");\n        }\n        this.week = (byte) week;\n        this.year = (short) year.getYear();\n        peg(Calendar.getInstance());\n   }\n\n    \n    public Week(Date time) {\n        \n        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n    }\n\n    \n    public Week(Date time, TimeZone zone) {\n        \n        this(time, zone, Locale.getDefault());\n    }\n\n    \n    public Week(Date time, TimeZone zone, Locale locale) {\n        if (time == null) {\n            throw new IllegalArgumentException(\"Null 'time' argument.\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        if (locale == null) {\n            throw new IllegalArgumentException(\"Null 'locale' argument.\");\n        }\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n\n        \n        \n        \n        int tempWeek = calendar.get(Calendar.WEEK_OF_YEAR);\n        if (tempWeek == 1\n                && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {\n            this.week = 1;\n            this.year = (short) (calendar.get(Calendar.YEAR) + 1);\n        }\n        else {\n            this.week = (byte) Math.min(tempWeek, LAST_WEEK_IN_YEAR);\n            int yyyy = calendar.get(Calendar.YEAR);\n            \n            \n            if (calendar.get(Calendar.MONTH) == Calendar.JANUARY\n                    && this.week >= 52) {\n                yyyy--;\n            }\n            this.year = (short) yyyy;\n        }\n        peg(calendar);\n    }\n\n    \n    public Year getYear() {\n        return new Year(this.year);\n    }\n\n    \n    public int getYearValue() {\n        return this.year;\n    }\n\n    \n    public int getWeek() {\n        return this.week;\n    }\n\n    \n    public long getFirstMillisecond() {\n        return this.firstMillisecond;\n    }\n\n    \n    public long getLastMillisecond() {\n        return this.lastMillisecond;\n    }\n\n    \n    public void peg(Calendar calendar) {\n        this.firstMillisecond = getFirstMillisecond(calendar);\n        this.lastMillisecond = getLastMillisecond(calendar);\n    }\n\n    \n    public RegularTimePeriod previous() {\n\n        Week result;\n        if (this.week != FIRST_WEEK_IN_YEAR) {\n            result = new Week(this.week - 1, this.year);\n        }\n        else {\n            \n            if (this.year > 1900) {\n                int yy = this.year - 1;\n                Calendar prevYearCalendar = Calendar.getInstance();\n                prevYearCalendar.set(yy, Calendar.DECEMBER, 31);\n                result = new Week(prevYearCalendar.getActualMaximum(\n                        Calendar.WEEK_OF_YEAR), yy);\n            }\n            else {\n                result = null;\n            }\n        }\n        return result;\n\n    }\n\n    \n    public RegularTimePeriod next() {\n\n        Week result;\n        if (this.week < 52) {\n            result = new Week(this.week + 1, this.year);\n        }\n        else {\n            Calendar calendar = Calendar.getInstance();\n            calendar.set(this.year, Calendar.DECEMBER, 31);\n            int actualMaxWeek\n                = calendar.getActualMaximum(Calendar.WEEK_OF_YEAR);\n            if (this.week < actualMaxWeek) {\n                result = new Week(this.week + 1, this.year);\n            }\n            else {\n                if (this.year < 9999) {\n                    result = new Week(FIRST_WEEK_IN_YEAR, this.year + 1);\n                }\n                else {\n                    result = null;\n                }\n            }\n        }\n        return result;\n\n    }\n\n    \n    public long getSerialIndex() {\n        return this.year * 53L + this.week;\n    }\n\n    \n    public long getFirstMillisecond(Calendar calendar) {\n        Calendar c = (Calendar) calendar.clone();\n        c.clear();\n        c.set(Calendar.YEAR, this.year);\n        c.set(Calendar.WEEK_OF_YEAR, this.week);\n        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());\n        c.set(Calendar.HOUR, 0);\n        c.set(Calendar.MINUTE, 0);\n        c.set(Calendar.SECOND, 0);\n        c.set(Calendar.MILLISECOND, 0);\n        \n        return c.getTime().getTime();\n    }\n\n    \n    public long getLastMillisecond(Calendar calendar) {\n        Calendar c = (Calendar) calendar.clone();\n        c.clear();\n        c.set(Calendar.YEAR, this.year);\n        c.set(Calendar.WEEK_OF_YEAR, this.week + 1);\n        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());\n        c.set(Calendar.HOUR, 0);\n        c.set(Calendar.MINUTE, 0);\n        c.set(Calendar.SECOND, 0);\n        c.set(Calendar.MILLISECOND, 0);\n        \n        return c.getTime().getTime() - 1;\n    }\n\n    \n    public String toString() {\n        return \"Week \" + this.week + \", \" + this.year;\n    }\n\n    \n    public boolean equals(Object obj) {\n\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Week)) {\n            return false;\n        }\n        Week that = (Week) obj;\n        if (this.week != that.week) {\n            return false;\n        }\n        if (this.year != that.year) {\n            return false;\n        }\n        return true;\n\n    }\n\n    \n    public int hashCode() {\n        int result = 17;\n        result = 37 * result + this.week;\n        result = 37 * result + this.year;\n        return result;\n    }\n\n    \n    public int compareTo(Object o1) {\n\n        int result;\n\n        \n        \n        if (o1 instanceof Week) {\n            Week w = (Week) o1;\n            result = this.year - w.getYear().getYear();\n            if (result == 0) {\n                result = this.week - w.getWeek();\n            }\n        }\n\n        \n        \n        else if (o1 instanceof RegularTimePeriod) {\n            \n            result = 0;\n        }\n\n        \n        \n        else {\n            \n            result = 1;\n        }\n\n        return result;\n\n    }\n\n    \n    public static Week parseWeek(String s) {\n\n        Week result = null;\n        if (s != null) {\n\n            \n            s = s.trim();\n\n            int i = Week.findSeparator(s);\n            if (i != -1) {\n                String s1 = s.substring(0, i).trim();\n                String s2 = s.substring(i + 1, s.length()).trim();\n\n                Year y = Week.evaluateAsYear(s1);\n                int w;\n                if (y != null) {\n                    w = Week.stringToWeek(s2);\n                    if (w == -1) {\n                        throw new TimePeriodFormatException(\n                                \"Can't evaluate the week.\");\n                    }\n                    result = new Week(w, y);\n                }\n                else {\n                    y = Week.evaluateAsYear(s2);\n                    if (y != null) {\n                        w = Week.stringToWeek(s1);\n                        if (w == -1) {\n                            throw new TimePeriodFormatException(\n                                    \"Can't evaluate the week.\");\n                        }\n                        result = new Week(w, y);\n                    }\n                    else {\n                        throw new TimePeriodFormatException(\n                                \"Can't evaluate the year.\");\n                    }\n                }\n\n            }\n            else {\n                throw new TimePeriodFormatException(\n                        \"Could not find separator.\");\n            }\n\n        }\n        return result;\n\n    }\n\n    \n    private static int findSeparator(String s) {\n\n        int result = s.indexOf('-');\n        if (result == -1) {\n            result = s.indexOf(',');\n        }\n        if (result == -1) {\n            result = s.indexOf(' ');\n        }\n        if (result == -1) {\n            result = s.indexOf('.');\n        }\n        return result;\n    }\n\n    \n    private static Year evaluateAsYear(String s) {\n\n        Year result = null;\n        try {\n            result = Year.parseYear(s);\n        }\n        catch (TimePeriodFormatException e) {\n            \n        }\n        return result;\n\n    }\n\n    \n    private static int stringToWeek(String s) {\n\n        int result = -1;\n        s = s.replace('W', ' ');\n        s = s.trim();\n        try {\n            result = Integer.parseInt(s);\n            if ((result < 1) || (result > LAST_WEEK_IN_YEAR)) {\n                result = -1;\n            }\n        }\n        catch (NumberFormatException e) {\n            \n        }\n        return result;\n\n    }\n\n}\n",
      "buggy_signatures": [
        "public Week(int week, int year)",
        "public Week(int week, Year year)",
        "public Week(Date time)",
        "public Week(Date time, TimeZone zone)",
        "public Week(Date time, TimeZone zone, Locale locale)",
        "public Year getYear()",
        "public int getYearValue()",
        "public int getWeek()",
        "public long getFirstMillisecond()",
        "public long getLastMillisecond()",
        "public void peg(Calendar calendar)",
        "public RegularTimePeriod previous()",
        "public RegularTimePeriod next()",
        "public long getSerialIndex()",
        "public long getFirstMillisecond(Calendar calendar)",
        "public long getLastMillisecond(Calendar calendar)",
        "public String toString()",
        "public boolean equals(Object obj)",
        "public int hashCode()",
        "public int compareTo(Object o1)",
        "public static Week parseWeek(String s)",
        "private static int findSeparator(String s)",
        "private static Year evaluateAsYear(String s)",
        "private static int stringToWeek(String s)"
      ],
      "fixed_signatures": [
        "public Week(int week, int year)",
        "public Week(int week, Year year)",
        "public Week(Date time)",
        "public Week(Date time, TimeZone zone)",
        "public Week(Date time, TimeZone zone, Locale locale)",
        "public Year getYear()",
        "public int getYearValue()",
        "public int getWeek()",
        "public long getFirstMillisecond()",
        "public long getLastMillisecond()",
        "public void peg(Calendar calendar)",
        "public RegularTimePeriod previous()",
        "public RegularTimePeriod next()",
        "public long getSerialIndex()",
        "public long getFirstMillisecond(Calendar calendar)",
        "public long getLastMillisecond(Calendar calendar)",
        "public String toString()",
        "public boolean equals(Object obj)",
        "public int hashCode()",
        "public int compareTo(Object o1)",
        "public static Week parseWeek(String s)",
        "private static int findSeparator(String s)",
        "private static Year evaluateAsYear(String s)",
        "private static int stringToWeek(String s)"
      ],
      "methods": [
        {
          "buggy_method": "  public Week(Date time, TimeZone zone) {\n  \n  this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n  }",
          "fixed_method": "  public Week(Date time, TimeZone zone) {\n  \n  this(time, zone, Locale.getDefault());\n  }",
          "diff": [
            "@@ -172,7 +172,7 @@",
            "      */\n",
            "     public Week(Date time, TimeZone zone) {\n",
            "         // defer argument checking...\n",
            "-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n",
            "+        this(time, zone, Locale.getDefault());\n",
            "     }\n",
            " \n",
            "     /**\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
