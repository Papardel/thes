{
  "bug_id": "10",
  "failed_tests": {
    "org.apache.commons.codec.language.CaverphoneTest": [
      {
        "methodName": "testEndMb",
        "error": "junit.framework.ComparisonFailure",
        "message": "Source: mbmb expected:<M[PM]1111111> but was:<M[MP]1111111>",
        "fail_line": "        this.checkEncodings(data);",
        "test_source": "  public void testEndMb() throws EncoderException {\n  String[][] data = {{\"mb\", \"M111111111\"}, {\"mbmb\", \"MPM1111111\"}};\n  this.checkEncodings(data);\n  }",
        "stack": [
          "StringEncoderAbstractTest.checkEncoding line 38, StringEncoderAbstractTest.checkEncodings line 43, CaverphoneTest.testEndMb line 335"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/codec/language/Caverphone.java",
      "buggy_full_code": "\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\npublic class Caverphone implements StringEncoder { public Caverphone() {\n        super();\n    }\n\n    \n    public String caverphone(String txt) {\n        \n        \n\n        if( txt == null || txt.length() == 0 ) {\n            return \"1111111111\";\n        }\n\n        \n        txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n\n        \n        txt = txt.replaceAll(\"[^a-z]\", \"\");\n\n        \n        txt = txt.replaceAll(\"e$\", \"\");             \n\n        \n        txt = txt.replaceAll(\"^cough\", \"cou2f\");\n        txt = txt.replaceAll(\"^rough\", \"rou2f\");\n        txt = txt.replaceAll(\"^tough\", \"tou2f\");\n        txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n        txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n        txt = txt.replaceAll(\"^gn\", \"2n\");\n\n        \n        txt = txt.replaceAll(\"^mb\", \"m2\");\n\n        \n        txt = txt.replaceAll(\"cq\", \"2q\");\n        txt = txt.replaceAll(\"ci\", \"si\");\n        txt = txt.replaceAll(\"ce\", \"se\");\n        txt = txt.replaceAll(\"cy\", \"sy\");\n        txt = txt.replaceAll(\"tch\", \"2ch\");\n        txt = txt.replaceAll(\"c\", \"k\");\n        txt = txt.replaceAll(\"q\", \"k\");\n        txt = txt.replaceAll(\"x\", \"k\");\n        txt = txt.replaceAll(\"v\", \"f\");\n        txt = txt.replaceAll(\"dg\", \"2g\");\n        txt = txt.replaceAll(\"tio\", \"sio\");\n        txt = txt.replaceAll(\"tia\", \"sia\");\n        txt = txt.replaceAll(\"d\", \"t\");\n        txt = txt.replaceAll(\"ph\", \"fh\");\n        txt = txt.replaceAll(\"b\", \"p\");\n        txt = txt.replaceAll(\"sh\", \"s2\");\n        txt = txt.replaceAll(\"z\", \"s\");\n        txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n        txt = txt.replaceAll(\"[aeiou]\", \"3\");\n        txt = txt.replaceAll(\"j\", \"y\");        \n        txt = txt.replaceAll(\"^y3\", \"Y3\");     \n        txt = txt.replaceAll(\"^y\", \"A\");       \n        txt = txt.replaceAll(\"y\", \"3\");        \n        txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n        txt = txt.replaceAll(\"gh\", \"22\");\n        txt = txt.replaceAll(\"g\", \"k\");\n        txt = txt.replaceAll(\"s+\", \"S\");\n        txt = txt.replaceAll(\"t+\", \"T\");\n        txt = txt.replaceAll(\"p+\", \"P\");\n        txt = txt.replaceAll(\"k+\", \"K\");\n        txt = txt.replaceAll(\"f+\", \"F\");\n        txt = txt.replaceAll(\"m+\", \"M\");\n        txt = txt.replaceAll(\"n+\", \"N\");\n        txt = txt.replaceAll(\"w3\", \"W3\");\n        \n        txt = txt.replaceAll(\"wh3\", \"Wh3\");\n        txt = txt.replaceAll(\"w$\", \"3\");       \n        \n        txt = txt.replaceAll(\"w\", \"2\");\n        txt = txt.replaceAll(\"^h\", \"A\");\n        txt = txt.replaceAll(\"h\", \"2\");\n        txt = txt.replaceAll(\"r3\", \"R3\");\n        txt = txt.replaceAll(\"r$\", \"3\");       \n        \n        txt = txt.replaceAll(\"r\", \"2\");\n        txt = txt.replaceAll(\"l3\", \"L3\");\n        txt = txt.replaceAll(\"l$\", \"3\");       \n        \n        txt = txt.replaceAll(\"l\", \"2\");\n        \n        \n        \n\n        \n        txt = txt.replaceAll(\"2\", \"\");\n        txt = txt.replaceAll(\"3$\", \"A\");       \n        txt = txt.replaceAll(\"3\", \"\");\n\n        \n        txt = txt + \"111111\" + \"1111\";        \n\n        \n        return txt.substring(0, 10);          \n    }\n\n    \n    public Object encode(Object pObject) throws EncoderException {\n        if (!(pObject instanceof String)) {\n            throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\"); \n        }\n        return caverphone((String) pObject);\n    }\n\n    \n    public String encode(String pString) {\n        return caverphone(pString);   \n    }\n\n    \n    public boolean isCaverphoneEqual(String str1, String str2) {\n        return caverphone(str1).equals(caverphone(str2));\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\npublic class Caverphone implements StringEncoder { public Caverphone() {\n        super();\n    }\n\n    \n    public String caverphone(String txt) {\n        \n        \n\n        if( txt == null || txt.length() == 0 ) {\n            return \"1111111111\";\n        }\n\n        \n        txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n\n        \n        txt = txt.replaceAll(\"[^a-z]\", \"\");\n\n        \n        txt = txt.replaceAll(\"e$\", \"\");             \n\n        \n        txt = txt.replaceAll(\"^cough\", \"cou2f\");\n        txt = txt.replaceAll(\"^rough\", \"rou2f\");\n        txt = txt.replaceAll(\"^tough\", \"tou2f\");\n        txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n        txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n        txt = txt.replaceAll(\"^gn\", \"2n\");\n\n        \n        txt = txt.replaceAll(\"mb$\", \"m2\");\n\n        \n        txt = txt.replaceAll(\"cq\", \"2q\");\n        txt = txt.replaceAll(\"ci\", \"si\");\n        txt = txt.replaceAll(\"ce\", \"se\");\n        txt = txt.replaceAll(\"cy\", \"sy\");\n        txt = txt.replaceAll(\"tch\", \"2ch\");\n        txt = txt.replaceAll(\"c\", \"k\");\n        txt = txt.replaceAll(\"q\", \"k\");\n        txt = txt.replaceAll(\"x\", \"k\");\n        txt = txt.replaceAll(\"v\", \"f\");\n        txt = txt.replaceAll(\"dg\", \"2g\");\n        txt = txt.replaceAll(\"tio\", \"sio\");\n        txt = txt.replaceAll(\"tia\", \"sia\");\n        txt = txt.replaceAll(\"d\", \"t\");\n        txt = txt.replaceAll(\"ph\", \"fh\");\n        txt = txt.replaceAll(\"b\", \"p\");\n        txt = txt.replaceAll(\"sh\", \"s2\");\n        txt = txt.replaceAll(\"z\", \"s\");\n        txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n        txt = txt.replaceAll(\"[aeiou]\", \"3\");\n        txt = txt.replaceAll(\"j\", \"y\");        \n        txt = txt.replaceAll(\"^y3\", \"Y3\");     \n        txt = txt.replaceAll(\"^y\", \"A\");       \n        txt = txt.replaceAll(\"y\", \"3\");        \n        txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n        txt = txt.replaceAll(\"gh\", \"22\");\n        txt = txt.replaceAll(\"g\", \"k\");\n        txt = txt.replaceAll(\"s+\", \"S\");\n        txt = txt.replaceAll(\"t+\", \"T\");\n        txt = txt.replaceAll(\"p+\", \"P\");\n        txt = txt.replaceAll(\"k+\", \"K\");\n        txt = txt.replaceAll(\"f+\", \"F\");\n        txt = txt.replaceAll(\"m+\", \"M\");\n        txt = txt.replaceAll(\"n+\", \"N\");\n        txt = txt.replaceAll(\"w3\", \"W3\");\n        \n        txt = txt.replaceAll(\"wh3\", \"Wh3\");\n        txt = txt.replaceAll(\"w$\", \"3\");       \n        \n        txt = txt.replaceAll(\"w\", \"2\");\n        txt = txt.replaceAll(\"^h\", \"A\");\n        txt = txt.replaceAll(\"h\", \"2\");\n        txt = txt.replaceAll(\"r3\", \"R3\");\n        txt = txt.replaceAll(\"r$\", \"3\");       \n        \n        txt = txt.replaceAll(\"r\", \"2\");\n        txt = txt.replaceAll(\"l3\", \"L3\");\n        txt = txt.replaceAll(\"l$\", \"3\");       \n        \n        txt = txt.replaceAll(\"l\", \"2\");\n        \n        \n        \n\n        \n        txt = txt.replaceAll(\"2\", \"\");\n        txt = txt.replaceAll(\"3$\", \"A\");       \n        txt = txt.replaceAll(\"3\", \"\");\n\n        \n        txt = txt + \"111111\" + \"1111\";        \n\n        \n        return txt.substring(0, 10);          \n    }\n\n    \n    public Object encode(Object pObject) throws EncoderException {\n        if (!(pObject instanceof String)) {\n            throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\"); \n        }\n        return caverphone((String) pObject);\n    }\n\n    \n    public String encode(String pString) {\n        return caverphone(pString);   \n    }\n\n    \n    public boolean isCaverphoneEqual(String str1, String str2) {\n        return caverphone(str1).equals(caverphone(str2));\n    }\n\n}\n",
      "buggy_signatures": [
        "public class Caverphone implements StringEncoder { public Caverphone()",
        "public String caverphone(String txt)",
        "public Object encode(Object pObject) throws EncoderException",
        "public String encode(String pString)",
        "public boolean isCaverphoneEqual(String str1, String str2)"
      ],
      "fixed_signatures": [
        "public class Caverphone implements StringEncoder { public Caverphone()",
        "public String caverphone(String txt)",
        "public Object encode(Object pObject) throws EncoderException",
        "public String encode(String pString)",
        "public boolean isCaverphoneEqual(String str1, String str2)"
      ],
      "methods": [
        {
          "buggy_method": "  public String caverphone(String txt) {\n  \n  \n\n  if( txt == null || txt.length() == 0 ) {\n  return \"1111111111\";\n  }\n\n  \n  txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n\n  \n  txt = txt.replaceAll(\"[^a-z]\", \"\");\n\n  \n  txt = txt.replaceAll(\"e$\", \"\");  \n\n  \n  txt = txt.replaceAll(\"^cough\", \"cou2f\");\n  txt = txt.replaceAll(\"^rough\", \"rou2f\");\n  txt = txt.replaceAll(\"^tough\", \"tou2f\");\n  txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n  txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n  txt = txt.replaceAll(\"^gn\", \"2n\");\n\n  \n  txt = txt.replaceAll(\"^mb\", \"m2\");\n\n  \n  txt = txt.replaceAll(\"cq\", \"2q\");\n  txt = txt.replaceAll(\"ci\", \"si\");\n  txt = txt.replaceAll(\"ce\", \"se\");\n  txt = txt.replaceAll(\"cy\", \"sy\");\n  txt = txt.replaceAll(\"tch\", \"2ch\");\n  txt = txt.replaceAll(\"c\", \"k\");\n  txt = txt.replaceAll(\"q\", \"k\");\n  txt = txt.replaceAll(\"x\", \"k\");\n  txt = txt.replaceAll(\"v\", \"f\");\n  txt = txt.replaceAll(\"dg\", \"2g\");\n  txt = txt.replaceAll(\"tio\", \"sio\");\n  txt = txt.replaceAll(\"tia\", \"sia\");\n  txt = txt.replaceAll(\"d\", \"t\");\n  txt = txt.replaceAll(\"ph\", \"fh\");\n  txt = txt.replaceAll(\"b\", \"p\");\n  txt = txt.replaceAll(\"sh\", \"s2\");\n  txt = txt.replaceAll(\"z\", \"s\");\n  txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n  txt = txt.replaceAll(\"[aeiou]\", \"3\");\n  txt = txt.replaceAll(\"j\", \"y\");  \n  txt = txt.replaceAll(\"^y3\", \"Y3\");  \n  txt = txt.replaceAll(\"^y\", \"A\");  \n  txt = txt.replaceAll(\"y\", \"3\");  \n  txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n  txt = txt.replaceAll(\"gh\", \"22\");\n  txt = txt.replaceAll(\"g\", \"k\");\n  txt = txt.replaceAll(\"s+\", \"S\");\n  txt = txt.replaceAll(\"t+\", \"T\");\n  txt = txt.replaceAll(\"p+\", \"P\");\n  txt = txt.replaceAll(\"k+\", \"K\");\n  txt = txt.replaceAll(\"f+\", \"F\");\n  txt = txt.replaceAll(\"m+\", \"M\");\n  txt = txt.replaceAll(\"n+\", \"N\");\n  txt = txt.replaceAll(\"w3\", \"W3\");\n  \n  txt = txt.replaceAll(\"wh3\", \"Wh3\");\n  txt = txt.replaceAll(\"w$\", \"3\");  \n  \n  txt = txt.replaceAll(\"w\", \"2\");\n  txt = txt.replaceAll(\"^h\", \"A\");\n  txt = txt.replaceAll(\"h\", \"2\");\n  txt = txt.replaceAll(\"r3\", \"R3\");\n  txt = txt.replaceAll(\"r$\", \"3\");  \n  \n  txt = txt.replaceAll(\"r\", \"2\");\n  txt = txt.replaceAll(\"l3\", \"L3\");\n  txt = txt.replaceAll(\"l$\", \"3\");  \n  \n  txt = txt.replaceAll(\"l\", \"2\");\n  \n  \n  \n\n  \n  txt = txt.replaceAll(\"2\", \"\");\n  txt = txt.replaceAll(\"3$\", \"A\");  \n  txt = txt.replaceAll(\"3\", \"\");\n\n  \n  txt = txt + \"111111\" + \"1111\";  \n\n  \n  return txt.substring(0, 10);  \n  }",
          "fixed_method": "  public String caverphone(String txt) {\n  \n  \n\n  if( txt == null || txt.length() == 0 ) {\n  return \"1111111111\";\n  }\n\n  \n  txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n\n  \n  txt = txt.replaceAll(\"[^a-z]\", \"\");\n\n  \n  txt = txt.replaceAll(\"e$\", \"\");  \n\n  \n  txt = txt.replaceAll(\"^cough\", \"cou2f\");\n  txt = txt.replaceAll(\"^rough\", \"rou2f\");\n  txt = txt.replaceAll(\"^tough\", \"tou2f\");\n  txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n  txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n  txt = txt.replaceAll(\"^gn\", \"2n\");\n\n  \n  txt = txt.replaceAll(\"mb$\", \"m2\");\n\n  \n  txt = txt.replaceAll(\"cq\", \"2q\");\n  txt = txt.replaceAll(\"ci\", \"si\");\n  txt = txt.replaceAll(\"ce\", \"se\");\n  txt = txt.replaceAll(\"cy\", \"sy\");\n  txt = txt.replaceAll(\"tch\", \"2ch\");\n  txt = txt.replaceAll(\"c\", \"k\");\n  txt = txt.replaceAll(\"q\", \"k\");\n  txt = txt.replaceAll(\"x\", \"k\");\n  txt = txt.replaceAll(\"v\", \"f\");\n  txt = txt.replaceAll(\"dg\", \"2g\");\n  txt = txt.replaceAll(\"tio\", \"sio\");\n  txt = txt.replaceAll(\"tia\", \"sia\");\n  txt = txt.replaceAll(\"d\", \"t\");\n  txt = txt.replaceAll(\"ph\", \"fh\");\n  txt = txt.replaceAll(\"b\", \"p\");\n  txt = txt.replaceAll(\"sh\", \"s2\");\n  txt = txt.replaceAll(\"z\", \"s\");\n  txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n  txt = txt.replaceAll(\"[aeiou]\", \"3\");\n  txt = txt.replaceAll(\"j\", \"y\");  \n  txt = txt.replaceAll(\"^y3\", \"Y3\");  \n  txt = txt.replaceAll(\"^y\", \"A\");  \n  txt = txt.replaceAll(\"y\", \"3\");  \n  txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n  txt = txt.replaceAll(\"gh\", \"22\");\n  txt = txt.replaceAll(\"g\", \"k\");\n  txt = txt.replaceAll(\"s+\", \"S\");\n  txt = txt.replaceAll(\"t+\", \"T\");\n  txt = txt.replaceAll(\"p+\", \"P\");\n  txt = txt.replaceAll(\"k+\", \"K\");\n  txt = txt.replaceAll(\"f+\", \"F\");\n  txt = txt.replaceAll(\"m+\", \"M\");\n  txt = txt.replaceAll(\"n+\", \"N\");\n  txt = txt.replaceAll(\"w3\", \"W3\");\n  \n  txt = txt.replaceAll(\"wh3\", \"Wh3\");\n  txt = txt.replaceAll(\"w$\", \"3\");  \n  \n  txt = txt.replaceAll(\"w\", \"2\");\n  txt = txt.replaceAll(\"^h\", \"A\");\n  txt = txt.replaceAll(\"h\", \"2\");\n  txt = txt.replaceAll(\"r3\", \"R3\");\n  txt = txt.replaceAll(\"r$\", \"3\");  \n  \n  txt = txt.replaceAll(\"r\", \"2\");\n  txt = txt.replaceAll(\"l3\", \"L3\");\n  txt = txt.replaceAll(\"l$\", \"3\");  \n  \n  txt = txt.replaceAll(\"l\", \"2\");\n  \n  \n  \n\n  \n  txt = txt.replaceAll(\"2\", \"\");\n  txt = txt.replaceAll(\"3$\", \"A\");  \n  txt = txt.replaceAll(\"3\", \"\");\n\n  \n  txt = txt + \"111111\" + \"1111\";  \n\n  \n  return txt.substring(0, 10);  \n  }",
          "diff": [
            "@@ -73,7 +73,7 @@",
            "         txt = txt.replaceAll(\"^gn\", \"2n\");\n",
            " \n",
            "         // End \n",
            "-        txt = txt.replaceAll(\"^mb\", \"m2\");\n",
            "+        txt = txt.replaceAll(\"mb$\", \"m2\");\n",
            " \n",
            "         // 4. Handle replacements\n",
            "         txt = txt.replaceAll(\"cq\", \"2q\");\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
