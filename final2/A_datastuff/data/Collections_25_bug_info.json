{
  "bug_id": "25",
  "failed_tests": {
    "org.apache.commons.collections4.IteratorUtilsTest": [
      {
        "methodName": "testCollatedIterator",
        "error": "java.lang.NullPointerException",
        "message": "You must invoke setComparator() to set a comparator first.",
        "fail_line": "        List<Integer> result = IteratorUtils.toList(it);",
        "test_source": "  public void testCollatedIterator() {\n  try {\n  IteratorUtils.collatedIterator(null, collectionOdd.iterator(), null);\n  fail(\"expecting NullPointerException\");\n  } catch (NullPointerException npe) {\n  // expected\n  }\n\n  try {\n  IteratorUtils.collatedIterator(null, null, collectionEven.iterator());\n  fail(\"expecting NullPointerException\");\n  } catch (NullPointerException npe) {\n  // expected\n  }\n\n  // natural ordering\n  Iterator<Integer> it = \n  IteratorUtils.collatedIterator(null, collectionOdd.iterator(), collectionEven.iterator());\n\n  List<Integer> result = IteratorUtils.toList(it);\n  assertEquals(12, result.size());\n\n  List<Integer> combinedList = new ArrayList<Integer>();\n  combinedList.addAll(collectionOdd);\n  combinedList.addAll(collectionEven);\n  Collections.sort(combinedList);\n\n  assertEquals(combinedList, result);\n\n  it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(), emptyCollection.iterator());\n  result = IteratorUtils.toList(it);\n  assertEquals(collectionOdd, result);\n\n  final Comparator<Integer> reverseComparator =\n  ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n  Collections.reverse((List<Integer>) collectionOdd);\n  Collections.reverse((List<Integer>) collectionEven);\n  Collections.reverse(combinedList);\n\n  it = IteratorUtils.collatedIterator(reverseComparator,\n  collectionOdd.iterator(),\n  collectionEven.iterator());\n  result = IteratorUtils.toList(it);\n  assertEquals(combinedList, result);\n  }",
        "stack": [
          "CollatingIterator.least line 366, CollatingIterator.next line 251, IteratorUtils.toList line 1147, IteratorUtils.toList line 1122, IteratorUtilsTest.testCollatedIterator line 943"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/collections4/IteratorUtils.java",
      "buggy_full_code": "\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Dictionary;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.iterators.ArrayIterator;\nimport org.apache.commons.collections4.iterators.ArrayListIterator;\nimport org.apache.commons.collections4.iterators.BoundedIterator;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.EmptyIterator;\nimport org.apache.commons.collections4.iterators.EmptyListIterator;\nimport org.apache.commons.collections4.iterators.EmptyMapIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;\nimport org.apache.commons.collections4.iterators.EnumerationIterator;\nimport org.apache.commons.collections4.iterators.FilterIterator;\nimport org.apache.commons.collections4.iterators.FilterListIterator;\nimport org.apache.commons.collections4.iterators.IteratorChain;\nimport org.apache.commons.collections4.iterators.IteratorEnumeration;\nimport org.apache.commons.collections4.iterators.IteratorIterable;\nimport org.apache.commons.collections4.iterators.ListIteratorWrapper;\nimport org.apache.commons.collections4.iterators.LoopingIterator;\nimport org.apache.commons.collections4.iterators.LoopingListIterator;\nimport org.apache.commons.collections4.iterators.NodeListIterator;\nimport org.apache.commons.collections4.iterators.ObjectArrayIterator;\nimport org.apache.commons.collections4.iterators.ObjectArrayListIterator;\nimport org.apache.commons.collections4.iterators.ObjectGraphIterator;\nimport org.apache.commons.collections4.iterators.PeekingIterator;\nimport org.apache.commons.collections4.iterators.PushbackIterator;\nimport org.apache.commons.collections4.iterators.SingletonIterator;\nimport org.apache.commons.collections4.iterators.SingletonListIterator;\nimport org.apache.commons.collections4.iterators.SkippingIterator;\nimport org.apache.commons.collections4.iterators.TransformIterator;\nimport org.apache.commons.collections4.iterators.UnmodifiableIterator;\nimport org.apache.commons.collections4.iterators.UnmodifiableListIterator;\nimport org.apache.commons.collections4.iterators.UnmodifiableMapIterator;\nimport org.apache.commons.collections4.iterators.ZippingIterator;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\n\npublic class IteratorUtils { @SuppressWarnings(\"rawtypes\") public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE; @SuppressWarnings(\"rawtypes\") public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE; @SuppressWarnings(\"rawtypes\") public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE; @SuppressWarnings(\"rawtypes\") public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE; @SuppressWarnings(\"rawtypes\") public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE; private static final String DEFAULT_TOSTRING_PREFIX = \"[\"; private static final String DEFAULT_TOSTRING_SUFFIX = \"]\"; private static final String DEFAULT_TOSTRING_DELIMITER = \", \"; private IteratorUtils() {}\n\n    \n    \n    \n    public static <E> ResettableIterator<E> emptyIterator() {\n        return EmptyIterator.<E>resettableEmptyIterator();\n    }\n\n    \n    public static <E> ResettableListIterator<E> emptyListIterator() {\n        return EmptyListIterator.<E>resettableEmptyListIterator();\n    }\n\n    \n    public static <E> OrderedIterator<E> emptyOrderedIterator() {\n        return EmptyOrderedIterator.<E>emptyOrderedIterator();\n    }\n\n    \n    public static <K, V> MapIterator<K, V> emptyMapIterator() {\n        return EmptyMapIterator.<K, V>emptyMapIterator();\n    }\n\n    \n    public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator() {\n        return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();\n    }\n\n    \n    \n    \n    public static <E> ResettableIterator<E> singletonIterator(final E object) {\n        return new SingletonIterator<E>(object);\n    }\n\n    \n    public static <E> ListIterator<E> singletonListIterator(final E object) {\n        return new SingletonListIterator<E>(object);\n    }\n\n    \n    \n    \n    public static <E> ResettableIterator<E> arrayIterator(final E... array) {\n        return new ObjectArrayIterator<E>(array);\n    }\n\n    \n    public static <E> ResettableIterator<E> arrayIterator(final Object array) {\n        return new ArrayIterator<E>(array);\n    }\n\n    \n    public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start) {\n        return new ObjectArrayIterator<E>(array, start);\n    }\n\n    \n    public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start) {\n        return new ArrayIterator<E>(array, start);\n    }\n\n    \n    public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end) {\n        return new ObjectArrayIterator<E>(array, start, end);\n    }\n\n    \n    public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end) {\n        return new ArrayIterator<E>(array, start, end);\n    }\n\n    \n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final E... array) {\n        return new ObjectArrayListIterator<E>(array);\n    }\n\n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final Object array) {\n        return new ArrayListIterator<E>(array);\n    }\n\n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start) {\n        return new ObjectArrayListIterator<E>(array, start);\n    }\n\n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start) {\n        return new ArrayListIterator<E>(array, start);\n    }\n\n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end) {\n        return new ObjectArrayListIterator<E>(array, start, end);\n    }\n\n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end) {\n        return new ArrayListIterator<E>(array, start, end);\n    }\n\n    \n    \n    \n    public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max) {\n        return boundedIterator(iterator, 0, max);\n    }\n\n    \n    public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max) {\n        return new BoundedIterator<E>(iterator, offset, max);\n    }\n\n    \n    \n    \n    public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator) {\n        return UnmodifiableIterator.unmodifiableIterator(iterator);\n    }\n\n    \n    public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator) {\n        return UnmodifiableListIterator.umodifiableListIterator(listIterator);\n    }\n\n    \n    public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator) {\n        return UnmodifiableMapIterator.unmodifiableMapIterator(mapIterator);\n    }\n\n    \n    \n\n    \n    public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2) {\n        \n        \n        return new IteratorChain<E>(iterator1, iterator2);\n    }\n\n    \n    public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators) {\n        return new IteratorChain<E>(iterators);\n    }\n\n    \n    public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators) {\n        return new IteratorChain<E>(iterators);\n    }\n\n    \n    \n    \n    public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2) {\n        return new CollatingIterator<E>(comparator, iterator1, iterator2);\n    }\n\n    \n    public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators) {\n        return new CollatingIterator<E>(comparator, iterators);\n    }\n\n    \n    public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators) {\n        return new CollatingIterator<E>(comparator, iterators);\n    }\n\n    \n    \n    \n    public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer) {\n        return new ObjectGraphIterator<E>(root, transformer);\n    }\n\n    \n    \n    \n    public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform) {\n\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (transform == null) {\n            throw new NullPointerException(\"Transformer must not be null\");\n        }\n        return new TransformIterator<I, O>(iterator, transform);\n    }\n\n    \n    \n    \n    public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (predicate == null) {\n            throw new NullPointerException(\"Predicate must not be null\");\n        }\n        return new FilterIterator<E>(iterator, predicate);\n    }\n\n    \n    public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate) {\n\n        if (listIterator == null) {\n            throw new NullPointerException(\"ListIterator must not be null\");\n        }\n        if (predicate == null) {\n            throw new NullPointerException(\"Predicate must not be null\");\n        }\n        return new FilterListIterator<E>(listIterator, predicate);\n    }\n\n    \n    \n    \n    public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"Collection must not be null\");\n        }\n        return new LoopingIterator<E>(coll);\n    }\n\n    \n    public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list) {\n        if (list == null) {\n            throw new NullPointerException(\"List must not be null\");\n        }\n        return new LoopingListIterator<E>(list);\n    }\n\n    \n    \n    \n    public static NodeListIterator nodeListIterator(final NodeList nodeList) {\n        if (nodeList == null) {\n            throw new NullPointerException(\"NodeList must not be null\");\n        }\n        return new NodeListIterator(nodeList);\n    }\n\n    \n    public static NodeListIterator nodeListIterator(final Node node) {\n        if (node == null) {\n            throw new NullPointerException(\"Node must not be null\");\n        }\n        return new NodeListIterator(node);\n    }\n\n    \n    \n\n    \n    public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator) {\n        return PeekingIterator.peekingIterator(iterator);\n    }\n\n    \n    \n\n    \n    public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator) {\n        return PushbackIterator.pushbackIterator(iterator);\n    }\n\n    \n    \n    \n    public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset) {\n        return new SkippingIterator<E>(iterator, offset);\n    }\n\n    \n    \n    \n    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b) {\n        return new ZippingIterator<E>(a, b);\n    }\n\n    \n    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c) {\n        return new ZippingIterator<E>(a, b, c);\n    }\n\n    \n    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators) {\n        return new ZippingIterator<E>(iterators);\n    }\n\n    \n    \n    \n    public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration) {\n        if (enumeration == null) {\n            throw new NullPointerException(\"Enumeration must not be null\");\n        }\n        return new EnumerationIterator<E>(enumeration);\n    }\n\n    \n    public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection) {\n        if (enumeration == null) {\n            throw new NullPointerException(\"Enumeration must not be null\");\n        }\n        if (removeCollection == null) {\n            throw new NullPointerException(\"Collection must not be null\");\n        }\n        return new EnumerationIterator<E>(enumeration, removeCollection);\n    }\n\n    \n    public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        return new IteratorEnumeration<E>(iterator);\n    }\n\n    \n    public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        return new IteratorIterable<E>(iterator, false);\n    }\n\n    \n    public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        return new IteratorIterable<E>(iterator, true);\n    }\n\n    \n    public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        return new ListIteratorWrapper<E>(iterator);\n    }\n\n    \n    public static Object[] toArray(final Iterator<?> iterator) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        final List<?> list = toList(iterator, 100);\n        return list.toArray();\n    }\n\n    \n    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\n        final List<E> list = toList(iterator, 100);\n        @SuppressWarnings(\"unchecked\") \n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }\n\n    \n    public static <E> List<E> toList(final Iterator<? extends E> iterator) {\n        return toList(iterator, 10);\n    }\n\n    \n    public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (estimatedSize < 1) {\n            throw new IllegalArgumentException(\"Estimated size must be greater than 0\");\n        }\n        final List<E> list = new ArrayList<E>(estimatedSize);\n        while (iterator.hasNext()) {\n            list.add(iterator.next());\n        }\n        return list;\n    }\n\n    \n    public static Iterator<?> getIterator(final Object obj) {\n        if (obj == null) {\n            return emptyIterator();\n        }\n        if (obj instanceof Iterator) {\n            return (Iterator<?>) obj;\n        }\n        if (obj instanceof Iterable) {\n            return ((Iterable<?>) obj).iterator();\n        }\n        if (obj instanceof Object[]) {\n            return new ObjectArrayIterator<Object>((Object[]) obj);\n        }\n        if (obj instanceof Enumeration) {\n            return new EnumerationIterator<Object>((Enumeration<?>) obj);\n        }\n        if (obj instanceof Map) {\n            return ((Map<?, ?>) obj).values().iterator();\n        }\n        if (obj instanceof NodeList) {\n            return new NodeListIterator((NodeList) obj);\n        }\n        if (obj instanceof Node) {\n            return new NodeListIterator((Node) obj);\n        }\n        if (obj instanceof Dictionary) {\n            return new EnumerationIterator<Object>(((Dictionary<?, ?>) obj).elements());\n        } else if (obj.getClass().isArray()) {\n            return new ArrayIterator<Object>(obj);\n        }\n        try {\n            final Method method = obj.getClass().getMethod(\"iterator\", (Class[]) null);\n            if (Iterator.class.isAssignableFrom(method.getReturnType())) {\n                final Iterator<?> it = (Iterator<?>) method.invoke(obj, (Object[]) null);\n                if (it != null) {\n                    return it;\n                }\n            }\n        } catch (final RuntimeException e) { \n            \n        } catch (final NoSuchMethodException e) { \n            \n        } catch (final IllegalAccessException e) { \n            \n        } catch (final InvocationTargetException e) { \n            \n        }\n        return singletonIterator(obj);\n    }\n\n    \n    \n\n    \n    public static <E> void apply(final Iterator<E> iterator, final Closure<? super E> closure) {\n        if (closure == null) {\n            throw new NullPointerException(\"Closure must not be null\");\n        }\n\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                final E element = iterator.next();\n                closure.execute(element);\n            }\n        }\n    }\n\n    \n    public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n        if (predicate == null) {\n            throw new NullPointerException(\"Predicate must not be null\");\n        }\n\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                final E element = iterator.next();\n                if (predicate.evaluate(element)) {\n                    return element;\n                }\n            }\n        }\n        return null;\n    }\n\n    \n    public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n        if (predicate == null) {\n            throw new NullPointerException(\"Predicate must not be null\");\n        }\n\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                final E element = iterator.next();\n                if (predicate.evaluate(element)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    \n    public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n        if (predicate == null) {\n            throw new NullPointerException(\"Predicate must not be null\");\n        }\n\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                final E element = iterator.next();\n                if (!predicate.evaluate(element)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    \n    public static boolean isEmpty(final Iterator<?> iterator) {\n        return iterator == null || !iterator.hasNext();\n    }\n\n    \n    public static <E> boolean contains(final Iterator<E> iterator, final Object object) {\n        return matchesAny(iterator, EqualPredicate.equalPredicate(object));\n    }\n\n    \n    public static <E> E get(final Iterator<E> iterator, final int index) {\n        int i = index;\n        CollectionUtils.checkIndexBounds(i);\n        while (iterator.hasNext()) {\n            i--;\n            if (i == -1) {\n                return iterator.next();\n            }\n            iterator.next();\n        }\n        throw new IndexOutOfBoundsException(\"Entry does not exist: \" + i);\n    }\n\n    \n    public static int size(final Iterator<?> iterator) {\n        int size = 0;\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                iterator.next();\n                size++;\n            }\n        }\n        return size;\n    }\n\n    \n    public static <E> String toString(final Iterator<E> iterator) {\n        return toString(iterator, TransformerUtils.stringValueTransformer(),\n                        DEFAULT_TOSTRING_DELIMITER, DEFAULT_TOSTRING_PREFIX,\n                        DEFAULT_TOSTRING_SUFFIX);\n    }\n\n    \n    public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer) {\n        return toString(iterator, transformer, DEFAULT_TOSTRING_DELIMITER,\n                        DEFAULT_TOSTRING_PREFIX, DEFAULT_TOSTRING_SUFFIX);\n    }\n\n    \n    public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix) {\n        if (transformer == null) {\n            throw new NullPointerException(\"transformer may not be null\");\n        }\n        if (delimiter == null) {\n            throw new NullPointerException(\"delimiter may not be null\");\n        }\n        if (prefix == null) {\n            throw new NullPointerException(\"prefix may not be null\");\n        }\n        if (suffix == null) {\n            throw new NullPointerException(\"suffix may not be null\");\n        }\n        final StringBuilder stringBuilder = new StringBuilder(prefix);\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                final E element = iterator.next();\n                stringBuilder.append(transformer.transform(element));\n                stringBuilder.append(delimiter);\n            }\n            if(stringBuilder.length() > prefix.length()) {\n                stringBuilder.setLength(stringBuilder.length() - delimiter.length());\n            }\n        }\n        stringBuilder.append(suffix);\n        return stringBuilder.toString();\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Dictionary;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.iterators.ArrayIterator;\nimport org.apache.commons.collections4.iterators.ArrayListIterator;\nimport org.apache.commons.collections4.iterators.BoundedIterator;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.EmptyIterator;\nimport org.apache.commons.collections4.iterators.EmptyListIterator;\nimport org.apache.commons.collections4.iterators.EmptyMapIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;\nimport org.apache.commons.collections4.iterators.EnumerationIterator;\nimport org.apache.commons.collections4.iterators.FilterIterator;\nimport org.apache.commons.collections4.iterators.FilterListIterator;\nimport org.apache.commons.collections4.iterators.IteratorChain;\nimport org.apache.commons.collections4.iterators.IteratorEnumeration;\nimport org.apache.commons.collections4.iterators.IteratorIterable;\nimport org.apache.commons.collections4.iterators.ListIteratorWrapper;\nimport org.apache.commons.collections4.iterators.LoopingIterator;\nimport org.apache.commons.collections4.iterators.LoopingListIterator;\nimport org.apache.commons.collections4.iterators.NodeListIterator;\nimport org.apache.commons.collections4.iterators.ObjectArrayIterator;\nimport org.apache.commons.collections4.iterators.ObjectArrayListIterator;\nimport org.apache.commons.collections4.iterators.ObjectGraphIterator;\nimport org.apache.commons.collections4.iterators.PeekingIterator;\nimport org.apache.commons.collections4.iterators.PushbackIterator;\nimport org.apache.commons.collections4.iterators.SingletonIterator;\nimport org.apache.commons.collections4.iterators.SingletonListIterator;\nimport org.apache.commons.collections4.iterators.SkippingIterator;\nimport org.apache.commons.collections4.iterators.TransformIterator;\nimport org.apache.commons.collections4.iterators.UnmodifiableIterator;\nimport org.apache.commons.collections4.iterators.UnmodifiableListIterator;\nimport org.apache.commons.collections4.iterators.UnmodifiableMapIterator;\nimport org.apache.commons.collections4.iterators.ZippingIterator;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\n\npublic class IteratorUtils { @SuppressWarnings(\"rawtypes\") public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE; @SuppressWarnings(\"rawtypes\") public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE; @SuppressWarnings(\"rawtypes\") public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE; @SuppressWarnings(\"rawtypes\") public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE; @SuppressWarnings(\"rawtypes\") public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE; private static final String DEFAULT_TOSTRING_PREFIX = \"[\"; private static final String DEFAULT_TOSTRING_SUFFIX = \"]\"; private static final String DEFAULT_TOSTRING_DELIMITER = \", \"; private IteratorUtils() {}\n\n    \n    \n    \n    public static <E> ResettableIterator<E> emptyIterator() {\n        return EmptyIterator.<E>resettableEmptyIterator();\n    }\n\n    \n    public static <E> ResettableListIterator<E> emptyListIterator() {\n        return EmptyListIterator.<E>resettableEmptyListIterator();\n    }\n\n    \n    public static <E> OrderedIterator<E> emptyOrderedIterator() {\n        return EmptyOrderedIterator.<E>emptyOrderedIterator();\n    }\n\n    \n    public static <K, V> MapIterator<K, V> emptyMapIterator() {\n        return EmptyMapIterator.<K, V>emptyMapIterator();\n    }\n\n    \n    public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator() {\n        return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();\n    }\n\n    \n    \n    \n    public static <E> ResettableIterator<E> singletonIterator(final E object) {\n        return new SingletonIterator<E>(object);\n    }\n\n    \n    public static <E> ListIterator<E> singletonListIterator(final E object) {\n        return new SingletonListIterator<E>(object);\n    }\n\n    \n    \n    \n    public static <E> ResettableIterator<E> arrayIterator(final E... array) {\n        return new ObjectArrayIterator<E>(array);\n    }\n\n    \n    public static <E> ResettableIterator<E> arrayIterator(final Object array) {\n        return new ArrayIterator<E>(array);\n    }\n\n    \n    public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start) {\n        return new ObjectArrayIterator<E>(array, start);\n    }\n\n    \n    public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start) {\n        return new ArrayIterator<E>(array, start);\n    }\n\n    \n    public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end) {\n        return new ObjectArrayIterator<E>(array, start, end);\n    }\n\n    \n    public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end) {\n        return new ArrayIterator<E>(array, start, end);\n    }\n\n    \n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final E... array) {\n        return new ObjectArrayListIterator<E>(array);\n    }\n\n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final Object array) {\n        return new ArrayListIterator<E>(array);\n    }\n\n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start) {\n        return new ObjectArrayListIterator<E>(array, start);\n    }\n\n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start) {\n        return new ArrayListIterator<E>(array, start);\n    }\n\n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end) {\n        return new ObjectArrayListIterator<E>(array, start, end);\n    }\n\n    \n    public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end) {\n        return new ArrayListIterator<E>(array, start, end);\n    }\n\n    \n    \n    \n    public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max) {\n        return boundedIterator(iterator, 0, max);\n    }\n\n    \n    public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max) {\n        return new BoundedIterator<E>(iterator, offset, max);\n    }\n\n    \n    \n    \n    public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator) {\n        return UnmodifiableIterator.unmodifiableIterator(iterator);\n    }\n\n    \n    public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator) {\n        return UnmodifiableListIterator.umodifiableListIterator(listIterator);\n    }\n\n    \n    public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator) {\n        return UnmodifiableMapIterator.unmodifiableMapIterator(mapIterator);\n    }\n\n    \n    \n\n    \n    public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2) {\n        \n        \n        return new IteratorChain<E>(iterator1, iterator2);\n    }\n\n    \n    public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators) {\n        return new IteratorChain<E>(iterators);\n    }\n\n    \n    public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators) {\n        return new IteratorChain<E>(iterators);\n    }\n\n    \n    \n    \n    public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2) {\n        @SuppressWarnings(\"unchecked\")\n        final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n        return new CollatingIterator<E>(comp, iterator1, iterator2);\n    }\n\n    \n    public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators) {\n        @SuppressWarnings(\"unchecked\")\n        final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n        return new CollatingIterator<E>(comp, iterators);\n    }\n\n    \n    public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators) {\n        @SuppressWarnings(\"unchecked\")\n        final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n        return new CollatingIterator<E>(comp, iterators);\n    }\n\n    \n    \n    \n    public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer) {\n        return new ObjectGraphIterator<E>(root, transformer);\n    }\n\n    \n    \n    \n    public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform) {\n\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (transform == null) {\n            throw new NullPointerException(\"Transformer must not be null\");\n        }\n        return new TransformIterator<I, O>(iterator, transform);\n    }\n\n    \n    \n    \n    public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (predicate == null) {\n            throw new NullPointerException(\"Predicate must not be null\");\n        }\n        return new FilterIterator<E>(iterator, predicate);\n    }\n\n    \n    public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate) {\n\n        if (listIterator == null) {\n            throw new NullPointerException(\"ListIterator must not be null\");\n        }\n        if (predicate == null) {\n            throw new NullPointerException(\"Predicate must not be null\");\n        }\n        return new FilterListIterator<E>(listIterator, predicate);\n    }\n\n    \n    \n    \n    public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"Collection must not be null\");\n        }\n        return new LoopingIterator<E>(coll);\n    }\n\n    \n    public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list) {\n        if (list == null) {\n            throw new NullPointerException(\"List must not be null\");\n        }\n        return new LoopingListIterator<E>(list);\n    }\n\n    \n    \n    \n    public static NodeListIterator nodeListIterator(final NodeList nodeList) {\n        if (nodeList == null) {\n            throw new NullPointerException(\"NodeList must not be null\");\n        }\n        return new NodeListIterator(nodeList);\n    }\n\n    \n    public static NodeListIterator nodeListIterator(final Node node) {\n        if (node == null) {\n            throw new NullPointerException(\"Node must not be null\");\n        }\n        return new NodeListIterator(node);\n    }\n\n    \n    \n\n    \n    public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator) {\n        return PeekingIterator.peekingIterator(iterator);\n    }\n\n    \n    \n\n    \n    public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator) {\n        return PushbackIterator.pushbackIterator(iterator);\n    }\n\n    \n    \n    \n    public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset) {\n        return new SkippingIterator<E>(iterator, offset);\n    }\n\n    \n    \n    \n    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b) {\n        return new ZippingIterator<E>(a, b);\n    }\n\n    \n    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c) {\n        return new ZippingIterator<E>(a, b, c);\n    }\n\n    \n    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators) {\n        return new ZippingIterator<E>(iterators);\n    }\n\n    \n    \n    \n    public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration) {\n        if (enumeration == null) {\n            throw new NullPointerException(\"Enumeration must not be null\");\n        }\n        return new EnumerationIterator<E>(enumeration);\n    }\n\n    \n    public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection) {\n        if (enumeration == null) {\n            throw new NullPointerException(\"Enumeration must not be null\");\n        }\n        if (removeCollection == null) {\n            throw new NullPointerException(\"Collection must not be null\");\n        }\n        return new EnumerationIterator<E>(enumeration, removeCollection);\n    }\n\n    \n    public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        return new IteratorEnumeration<E>(iterator);\n    }\n\n    \n    public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        return new IteratorIterable<E>(iterator, false);\n    }\n\n    \n    public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        return new IteratorIterable<E>(iterator, true);\n    }\n\n    \n    public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        return new ListIteratorWrapper<E>(iterator);\n    }\n\n    \n    public static Object[] toArray(final Iterator<?> iterator) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        final List<?> list = toList(iterator, 100);\n        return list.toArray();\n    }\n\n    \n    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\n        final List<E> list = toList(iterator, 100);\n        @SuppressWarnings(\"unchecked\") \n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }\n\n    \n    public static <E> List<E> toList(final Iterator<? extends E> iterator) {\n        return toList(iterator, 10);\n    }\n\n    \n    public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (estimatedSize < 1) {\n            throw new IllegalArgumentException(\"Estimated size must be greater than 0\");\n        }\n        final List<E> list = new ArrayList<E>(estimatedSize);\n        while (iterator.hasNext()) {\n            list.add(iterator.next());\n        }\n        return list;\n    }\n\n    \n    public static Iterator<?> getIterator(final Object obj) {\n        if (obj == null) {\n            return emptyIterator();\n        }\n        if (obj instanceof Iterator) {\n            return (Iterator<?>) obj;\n        }\n        if (obj instanceof Iterable) {\n            return ((Iterable<?>) obj).iterator();\n        }\n        if (obj instanceof Object[]) {\n            return new ObjectArrayIterator<Object>((Object[]) obj);\n        }\n        if (obj instanceof Enumeration) {\n            return new EnumerationIterator<Object>((Enumeration<?>) obj);\n        }\n        if (obj instanceof Map) {\n            return ((Map<?, ?>) obj).values().iterator();\n        }\n        if (obj instanceof NodeList) {\n            return new NodeListIterator((NodeList) obj);\n        }\n        if (obj instanceof Node) {\n            return new NodeListIterator((Node) obj);\n        }\n        if (obj instanceof Dictionary) {\n            return new EnumerationIterator<Object>(((Dictionary<?, ?>) obj).elements());\n        } else if (obj.getClass().isArray()) {\n            return new ArrayIterator<Object>(obj);\n        }\n        try {\n            final Method method = obj.getClass().getMethod(\"iterator\", (Class[]) null);\n            if (Iterator.class.isAssignableFrom(method.getReturnType())) {\n                final Iterator<?> it = (Iterator<?>) method.invoke(obj, (Object[]) null);\n                if (it != null) {\n                    return it;\n                }\n            }\n        } catch (final RuntimeException e) { \n            \n        } catch (final NoSuchMethodException e) { \n            \n        } catch (final IllegalAccessException e) { \n            \n        } catch (final InvocationTargetException e) { \n            \n        }\n        return singletonIterator(obj);\n    }\n\n    \n    \n\n    \n    public static <E> void apply(final Iterator<E> iterator, final Closure<? super E> closure) {\n        if (closure == null) {\n            throw new NullPointerException(\"Closure must not be null\");\n        }\n\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                final E element = iterator.next();\n                closure.execute(element);\n            }\n        }\n    }\n\n    \n    public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n        if (predicate == null) {\n            throw new NullPointerException(\"Predicate must not be null\");\n        }\n\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                final E element = iterator.next();\n                if (predicate.evaluate(element)) {\n                    return element;\n                }\n            }\n        }\n        return null;\n    }\n\n    \n    public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n        if (predicate == null) {\n            throw new NullPointerException(\"Predicate must not be null\");\n        }\n\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                final E element = iterator.next();\n                if (predicate.evaluate(element)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    \n    public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n        if (predicate == null) {\n            throw new NullPointerException(\"Predicate must not be null\");\n        }\n\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                final E element = iterator.next();\n                if (!predicate.evaluate(element)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    \n    public static boolean isEmpty(final Iterator<?> iterator) {\n        return iterator == null || !iterator.hasNext();\n    }\n\n    \n    public static <E> boolean contains(final Iterator<E> iterator, final Object object) {\n        return matchesAny(iterator, EqualPredicate.equalPredicate(object));\n    }\n\n    \n    public static <E> E get(final Iterator<E> iterator, final int index) {\n        int i = index;\n        CollectionUtils.checkIndexBounds(i);\n        while (iterator.hasNext()) {\n            i--;\n            if (i == -1) {\n                return iterator.next();\n            }\n            iterator.next();\n        }\n        throw new IndexOutOfBoundsException(\"Entry does not exist: \" + i);\n    }\n\n    \n    public static int size(final Iterator<?> iterator) {\n        int size = 0;\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                iterator.next();\n                size++;\n            }\n        }\n        return size;\n    }\n\n    \n    public static <E> String toString(final Iterator<E> iterator) {\n        return toString(iterator, TransformerUtils.stringValueTransformer(),\n                        DEFAULT_TOSTRING_DELIMITER, DEFAULT_TOSTRING_PREFIX,\n                        DEFAULT_TOSTRING_SUFFIX);\n    }\n\n    \n    public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer) {\n        return toString(iterator, transformer, DEFAULT_TOSTRING_DELIMITER,\n                        DEFAULT_TOSTRING_PREFIX, DEFAULT_TOSTRING_SUFFIX);\n    }\n\n    \n    public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix) {\n        if (transformer == null) {\n            throw new NullPointerException(\"transformer may not be null\");\n        }\n        if (delimiter == null) {\n            throw new NullPointerException(\"delimiter may not be null\");\n        }\n        if (prefix == null) {\n            throw new NullPointerException(\"prefix may not be null\");\n        }\n        if (suffix == null) {\n            throw new NullPointerException(\"suffix may not be null\");\n        }\n        final StringBuilder stringBuilder = new StringBuilder(prefix);\n        if (iterator != null) {\n            while (iterator.hasNext()) {\n                final E element = iterator.next();\n                stringBuilder.append(transformer.transform(element));\n                stringBuilder.append(delimiter);\n            }\n            if(stringBuilder.length() > prefix.length()) {\n                stringBuilder.setLength(stringBuilder.length() - delimiter.length());\n            }\n        }\n        stringBuilder.append(suffix);\n        return stringBuilder.toString();\n    }\n\n}\n",
      "buggy_signatures": [
        "public class IteratorUtils { @SuppressWarnings(\"rawtypes\") public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE; @SuppressWarnings(\"rawtypes\") public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE; @SuppressWarnings(\"rawtypes\") public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE; @SuppressWarnings(\"rawtypes\") public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE; @SuppressWarnings(\"rawtypes\") public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE; private static final String DEFAULT_TOSTRING_PREFIX = \"[\"; private static final String DEFAULT_TOSTRING_SUFFIX = \"]\"; private static final String DEFAULT_TOSTRING_DELIMITER = \", \"; private IteratorUtils()",
        "public static <E> ResettableIterator<E> emptyIterator()",
        "public static <E> ResettableListIterator<E> emptyListIterator()",
        "public static <E> OrderedIterator<E> emptyOrderedIterator()",
        "public static <K, V> MapIterator<K, V> emptyMapIterator()",
        "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()",
        "public static <E> ResettableIterator<E> singletonIterator(final E object)",
        "public static <E> ListIterator<E> singletonListIterator(final E object)",
        "public static <E> ResettableIterator<E> arrayIterator(final E... array)",
        "public static <E> ResettableIterator<E> arrayIterator(final Object array)",
        "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)",
        "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)",
        "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)",
        "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)",
        "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)",
        "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)",
        "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)",
        "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)",
        "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)",
        "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)",
        "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)",
        "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)",
        "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)",
        "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)",
        "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)",
        "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)",
        "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)",
        "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)",
        "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)",
        "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)",
        "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)",
        "public static NodeListIterator nodeListIterator(final NodeList nodeList)",
        "public static NodeListIterator nodeListIterator(final Node node)",
        "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)",
        "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)",
        "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)",
        "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)",
        "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)",
        "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)",
        "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)",
        "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)",
        "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)",
        "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)",
        "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)",
        "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)",
        "public static Object[] toArray(final Iterator<?> iterator)",
        "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)",
        "public static <E> List<E> toList(final Iterator<? extends E> iterator)",
        "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)",
        "public static Iterator<?> getIterator(final Object obj)",
        "public static <E> void apply(final Iterator<E> iterator, final Closure<? super E> closure)",
        "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)",
        "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)",
        "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)",
        "public static boolean isEmpty(final Iterator<?> iterator)",
        "public static <E> boolean contains(final Iterator<E> iterator, final Object object)",
        "public static <E> E get(final Iterator<E> iterator, final int index)",
        "public static int size(final Iterator<?> iterator)",
        "public static <E> String toString(final Iterator<E> iterator)",
        "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)",
        "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
      ],
      "fixed_signatures": [
        "public class IteratorUtils { @SuppressWarnings(\"rawtypes\") public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE; @SuppressWarnings(\"rawtypes\") public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE; @SuppressWarnings(\"rawtypes\") public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE; @SuppressWarnings(\"rawtypes\") public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE; @SuppressWarnings(\"rawtypes\") public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE; private static final String DEFAULT_TOSTRING_PREFIX = \"[\"; private static final String DEFAULT_TOSTRING_SUFFIX = \"]\"; private static final String DEFAULT_TOSTRING_DELIMITER = \", \"; private IteratorUtils()",
        "public static <E> ResettableIterator<E> emptyIterator()",
        "public static <E> ResettableListIterator<E> emptyListIterator()",
        "public static <E> OrderedIterator<E> emptyOrderedIterator()",
        "public static <K, V> MapIterator<K, V> emptyMapIterator()",
        "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()",
        "public static <E> ResettableIterator<E> singletonIterator(final E object)",
        "public static <E> ListIterator<E> singletonListIterator(final E object)",
        "public static <E> ResettableIterator<E> arrayIterator(final E... array)",
        "public static <E> ResettableIterator<E> arrayIterator(final Object array)",
        "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)",
        "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)",
        "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)",
        "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)",
        "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)",
        "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)",
        "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)",
        "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)",
        "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)",
        "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)",
        "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)",
        "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)",
        "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)",
        "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)",
        "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)",
        "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)",
        "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)",
        "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)",
        "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)",
        "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)",
        "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)",
        "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)",
        "public static NodeListIterator nodeListIterator(final NodeList nodeList)",
        "public static NodeListIterator nodeListIterator(final Node node)",
        "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)",
        "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)",
        "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)",
        "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)",
        "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)",
        "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)",
        "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)",
        "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)",
        "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)",
        "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)",
        "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)",
        "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)",
        "public static Object[] toArray(final Iterator<?> iterator)",
        "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)",
        "public static <E> List<E> toList(final Iterator<? extends E> iterator)",
        "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)",
        "public static Iterator<?> getIterator(final Object obj)",
        "public static <E> void apply(final Iterator<E> iterator, final Closure<? super E> closure)",
        "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)",
        "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)",
        "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)",
        "public static boolean isEmpty(final Iterator<?> iterator)",
        "public static <E> boolean contains(final Iterator<E> iterator, final Object object)",
        "public static <E> E get(final Iterator<E> iterator, final int index)",
        "public static int size(final Iterator<?> iterator)",
        "public static <E> String toString(final Iterator<E> iterator)",
        "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)",
        "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
      ],
      "methods": [
        {
          "buggy_method": "  public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2) {\n  return new CollatingIterator<E>(comparator, iterator1, iterator2);\n  }",
          "fixed_method": "  public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2) {\n  @SuppressWarnings(\"unchecked\")\n  final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n  return new CollatingIterator<E>(comp, iterator1, iterator2);\n  }",
          "diff": [
            "@@ -602,7 +602,9 @@",
            "     public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator,\n",
            "                                                    final Iterator<? extends E> iterator1,\n",
            "                                                    final Iterator<? extends E> iterator2) {\n",
            "-        return new CollatingIterator<E>(comparator, iterator1, iterator2);\n",
            "+        @SuppressWarnings(\"unchecked\")\n",
            "+        final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n",
            "+        return new CollatingIterator<E>(comp, iterator1, iterator2);\n",
            "     }\n",
            " \n",
            "     /**\n",
            "@@ -623,7 +625,9 @@",
            "      */\n",
            "     public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator,\n",
            "                                                    final Iterator<? extends E>... iterators) {\n",
            "-        return new CollatingIterator<E>(comparator, iterators);\n",
            "+        @SuppressWarnings(\"unchecked\")\n",
            "+        final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n",
            "+        return new CollatingIterator<E>(comp, iterators);\n",
            "     }\n",
            " \n",
            "     /**\n",
            "@@ -645,7 +649,9 @@",
            "      */\n",
            "     public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator,\n",
            "                                                    final Collection<Iterator<? extends E>> iterators) {\n",
            "-        return new CollatingIterator<E>(comparator, iterators);\n",
            "+        @SuppressWarnings(\"unchecked\")\n",
            "+        final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n",
            "+        return new CollatingIterator<E>(comp, iterators);\n",
            "     }\n",
            " \n",
            "     // Object Graph\n"
          ],
          "changed_lines": 12
        }
      ]
    }
  ]
}
