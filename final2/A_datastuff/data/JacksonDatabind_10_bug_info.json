{
  "bug_id": "10",
  "failed_tests": {
    "com.fasterxml.jackson.databind.ser.TestAnyGetter": [
      {
        "methodName": "testIssue705",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<{\"[stuff\":\"[key/value]]\"}> but was:<{\"[key\":\"value]\"}>",
        "fail_line": "        assertEquals(\"{\\\"stuff\\\":\\\"[key/value]\\\"}\", json);",
        "test_source": "  public void testIssue705() throws Exception {\n  Issue705Bean input = new Issue705Bean(\"key\", \"value\");  \n  String json = MAPPER.writeValueAsString(input);\n  assertEquals(\"{\\\"stuff\\\":\\\"[key/value]\\\"}\", json);\n  }",
        "stack": [
          "TestAnyGetter.testIssue705 line 139"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.ser;\n\nimport java.util.Map;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.ser.std.MapSerializer;\n\n\npublic class AnyGetterWriter { protected final BeanProperty _property; protected final AnnotatedMember _accessor; protected MapSerializer _mapSerializer; @SuppressWarnings(\"unchecked\") public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n        _accessor = accessor;\n        _property = property;\n            _mapSerializer = (MapSerializer) serializer;\n    }\n\n    public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception {\n        Object value = _accessor.getValue(bean);\n        if (value == null) {\n            return;\n        }\n        if (!(value instanceof Map<?,?>)) {\n            throw new JsonMappingException(\"Value returned by 'any-getter' (\"\n                    +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName());\n        }\n        \n        if (_mapSerializer != null) {\n            _mapSerializer.serializeFields((Map<?,?>) value, gen, provider);\n            return;\n        }\n    }\n\n    \n    public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n        Object value = _accessor.getValue(bean);\n        if (value == null) {\n            return;\n        }\n        if (!(value instanceof Map<?,?>)) {\n            throw new JsonMappingException(\"Value returned by 'any-getter' (\"\n                    +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName());\n        }\n        \n        if (_mapSerializer != null) {\n            _mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null);\n            return;\n        }\n        \n    }\n    \n    \n    @SuppressWarnings(\"unchecked\")\n    public void resolve(SerializerProvider provider) throws JsonMappingException {\n        \n        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.ser;\n\nimport java.util.Map;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.ser.std.MapSerializer;\n\n\npublic class AnyGetterWriter { protected final BeanProperty _property; protected final AnnotatedMember _accessor; protected JsonSerializer<Object> _serializer; protected MapSerializer _mapSerializer; @SuppressWarnings(\"unchecked\") public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, JsonSerializer<?> serializer) {\n        _accessor = accessor;\n        _property = property;\n        _serializer = (JsonSerializer<Object>) serializer;\n        if (serializer instanceof MapSerializer) {\n            _mapSerializer = (MapSerializer) serializer;\n        }\n    }\n\n    public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception {\n        Object value = _accessor.getValue(bean);\n        if (value == null) {\n            return;\n        }\n        if (!(value instanceof Map<?,?>)) {\n            throw new JsonMappingException(\"Value returned by 'any-getter' (\"\n                    +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName());\n        }\n        \n        if (_mapSerializer != null) {\n            _mapSerializer.serializeFields((Map<?,?>) value, gen, provider);\n            return;\n        }\n        _serializer.serialize(value, gen, provider);\n    }\n\n    \n    public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n        Object value = _accessor.getValue(bean);\n        if (value == null) {\n            return;\n        }\n        if (!(value instanceof Map<?,?>)) {\n            throw new JsonMappingException(\"Value returned by 'any-getter' (\"\n                    +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName());\n        }\n        \n        if (_mapSerializer != null) {\n            _mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null);\n            return;\n        }\n        \n        _serializer.serialize(value, gen, provider);\n    }\n    \n    \n    @SuppressWarnings(\"unchecked\")\n    public void resolve(SerializerProvider provider) throws JsonMappingException {\n        \n        if (_serializer instanceof ContextualSerializer) {\n            JsonSerializer<?> ser = provider.handlePrimaryContextualization(_serializer, _property);\n            _serializer = (JsonSerializer<Object>) ser;\n            if (ser instanceof MapSerializer) {\n                _mapSerializer = (MapSerializer) ser;\n            }\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public class AnyGetterWriter { protected final BeanProperty _property; protected final AnnotatedMember _accessor; protected MapSerializer _mapSerializer; @SuppressWarnings(\"unchecked\") public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer)",
        "public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception",
        "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception",
        "public void resolve(SerializerProvider provider) throws JsonMappingException"
      ],
      "fixed_signatures": [
        "public class AnyGetterWriter { protected final BeanProperty _property; protected final AnnotatedMember _accessor; protected JsonSerializer<Object> _serializer; protected MapSerializer _mapSerializer; @SuppressWarnings(\"unchecked\") public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, JsonSerializer<?> serializer)",
        "public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception",
        "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception",
        "public void resolve(SerializerProvider provider) throws JsonMappingException"
      ],
      "methods": [
        {
          "buggy_method": "  public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception {\n  Object value = _accessor.getValue(bean);\n  if (value == null) {\n  return;\n  }\n  if (!(value instanceof Map<?,?>)) {\n  throw new JsonMappingException(\"Value returned by 'any-getter' (\"\n  +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName());\n  }\n  \n  if (_mapSerializer != null) {\n  _mapSerializer.serializeFields((Map<?,?>) value, gen, provider);\n  return;\n  }\n  }",
          "fixed_method": "  public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, JsonSerializer<?> serializer) {\n  _accessor = accessor;\n  _property = property;\n  _serializer = (JsonSerializer<Object>) serializer;\n  if (serializer instanceof MapSerializer) {\n  _mapSerializer = (MapSerializer) serializer;\n  }\n  }",
          "diff": [
            "@@ -21,16 +21,20 @@",
            "      */\n",
            "     protected final AnnotatedMember _accessor;\n",
            " \n",
            "+    protected JsonSerializer<Object> _serializer;\n",
            " \n",
            "     protected MapSerializer _mapSerializer;\n",
            "     \n",
            "     @SuppressWarnings(\"unchecked\")\n",
            "     public AnyGetterWriter(BeanProperty property,\n",
            "-            AnnotatedMember accessor, MapSerializer serializer)\n",
            "+            AnnotatedMember accessor, JsonSerializer<?> serializer)\n",
            "     {\n",
            "         _accessor = accessor;\n",
            "         _property = property;\n",
            "+        _serializer = (JsonSerializer<Object>) serializer;\n",
            "+        if (serializer instanceof MapSerializer) {\n",
            "             _mapSerializer = (MapSerializer) serializer;\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider)\n",
            "@@ -49,6 +53,7 @@",
            "             _mapSerializer.serializeFields((Map<?,?>) value, gen, provider);\n",
            "             return;\n",
            "         }\n",
            "+        _serializer.serialize(value, gen, provider);\n",
            "     }\n",
            " \n",
            "     /**\n"
          ],
          "changed_lines": 7
        },
        {
          "buggy_method": "  public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n  Object value = _accessor.getValue(bean);\n  if (value == null) {\n  return;\n  }\n  if (!(value instanceof Map<?,?>)) {\n  throw new JsonMappingException(\"Value returned by 'any-getter' (\"\n  +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName());\n  }\n  \n  if (_mapSerializer != null) {\n  _mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null);\n  return;\n  }\n  \n  }",
          "fixed_method": "  public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n  Object value = _accessor.getValue(bean);\n  if (value == null) {\n  return;\n  }\n  if (!(value instanceof Map<?,?>)) {\n  throw new JsonMappingException(\"Value returned by 'any-getter' (\"\n  +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName());\n  }\n  \n  if (_mapSerializer != null) {\n  _mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null);\n  return;\n  }\n  \n  _serializer.serialize(value, gen, provider);\n  }",
          "diff": [
            "@@ -72,6 +77,7 @@",
            "             return;\n",
            "         }\n",
            "         // ... not sure how custom handler would do it\n",
            "+        _serializer.serialize(value, gen, provider);\n",
            "     }\n",
            "     \n",
            "     // Note: NOT part of ResolvableSerializer...\n"
          ],
          "changed_lines": 1
        },
        {
          "buggy_method": "  public void resolve(SerializerProvider provider) throws JsonMappingException {\n  \n  _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n  }",
          "fixed_method": "  public void resolve(SerializerProvider provider) throws JsonMappingException {\n  \n  if (_serializer instanceof ContextualSerializer) {\n  JsonSerializer<?> ser = provider.handlePrimaryContextualization(_serializer, _property);\n  _serializer = (JsonSerializer<Object>) ser;\n  if (ser instanceof MapSerializer) {\n  _mapSerializer = (MapSerializer) ser;\n  }\n  }\n  }",
          "diff": [
            "@@ -79,6 +85,12 @@",
            "     public void resolve(SerializerProvider provider) throws JsonMappingException\n",
            "     {\n",
            "         // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n",
            "-        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n",
            "+        if (_serializer instanceof ContextualSerializer) {\n",
            "+            JsonSerializer<?> ser = provider.handlePrimaryContextualization(_serializer, _property);\n",
            "+            _serializer = (JsonSerializer<Object>) ser;\n",
            "+            if (ser instanceof MapSerializer) {\n",
            "+                _mapSerializer = (MapSerializer) ser;\n",
            "+            }\n",
            "+        }\n",
            "     }\n",
            " }\n"
          ],
          "changed_lines": 8
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.ser;\n\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;\nimport com.fasterxml.jackson.databind.introspect.*;\nimport com.fasterxml.jackson.databind.jsontype.NamedType;\nimport com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.jsontype.TypeSerializer;\nimport com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\nimport com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;\nimport com.fasterxml.jackson.databind.ser.std.MapSerializer;\nimport com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;\nimport com.fasterxml.jackson.databind.type.*;\nimport com.fasterxml.jackson.databind.util.ArrayBuilders;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\nimport com.fasterxml.jackson.databind.util.Converter;\n\n\npublic class BeanSerializerFactory extends BasicSerializerFactory implements java.io.Serializable { private static final long serialVersionUID = 1; public final static BeanSerializerFactory instance = new BeanSerializerFactory(null); protected BeanSerializerFactory(SerializerFactoryConfig config) {\n        super(config);\n    }\n    \n    \n    @Override\n    public SerializerFactory withConfig(SerializerFactoryConfig config) {\n        if (_factoryConfig == config) {\n            return this;\n        }\n        \n        if (getClass() != BeanSerializerFactory.class) {\n            throw new IllegalStateException(\"Subtype of BeanSerializerFactory (\"+getClass().getName()\n                    +\") has not properly overridden method 'withAdditionalSerializers': can not instantiate subtype with \"\n                    +\"additional serializer definitions\");\n        }\n        return new BeanSerializerFactory(config);\n    }\n\n    @Override\n    protected Iterable<Serializers> customSerializers() {\n        return _factoryConfig.serializers();\n    }\n    \n    \n\n    \n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n        \n        final SerializationConfig config = prov.getConfig();\n        BeanDescription beanDesc = config.introspect(origType);\n        JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n        if (ser != null) {\n            return (JsonSerializer<Object>) ser;\n        }\n        boolean staticTyping;\n        \n        JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n        if (type == origType) { \n            staticTyping = false;\n        } else { \n            staticTyping = true;\n            if (!type.hasRawClass(origType.getRawClass())) {\n                beanDesc = config.introspect(type);\n            }\n        }\n        \n        Converter<Object,Object> conv = beanDesc.findSerializationConverter();\n        if (conv == null) { \n            return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n        }\n        JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n        \n        \n        if (!delegateType.hasRawClass(type.getRawClass())) {\n            beanDesc = config.introspect(delegateType);\n            \n            ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n        }\n        if (ser == null) {\n            ser = _createSerializer2(prov, delegateType, beanDesc, true);\n        }\n        return new StdDelegatingSerializer(conv, delegateType, ser);\n    }\n\n    protected JsonSerializer<?> _createSerializer2(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n        \n        JsonSerializer<?> ser = findSerializerByAnnotations(prov, type, beanDesc);\n        if (ser != null) {\n            return ser;\n        }\n        final SerializationConfig config = prov.getConfig();\n        \n        \n        \n        if (type.isContainerType()) {\n            if (!staticTyping) {\n                staticTyping = usesStaticTyping(config, beanDesc, null);\n                \n                \n                \n            }\n            \n            ser =  buildContainerSerializer(prov, type, beanDesc, staticTyping);\n            \n            if (ser != null) {\n                return ser;\n            }\n        } else {\n            \n            for (Serializers serializers : customSerializers()) {\n                ser = serializers.findSerializer(config, type, beanDesc);\n                if (ser != null) {\n                    break;\n                }\n            }\n        }\n        \n        \n        \n        \n        if (ser == null) {\n            ser = findSerializerByLookup(type, config, beanDesc, staticTyping);\n            if (ser == null) {\n                ser = findSerializerByPrimaryType(prov, type, beanDesc, staticTyping);\n                if (ser == null) {\n                    \n                    \n                    \n                    ser = findBeanSerializer(prov, type, beanDesc);\n                    \n                    if (ser == null) {\n                        ser = findSerializerByAddonType(config, type, beanDesc, staticTyping);\n                        \n                        \n                        \n                        if (ser == null) {\n                            ser = prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n                        }\n                    }\n                }\n            }\n        }\n        if (ser != null) {\n            \n            if (_factoryConfig.hasSerializerModifiers()) {\n                for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                    ser = mod.modifySerializer(config, beanDesc, ser);\n                }\n            }\n        }\n        return ser;\n    }\n    \n    \n\n    \n    public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n        \n        if (!isPotentialBeanType(type.getRawClass())) {\n            \n            \n            if (!type.isEnumType()) {\n                return null;\n            }\n        }\n        return constructBeanSerializer(prov, beanDesc);\n    }\n\n    \n    public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException {\n        AnnotationIntrospector ai = config.getAnnotationIntrospector();\n        TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, accessor, baseType);        \n        \n        if (b == null) {\n            return createTypeSerializer(config, baseType);\n        }\n        Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(\n                accessor, config, ai, baseType);\n        return b.buildTypeSerializer(config, baseType, subtypes);\n    }\n\n        \n    public TypeSerializer findPropertyContentTypeSerializer(JavaType containerType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException {\n        JavaType contentType = containerType.getContentType();\n        AnnotationIntrospector ai = config.getAnnotationIntrospector();\n        TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, accessor, containerType);        \n        \n        if (b == null) {\n            return createTypeSerializer(config, contentType);\n        }\n        Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(accessor,\n                config, ai, contentType);\n        return b.buildTypeSerializer(config, contentType, subtypes);\n    }\n    \n    \n\n    \n    @SuppressWarnings(\"unchecked\")\n    protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n        \n        \n        if (beanDesc.getBeanClass() == Object.class) {\n            return prov.getUnknownTypeSerializer(Object.class);\n\n        }\n        final SerializationConfig config = prov.getConfig();\n        BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n        builder.setConfig(config);\n\n        \n        List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n        if (props == null) {\n            props = new ArrayList<BeanPropertyWriter>();\n        }\n        \n        prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n\n        \n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props = mod.changeProperties(config, beanDesc, props);\n            }\n        }\n\n        \n        props = filterBeanProperties(config, beanDesc, props);\n\n        \n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props = mod.orderProperties(config, beanDesc, props);\n            }\n        }\n\n        \n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n        \n        builder.setProperties(props);\n        builder.setFilterId(findFilterId(config, beanDesc));\n        \n        AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n        if (anyGetter != null) {\n            if (config.canOverrideAccessModifiers()) {\n                anyGetter.fixAccess();\n            }\n            JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n            \n            boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n            JavaType valueType = type.getContentType();\n            TypeSerializer typeSer = createTypeSerializer(config, valueType);\n            \n            \n            MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n                \n            \n            PropertyName name = new PropertyName(anyGetter.getName());\n            BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null,\n                    beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n            builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n        }\n        \n        processViews(config, builder);\n\n        \n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        \n        JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n        \n        if (ser == null) {\n            \n            \n            \n            if (beanDesc.hasKnownClassAnnotations()) {\n                return builder.createDummy();\n            }\n        }\n        return ser;\n    }\n\n    protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List<BeanPropertyWriter> props) throws JsonMappingException {\n        ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();\n        if (objectIdInfo == null) {\n            return null;\n        }\n        ObjectIdGenerator<?> gen;\n        Class<?> implClass = objectIdInfo.getGeneratorType();\n\n        \n        if (implClass == ObjectIdGenerators.PropertyGenerator.class) { \n            String propName = objectIdInfo.getPropertyName().getSimpleName();\n            BeanPropertyWriter idProp = null;\n\n            for (int i = 0, len = props.size() ;; ++i) {\n                if (i == len) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \"+beanDesc.getBeanClass().getName()\n                            +\": can not find property with name '\"+propName+\"'\");\n                }\n                BeanPropertyWriter prop = props.get(i);\n                if (propName.equals(prop.getName())) {\n                    idProp = prop;\n                    \n                    if (i > 0) {\n                        props.remove(i);\n                        props.add(0, idProp);\n                    }\n                    break;\n                }\n            }\n            JavaType idType = idProp.getType();\n            gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n            \n            return ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n            \n        } \n        \n        JavaType type = prov.constructType(implClass);\n        \n        JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n        return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n                objectIdInfo.getAlwaysAsId());\n    }\n\n    \n    protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter writer, Class<?>[] inViews) {\n        return FilteredBeanPropertyWriter.constructViewBased(writer, inViews);\n    }\n    \n    protected PropertyBuilder constructPropertyBuilder(SerializationConfig config, BeanDescription beanDesc) {\n        return new PropertyBuilder(config, beanDesc);\n    }\n\n    protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc) {\n        return new BeanSerializerBuilder(beanDesc);\n    }\n    \n    \n    \n    \n    protected boolean isPotentialBeanType(Class<?> type) {\n        return (ClassUtil.canBeABeanType(type) == null) && !ClassUtil.isProxyType(type);\n    }\n\n    \n    protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n        List<BeanPropertyDefinition> properties = beanDesc.findProperties();\n        final SerializationConfig config = prov.getConfig();\n\n        \n        removeIgnorableTypes(config, beanDesc, properties);\n        \n        \n        if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n            removeSetterlessGetters(config, beanDesc, properties);\n        }\n        \n        \n        if (properties.isEmpty()) {\n            return null;\n        }\n        \n        boolean staticTyping = usesStaticTyping(config, beanDesc, null);\n        PropertyBuilder pb = constructPropertyBuilder(config, beanDesc);\n        \n        ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size());\n        TypeBindings typeBind = beanDesc.bindingsForBeanType();\n        for (BeanPropertyDefinition property : properties) {\n            final AnnotatedMember accessor = property.getAccessor();\n            \n            if (property.isTypeId()) {\n                if (accessor != null) { \n                    if (config.canOverrideAccessModifiers()) {\n                        accessor.fixAccess();\n                    }\n                    builder.setTypeId(accessor);\n                }\n                continue;\n            }\n            \n            AnnotationIntrospector.ReferenceProperty refType = property.findReferenceType();\n            if (refType != null && refType.isBackReference()) {\n                continue;\n            }\n            if (accessor instanceof AnnotatedMethod) {\n                result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n            } else {\n                result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n            }\n        }\n        return result;\n    }\n\n    \n    \n    \n    protected List<BeanPropertyWriter> filterBeanProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> props) {\n        AnnotationIntrospector intr = config.getAnnotationIntrospector();\n        AnnotatedClass ac = beanDesc.getClassInfo();\n        String[] ignored = intr.findPropertiesToIgnore(ac);\n        if (ignored != null && ignored.length > 0) {\n            HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(ignored);\n            Iterator<BeanPropertyWriter> it = props.iterator();\n            while (it.hasNext()) {\n                if (ignoredSet.contains(it.next().getName())) {\n                    it.remove();\n                }\n            }\n        }\n        return props;\n    }\n\n    \n    protected void processViews(SerializationConfig config, BeanSerializerBuilder builder) {\n        \n        List<BeanPropertyWriter> props = builder.getProperties();\n        boolean includeByDefault = config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION);\n        final int propCount = props.size();\n        int viewsFound = 0;\n        BeanPropertyWriter[] filtered = new BeanPropertyWriter[propCount];\n        \n        for (int i = 0; i < propCount; ++i) {\n            BeanPropertyWriter bpw = props.get(i);\n            Class<?>[] views = bpw.getViews();\n            if (views == null) { \n                if (includeByDefault) {\n                    filtered[i] = bpw;\n                }\n            } else {\n                ++viewsFound;\n                filtered[i] = constructFilteredBeanWriter(bpw, views);\n            }\n        }\n        \n        if (includeByDefault && viewsFound == 0) {\n            return;\n        }\n        builder.setFilteredProperties(filtered);\n    }\n\n    \n    protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties) {\n        AnnotationIntrospector intr = config.getAnnotationIntrospector();\n        HashMap<Class<?>,Boolean> ignores = new HashMap<Class<?>,Boolean>();\n        Iterator<BeanPropertyDefinition> it = properties.iterator();\n        while (it.hasNext()) {\n            BeanPropertyDefinition property = it.next();\n            AnnotatedMember accessor = property.getAccessor();\n            if (accessor == null) {\n                it.remove();\n                continue;\n            }\n            Class<?> type = accessor.getRawType();\n            Boolean result = ignores.get(type);\n            if (result == null) {\n                BeanDescription desc = config.introspectClassAnnotations(type);\n                AnnotatedClass ac = desc.getClassInfo();\n                result = intr.isIgnorableType(ac);\n                \n                if (result == null) {\n                    result = Boolean.FALSE;\n                }\n                ignores.put(type, result);\n            }\n            \n            if (result.booleanValue()) {\n                it.remove();\n            }\n        }\n    }\n\n    \n    protected void removeSetterlessGetters(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties) {\n        Iterator<BeanPropertyDefinition> it = properties.iterator();\n        while (it.hasNext()) {\n            BeanPropertyDefinition property = it.next();\n            \n            \n            if (!property.couldDeserialize() && !property.isExplicitlyIncluded()) {\n                it.remove();\n            }\n        }\n    }\n    \n    \n\n    \n    protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n        final PropertyName name = propDef.getFullName();\n        if (prov.canOverrideAccessModifiers()) {\n            accessor.fixAccess();\n        }\n        JavaType type = accessor.getType(typeContext);\n        BeanProperty.Std property = new BeanProperty.Std(name, type, propDef.getWrapperName(),\n                pb.getClassAnnotations(), accessor, propDef.getMetadata());\n\n        \n        JsonSerializer<?> annotatedSerializer = findSerializerFromAnnotation(prov,\n                accessor);\n        \n        if (annotatedSerializer instanceof ResolvableSerializer) {\n            ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n        }\n        \n        annotatedSerializer = prov.handlePrimaryContextualization(annotatedSerializer, property);\n        \n        TypeSerializer contentTypeSer = null;\n        \n        if (ClassUtil.isCollectionMapOrArray(type.getRawClass()) || type.isCollectionLikeType() || type.isMapLikeType()) {\n            contentTypeSer = findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n        }\n        \n        TypeSerializer typeSer = findPropertyTypeSerializer(type, prov.getConfig(), accessor);\n        BeanPropertyWriter pbw = pb.buildWriter(prov, propDef, type, annotatedSerializer,\n                        typeSer, contentTypeSer, accessor, staticTyping);\n        return pbw;\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.ser;\n\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;\nimport com.fasterxml.jackson.databind.introspect.*;\nimport com.fasterxml.jackson.databind.jsontype.NamedType;\nimport com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.jsontype.TypeSerializer;\nimport com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\nimport com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;\nimport com.fasterxml.jackson.databind.ser.std.MapSerializer;\nimport com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;\nimport com.fasterxml.jackson.databind.type.*;\nimport com.fasterxml.jackson.databind.util.ArrayBuilders;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\nimport com.fasterxml.jackson.databind.util.Converter;\n\n\npublic class BeanSerializerFactory extends BasicSerializerFactory implements java.io.Serializable { private static final long serialVersionUID = 1; public final static BeanSerializerFactory instance = new BeanSerializerFactory(null); protected BeanSerializerFactory(SerializerFactoryConfig config) {\n        super(config);\n    }\n    \n    \n    @Override\n    public SerializerFactory withConfig(SerializerFactoryConfig config) {\n        if (_factoryConfig == config) {\n            return this;\n        }\n        \n        if (getClass() != BeanSerializerFactory.class) {\n            throw new IllegalStateException(\"Subtype of BeanSerializerFactory (\"+getClass().getName()\n                    +\") has not properly overridden method 'withAdditionalSerializers': can not instantiate subtype with \"\n                    +\"additional serializer definitions\");\n        }\n        return new BeanSerializerFactory(config);\n    }\n\n    @Override\n    protected Iterable<Serializers> customSerializers() {\n        return _factoryConfig.serializers();\n    }\n    \n    \n\n    \n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n        \n        final SerializationConfig config = prov.getConfig();\n        BeanDescription beanDesc = config.introspect(origType);\n        JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n        if (ser != null) {\n            return (JsonSerializer<Object>) ser;\n        }\n        boolean staticTyping;\n        \n        JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n        if (type == origType) { \n            staticTyping = false;\n        } else { \n            staticTyping = true;\n            if (!type.hasRawClass(origType.getRawClass())) {\n                beanDesc = config.introspect(type);\n            }\n        }\n        \n        Converter<Object,Object> conv = beanDesc.findSerializationConverter();\n        if (conv == null) { \n            return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n        }\n        JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n        \n        \n        if (!delegateType.hasRawClass(type.getRawClass())) {\n            beanDesc = config.introspect(delegateType);\n            \n            ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n        }\n        if (ser == null) {\n            ser = _createSerializer2(prov, delegateType, beanDesc, true);\n        }\n        return new StdDelegatingSerializer(conv, delegateType, ser);\n    }\n\n    protected JsonSerializer<?> _createSerializer2(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n        \n        JsonSerializer<?> ser = findSerializerByAnnotations(prov, type, beanDesc);\n        if (ser != null) {\n            return ser;\n        }\n        final SerializationConfig config = prov.getConfig();\n        \n        \n        \n        if (type.isContainerType()) {\n            if (!staticTyping) {\n                staticTyping = usesStaticTyping(config, beanDesc, null);\n                \n                \n                \n            }\n            \n            ser =  buildContainerSerializer(prov, type, beanDesc, staticTyping);\n            \n            if (ser != null) {\n                return ser;\n            }\n        } else {\n            \n            for (Serializers serializers : customSerializers()) {\n                ser = serializers.findSerializer(config, type, beanDesc);\n                if (ser != null) {\n                    break;\n                }\n            }\n        }\n        \n        \n        \n        \n        if (ser == null) {\n            ser = findSerializerByLookup(type, config, beanDesc, staticTyping);\n            if (ser == null) {\n                ser = findSerializerByPrimaryType(prov, type, beanDesc, staticTyping);\n                if (ser == null) {\n                    \n                    \n                    \n                    ser = findBeanSerializer(prov, type, beanDesc);\n                    \n                    if (ser == null) {\n                        ser = findSerializerByAddonType(config, type, beanDesc, staticTyping);\n                        \n                        \n                        \n                        if (ser == null) {\n                            ser = prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n                        }\n                    }\n                }\n            }\n        }\n        if (ser != null) {\n            \n            if (_factoryConfig.hasSerializerModifiers()) {\n                for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                    ser = mod.modifySerializer(config, beanDesc, ser);\n                }\n            }\n        }\n        return ser;\n    }\n    \n    \n\n    \n    public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n        \n        if (!isPotentialBeanType(type.getRawClass())) {\n            \n            \n            if (!type.isEnumType()) {\n                return null;\n            }\n        }\n        return constructBeanSerializer(prov, beanDesc);\n    }\n\n    \n    public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException {\n        AnnotationIntrospector ai = config.getAnnotationIntrospector();\n        TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, accessor, baseType);        \n        \n        if (b == null) {\n            return createTypeSerializer(config, baseType);\n        }\n        Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(\n                accessor, config, ai, baseType);\n        return b.buildTypeSerializer(config, baseType, subtypes);\n    }\n\n        \n    public TypeSerializer findPropertyContentTypeSerializer(JavaType containerType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException {\n        JavaType contentType = containerType.getContentType();\n        AnnotationIntrospector ai = config.getAnnotationIntrospector();\n        TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, accessor, containerType);        \n        \n        if (b == null) {\n            return createTypeSerializer(config, contentType);\n        }\n        Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(accessor,\n                config, ai, contentType);\n        return b.buildTypeSerializer(config, contentType, subtypes);\n    }\n    \n    \n\n    \n    @SuppressWarnings(\"unchecked\")\n    protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n        \n        \n        if (beanDesc.getBeanClass() == Object.class) {\n            return prov.getUnknownTypeSerializer(Object.class);\n\n        }\n        final SerializationConfig config = prov.getConfig();\n        BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n        builder.setConfig(config);\n\n        \n        List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n        if (props == null) {\n            props = new ArrayList<BeanPropertyWriter>();\n        }\n        \n        prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n\n        \n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props = mod.changeProperties(config, beanDesc, props);\n            }\n        }\n\n        \n        props = filterBeanProperties(config, beanDesc, props);\n\n        \n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props = mod.orderProperties(config, beanDesc, props);\n            }\n        }\n\n        \n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n        \n        builder.setProperties(props);\n        builder.setFilterId(findFilterId(config, beanDesc));\n        \n        AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n        if (anyGetter != null) {\n            if (config.canOverrideAccessModifiers()) {\n                anyGetter.fixAccess();\n            }\n            JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n            \n            boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n            JavaType valueType = type.getContentType();\n            TypeSerializer typeSer = createTypeSerializer(config, valueType);\n            \n            \n            JsonSerializer<?> anySer = findSerializerFromAnnotation(prov, anyGetter);\n            if (anySer == null) {\n                \n                anySer = MapSerializer.construct( null, type, staticTyping,\n                        typeSer, null, null,  null);\n            }\n            \n            PropertyName name = new PropertyName(anyGetter.getName());\n            BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null,\n                    beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n            builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n        }\n        \n        processViews(config, builder);\n\n        \n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        \n        JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n        \n        if (ser == null) {\n            \n            \n            \n            if (beanDesc.hasKnownClassAnnotations()) {\n                return builder.createDummy();\n            }\n        }\n        return ser;\n    }\n\n    protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List<BeanPropertyWriter> props) throws JsonMappingException {\n        ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();\n        if (objectIdInfo == null) {\n            return null;\n        }\n        ObjectIdGenerator<?> gen;\n        Class<?> implClass = objectIdInfo.getGeneratorType();\n\n        \n        if (implClass == ObjectIdGenerators.PropertyGenerator.class) { \n            String propName = objectIdInfo.getPropertyName().getSimpleName();\n            BeanPropertyWriter idProp = null;\n\n            for (int i = 0, len = props.size() ;; ++i) {\n                if (i == len) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \"+beanDesc.getBeanClass().getName()\n                            +\": can not find property with name '\"+propName+\"'\");\n                }\n                BeanPropertyWriter prop = props.get(i);\n                if (propName.equals(prop.getName())) {\n                    idProp = prop;\n                    \n                    if (i > 0) {\n                        props.remove(i);\n                        props.add(0, idProp);\n                    }\n                    break;\n                }\n            }\n            JavaType idType = idProp.getType();\n            gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n            \n            return ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n            \n        } \n        \n        JavaType type = prov.constructType(implClass);\n        \n        JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n        return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n                objectIdInfo.getAlwaysAsId());\n    }\n\n    \n    protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter writer, Class<?>[] inViews) {\n        return FilteredBeanPropertyWriter.constructViewBased(writer, inViews);\n    }\n    \n    protected PropertyBuilder constructPropertyBuilder(SerializationConfig config, BeanDescription beanDesc) {\n        return new PropertyBuilder(config, beanDesc);\n    }\n\n    protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc) {\n        return new BeanSerializerBuilder(beanDesc);\n    }\n    \n    \n    \n    \n    protected boolean isPotentialBeanType(Class<?> type) {\n        return (ClassUtil.canBeABeanType(type) == null) && !ClassUtil.isProxyType(type);\n    }\n\n    \n    protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n        List<BeanPropertyDefinition> properties = beanDesc.findProperties();\n        final SerializationConfig config = prov.getConfig();\n\n        \n        removeIgnorableTypes(config, beanDesc, properties);\n        \n        \n        if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n            removeSetterlessGetters(config, beanDesc, properties);\n        }\n        \n        \n        if (properties.isEmpty()) {\n            return null;\n        }\n        \n        boolean staticTyping = usesStaticTyping(config, beanDesc, null);\n        PropertyBuilder pb = constructPropertyBuilder(config, beanDesc);\n        \n        ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size());\n        TypeBindings typeBind = beanDesc.bindingsForBeanType();\n        for (BeanPropertyDefinition property : properties) {\n            final AnnotatedMember accessor = property.getAccessor();\n            \n            if (property.isTypeId()) {\n                if (accessor != null) { \n                    if (config.canOverrideAccessModifiers()) {\n                        accessor.fixAccess();\n                    }\n                    builder.setTypeId(accessor);\n                }\n                continue;\n            }\n            \n            AnnotationIntrospector.ReferenceProperty refType = property.findReferenceType();\n            if (refType != null && refType.isBackReference()) {\n                continue;\n            }\n            if (accessor instanceof AnnotatedMethod) {\n                result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n            } else {\n                result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n            }\n        }\n        return result;\n    }\n\n    \n    \n    \n    protected List<BeanPropertyWriter> filterBeanProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> props) {\n        AnnotationIntrospector intr = config.getAnnotationIntrospector();\n        AnnotatedClass ac = beanDesc.getClassInfo();\n        String[] ignored = intr.findPropertiesToIgnore(ac);\n        if (ignored != null && ignored.length > 0) {\n            HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(ignored);\n            Iterator<BeanPropertyWriter> it = props.iterator();\n            while (it.hasNext()) {\n                if (ignoredSet.contains(it.next().getName())) {\n                    it.remove();\n                }\n            }\n        }\n        return props;\n    }\n\n    \n    protected void processViews(SerializationConfig config, BeanSerializerBuilder builder) {\n        \n        List<BeanPropertyWriter> props = builder.getProperties();\n        boolean includeByDefault = config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION);\n        final int propCount = props.size();\n        int viewsFound = 0;\n        BeanPropertyWriter[] filtered = new BeanPropertyWriter[propCount];\n        \n        for (int i = 0; i < propCount; ++i) {\n            BeanPropertyWriter bpw = props.get(i);\n            Class<?>[] views = bpw.getViews();\n            if (views == null) { \n                if (includeByDefault) {\n                    filtered[i] = bpw;\n                }\n            } else {\n                ++viewsFound;\n                filtered[i] = constructFilteredBeanWriter(bpw, views);\n            }\n        }\n        \n        if (includeByDefault && viewsFound == 0) {\n            return;\n        }\n        builder.setFilteredProperties(filtered);\n    }\n\n    \n    protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties) {\n        AnnotationIntrospector intr = config.getAnnotationIntrospector();\n        HashMap<Class<?>,Boolean> ignores = new HashMap<Class<?>,Boolean>();\n        Iterator<BeanPropertyDefinition> it = properties.iterator();\n        while (it.hasNext()) {\n            BeanPropertyDefinition property = it.next();\n            AnnotatedMember accessor = property.getAccessor();\n            if (accessor == null) {\n                it.remove();\n                continue;\n            }\n            Class<?> type = accessor.getRawType();\n            Boolean result = ignores.get(type);\n            if (result == null) {\n                BeanDescription desc = config.introspectClassAnnotations(type);\n                AnnotatedClass ac = desc.getClassInfo();\n                result = intr.isIgnorableType(ac);\n                \n                if (result == null) {\n                    result = Boolean.FALSE;\n                }\n                ignores.put(type, result);\n            }\n            \n            if (result.booleanValue()) {\n                it.remove();\n            }\n        }\n    }\n\n    \n    protected void removeSetterlessGetters(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties) {\n        Iterator<BeanPropertyDefinition> it = properties.iterator();\n        while (it.hasNext()) {\n            BeanPropertyDefinition property = it.next();\n            \n            \n            if (!property.couldDeserialize() && !property.isExplicitlyIncluded()) {\n                it.remove();\n            }\n        }\n    }\n    \n    \n\n    \n    protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n        final PropertyName name = propDef.getFullName();\n        if (prov.canOverrideAccessModifiers()) {\n            accessor.fixAccess();\n        }\n        JavaType type = accessor.getType(typeContext);\n        BeanProperty.Std property = new BeanProperty.Std(name, type, propDef.getWrapperName(),\n                pb.getClassAnnotations(), accessor, propDef.getMetadata());\n\n        \n        JsonSerializer<?> annotatedSerializer = findSerializerFromAnnotation(prov,\n                accessor);\n        \n        if (annotatedSerializer instanceof ResolvableSerializer) {\n            ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n        }\n        \n        annotatedSerializer = prov.handlePrimaryContextualization(annotatedSerializer, property);\n        \n        TypeSerializer contentTypeSer = null;\n        \n        if (ClassUtil.isCollectionMapOrArray(type.getRawClass()) || type.isCollectionLikeType() || type.isMapLikeType()) {\n            contentTypeSer = findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n        }\n        \n        TypeSerializer typeSer = findPropertyTypeSerializer(type, prov.getConfig(), accessor);\n        BeanPropertyWriter pbw = pb.buildWriter(prov, propDef, type, annotatedSerializer,\n                        typeSer, contentTypeSer, accessor, staticTyping);\n        return pbw;\n    }\n}\n",
      "buggy_signatures": [
        "public SerializerFactory withConfig(SerializerFactoryConfig config)",
        "protected Iterable<Serializers> customSerializers()",
        "public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException",
        "protected JsonSerializer<?> _createSerializer2(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException",
        "public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc) throws JsonMappingException",
        "public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException",
        "public TypeSerializer findPropertyContentTypeSerializer(JavaType containerType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException",
        "protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException",
        "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List<BeanPropertyWriter> props) throws JsonMappingException",
        "protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter writer, Class<?>[] inViews)",
        "protected PropertyBuilder constructPropertyBuilder(SerializationConfig config, BeanDescription beanDesc)",
        "protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc)",
        "protected boolean isPotentialBeanType(Class<?> type)",
        "protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException",
        "protected List<BeanPropertyWriter> filterBeanProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> props)",
        "protected void processViews(SerializationConfig config, BeanSerializerBuilder builder)",
        "protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties)",
        "protected void removeSetterlessGetters(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties)",
        "protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException"
      ],
      "fixed_signatures": [
        "public SerializerFactory withConfig(SerializerFactoryConfig config)",
        "protected Iterable<Serializers> customSerializers()",
        "public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException",
        "protected JsonSerializer<?> _createSerializer2(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException",
        "public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc) throws JsonMappingException",
        "public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException",
        "public TypeSerializer findPropertyContentTypeSerializer(JavaType containerType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException",
        "protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException",
        "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List<BeanPropertyWriter> props) throws JsonMappingException",
        "protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter writer, Class<?>[] inViews)",
        "protected PropertyBuilder constructPropertyBuilder(SerializationConfig config, BeanDescription beanDesc)",
        "protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc)",
        "protected boolean isPotentialBeanType(Class<?> type)",
        "protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException",
        "protected List<BeanPropertyWriter> filterBeanProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> props)",
        "protected void processViews(SerializationConfig config, BeanSerializerBuilder builder)",
        "protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties)",
        "protected void removeSetterlessGetters(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties)",
        "protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException"
      ],
      "methods": [
        {
          "buggy_method": "  protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n  \n  \n  if (beanDesc.getBeanClass() == Object.class) {\n  return prov.getUnknownTypeSerializer(Object.class);\n\n  }\n  final SerializationConfig config = prov.getConfig();\n  BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n  builder.setConfig(config);\n\n  \n  List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n  if (props == null) {\n  props = new ArrayList<BeanPropertyWriter>();\n  }\n  \n  prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n\n  \n  if (_factoryConfig.hasSerializerModifiers()) {\n  for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n  props = mod.changeProperties(config, beanDesc, props);\n  }\n  }\n\n  \n  props = filterBeanProperties(config, beanDesc, props);\n\n  \n  if (_factoryConfig.hasSerializerModifiers()) {\n  for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n  props = mod.orderProperties(config, beanDesc, props);\n  }\n  }\n\n  \n  builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n  \n  builder.setProperties(props);\n  builder.setFilterId(findFilterId(config, beanDesc));\n  \n  AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n  if (anyGetter != null) {\n  if (config.canOverrideAccessModifiers()) {\n  anyGetter.fixAccess();\n  }\n  JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n  \n  boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n  JavaType valueType = type.getContentType();\n  TypeSerializer typeSer = createTypeSerializer(config, valueType);\n  \n  \n  MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n  \n  \n  PropertyName name = new PropertyName(anyGetter.getName());\n  BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null,\n  beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n  builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n  }\n  \n  processViews(config, builder);\n\n  \n  if (_factoryConfig.hasSerializerModifiers()) {\n  for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n  builder = mod.updateBuilder(config, beanDesc, builder);\n  }\n  }\n  \n  JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n  \n  if (ser == null) {\n  \n  \n  \n  if (beanDesc.hasKnownClassAnnotations()) {\n  return builder.createDummy();\n  }\n  }\n  return ser;\n  }",
          "fixed_method": "  protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n  \n  \n  if (beanDesc.getBeanClass() == Object.class) {\n  return prov.getUnknownTypeSerializer(Object.class);\n\n  }\n  final SerializationConfig config = prov.getConfig();\n  BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n  builder.setConfig(config);\n\n  \n  List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n  if (props == null) {\n  props = new ArrayList<BeanPropertyWriter>();\n  }\n  \n  prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n\n  \n  if (_factoryConfig.hasSerializerModifiers()) {\n  for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n  props = mod.changeProperties(config, beanDesc, props);\n  }\n  }\n\n  \n  props = filterBeanProperties(config, beanDesc, props);\n\n  \n  if (_factoryConfig.hasSerializerModifiers()) {\n  for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n  props = mod.orderProperties(config, beanDesc, props);\n  }\n  }\n\n  \n  builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n  \n  builder.setProperties(props);\n  builder.setFilterId(findFilterId(config, beanDesc));\n  \n  AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n  if (anyGetter != null) {\n  if (config.canOverrideAccessModifiers()) {\n  anyGetter.fixAccess();\n  }\n  JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n  \n  boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n  JavaType valueType = type.getContentType();\n  TypeSerializer typeSer = createTypeSerializer(config, valueType);\n  \n  \n  JsonSerializer<?> anySer = findSerializerFromAnnotation(prov, anyGetter);\n  if (anySer == null) {\n  \n  anySer = MapSerializer.construct( null, type, staticTyping,\n  typeSer, null, null,  null);\n  }\n  \n  PropertyName name = new PropertyName(anyGetter.getName());\n  BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null,\n  beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n  builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n  }\n  \n  processViews(config, builder);\n\n  \n  if (_factoryConfig.hasSerializerModifiers()) {\n  for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n  builder = mod.updateBuilder(config, beanDesc, builder);\n  }\n  }\n  \n  JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n  \n  if (ser == null) {\n  \n  \n  \n  if (beanDesc.hasKnownClassAnnotations()) {\n  return builder.createDummy();\n  }\n  }\n  return ser;\n  }",
          "diff": [
            "@@ -392,8 +392,12 @@",
            "             TypeSerializer typeSer = createTypeSerializer(config, valueType);\n",
            "             // last 2 nulls; don't know key, value serializers (yet)\n",
            "             // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n",
            "-            MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n",
            "+            JsonSerializer<?> anySer = findSerializerFromAnnotation(prov, anyGetter);\n",
            "+            if (anySer == null) {\n",
            "                 // TODO: support '@JsonIgnoreProperties' with any setter?\n",
            "+                anySer = MapSerializer.construct(/* ignored props*/ null, type, staticTyping,\n",
            "+                        typeSer, null, null, /*filterId*/ null);\n",
            "+            }\n",
            "             // TODO: can we find full PropertyName?\n",
            "             PropertyName name = new PropertyName(anyGetter.getName());\n",
            "             BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null,\n"
          ],
          "changed_lines": 6
        }
      ]
    }
  ]
}
