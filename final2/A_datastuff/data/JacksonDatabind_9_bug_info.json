{
  "bug_id": "9",
  "failed_tests": {
    "com.fasterxml.jackson.databind.ser.TestMapSerialization": [
      {
        "methodName": "testClassKey",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<{\"[]java.lang.String\":2}> but was:<{\"[class ]java.lang.String\":2}>",
        "fail_line": "        assertEquals(aposToQuotes(\"{'java.lang.String':2}\"), json);",
        "test_source": "  public void testClassKey() throws IOException {\n  Map<Class<?>,Integer> map = new LinkedHashMap<Class<?>,Integer>();\n  map.put(String.class, 2);\n  String json = MAPPER.writeValueAsString(map);\n  assertEquals(aposToQuotes(\"{'java.lang.String':2}\"), json);\n  }",
        "stack": [
          "TestMapSerialization.testClassKey line 256"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.ser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.Date;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n\n\n@SuppressWarnings(\"serial\")\npublic class StdKeySerializer extends StdSerializer<Object> { public StdKeySerializer() { super(Object.class); }\n\n    @Override\n    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n        String str;\n        \n        if (value instanceof Date) {\n            provider.defaultSerializeDateKey((Date) value, jgen);\n            return;\n        } else {\n            str = value.toString();\n        }\n        jgen.writeFieldName(str);\n    }\n\n    @Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n        return createSchemaNode(\"string\");\n    }\n\n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        visitor.expectStringFormat(typeHint);\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.ser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.Date;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n\n\n@SuppressWarnings(\"serial\")\npublic class StdKeySerializer extends StdSerializer<Object> { public StdKeySerializer() { super(Object.class); }\n\n    @Override\n    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n        String str;\n        Class<?> cls = value.getClass();\n        \n        if (cls == String.class) {\n            str = (String) value;\n        } else if (Date.class.isAssignableFrom(cls)) {\n            provider.defaultSerializeDateKey((Date) value, jgen);\n            return;\n        } else if (cls == Class.class) {\n            str = ((Class<?>) value).getName();\n        } else {\n            str = value.toString();\n        }\n        jgen.writeFieldName(str);\n    }\n\n    @Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n        return createSchemaNode(\"string\");\n    }\n\n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        visitor.expectStringFormat(typeHint);\n    }\n}\n",
      "buggy_signatures": [
        "public class StdKeySerializer extends StdSerializer<Object> { public StdKeySerializer()",
        "public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException",
        "public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException",
        "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException"
      ],
      "fixed_signatures": [
        "public class StdKeySerializer extends StdSerializer<Object> { public StdKeySerializer()",
        "public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException",
        "public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException",
        "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException"
      ],
      "methods": [
        {
          "buggy_method": "  public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n  String str;\n  \n  if (value instanceof Date) {\n  provider.defaultSerializeDateKey((Date) value, jgen);\n  return;\n  } else {\n  str = value.toString();\n  }\n  jgen.writeFieldName(str);\n  }",
          "fixed_method": "  public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n  String str;\n  Class<?> cls = value.getClass();\n  \n  if (cls == String.class) {\n  str = (String) value;\n  } else if (Date.class.isAssignableFrom(cls)) {\n  provider.defaultSerializeDateKey((Date) value, jgen);\n  return;\n  } else if (cls == Class.class) {\n  str = ((Class<?>) value).getName();\n  } else {\n  str = value.toString();\n  }\n  jgen.writeFieldName(str);\n  }",
          "diff": [
            "@@ -24,10 +24,15 @@",
            "     @Override\n",
            "     public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n",
            "         String str;\n",
            "+        Class<?> cls = value.getClass();\n",
            "         \n",
            "-        if (value instanceof Date) {\n",
            "+        if (cls == String.class) {\n",
            "+            str = (String) value;\n",
            "+        } else if (Date.class.isAssignableFrom(cls)) {\n",
            "             provider.defaultSerializeDateKey((Date) value, jgen);\n",
            "             return;\n",
            "+        } else if (cls == Class.class) {\n",
            "+            str = ((Class<?>) value).getName();\n",
            "         } else {\n",
            "             str = value.toString();\n",
            "         }\n"
          ],
          "changed_lines": 7
        }
      ]
    }
  ]
}
