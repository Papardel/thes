{
  "bug_id": "26",
  "failed_tests": {
    "com.fasterxml.jackson.databind.TestJDKSerialization": [
      {
        "methodName": "testEnumHandlers",
        "error": "java.io.NotSerializableException",
        "message": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
        "fail_line": "        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));",
        "test_source": "  public void testEnumHandlers() throws IOException {\n  ObjectMapper mapper = new ObjectMapper();\n  // ensure we have serializers and/or deserializers, first\n  String json = mapper.writerFor(EnumPOJO.class)\n  .writeValueAsString(new EnumPOJO());\n  EnumPOJO result = mapper.readerFor(EnumPOJO.class)\n  .readValue(json);\n  assertNotNull(result);\n\n  // and then use JDK serialization to freeze/thaw objects\n  byte[] bytes = jdkSerialize(mapper);\n  ObjectMapper mapper2 = jdkDeserialize(bytes);\n  assertNotNull(mapper2);\n\n  bytes = jdkSerialize(mapper.readerFor(EnumPOJO.class));\n  ObjectReader r = jdkDeserialize(bytes);\n  assertNotNull(r);\n\n  /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic\n  *  at this point; comment out for now. Try to fix later on.\n  */\n  bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));\n  ObjectWriter w = jdkDeserialize(bytes);\n  assertNotNull(w);\n\n  // plus, ensure objects are usable:\n  String json2 = w.writeValueAsString(new EnumPOJO());\n  assertEquals(json, json2);\n  EnumPOJO result2 = r.readValue(json2);\n  assertNotNull(result2);\n  }",
        "stack": [
          "TestJDKSerialization.jdkSerialize line 179, TestJDKSerialization.testEnumHandlers line 93"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.ser;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.SerializableString;\nimport com.fasterxml.jackson.core.io.SerializedString;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\nimport com.fasterxml.jackson.databind.introspect.*;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\nimport com.fasterxml.jackson.databind.jsonschema.SchemaAware;\nimport com.fasterxml.jackson.databind.jsontype.TypeSerializer;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\nimport com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\nimport com.fasterxml.jackson.databind.util.Annotations;\nimport com.fasterxml.jackson.databind.util.NameTransformer;\n\n\n@JacksonStdImpl \npublic class BeanPropertyWriter extends PropertyWriter implements BeanProperty { public final static Object MARKER_FOR_EMPTY = JsonInclude.Include.NON_EMPTY; protected final static JsonFormat.Value NO_FORMAT = new JsonFormat.Value(); protected final SerializedString _name; protected final PropertyName _wrapperName; protected final JavaType _declaredType; protected final JavaType _cfgSerializationType; protected JavaType _nonTrivialBaseType; protected final transient Annotations _contextAnnotations; protected final PropertyMetadata _metadata; protected transient JsonFormat.Value _format; protected final AnnotatedMember _member; protected transient Method _accessorMethod; protected transient Field _field; protected JsonSerializer<Object> _serializer; protected JsonSerializer<Object> _nullSerializer; protected TypeSerializer _typeSerializer; protected transient PropertySerializerMap _dynamicSerializers; protected final boolean _suppressNulls; protected final Object _suppressableValue; protected final Class<?>[] _includeInViews; protected transient HashMap<Object,Object> _internalSettings; @SuppressWarnings(\"unchecked\") public BeanPropertyWriter(BeanPropertyDefinition propDef, AnnotatedMember member, Annotations contextAnnotations, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType, boolean suppressNulls, Object suppressableValue) {\n        _member = member;\n        _contextAnnotations = contextAnnotations;\n\n        _name = new SerializedString(propDef.getName());\n        _wrapperName = propDef.getWrapperName();\n        _metadata = propDef.getMetadata();\n        _includeInViews = propDef.findViews();\n\n        _declaredType = declaredType;\n        _serializer = (JsonSerializer<Object>) ser;\n        _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyForProperties() : null;\n        _typeSerializer = typeSer;\n        _cfgSerializationType = serType;\n\n        if (member instanceof AnnotatedField) {\n            _accessorMethod = null;\n            _field = (Field) member.getMember();\n        } else if (member instanceof AnnotatedMethod) {\n            _accessorMethod = (Method) member.getMember();\n            _field = null;\n        } else {\n            \n            _accessorMethod = null;\n            _field = null;\n        }\n        _suppressNulls = suppressNulls;\n        _suppressableValue = suppressableValue;\n\n        \n        _nullSerializer = null;\n    }\n\n    \n    protected BeanPropertyWriter() {\n        _member = null;\n        _contextAnnotations = null;\n\n        _name = null;\n        _wrapperName = null;\n        _metadata = null;\n        _includeInViews = null;\n\n        _declaredType = null;\n        _serializer = null;\n        _dynamicSerializers = null;\n        _typeSerializer = null;\n        _cfgSerializationType = null;\n\n        _accessorMethod = null;\n        _field = null;\n        _suppressNulls = false;\n        _suppressableValue = null;\n\n        _nullSerializer = null;\n    }\n\n    \n    protected BeanPropertyWriter(BeanPropertyWriter base) {\n        this(base, base._name);\n    }\n\n    \n    protected BeanPropertyWriter(BeanPropertyWriter base, PropertyName name) {\n        \n        _name = new SerializedString(name.getSimpleName());\n        _wrapperName = base._wrapperName;\n\n        _contextAnnotations = base._contextAnnotations;\n        _declaredType = base._declaredType;\n\n        _member = base._member;\n        _accessorMethod = base._accessorMethod;\n        _field = base._field;\n\n        _serializer = base._serializer;\n        _nullSerializer = base._nullSerializer;\n        \n        if (base._internalSettings != null) {\n            _internalSettings = new HashMap<Object,Object>(base._internalSettings);\n        }\n        _cfgSerializationType = base._cfgSerializationType;\n        _dynamicSerializers = base._dynamicSerializers;\n        _suppressNulls = base._suppressNulls;\n        _suppressableValue = base._suppressableValue;\n        _includeInViews = base._includeInViews;\n        _typeSerializer = base._typeSerializer;\n        _nonTrivialBaseType = base._nonTrivialBaseType;\n        _metadata = base._metadata;\n    }\n\n    protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name) {\n        _name = name;\n        _wrapperName = base._wrapperName;\n\n        _member = base._member;\n        _contextAnnotations = base._contextAnnotations;\n        _declaredType = base._declaredType;\n        _accessorMethod = base._accessorMethod;\n        _field = base._field;\n        _serializer = base._serializer;\n        _nullSerializer = base._nullSerializer;\n        if (base._internalSettings != null) {\n            _internalSettings = new HashMap<Object,Object>(base._internalSettings);\n        }\n        _cfgSerializationType = base._cfgSerializationType;\n        _dynamicSerializers = base._dynamicSerializers;\n        _suppressNulls = base._suppressNulls;\n        _suppressableValue = base._suppressableValue;\n        _includeInViews = base._includeInViews;\n        _typeSerializer = base._typeSerializer;\n        _nonTrivialBaseType = base._nonTrivialBaseType;\n        _metadata = base._metadata;\n    }\n\n    public BeanPropertyWriter rename(NameTransformer transformer) {\n        String newName = transformer.transform(_name.getValue());\n        if (newName.equals(_name.toString())) {\n            return this;\n        }\n        return _new(PropertyName.construct(newName));\n    }\n\n    \n    protected BeanPropertyWriter _new(PropertyName newName) {\n        return new BeanPropertyWriter(this, newName);\n    }\n\n    \n    public void assignTypeSerializer(TypeSerializer typeSer) {\n        _typeSerializer = typeSer;\n    }\n\n    \n    public void assignSerializer(JsonSerializer<Object> ser) {\n        \n        if (_serializer != null && _serializer != ser) {\n            throw new IllegalStateException(\"Can not override serializer\");\n        }\n        _serializer = ser;\n    }\n\n    \n    public void assignNullSerializer(JsonSerializer<Object> nullSer) {\n        \n        if (_nullSerializer != null && _nullSerializer != nullSer) {\n            throw new IllegalStateException(\"Can not override null serializer\");\n        }\n        _nullSerializer = nullSer;\n    }\n\n    \n    public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper) {\n        return new UnwrappingBeanPropertyWriter(this, unwrapper);\n    }\n\n    \n    public void setNonTrivialBaseType(JavaType t) {\n        _nonTrivialBaseType = t;\n    }\n\n    \n\n    \n    Object readResolve() {\n        if (_member instanceof AnnotatedField) {\n            _accessorMethod = null;\n            _field = (Field) _member.getMember();\n        } else if (_member instanceof AnnotatedMethod) {\n            _accessorMethod = (Method) _member.getMember();\n            _field = null;\n        }\n        if (_serializer == null) {\n            _dynamicSerializers = PropertySerializerMap.emptyForProperties();\n        }\n        return this;\n    }\n\n    \n\n    \n    @Override public String getName() { return _name.getValue(); }\n\n    \n    @Override public PropertyName getFullName() { \n        return new PropertyName(_name.getValue());\n    }\n\n    @Override public JavaType getType() { return _declaredType; }\n    @Override public PropertyName getWrapperName() { return _wrapperName; }\n    @Override public boolean isRequired() { return _metadata.isRequired(); }\n    @Override public PropertyMetadata getMetadata() { return _metadata; }\n\n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return (_member == null) ? null : _member.getAnnotation(acls);\n    }\n\n    \n    @Override\n    public <A extends Annotation> A getContextAnnotation(Class<A> acls) {\n        return (_contextAnnotations == null) ? null : _contextAnnotations.get(acls);\n    }\n    \n    @Override\n    public JsonFormat.Value findFormatOverrides(AnnotationIntrospector intr) {\n        JsonFormat.Value f = _format;\n        if (f == null) { \n            f = ((intr == null) || (_member == null)) ? null\n                    : intr.findFormat(_member);\n            _format = (f == null) ? NO_FORMAT : f;\n        }\n        return (f == NO_FORMAT) ? null : f;\n    }\n\n    @Override public AnnotatedMember getMember() { return _member; }\n\n    \n    protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode) {\n        propertiesNode.set(getName(), schemaNode);\n    }\n\n    \n    public boolean isVirtual() { return false; }\n    \n    \n    \n    \n    public Object getInternalSetting(Object key) {\n        return (_internalSettings == null) ? null : _internalSettings.get(key);\n    }\n    \n    \n    public Object setInternalSetting(Object key, Object value) {\n        if (_internalSettings == null) {\n            _internalSettings = new HashMap<Object,Object>();\n        }\n        return _internalSettings.put(key, value);\n    }\n\n    \n    public Object removeInternalSetting(Object key) {\n        Object removed = null;\n        if (_internalSettings != null) {\n            removed = _internalSettings.remove(key);\n            \n            if (_internalSettings.size() == 0) {\n                _internalSettings = null;\n            }\n        }\n        return removed;\n    }\n    \n    \n\n    public SerializableString getSerializedName() { return _name; }\n    \n    public boolean hasSerializer() { return _serializer != null; }\n    public boolean hasNullSerializer() { return _nullSerializer != null; }\n\n    \n    public TypeSerializer getTypeSerializer() { return _typeSerializer; }\n\n    \n    public boolean isUnwrapping() { return false; }\n    \n    public boolean willSuppressNulls() { return _suppressNulls; }\n\n    \n    public boolean wouldConflictWithName(PropertyName name) {\n        if (_wrapperName != null) {\n            return _wrapperName.equals(name);\n        }\n        \n        return name.hasSimpleName(_name.getValue())\n                && !name.hasNamespace();\n    }\n    \n    \n    public JsonSerializer<Object> getSerializer() { return _serializer; }\n\n    public JavaType getSerializationType() { return _cfgSerializationType; }\n\n    public Class<?> getRawSerializationType() {\n        return (_cfgSerializationType == null) ? null : _cfgSerializationType.getRawClass();\n    }\n    \n    public Class<?> getPropertyType() {\n        return (_accessorMethod != null) ? _accessorMethod.getReturnType() : _field.getType();\n    }\n\n    \n    public Type getGenericPropertyType() {\n        if (_accessorMethod != null) {\n            return _accessorMethod.getGenericReturnType();\n        }\n        if (_field != null) {\n            return _field.getGenericType();\n        }\n        return null;\n    }\n\n    public Class<?>[] getViews() { return _includeInViews; }\n\n    \n\n    \n    @Override\n    public void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n        \n        final Object value = (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n\n        \n        if (value == null) {\n            if (_nullSerializer != null) {\n                gen.writeFieldName(_name);\n                _nullSerializer.serialize(null, gen, prov);\n            }\n            return;\n        }\n        \n        JsonSerializer<Object> ser = _serializer;\n        if (ser == null) {\n            Class<?> cls = value.getClass();\n            PropertySerializerMap m = _dynamicSerializers;\n            ser = m.serializerFor(cls);\n            if (ser == null) {\n                ser = _findAndAddDynamic(m, cls, prov);\n            }\n        }\n        \n        if (_suppressableValue != null) {\n            if (MARKER_FOR_EMPTY == _suppressableValue) {\n                if (ser.isEmpty(prov, value)) {\n                    return;\n                }\n            } else if (_suppressableValue.equals(value)) {\n                return;\n            }\n        }\n        \n        if (value == bean) {\n            \n            if (_handleSelfReference(bean, gen, prov, ser)) {\n                return;\n            }\n        }\n        gen.writeFieldName(_name);\n        if (_typeSerializer == null) {\n            ser.serialize(value, gen, prov);\n        } else {\n            ser.serializeWithType(value, gen, prov, _typeSerializer);\n        }\n    }\n\n    \n    @Override\n    public void serializeAsOmittedField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n        if (!gen.canOmitFields()) {\n            gen.writeOmittedField(_name.getValue());\n        }\n    }\n    \n    \n    @Override\n    public void serializeAsElement(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n        \n        final Object value = (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n        if (value == null) { \n            if (_nullSerializer != null) {\n                _nullSerializer.serialize(null, gen, prov);\n            } else { \n                gen.writeNull();\n            }\n            return;\n        }\n        \n        JsonSerializer<Object> ser = _serializer;\n        if (ser == null) {\n            Class<?> cls = value.getClass();\n            PropertySerializerMap map = _dynamicSerializers;\n            ser = map.serializerFor(cls);\n            if (ser == null) {\n                ser = _findAndAddDynamic(map, cls, prov);\n            }\n        }\n        \n        if (_suppressableValue != null) {\n            if (MARKER_FOR_EMPTY == _suppressableValue) {\n                if (ser.isEmpty(prov, value)) { \n                    serializeAsPlaceholder(bean, gen, prov);\n                    return;\n                }\n            } else if (_suppressableValue.equals(value)) { \n                serializeAsPlaceholder(bean, gen, prov);\n                return;\n            }\n        }\n        \n        if (value == bean) {\n            if (_handleSelfReference(bean, gen, prov, ser)) {\n                return;\n            }\n        }\n        if (_typeSerializer == null) {\n            ser.serialize(value, gen, prov);\n        } else {\n            ser.serializeWithType(value, gen, prov, _typeSerializer);\n        }\n    }\n\n    \n    @Override\n    public void serializeAsPlaceholder(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n        if (_nullSerializer != null) {\n            _nullSerializer.serialize(null, gen, prov);\n        } else {\n            gen.writeNull();\n        }\n    }\n    \n    \n\n    \n    @Override\n    public void depositSchemaProperty(JsonObjectFormatVisitor v) throws JsonMappingException {\n        if (v != null) {\n            if (isRequired()) {\n                v.property(this); \n            } else {\n                v.optionalProperty(this);\n            }\n        }\n    }\n\n    \n\n    \n    @Override\n    @Deprecated\n    public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider provider) throws JsonMappingException {\n        JavaType propType = getSerializationType();\n        \n        Type hint = (propType == null) ? getGenericPropertyType() : propType.getRawClass();\n        JsonNode schemaNode;\n        \n        JsonSerializer<Object> ser = getSerializer();\n        if (ser == null) { \n            ser = provider.findValueSerializer(getType(), this);\n        }\n        boolean isOptional = !isRequired();\n        if (ser instanceof SchemaAware) {\n            schemaNode =  ((SchemaAware) ser).getSchema(provider, hint, isOptional) ;\n        } else {  \n            schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); \n        }\n        _depositSchemaProperty(propertiesNode, schemaNode);\n    }\n    \n    \n    \n    protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException {\n        PropertySerializerMap.SerializerAndMapResult result;\n        if (_nonTrivialBaseType != null) {\n            JavaType t = provider.constructSpecializedType(_nonTrivialBaseType, type);\n            result = map.findAndAddPrimarySerializer(t, provider, this);\n        } else {\n            result = map.findAndAddPrimarySerializer(type, provider, this);\n        }\n        \n        if (map != result.map) {\n            _dynamicSerializers = result.map;\n        }\n        return result.serializer;\n    }\n    \n    \n    public final Object get(Object bean) throws Exception {\n        return (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n    }\n\n    \n    protected boolean _handleSelfReference(Object bean, JsonGenerator gen, SerializerProvider prov, JsonSerializer<?> ser) throws JsonMappingException {\n        if (prov.isEnabled(SerializationFeature.FAIL_ON_SELF_REFERENCES)\n                && !ser.usesObjectId()) {\n            \n            \n            \n            \n            if (ser instanceof BeanSerializerBase) {\n                throw new JsonMappingException(\"Direct self-reference leading to cycle\");\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder(40);\n        sb.append(\"property '\").append(getName()).append(\"' (\");\n        if (_accessorMethod != null) {\n            sb.append(\"via method \").append(_accessorMethod.getDeclaringClass().getName()).append(\"#\").append(_accessorMethod.getName());\n        } else if (_field != null) {\n            sb.append(\"field \\\"\").append(_field.getDeclaringClass().getName()).append(\"#\").append(_field.getName());\n        } else {\n            sb.append(\"virtual\");\n        }\n        if (_serializer == null) {\n            sb.append(\", no static serializer\");\n        } else {\n            sb.append(\", static serializer of type \"+_serializer.getClass().getName());\n        }\n        sb.append(')');\n        return sb.toString();\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.ser;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.SerializableString;\nimport com.fasterxml.jackson.core.io.SerializedString;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\nimport com.fasterxml.jackson.databind.introspect.*;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\nimport com.fasterxml.jackson.databind.jsonschema.SchemaAware;\nimport com.fasterxml.jackson.databind.jsontype.TypeSerializer;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\nimport com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;\nimport com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\nimport com.fasterxml.jackson.databind.util.Annotations;\nimport com.fasterxml.jackson.databind.util.NameTransformer;\n\n\n@JacksonStdImpl \npublic class BeanPropertyWriter extends PropertyWriter implements BeanProperty, java.io.Serializable { private static final long serialVersionUID = 4603296144163950020L; public final static Object MARKER_FOR_EMPTY = JsonInclude.Include.NON_EMPTY; protected final static JsonFormat.Value NO_FORMAT = new JsonFormat.Value(); protected final SerializedString _name; protected final PropertyName _wrapperName; protected final JavaType _declaredType; protected final JavaType _cfgSerializationType; protected JavaType _nonTrivialBaseType; protected final transient Annotations _contextAnnotations; protected final PropertyMetadata _metadata; protected transient JsonFormat.Value _format; protected final AnnotatedMember _member; protected transient Method _accessorMethod; protected transient Field _field; protected JsonSerializer<Object> _serializer; protected JsonSerializer<Object> _nullSerializer; protected TypeSerializer _typeSerializer; protected transient PropertySerializerMap _dynamicSerializers; protected final boolean _suppressNulls; protected final Object _suppressableValue; protected final Class<?>[] _includeInViews; protected transient HashMap<Object,Object> _internalSettings; @SuppressWarnings(\"unchecked\") public BeanPropertyWriter(BeanPropertyDefinition propDef, AnnotatedMember member, Annotations contextAnnotations, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType, boolean suppressNulls, Object suppressableValue) {\n        _member = member;\n        _contextAnnotations = contextAnnotations;\n\n        _name = new SerializedString(propDef.getName());\n        _wrapperName = propDef.getWrapperName();\n        _metadata = propDef.getMetadata();\n        _includeInViews = propDef.findViews();\n\n        _declaredType = declaredType;\n        _serializer = (JsonSerializer<Object>) ser;\n        _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyForProperties() : null;\n        _typeSerializer = typeSer;\n        _cfgSerializationType = serType;\n\n        if (member instanceof AnnotatedField) {\n            _accessorMethod = null;\n            _field = (Field) member.getMember();\n        } else if (member instanceof AnnotatedMethod) {\n            _accessorMethod = (Method) member.getMember();\n            _field = null;\n        } else {\n            \n            _accessorMethod = null;\n            _field = null;\n        }\n        _suppressNulls = suppressNulls;\n        _suppressableValue = suppressableValue;\n\n        \n        _nullSerializer = null;\n    }\n\n    \n    protected BeanPropertyWriter() {\n        _member = null;\n        _contextAnnotations = null;\n\n        _name = null;\n        _wrapperName = null;\n        _metadata = null;\n        _includeInViews = null;\n\n        _declaredType = null;\n        _serializer = null;\n        _dynamicSerializers = null;\n        _typeSerializer = null;\n        _cfgSerializationType = null;\n\n        _accessorMethod = null;\n        _field = null;\n        _suppressNulls = false;\n        _suppressableValue = null;\n\n        _nullSerializer = null;\n    }\n\n    \n    protected BeanPropertyWriter(BeanPropertyWriter base) {\n        this(base, base._name);\n    }\n\n    \n    protected BeanPropertyWriter(BeanPropertyWriter base, PropertyName name) {\n        \n        _name = new SerializedString(name.getSimpleName());\n        _wrapperName = base._wrapperName;\n\n        _contextAnnotations = base._contextAnnotations;\n        _declaredType = base._declaredType;\n\n        _member = base._member;\n        _accessorMethod = base._accessorMethod;\n        _field = base._field;\n\n        _serializer = base._serializer;\n        _nullSerializer = base._nullSerializer;\n        \n        if (base._internalSettings != null) {\n            _internalSettings = new HashMap<Object,Object>(base._internalSettings);\n        }\n        _cfgSerializationType = base._cfgSerializationType;\n        _dynamicSerializers = base._dynamicSerializers;\n        _suppressNulls = base._suppressNulls;\n        _suppressableValue = base._suppressableValue;\n        _includeInViews = base._includeInViews;\n        _typeSerializer = base._typeSerializer;\n        _nonTrivialBaseType = base._nonTrivialBaseType;\n        _metadata = base._metadata;\n    }\n\n    protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name) {\n        _name = name;\n        _wrapperName = base._wrapperName;\n\n        _member = base._member;\n        _contextAnnotations = base._contextAnnotations;\n        _declaredType = base._declaredType;\n        _accessorMethod = base._accessorMethod;\n        _field = base._field;\n        _serializer = base._serializer;\n        _nullSerializer = base._nullSerializer;\n        if (base._internalSettings != null) {\n            _internalSettings = new HashMap<Object,Object>(base._internalSettings);\n        }\n        _cfgSerializationType = base._cfgSerializationType;\n        _dynamicSerializers = base._dynamicSerializers;\n        _suppressNulls = base._suppressNulls;\n        _suppressableValue = base._suppressableValue;\n        _includeInViews = base._includeInViews;\n        _typeSerializer = base._typeSerializer;\n        _nonTrivialBaseType = base._nonTrivialBaseType;\n        _metadata = base._metadata;\n    }\n\n    public BeanPropertyWriter rename(NameTransformer transformer) {\n        String newName = transformer.transform(_name.getValue());\n        if (newName.equals(_name.toString())) {\n            return this;\n        }\n        return _new(PropertyName.construct(newName));\n    }\n\n    \n    protected BeanPropertyWriter _new(PropertyName newName) {\n        return new BeanPropertyWriter(this, newName);\n    }\n\n    \n    public void assignTypeSerializer(TypeSerializer typeSer) {\n        _typeSerializer = typeSer;\n    }\n\n    \n    public void assignSerializer(JsonSerializer<Object> ser) {\n        \n        if (_serializer != null && _serializer != ser) {\n            throw new IllegalStateException(\"Can not override serializer\");\n        }\n        _serializer = ser;\n    }\n\n    \n    public void assignNullSerializer(JsonSerializer<Object> nullSer) {\n        \n        if (_nullSerializer != null && _nullSerializer != nullSer) {\n            throw new IllegalStateException(\"Can not override null serializer\");\n        }\n        _nullSerializer = nullSer;\n    }\n\n    \n    public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper) {\n        return new UnwrappingBeanPropertyWriter(this, unwrapper);\n    }\n\n    \n    public void setNonTrivialBaseType(JavaType t) {\n        _nonTrivialBaseType = t;\n    }\n\n    \n\n    \n    Object readResolve() {\n        if (_member instanceof AnnotatedField) {\n            _accessorMethod = null;\n            _field = (Field) _member.getMember();\n        } else if (_member instanceof AnnotatedMethod) {\n            _accessorMethod = (Method) _member.getMember();\n            _field = null;\n        }\n        if (_serializer == null) {\n            _dynamicSerializers = PropertySerializerMap.emptyForProperties();\n        }\n        return this;\n    }\n\n    \n\n    \n    @Override public String getName() { return _name.getValue(); }\n\n    \n    @Override public PropertyName getFullName() { \n        return new PropertyName(_name.getValue());\n    }\n\n    @Override public JavaType getType() { return _declaredType; }\n    @Override public PropertyName getWrapperName() { return _wrapperName; }\n    @Override public boolean isRequired() { return _metadata.isRequired(); }\n    @Override public PropertyMetadata getMetadata() { return _metadata; }\n\n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return (_member == null) ? null : _member.getAnnotation(acls);\n    }\n\n    \n    @Override\n    public <A extends Annotation> A getContextAnnotation(Class<A> acls) {\n        return (_contextAnnotations == null) ? null : _contextAnnotations.get(acls);\n    }\n    \n    @Override\n    public JsonFormat.Value findFormatOverrides(AnnotationIntrospector intr) {\n        JsonFormat.Value f = _format;\n        if (f == null) { \n            f = ((intr == null) || (_member == null)) ? null\n                    : intr.findFormat(_member);\n            _format = (f == null) ? NO_FORMAT : f;\n        }\n        return (f == NO_FORMAT) ? null : f;\n    }\n\n    @Override public AnnotatedMember getMember() { return _member; }\n\n    \n    protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode) {\n        propertiesNode.set(getName(), schemaNode);\n    }\n\n    \n    public boolean isVirtual() { return false; }\n    \n    \n    \n    \n    public Object getInternalSetting(Object key) {\n        return (_internalSettings == null) ? null : _internalSettings.get(key);\n    }\n    \n    \n    public Object setInternalSetting(Object key, Object value) {\n        if (_internalSettings == null) {\n            _internalSettings = new HashMap<Object,Object>();\n        }\n        return _internalSettings.put(key, value);\n    }\n\n    \n    public Object removeInternalSetting(Object key) {\n        Object removed = null;\n        if (_internalSettings != null) {\n            removed = _internalSettings.remove(key);\n            \n            if (_internalSettings.size() == 0) {\n                _internalSettings = null;\n            }\n        }\n        return removed;\n    }\n    \n    \n\n    public SerializableString getSerializedName() { return _name; }\n    \n    public boolean hasSerializer() { return _serializer != null; }\n    public boolean hasNullSerializer() { return _nullSerializer != null; }\n\n    \n    public TypeSerializer getTypeSerializer() { return _typeSerializer; }\n\n    \n    public boolean isUnwrapping() { return false; }\n    \n    public boolean willSuppressNulls() { return _suppressNulls; }\n\n    \n    public boolean wouldConflictWithName(PropertyName name) {\n        if (_wrapperName != null) {\n            return _wrapperName.equals(name);\n        }\n        \n        return name.hasSimpleName(_name.getValue())\n                && !name.hasNamespace();\n    }\n    \n    \n    public JsonSerializer<Object> getSerializer() { return _serializer; }\n\n    public JavaType getSerializationType() { return _cfgSerializationType; }\n\n    public Class<?> getRawSerializationType() {\n        return (_cfgSerializationType == null) ? null : _cfgSerializationType.getRawClass();\n    }\n    \n    public Class<?> getPropertyType() {\n        return (_accessorMethod != null) ? _accessorMethod.getReturnType() : _field.getType();\n    }\n\n    \n    public Type getGenericPropertyType() {\n        if (_accessorMethod != null) {\n            return _accessorMethod.getGenericReturnType();\n        }\n        if (_field != null) {\n            return _field.getGenericType();\n        }\n        return null;\n    }\n\n    public Class<?>[] getViews() { return _includeInViews; }\n\n    \n\n    \n    @Override\n    public void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n        \n        final Object value = (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n\n        \n        if (value == null) {\n            if (_nullSerializer != null) {\n                gen.writeFieldName(_name);\n                _nullSerializer.serialize(null, gen, prov);\n            }\n            return;\n        }\n        \n        JsonSerializer<Object> ser = _serializer;\n        if (ser == null) {\n            Class<?> cls = value.getClass();\n            PropertySerializerMap m = _dynamicSerializers;\n            ser = m.serializerFor(cls);\n            if (ser == null) {\n                ser = _findAndAddDynamic(m, cls, prov);\n            }\n        }\n        \n        if (_suppressableValue != null) {\n            if (MARKER_FOR_EMPTY == _suppressableValue) {\n                if (ser.isEmpty(prov, value)) {\n                    return;\n                }\n            } else if (_suppressableValue.equals(value)) {\n                return;\n            }\n        }\n        \n        if (value == bean) {\n            \n            if (_handleSelfReference(bean, gen, prov, ser)) {\n                return;\n            }\n        }\n        gen.writeFieldName(_name);\n        if (_typeSerializer == null) {\n            ser.serialize(value, gen, prov);\n        } else {\n            ser.serializeWithType(value, gen, prov, _typeSerializer);\n        }\n    }\n\n    \n    @Override\n    public void serializeAsOmittedField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n        if (!gen.canOmitFields()) {\n            gen.writeOmittedField(_name.getValue());\n        }\n    }\n    \n    \n    @Override\n    public void serializeAsElement(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n        \n        final Object value = (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n        if (value == null) { \n            if (_nullSerializer != null) {\n                _nullSerializer.serialize(null, gen, prov);\n            } else { \n                gen.writeNull();\n            }\n            return;\n        }\n        \n        JsonSerializer<Object> ser = _serializer;\n        if (ser == null) {\n            Class<?> cls = value.getClass();\n            PropertySerializerMap map = _dynamicSerializers;\n            ser = map.serializerFor(cls);\n            if (ser == null) {\n                ser = _findAndAddDynamic(map, cls, prov);\n            }\n        }\n        \n        if (_suppressableValue != null) {\n            if (MARKER_FOR_EMPTY == _suppressableValue) {\n                if (ser.isEmpty(prov, value)) { \n                    serializeAsPlaceholder(bean, gen, prov);\n                    return;\n                }\n            } else if (_suppressableValue.equals(value)) { \n                serializeAsPlaceholder(bean, gen, prov);\n                return;\n            }\n        }\n        \n        if (value == bean) {\n            if (_handleSelfReference(bean, gen, prov, ser)) {\n                return;\n            }\n        }\n        if (_typeSerializer == null) {\n            ser.serialize(value, gen, prov);\n        } else {\n            ser.serializeWithType(value, gen, prov, _typeSerializer);\n        }\n    }\n\n    \n    @Override\n    public void serializeAsPlaceholder(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n        if (_nullSerializer != null) {\n            _nullSerializer.serialize(null, gen, prov);\n        } else {\n            gen.writeNull();\n        }\n    }\n    \n    \n\n    \n    @Override\n    public void depositSchemaProperty(JsonObjectFormatVisitor v) throws JsonMappingException {\n        if (v != null) {\n            if (isRequired()) {\n                v.property(this); \n            } else {\n                v.optionalProperty(this);\n            }\n        }\n    }\n\n    \n\n    \n    @Override\n    @Deprecated\n    public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider provider) throws JsonMappingException {\n        JavaType propType = getSerializationType();\n        \n        Type hint = (propType == null) ? getGenericPropertyType() : propType.getRawClass();\n        JsonNode schemaNode;\n        \n        JsonSerializer<Object> ser = getSerializer();\n        if (ser == null) { \n            ser = provider.findValueSerializer(getType(), this);\n        }\n        boolean isOptional = !isRequired();\n        if (ser instanceof SchemaAware) {\n            schemaNode =  ((SchemaAware) ser).getSchema(provider, hint, isOptional) ;\n        } else {  \n            schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); \n        }\n        _depositSchemaProperty(propertiesNode, schemaNode);\n    }\n    \n    \n    \n    protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException {\n        PropertySerializerMap.SerializerAndMapResult result;\n        if (_nonTrivialBaseType != null) {\n            JavaType t = provider.constructSpecializedType(_nonTrivialBaseType, type);\n            result = map.findAndAddPrimarySerializer(t, provider, this);\n        } else {\n            result = map.findAndAddPrimarySerializer(type, provider, this);\n        }\n        \n        if (map != result.map) {\n            _dynamicSerializers = result.map;\n        }\n        return result.serializer;\n    }\n    \n    \n    public final Object get(Object bean) throws Exception {\n        return (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n    }\n\n    \n    protected boolean _handleSelfReference(Object bean, JsonGenerator gen, SerializerProvider prov, JsonSerializer<?> ser) throws JsonMappingException {\n        if (prov.isEnabled(SerializationFeature.FAIL_ON_SELF_REFERENCES)\n                && !ser.usesObjectId()) {\n            \n            \n            \n            \n            if (ser instanceof BeanSerializerBase) {\n                throw new JsonMappingException(\"Direct self-reference leading to cycle\");\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder(40);\n        sb.append(\"property '\").append(getName()).append(\"' (\");\n        if (_accessorMethod != null) {\n            sb.append(\"via method \").append(_accessorMethod.getDeclaringClass().getName()).append(\"#\").append(_accessorMethod.getName());\n        } else if (_field != null) {\n            sb.append(\"field \\\"\").append(_field.getDeclaringClass().getName()).append(\"#\").append(_field.getName());\n        } else {\n            sb.append(\"virtual\");\n        }\n        if (_serializer == null) {\n            sb.append(\", no static serializer\");\n        } else {\n            sb.append(\", static serializer of type \"+_serializer.getClass().getName());\n        }\n        sb.append(')');\n        return sb.toString();\n    }\n}\n",
      "buggy_signatures": [
        "protected BeanPropertyWriter()",
        "protected BeanPropertyWriter(BeanPropertyWriter base)",
        "protected BeanPropertyWriter(BeanPropertyWriter base, PropertyName name)",
        "protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name)",
        "public BeanPropertyWriter rename(NameTransformer transformer)",
        "protected BeanPropertyWriter _new(PropertyName newName)",
        "public void assignTypeSerializer(TypeSerializer typeSer)",
        "public void assignSerializer(JsonSerializer<Object> ser)",
        "public void assignNullSerializer(JsonSerializer<Object> nullSer)",
        "public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper)",
        "public void setNonTrivialBaseType(JavaType t)",
        "public String getName()",
        "public PropertyName getFullName()",
        "public JavaType getType()",
        "public PropertyName getWrapperName()",
        "public boolean isRequired()",
        "public PropertyMetadata getMetadata()",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public <A extends Annotation> A getContextAnnotation(Class<A> acls)",
        "public JsonFormat.Value findFormatOverrides(AnnotationIntrospector intr)",
        "public AnnotatedMember getMember()",
        "protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode)",
        "public boolean isVirtual()",
        "public Object getInternalSetting(Object key)",
        "public Object setInternalSetting(Object key, Object value)",
        "public Object removeInternalSetting(Object key)",
        "public SerializableString getSerializedName()",
        "public boolean hasSerializer()",
        "public boolean hasNullSerializer()",
        "public TypeSerializer getTypeSerializer()",
        "public boolean isUnwrapping()",
        "public boolean willSuppressNulls()",
        "public boolean wouldConflictWithName(PropertyName name)",
        "public JsonSerializer<Object> getSerializer()",
        "public JavaType getSerializationType()",
        "public Class<?> getRawSerializationType()",
        "public Class<?> getPropertyType()",
        "public Type getGenericPropertyType()",
        "public Class<?>[] getViews()",
        "public void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception",
        "public void serializeAsOmittedField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception",
        "public void serializeAsElement(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception",
        "public void serializeAsPlaceholder(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception",
        "public void depositSchemaProperty(JsonObjectFormatVisitor v) throws JsonMappingException",
        "public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider provider) throws JsonMappingException",
        "protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException",
        "public final Object get(Object bean) throws Exception",
        "protected boolean _handleSelfReference(Object bean, JsonGenerator gen, SerializerProvider prov, JsonSerializer<?> ser) throws JsonMappingException",
        "public String toString()"
      ],
      "fixed_signatures": [
        "protected BeanPropertyWriter()",
        "protected BeanPropertyWriter(BeanPropertyWriter base)",
        "protected BeanPropertyWriter(BeanPropertyWriter base, PropertyName name)",
        "protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name)",
        "public BeanPropertyWriter rename(NameTransformer transformer)",
        "protected BeanPropertyWriter _new(PropertyName newName)",
        "public void assignTypeSerializer(TypeSerializer typeSer)",
        "public void assignSerializer(JsonSerializer<Object> ser)",
        "public void assignNullSerializer(JsonSerializer<Object> nullSer)",
        "public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper)",
        "public void setNonTrivialBaseType(JavaType t)",
        "public String getName()",
        "public PropertyName getFullName()",
        "public JavaType getType()",
        "public PropertyName getWrapperName()",
        "public boolean isRequired()",
        "public PropertyMetadata getMetadata()",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public <A extends Annotation> A getContextAnnotation(Class<A> acls)",
        "public JsonFormat.Value findFormatOverrides(AnnotationIntrospector intr)",
        "public AnnotatedMember getMember()",
        "protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode)",
        "public boolean isVirtual()",
        "public Object getInternalSetting(Object key)",
        "public Object setInternalSetting(Object key, Object value)",
        "public Object removeInternalSetting(Object key)",
        "public SerializableString getSerializedName()",
        "public boolean hasSerializer()",
        "public boolean hasNullSerializer()",
        "public TypeSerializer getTypeSerializer()",
        "public boolean isUnwrapping()",
        "public boolean willSuppressNulls()",
        "public boolean wouldConflictWithName(PropertyName name)",
        "public JsonSerializer<Object> getSerializer()",
        "public JavaType getSerializationType()",
        "public Class<?> getRawSerializationType()",
        "public Class<?> getPropertyType()",
        "public Type getGenericPropertyType()",
        "public Class<?>[] getViews()",
        "public void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception",
        "public void serializeAsOmittedField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception",
        "public void serializeAsElement(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception",
        "public void serializeAsPlaceholder(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception",
        "public void depositSchemaProperty(JsonObjectFormatVisitor v) throws JsonMappingException",
        "public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider provider) throws JsonMappingException",
        "protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException",
        "public final Object get(Object bean) throws Exception",
        "protected boolean _handleSelfReference(Object bean, JsonGenerator gen, SerializerProvider prov, JsonSerializer<?> ser) throws JsonMappingException",
        "public String toString()"
      ],
      "methods": [
        {
          "buggy_method": "",
          "fixed_method": "",
          "diff": [
            "@@ -36,9 +36,11 @@",
            "  */\n",
            " @JacksonStdImpl // since 2.6. NOTE: sub-classes typically are not\n",
            " public class BeanPropertyWriter extends PropertyWriter\n",
            "-    implements BeanProperty\n",
            "+    implements BeanProperty,\n",
            "+        java.io.Serializable // since 2.6.2\n",
            " {\n",
            "     // as of 2.6.2\n",
            "+    private static final long serialVersionUID = 4603296144163950020L;\n",
            " \n",
            "     /**\n",
            "      * Marker object used to indicate \"do not serialize if empty\"\n"
          ],
          "changed_lines": 4
        }
      ]
    }
  ]
}
