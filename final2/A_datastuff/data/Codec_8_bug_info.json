{
  "bug_id": "8",
  "failed_tests": {
    "org.apache.commons.codec.binary.Base64InputStreamTest": [
      {
        "methodName": "testCodec105",
        "error": "java.lang.ArrayIndexOutOfBoundsException",
        "message": "Index 2 out of bounds for length 2",
        "fail_line": "            in.read();",
        "test_source": "  public void testCodec105() throws IOException {\n  Base64InputStream in = new Base64InputStream(new Codec105ErrorInputStream(), true, 0, null);\n  for (int i = 0; i < 5; i++) {\n  in.read();\n  }\n  }",
        "stack": [
          "Base64.encode line 497, Base64InputStream.read line 173, Base64InputStream.read line 109, Base64InputStreamTest.testCodec105 line 58"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/codec/binary/Base64.java",
      "buggy_full_code": "\n\npackage org.apache.commons.codec.binary;\n\nimport java.math.BigInteger;\n\nimport org.apache.commons.codec.BinaryDecoder;\nimport org.apache.commons.codec.BinaryEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.EncoderException;\n\n\npublic class Base64 implements BinaryEncoder, BinaryDecoder { private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2; private static final int DEFAULT_BUFFER_SIZE = 8192; public static final int MIME_CHUNK_SIZE = 76; public static final int PEM_CHUNK_SIZE = 64; static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'}; private static final byte[] STANDARD_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }; private static final byte[] URL_SAFE_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' }; private static final byte PAD = '='; private static final byte[] DECODE_TABLE = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 }; private static final int MASK_6BITS = 0x3f; private static final int MASK_8BITS = 0xff; private final byte[] encodeTable; private final int lineLength; private final byte[] lineSeparator; private final int decodeSize; private final int encodeSize; private byte[] buffer; private int pos; private int readPos; private int currentLinePos; private int modulus; private boolean eof; private int x; public Base64() {\n        this(0);\n    }\n\n    \n    public Base64(boolean urlSafe) {\n        this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);\n    }\n\n    \n    public Base64(int lineLength) {\n        this(lineLength, CHUNK_SEPARATOR);\n    }\n\n    \n    public Base64(int lineLength, byte[] lineSeparator) {\n        this(lineLength, lineSeparator, false);\n    }\n\n    \n    public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\n        if (lineSeparator == null) {\n            lineLength = 0;  \n            lineSeparator = CHUNK_SEPARATOR;  \n        }\n        this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;\n        this.lineSeparator = new byte[lineSeparator.length];\n        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);\n        if (lineLength > 0) {\n            this.encodeSize = 4 + lineSeparator.length;\n        } else {\n            this.encodeSize = 4;\n        }\n        this.decodeSize = this.encodeSize - 1;\n        if (containsBase64Byte(lineSeparator)) {\n            String sep = StringUtils.newStringUtf8(lineSeparator);\n            throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [\" + sep + \"]\");\n        }\n        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;\n    }\n\n    \n    public boolean isUrlSafe() {\n        return this.encodeTable == URL_SAFE_ENCODE_TABLE;\n    }\n\n    \n    boolean hasData() {\n        return this.buffer != null;\n    }\n\n    \n    int avail() {\n        return buffer != null ? pos - readPos : 0;\n    }\n\n    \n    private void resizeBuffer() {\n        if (buffer == null) {\n            buffer = new byte[DEFAULT_BUFFER_SIZE];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];\n            System.arraycopy(buffer, 0, b, 0, buffer.length);\n            buffer = b;\n        }\n    }\n\n    \n    int readResults(byte[] b, int bPos, int bAvail) {\n        if (buffer != null) {\n            int len = Math.min(avail(), bAvail);\n            System.arraycopy(buffer, readPos, b, bPos, len);\n            readPos += len;\n            if (readPos >= pos) {\n                buffer = null;\n            }\n            return len;\n        }\n        return eof ? -1 : 0;\n    }\n\n    void setInitialBuffer(byte[] out, int outPos, int outAvail) {\n        if (out != null && out.length == outAvail) {\n            buffer = out;\n            pos = outPos;\n            readPos = outPos;\n        }\n    }\n    \n    void encode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        \n        \n        if (inAvail < 0) {\n            eof = true;\n            if (buffer == null || buffer.length - pos < encodeSize) {\n                resizeBuffer();\n            }\n            switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    \n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    \n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n            }\n            \n            \n            byte b = lineSeparator[lineSeparator.length - 1];\n            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {\n                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);\n                pos += lineSeparator.length;\n            }\n        } else {\n            for (int i = 0; i < inAvail; i++) {\n                if (buffer == null || buffer.length - pos < encodeSize) {\n                    resizeBuffer();\n                }\n                modulus = (++modulus) % 3;\n                int b = in[inPos++];\n                if (b < 0) {\n                    b += 256;\n                }\n                x = (x << 8) + b;\n                if (0 == modulus) {\n                    buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[x & MASK_6BITS];\n                    currentLinePos += 4;\n                    if (lineLength > 0 && lineLength <= currentLinePos) {\n                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);\n                        pos += lineSeparator.length;\n                        currentLinePos = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    \n    void decode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        if (inAvail < 0) {\n            eof = true;\n        }\n        for (int i = 0; i < inAvail; i++) {\n            if (buffer == null || buffer.length - pos < decodeSize) {\n                resizeBuffer();\n            }\n            byte b = in[inPos++];\n            if (b == PAD) {\n                \n                eof = true;\n                break;\n            } else {\n                if (b >= 0 && b < DECODE_TABLE.length) {\n                    int result = DECODE_TABLE[b];\n                    if (result >= 0) {\n                        modulus = (++modulus) % 4;\n                        x = (x << 6) + result;\n                        if (modulus == 0) {\n                            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                            buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                            buffer[pos++] = (byte) (x & MASK_8BITS);\n                        }\n                    }\n                }\n            }\n        }\n\n        \n        \n        \n        if (eof && modulus != 0) {\n            if (buffer == null || buffer.length - pos < decodeSize) {\n                resizeBuffer();\n            }\n            \n            x = x << 6;\n            switch (modulus) {\n                case 2 :\n                    x = x << 6;\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3 :\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }\n        }\n    }\n\n    \n    public static boolean isBase64(byte octet) {\n        return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);\n    }\n\n    \n    public static boolean isArrayByteBase64(byte[] arrayOctet) {\n        for (int i = 0; i < arrayOctet.length; i++) {\n            if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n    private static boolean containsBase64Byte(byte[] arrayOctet) {\n        for (int i = 0; i < arrayOctet.length; i++) {\n            if (isBase64(arrayOctet[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n    public static byte[] encodeBase64(byte[] binaryData) {\n        return encodeBase64(binaryData, false);\n    }\n\n        \n    public static String encodeBase64String(byte[] binaryData) {\n        return StringUtils.newStringUtf8(encodeBase64(binaryData, false));\n    }\n    \n    \n    public static byte[] encodeBase64URLSafe(byte[] binaryData) {\n        return encodeBase64(binaryData, false, true);\n    }\n\n        \n    public static String encodeBase64URLSafeString(byte[] binaryData) {\n        return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));\n    }    \n\n    \n    public static byte[] encodeBase64Chunked(byte[] binaryData) {\n        return encodeBase64(binaryData, true);\n    }\n\n    \n    public Object decode(Object pObject) throws DecoderException {        \n        if (pObject instanceof byte[]) {\n            return decode((byte[]) pObject);\n        } else if (pObject instanceof String) {\n            return decode((String) pObject);\n        } else {\n            throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");\n        }\n    }\n\n    \n    public byte[] decode(String pArray) {\n        return decode(StringUtils.getBytesUtf8(pArray));\n    }\n\n    \n    public byte[] decode(byte[] pArray) {\n        reset();\n        if (pArray == null || pArray.length == 0) {\n            return pArray;\n        }\n        decode(pArray, 0, pArray.length);\n        decode(pArray, 0, -1); \n        byte[] result = new byte[pos];\n        readResults(result, 0, result.length);\n        return result;\n    }\n\n    \n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) {\n        return encodeBase64(binaryData, isChunked, false);\n    }\n\n    \n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) {\n        return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);\n    }\n\n    \n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n        if (binaryData == null || binaryData.length == 0) {\n            return binaryData;\n        }\n\n        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n        if (len > maxResultSize) {\n            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n        }\n                \n        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n        return b64.encode(binaryData);\n    }\n\n    \n    public static byte[] decodeBase64(String base64String) {\n        return new Base64().decode(base64String);\n    }\n\n    \n    public static byte[] decodeBase64(byte[] base64Data) {\n        return new Base64().decode(base64Data);\n    }\n\n    \n    static byte[] discardWhitespace(byte[] data) {\n        byte groomedData[] = new byte[data.length];\n        int bytesCopied = 0;\n        for (int i = 0; i < data.length; i++) {\n            switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }\n        }\n        byte packedData[] = new byte[bytesCopied];\n        System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);\n        return packedData;\n    }\n\n    \n    private static boolean isWhiteSpace(byte byteToCheck) {\n        switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }\n    }\n\n    \n\n    \n    public Object encode(Object pObject) throws EncoderException {\n        if (!(pObject instanceof byte[])) {\n            throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");\n        }\n        return encode((byte[]) pObject);\n    }\n\n        \n    public String encodeToString(byte[] pArray) {\n        return StringUtils.newStringUtf8(encode(pArray));\n    }\n\n    \n    public byte[] encode(byte[] pArray) {\n        reset();        \n        if (pArray == null || pArray.length == 0) {\n            return pArray;\n        }\n        encode(pArray, 0, pArray.length);\n        encode(pArray, 0, -1); \n        byte[] buf = new byte[pos - readPos];\n        readResults(buf, 0, buf.length);\n        return buf;\n    }\n\n    \n    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {\n        \n        chunkSize = (chunkSize / 4) * 4;\n\n        long len = (pArray.length * 4) / 3;\n        long mod = len % 4;\n        if (mod != 0) {\n            len += 4 - mod;\n        }\n        if (chunkSize > 0) {\n            boolean lenChunksPerfectly = len % chunkSize == 0;\n            len += (len / chunkSize) * chunkSeparator.length;\n            if (!lenChunksPerfectly) {\n                len += chunkSeparator.length;\n            }\n        }\n        return len;\n    }\n\n    \n    \n    public static BigInteger decodeInteger(byte[] pArray) {\n        return new BigInteger(1, decodeBase64(pArray));\n    }\n\n    \n    public static byte[] encodeInteger(BigInteger bigInt) {\n        if (bigInt == null) {\n            throw new NullPointerException(\"encodeInteger called with null parameter\");\n        }\n        return encodeBase64(toIntegerBytes(bigInt), false);\n    }\n\n    \n    static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        \n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n        \n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        \n        if ((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n        int startDst = bitlen / 8 - len; \n        byte[] resizedBytes = new byte[bitlen / 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n        return resizedBytes;\n    }\n\n    \n    private void reset() {\n        buffer = null;\n        pos = 0;\n        readPos = 0;\n        currentLinePos = 0;\n        modulus = 0;\n        eof = false;\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.codec.binary;\n\nimport java.math.BigInteger;\n\nimport org.apache.commons.codec.BinaryDecoder;\nimport org.apache.commons.codec.BinaryEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.EncoderException;\n\n\npublic class Base64 implements BinaryEncoder, BinaryDecoder { private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2; private static final int DEFAULT_BUFFER_SIZE = 8192; public static final int MIME_CHUNK_SIZE = 76; public static final int PEM_CHUNK_SIZE = 64; static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'}; private static final byte[] STANDARD_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }; private static final byte[] URL_SAFE_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' }; private static final byte PAD = '='; private static final byte[] DECODE_TABLE = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 }; private static final int MASK_6BITS = 0x3f; private static final int MASK_8BITS = 0xff; private final byte[] encodeTable; private final int lineLength; private final byte[] lineSeparator; private final int decodeSize; private final int encodeSize; private byte[] buffer; private int pos; private int readPos; private int currentLinePos; private int modulus; private boolean eof; private int x; public Base64() {\n        this(0);\n    }\n\n    \n    public Base64(boolean urlSafe) {\n        this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);\n    }\n\n    \n    public Base64(int lineLength) {\n        this(lineLength, CHUNK_SEPARATOR);\n    }\n\n    \n    public Base64(int lineLength, byte[] lineSeparator) {\n        this(lineLength, lineSeparator, false);\n    }\n\n    \n    public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\n        if (lineSeparator == null) {\n            lineLength = 0;  \n            lineSeparator = CHUNK_SEPARATOR;  \n        }\n        this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;\n        this.lineSeparator = new byte[lineSeparator.length];\n        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);\n        if (lineLength > 0) {\n            this.encodeSize = 4 + lineSeparator.length;\n        } else {\n            this.encodeSize = 4;\n        }\n        this.decodeSize = this.encodeSize - 1;\n        if (containsBase64Byte(lineSeparator)) {\n            String sep = StringUtils.newStringUtf8(lineSeparator);\n            throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [\" + sep + \"]\");\n        }\n        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;\n    }\n\n    \n    public boolean isUrlSafe() {\n        return this.encodeTable == URL_SAFE_ENCODE_TABLE;\n    }\n\n    \n    boolean hasData() {\n        return this.buffer != null;\n    }\n\n    \n    int avail() {\n        return buffer != null ? pos - readPos : 0;\n    }\n\n    \n    private void resizeBuffer() {\n        if (buffer == null) {\n            buffer = new byte[DEFAULT_BUFFER_SIZE];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];\n            System.arraycopy(buffer, 0, b, 0, buffer.length);\n            buffer = b;\n        }\n    }\n\n    \n    int readResults(byte[] b, int bPos, int bAvail) {\n        if (buffer != null) {\n            int len = Math.min(avail(), bAvail);\n            System.arraycopy(buffer, readPos, b, bPos, len);\n            readPos += len;\n            if (readPos >= pos) {\n                buffer = null;\n            }\n            return len;\n        }\n        return eof ? -1 : 0;\n    }\n\n    \n    void encode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        \n        \n        if (inAvail < 0) {\n            eof = true;\n            if (buffer == null || buffer.length - pos < encodeSize) {\n                resizeBuffer();\n            }\n            switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    \n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    \n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n            }\n            \n            \n            byte b = lineSeparator[lineSeparator.length - 1];\n            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {\n                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);\n                pos += lineSeparator.length;\n            }\n        } else {\n            for (int i = 0; i < inAvail; i++) {\n                if (buffer == null || buffer.length - pos < encodeSize) {\n                    resizeBuffer();\n                }\n                modulus = (++modulus) % 3;\n                int b = in[inPos++];\n                if (b < 0) {\n                    b += 256;\n                }\n                x = (x << 8) + b;\n                if (0 == modulus) {\n                    buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[x & MASK_6BITS];\n                    currentLinePos += 4;\n                    if (lineLength > 0 && lineLength <= currentLinePos) {\n                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);\n                        pos += lineSeparator.length;\n                        currentLinePos = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    \n    void decode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        if (inAvail < 0) {\n            eof = true;\n        }\n        for (int i = 0; i < inAvail; i++) {\n            if (buffer == null || buffer.length - pos < decodeSize) {\n                resizeBuffer();\n            }\n            byte b = in[inPos++];\n            if (b == PAD) {\n                \n                eof = true;\n                break;\n            } else {\n                if (b >= 0 && b < DECODE_TABLE.length) {\n                    int result = DECODE_TABLE[b];\n                    if (result >= 0) {\n                        modulus = (++modulus) % 4;\n                        x = (x << 6) + result;\n                        if (modulus == 0) {\n                            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                            buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                            buffer[pos++] = (byte) (x & MASK_8BITS);\n                        }\n                    }\n                }\n            }\n        }\n\n        \n        \n        \n        if (eof && modulus != 0) {\n            if (buffer == null || buffer.length - pos < decodeSize) {\n                resizeBuffer();\n            }\n            \n            x = x << 6;\n            switch (modulus) {\n                case 2 :\n                    x = x << 6;\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3 :\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }\n        }\n    }\n\n    \n    public static boolean isBase64(byte octet) {\n        return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);\n    }\n\n    \n    public static boolean isArrayByteBase64(byte[] arrayOctet) {\n        for (int i = 0; i < arrayOctet.length; i++) {\n            if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n    private static boolean containsBase64Byte(byte[] arrayOctet) {\n        for (int i = 0; i < arrayOctet.length; i++) {\n            if (isBase64(arrayOctet[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n    public static byte[] encodeBase64(byte[] binaryData) {\n        return encodeBase64(binaryData, false);\n    }\n\n        \n    public static String encodeBase64String(byte[] binaryData) {\n        return StringUtils.newStringUtf8(encodeBase64(binaryData, false));\n    }\n    \n    \n    public static byte[] encodeBase64URLSafe(byte[] binaryData) {\n        return encodeBase64(binaryData, false, true);\n    }\n\n        \n    public static String encodeBase64URLSafeString(byte[] binaryData) {\n        return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));\n    }    \n\n    \n    public static byte[] encodeBase64Chunked(byte[] binaryData) {\n        return encodeBase64(binaryData, true);\n    }\n\n    \n    public Object decode(Object pObject) throws DecoderException {        \n        if (pObject instanceof byte[]) {\n            return decode((byte[]) pObject);\n        } else if (pObject instanceof String) {\n            return decode((String) pObject);\n        } else {\n            throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");\n        }\n    }\n\n    \n    public byte[] decode(String pArray) {\n        return decode(StringUtils.getBytesUtf8(pArray));\n    }\n\n    \n    public byte[] decode(byte[] pArray) {\n        reset();\n        if (pArray == null || pArray.length == 0) {\n            return pArray;\n        }\n        decode(pArray, 0, pArray.length);\n        decode(pArray, 0, -1); \n        byte[] result = new byte[pos];\n        readResults(result, 0, result.length);\n        return result;\n    }\n\n    \n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) {\n        return encodeBase64(binaryData, isChunked, false);\n    }\n\n    \n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) {\n        return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);\n    }\n\n    \n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n        if (binaryData == null || binaryData.length == 0) {\n            return binaryData;\n        }\n\n        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n        if (len > maxResultSize) {\n            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n        }\n                \n        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n        return b64.encode(binaryData);\n    }\n\n    \n    public static byte[] decodeBase64(String base64String) {\n        return new Base64().decode(base64String);\n    }\n\n    \n    public static byte[] decodeBase64(byte[] base64Data) {\n        return new Base64().decode(base64Data);\n    }\n\n    \n    static byte[] discardWhitespace(byte[] data) {\n        byte groomedData[] = new byte[data.length];\n        int bytesCopied = 0;\n        for (int i = 0; i < data.length; i++) {\n            switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }\n        }\n        byte packedData[] = new byte[bytesCopied];\n        System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);\n        return packedData;\n    }\n\n    \n    private static boolean isWhiteSpace(byte byteToCheck) {\n        switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }\n    }\n\n    \n\n    \n    public Object encode(Object pObject) throws EncoderException {\n        if (!(pObject instanceof byte[])) {\n            throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");\n        }\n        return encode((byte[]) pObject);\n    }\n\n        \n    public String encodeToString(byte[] pArray) {\n        return StringUtils.newStringUtf8(encode(pArray));\n    }\n\n    \n    public byte[] encode(byte[] pArray) {\n        reset();        \n        if (pArray == null || pArray.length == 0) {\n            return pArray;\n        }\n        encode(pArray, 0, pArray.length);\n        encode(pArray, 0, -1); \n        byte[] buf = new byte[pos - readPos];\n        readResults(buf, 0, buf.length);\n        return buf;\n    }\n\n    \n    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {\n        \n        chunkSize = (chunkSize / 4) * 4;\n\n        long len = (pArray.length * 4) / 3;\n        long mod = len % 4;\n        if (mod != 0) {\n            len += 4 - mod;\n        }\n        if (chunkSize > 0) {\n            boolean lenChunksPerfectly = len % chunkSize == 0;\n            len += (len / chunkSize) * chunkSeparator.length;\n            if (!lenChunksPerfectly) {\n                len += chunkSeparator.length;\n            }\n        }\n        return len;\n    }\n\n    \n    \n    public static BigInteger decodeInteger(byte[] pArray) {\n        return new BigInteger(1, decodeBase64(pArray));\n    }\n\n    \n    public static byte[] encodeInteger(BigInteger bigInt) {\n        if (bigInt == null) {\n            throw new NullPointerException(\"encodeInteger called with null parameter\");\n        }\n        return encodeBase64(toIntegerBytes(bigInt), false);\n    }\n\n    \n    static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        \n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n        \n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        \n        if ((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n        int startDst = bitlen / 8 - len; \n        byte[] resizedBytes = new byte[bitlen / 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n        return resizedBytes;\n    }\n\n    \n    private void reset() {\n        buffer = null;\n        pos = 0;\n        readPos = 0;\n        currentLinePos = 0;\n        modulus = 0;\n        eof = false;\n    }\n\n}\n",
      "buggy_signatures": [
        "public Base64(boolean urlSafe)",
        "public Base64(int lineLength)",
        "public Base64(int lineLength, byte[] lineSeparator)",
        "public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)",
        "public boolean isUrlSafe()",
        "private void resizeBuffer()",
        "public static boolean isBase64(byte octet)",
        "public static boolean isArrayByteBase64(byte[] arrayOctet)",
        "private static boolean containsBase64Byte(byte[] arrayOctet)",
        "public static byte[] encodeBase64(byte[] binaryData)",
        "public static String encodeBase64String(byte[] binaryData)",
        "public static byte[] encodeBase64URLSafe(byte[] binaryData)",
        "public static String encodeBase64URLSafeString(byte[] binaryData)",
        "public static byte[] encodeBase64Chunked(byte[] binaryData)",
        "public Object decode(Object pObject) throws DecoderException",
        "public byte[] decode(String pArray)",
        "public byte[] decode(byte[] pArray)",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked)",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)",
        "public static byte[] decodeBase64(String base64String)",
        "public static byte[] decodeBase64(byte[] base64Data)",
        "static byte[] discardWhitespace(byte[] data)",
        "private static boolean isWhiteSpace(byte byteToCheck)",
        "public Object encode(Object pObject) throws EncoderException",
        "public String encodeToString(byte[] pArray)",
        "public byte[] encode(byte[] pArray)",
        "private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator)",
        "public static BigInteger decodeInteger(byte[] pArray)",
        "public static byte[] encodeInteger(BigInteger bigInt)",
        "static byte[] toIntegerBytes(BigInteger bigInt)",
        "private void reset()"
      ],
      "fixed_signatures": [
        "public Base64(boolean urlSafe)",
        "public Base64(int lineLength)",
        "public Base64(int lineLength, byte[] lineSeparator)",
        "public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)",
        "public boolean isUrlSafe()",
        "private void resizeBuffer()",
        "public static boolean isBase64(byte octet)",
        "public static boolean isArrayByteBase64(byte[] arrayOctet)",
        "private static boolean containsBase64Byte(byte[] arrayOctet)",
        "public static byte[] encodeBase64(byte[] binaryData)",
        "public static String encodeBase64String(byte[] binaryData)",
        "public static byte[] encodeBase64URLSafe(byte[] binaryData)",
        "public static String encodeBase64URLSafeString(byte[] binaryData)",
        "public static byte[] encodeBase64Chunked(byte[] binaryData)",
        "public Object decode(Object pObject) throws DecoderException",
        "public byte[] decode(String pArray)",
        "public byte[] decode(byte[] pArray)",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked)",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)",
        "public static byte[] decodeBase64(String base64String)",
        "public static byte[] decodeBase64(byte[] base64Data)",
        "static byte[] discardWhitespace(byte[] data)",
        "private static boolean isWhiteSpace(byte byteToCheck)",
        "public Object encode(Object pObject) throws EncoderException",
        "public String encodeToString(byte[] pArray)",
        "public byte[] encode(byte[] pArray)",
        "private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator)",
        "public static BigInteger decodeInteger(byte[] pArray)",
        "public static byte[] encodeInteger(BigInteger bigInt)",
        "static byte[] toIntegerBytes(BigInteger bigInt)",
        "private void reset()"
      ],
      "methods": [
        {
          "buggy_method": "  private void resizeBuffer() {\n  if (buffer == null) {\n  buffer = new byte[DEFAULT_BUFFER_SIZE];\n  pos = 0;\n  readPos = 0;\n  } else {\n  byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];\n  System.arraycopy(buffer, 0, b, 0, buffer.length);\n  buffer = b;\n  }\n  }",
          "fixed_method": "  private void resizeBuffer() {\n  if (buffer == null) {\n  buffer = new byte[DEFAULT_BUFFER_SIZE];\n  pos = 0;\n  readPos = 0;\n  } else {\n  byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];\n  System.arraycopy(buffer, 0, b, 0, buffer.length);\n  buffer = b;\n  }\n  }",
          "diff": [
            "@@ -416,13 +416,6 @@",
            "         return eof ? -1 : 0;\n",
            "     }\n",
            " \n",
            "-    void setInitialBuffer(byte[] out, int outPos, int outAvail) {\n",
            "-        if (out != null && out.length == outAvail) {\n",
            "-            buffer = out;\n",
            "-            pos = outPos;\n",
            "-            readPos = outPos;\n",
            "-        }\n",
            "-    }\n",
            "     /**\n",
            "      * <p>\n",
            "      * Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with\n"
          ],
          "changed_lines": 7
        }
      ]
    },
    {
      "name": "org/apache/commons/codec/binary/Base64InputStream.java",
      "buggy_full_code": "\n\npackage org.apache.commons.codec.binary;\n\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n\npublic class Base64InputStream extends FilterInputStream { private final boolean doEncode; private final Base64 base64; private final byte[] singleByte = new byte[1]; public Base64InputStream(InputStream in) {\n        this(in, false);\n    }\n\n    \n    public Base64InputStream(InputStream in, boolean doEncode) {\n        super(in);\n        this.doEncode = doEncode;\n        this.base64 = new Base64(false);\n    }\n\n    \n    public Base64InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator) {\n        super(in);\n        this.doEncode = doEncode;\n        this.base64 = new Base64(lineLength, lineSeparator);\n    }\n\n    \n    public int read() throws IOException {\n        int r = read(singleByte, 0, 1);\n        while (r == 0) {\n            r = read(singleByte, 0, 1);\n        }\n        if (r > 0) {\n            return singleByte[0] < 0 ? 256 + singleByte[0] : singleByte[0];\n        }\n        return -1;\n    }\n\n    \n    public int read(byte b[], int offset, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (offset < 0 || len < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (offset > b.length || offset + len > b.length) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        } else {\n            int readLen = 0;\n            \n            while (readLen == 0) {\n                if (!base64.hasData()) {\n                    byte[] buf = new byte[doEncode ? 4096 : 8192];\n                    int c = in.read(buf);\n                    if (c > 0 && b.length == len) {\n                        base64.setInitialBuffer(b, offset, len);\n                    }\n                    if (doEncode) {\n                        base64.encode(buf, 0, c);\n                    } else {\n                        base64.decode(buf, 0, c);\n                    }\n                }\n                readLen = base64.readResults(b, offset, len);\n            }\n            return readLen;\n        }\n    }\n\n    \n    public boolean markSupported() {\n        return false; \n    }\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.codec.binary;\n\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n\npublic class Base64InputStream extends FilterInputStream { private final boolean doEncode; private final Base64 base64; private final byte[] singleByte = new byte[1]; public Base64InputStream(InputStream in) {\n        this(in, false);\n    }\n\n    \n    public Base64InputStream(InputStream in, boolean doEncode) {\n        super(in);\n        this.doEncode = doEncode;\n        this.base64 = new Base64(false);\n    }\n\n    \n    public Base64InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator) {\n        super(in);\n        this.doEncode = doEncode;\n        this.base64 = new Base64(lineLength, lineSeparator);\n    }\n\n    \n    public int read() throws IOException {\n        int r = read(singleByte, 0, 1);\n        while (r == 0) {\n            r = read(singleByte, 0, 1);\n        }\n        if (r > 0) {\n            return singleByte[0] < 0 ? 256 + singleByte[0] : singleByte[0];\n        }\n        return -1;\n    }\n\n    \n    public int read(byte b[], int offset, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (offset < 0 || len < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (offset > b.length || offset + len > b.length) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        } else {\n            int readLen = 0;\n            \n            while (readLen == 0) {\n                if (!base64.hasData()) {\n                    byte[] buf = new byte[doEncode ? 4096 : 8192];\n                    int c = in.read(buf);\n                    if (doEncode) {\n                        base64.encode(buf, 0, c);\n                    } else {\n                        base64.decode(buf, 0, c);\n                    }\n                }\n                readLen = base64.readResults(b, offset, len);\n            }\n            return readLen;\n        }\n    }\n\n    \n    public boolean markSupported() {\n        return false; \n    }\n}\n",
      "buggy_signatures": [
        "public Base64InputStream(InputStream in, boolean doEncode)",
        "public Base64InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator)",
        "public int read() throws IOException",
        "public int read(byte b[], int offset, int len) throws IOException",
        "public boolean markSupported()"
      ],
      "fixed_signatures": [
        "public Base64InputStream(InputStream in, boolean doEncode)",
        "public Base64InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator)",
        "public int read() throws IOException",
        "public int read(byte b[], int offset, int len) throws IOException",
        "public boolean markSupported()"
      ],
      "methods": [
        {
          "buggy_method": "  public int read(byte b[], int offset, int len) throws IOException {\n  if (b == null) {\n  throw new NullPointerException();\n  } else if (offset < 0 || len < 0) {\n  throw new IndexOutOfBoundsException();\n  } else if (offset > b.length || offset + len > b.length) {\n  throw new IndexOutOfBoundsException();\n  } else if (len == 0) {\n  return 0;\n  } else {\n  int readLen = 0;\n  \n  while (readLen == 0) {\n  if (!base64.hasData()) {\n  byte[] buf = new byte[doEncode ? 4096 : 8192];\n  int c = in.read(buf);\n  if (c > 0 && b.length == len) {\n  base64.setInitialBuffer(b, offset, len);\n  }\n  if (doEncode) {\n  base64.encode(buf, 0, c);\n  } else {\n  base64.decode(buf, 0, c);\n  }\n  }\n  readLen = base64.readResults(b, offset, len);\n  }\n  return readLen;\n  }\n  }",
          "fixed_method": "  public int read(byte b[], int offset, int len) throws IOException {\n  if (b == null) {\n  throw new NullPointerException();\n  } else if (offset < 0 || len < 0) {\n  throw new IndexOutOfBoundsException();\n  } else if (offset > b.length || offset + len > b.length) {\n  throw new IndexOutOfBoundsException();\n  } else if (len == 0) {\n  return 0;\n  } else {\n  int readLen = 0;\n  \n  while (readLen == 0) {\n  if (!base64.hasData()) {\n  byte[] buf = new byte[doEncode ? 4096 : 8192];\n  int c = in.read(buf);\n  if (doEncode) {\n  base64.encode(buf, 0, c);\n  } else {\n  base64.decode(buf, 0, c);\n  }\n  }\n  readLen = base64.readResults(b, offset, len);\n  }\n  return readLen;\n  }\n  }",
          "diff": [
            "@@ -166,9 +166,6 @@",
            "                 if (!base64.hasData()) {\n",
            "                     byte[] buf = new byte[doEncode ? 4096 : 8192];\n",
            "                     int c = in.read(buf);\n",
            "-                    if (c > 0 && b.length == len) {\n",
            "-                        base64.setInitialBuffer(b, offset, len);\n",
            "-                    }\n",
            "                     if (doEncode) {\n",
            "                         base64.encode(buf, 0, c);\n",
            "                     } else {\n"
          ],
          "changed_lines": 3
        }
      ]
    }
  ]
}
