{
  "bug_id": "52",
  "failed_tests": {
    "com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeId999Test": [
      {
        "methodName": "testExternalTypeId",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<foo> but was:<null>",
        "fail_line": "        assertEquals(\"foo\", msg.type);",
        "test_source": "  public void testExternalTypeId() throws Exception {\n  TypeReference<?> type = new TypeReference<Message<FooPayload>>() { };\n\n  Message<?> msg = MAPPER.readValue(aposToQuotes(\"{ 'type':'foo', 'payload': {} }\"), type);\n  assertNotNull(msg);\n  assertNotNull(msg.payload);\n  assertEquals(\"foo\", msg.type);\n\n  // and then with different order\n  msg = MAPPER.readValue(aposToQuotes(\"{'payload': {}, 'type':'foo' }\"), type);\n  assertNotNull(msg);\n  assertNotNull(msg.payload);\n  assertEquals(\"foo\", msg.type);\n  }",
        "stack": [
          "ExternalTypeId999Test.testExternalTypeId line 47"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.io.IOException;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.annotation.ObjectIdResolver;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.JsonParser.NumberType;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.impl.*;\nimport com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\nimport com.fasterxml.jackson.databind.exc.IgnoredPropertyException;\nimport com.fasterxml.jackson.databind.introspect.*;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.type.ClassKey;\nimport com.fasterxml.jackson.databind.util.*;\n\n\npublic abstract class BeanDeserializerBase extends StdDeserializer<Object> implements ContextualDeserializer, ResolvableDeserializer, java.io.Serializable { private static final long serialVersionUID = 1; protected final static PropertyName TEMP_PROPERTY_NAME = new PropertyName(\"#temporary-name\"); final private transient Annotations _classAnnotations; final protected JavaType _beanType; final protected JsonFormat.Shape _serializationShape; protected final ValueInstantiator _valueInstantiator; protected JsonDeserializer<Object> _delegateDeserializer; protected JsonDeserializer<Object> _arrayDelegateDeserializer; protected PropertyBasedCreator _propertyBasedCreator; protected boolean _nonStandardCreation; protected boolean _vanillaProcessing; final protected BeanPropertyMap _beanProperties; final protected ValueInjector[] _injectables; protected SettableAnyProperty _anySetter; final protected Set<String> _ignorableProps; final protected boolean _ignoreAllUnknown; final protected boolean _needViewProcesing; final protected Map<String, SettableBeanProperty> _backRefs; protected transient HashMap<ClassKey, JsonDeserializer<Object>> _subDeserializers; protected UnwrappedPropertyHandler _unwrappedPropertyHandler; protected ExternalTypeHandler _externalTypeIdHandler; protected final ObjectIdReader _objectIdReader; protected BeanDeserializerBase(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, Set<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) {\n        super(beanDesc.getType());\n\n        AnnotatedClass ac = beanDesc.getClassInfo();\n        _classAnnotations = ac.getAnnotations();       \n        _beanType = beanDesc.getType();\n        _valueInstantiator = builder.getValueInstantiator();\n        \n        _beanProperties = properties;\n        _backRefs = backRefs;\n        _ignorableProps = ignorableProps;\n        _ignoreAllUnknown = ignoreAllUnknown;\n\n        _anySetter = builder.getAnySetter();\n        List<ValueInjector> injectables = builder.getInjectables();\n        _injectables = (injectables == null || injectables.isEmpty()) ? null\n                : injectables.toArray(new ValueInjector[injectables.size()]);\n        _objectIdReader = builder.getObjectIdReader();\n        _nonStandardCreation = (_unwrappedPropertyHandler != null)\n            || _valueInstantiator.canCreateUsingDelegate()\n            || _valueInstantiator.canCreateFromObjectWith()\n            || !_valueInstantiator.canCreateUsingDefault()\n            ;\n\n        \n        JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n        _serializationShape = (format == null) ? null : format.getShape();\n\n        _needViewProcesing = hasViews;\n        _vanillaProcessing = !_nonStandardCreation\n                && (_injectables == null)\n                && !_needViewProcesing\n                \n                && (_objectIdReader == null)\n                ;\n    }\n\n    protected BeanDeserializerBase(BeanDeserializerBase src) {\n        this(src, src._ignoreAllUnknown);\n    }\n\n    protected BeanDeserializerBase(BeanDeserializerBase src, boolean ignoreAllUnknown) {\n        super(src._beanType);\n        \n        _classAnnotations = src._classAnnotations;\n        _beanType = src._beanType;\n        \n        _valueInstantiator = src._valueInstantiator;\n        _delegateDeserializer = src._delegateDeserializer;\n        _propertyBasedCreator = src._propertyBasedCreator;\n        \n        _beanProperties = src._beanProperties;\n        _backRefs = src._backRefs;\n        _ignorableProps = src._ignorableProps;\n        _ignoreAllUnknown = ignoreAllUnknown;\n        _anySetter = src._anySetter;\n        _injectables = src._injectables;\n        _objectIdReader = src._objectIdReader;\n        \n        _nonStandardCreation = src._nonStandardCreation;\n        _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n        _needViewProcesing = src._needViewProcesing;\n        _serializationShape = src._serializationShape;\n\n        _vanillaProcessing = src._vanillaProcessing;\n    }\n \n    protected BeanDeserializerBase(BeanDeserializerBase src, NameTransformer unwrapper) {\n        super(src._beanType);\n\n        _classAnnotations = src._classAnnotations;\n        _beanType = src._beanType;\n        \n        _valueInstantiator = src._valueInstantiator;\n        _delegateDeserializer = src._delegateDeserializer;\n        _propertyBasedCreator = src._propertyBasedCreator;\n\n        _backRefs = src._backRefs;\n        _ignorableProps = src._ignorableProps;\n        _ignoreAllUnknown = (unwrapper != null) || src._ignoreAllUnknown;\n        _anySetter = src._anySetter;\n        _injectables = src._injectables;\n        _objectIdReader = src._objectIdReader;\n\n        _nonStandardCreation = src._nonStandardCreation;\n        UnwrappedPropertyHandler uph = src._unwrappedPropertyHandler;\n\n        if (unwrapper != null) {\n            \n            if (uph != null) { \n                uph = uph.renameAll(unwrapper);\n            }\n            \n            _beanProperties = src._beanProperties.renameAll(unwrapper);\n        } else {\n            _beanProperties = src._beanProperties;\n        }\n        _unwrappedPropertyHandler = uph;\n        _needViewProcesing = src._needViewProcesing;\n        _serializationShape = src._serializationShape;\n\n        \n        _vanillaProcessing = false;\n    }\n\n    public BeanDeserializerBase(BeanDeserializerBase src, ObjectIdReader oir) {\n        super(src._beanType);\n        \n        _classAnnotations = src._classAnnotations;\n        _beanType = src._beanType;\n        \n        _valueInstantiator = src._valueInstantiator;\n        _delegateDeserializer = src._delegateDeserializer;\n        _propertyBasedCreator = src._propertyBasedCreator;\n        \n        _backRefs = src._backRefs;\n        _ignorableProps = src._ignorableProps;\n        _ignoreAllUnknown = src._ignoreAllUnknown;\n        _anySetter = src._anySetter;\n        _injectables = src._injectables;\n        \n        _nonStandardCreation = src._nonStandardCreation;\n        _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n        _needViewProcesing = src._needViewProcesing;\n        _serializationShape = src._serializationShape;\n\n        \n        _objectIdReader = oir;\n\n        if (oir == null) {\n            _beanProperties = src._beanProperties;\n            _vanillaProcessing = src._vanillaProcessing;\n        } else {\n            \n            ObjectIdValueProperty idProp = new ObjectIdValueProperty(oir, PropertyMetadata.STD_REQUIRED);\n            _beanProperties = src._beanProperties.withProperty(idProp);\n            _vanillaProcessing = false;\n        }\n    }\n\n    public BeanDeserializerBase(BeanDeserializerBase src, Set<String> ignorableProps) {\n        super(src._beanType);\n        \n        _classAnnotations = src._classAnnotations;\n        _beanType = src._beanType;\n        \n        _valueInstantiator = src._valueInstantiator;\n        _delegateDeserializer = src._delegateDeserializer;\n        _propertyBasedCreator = src._propertyBasedCreator;\n        \n        _backRefs = src._backRefs;\n        _ignorableProps = ignorableProps;\n        _ignoreAllUnknown = src._ignoreAllUnknown;\n        _anySetter = src._anySetter;\n        _injectables = src._injectables;\n        \n        _nonStandardCreation = src._nonStandardCreation;\n        _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n        _needViewProcesing = src._needViewProcesing;\n        _serializationShape = src._serializationShape;\n\n        _vanillaProcessing = src._vanillaProcessing;\n        _objectIdReader = src._objectIdReader;\n\n        \n        \n        _beanProperties = src._beanProperties.withoutProperties(ignorableProps);\n    }\n\n    \n    protected BeanDeserializerBase(BeanDeserializerBase src, BeanPropertyMap beanProps) {\n        super(src._beanType);\n        \n        _classAnnotations = src._classAnnotations;\n        _beanType = src._beanType;\n        \n        _valueInstantiator = src._valueInstantiator;\n        _delegateDeserializer = src._delegateDeserializer;\n        _propertyBasedCreator = src._propertyBasedCreator;\n        \n        _beanProperties = beanProps;\n        _backRefs = src._backRefs;\n        _ignorableProps = src._ignorableProps;\n        _ignoreAllUnknown = src._ignoreAllUnknown;\n        _anySetter = src._anySetter;\n        _injectables = src._injectables;\n        _objectIdReader = src._objectIdReader;\n        \n        _nonStandardCreation = src._nonStandardCreation;\n        _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n        _needViewProcesing = src._needViewProcesing;\n        _serializationShape = src._serializationShape;\n\n        _vanillaProcessing = src._vanillaProcessing;\n    }\n    \n    @Override\n    public abstract JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper); public abstract BeanDeserializerBase withObjectIdReader(ObjectIdReader oir); public abstract BeanDeserializerBase withIgnorableProperties(Set<String> ignorableProps); public BeanDeserializerBase withBeanProperties(BeanPropertyMap props) {\n        throw new UnsupportedOperationException(\"Class \"+getClass().getName()\n                +\" does not override `withBeanProperties()`, needs to\");\n    }\n    \n    \n    protected abstract BeanDeserializerBase asArrayDeserializer(); @Override public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n        ExternalTypeHandler.Builder extTypes = null;\n        \n        SettableBeanProperty[] creatorProps;\n\n        if (_valueInstantiator.canCreateFromObjectWith()) {\n            creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n\n            \n            \n            \n            \n\n            \n        } else {\n            creatorProps = null;\n        }\n\n        UnwrappedPropertyHandler unwrapped = null;\n\n        for (SettableBeanProperty origProp : _beanProperties) {\n            SettableBeanProperty prop = origProp;\n\n            \n            if (!prop.hasValueDeserializer()) {\n                \n                JsonDeserializer<?> deser = findConvertingDeserializer(ctxt, prop);\n                if (deser == null) {\n                    deser = findDeserializer(ctxt, prop.getType(), prop);\n                }\n                prop = prop.withValueDeserializer(deser);\n            } else { \n                JsonDeserializer<Object> deser = prop.getValueDeserializer();\n                \n                JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop,\n                        prop.getType());\n                if (cd != deser) {\n                    prop = prop.withValueDeserializer(cd);\n                }\n            }\n\n            \n            prop = _resolveManagedReferenceProperty(ctxt, prop);\n\n            \n            if (!(prop instanceof ManagedReferenceProperty)) {\n                prop = _resolvedObjectIdProperty(ctxt, prop);\n            }\n            \n            SettableBeanProperty u = _resolveUnwrappedProperty(ctxt, prop);\n            if (u != null) {\n                prop = u;\n                if (unwrapped == null) {\n                    unwrapped = new UnwrappedPropertyHandler();\n                }\n                unwrapped.addProperty(prop);\n                \n                _beanProperties.remove(prop);\n                continue;\n            }\n            \n            prop = _resolveInnerClassValuedProperty(ctxt, prop);\n            if (prop != origProp) {\n                _beanProperties.replace(prop);\n                \n                if (creatorProps != null) {\n                    \n                    \n                    for (int i = 0, len = creatorProps.length; i < len; ++i) {\n                        if (creatorProps[i] == origProp) {\n                            creatorProps[i] = prop;\n                            break;\n                        }\n                        \n                        \n                        \n                    }\n                }\n            }\n            \n            \n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser = prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes == null) {\n                        extTypes = new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                    \n                    _beanProperties.remove(prop);\n                    continue;\n                }\n            }\n        }\n        \n        if (_anySetter != null && !_anySetter.hasValueDeserializer()) {\n            _anySetter = _anySetter.withValueDeserializer(findDeserializer(ctxt,\n                    _anySetter.getType(), _anySetter.getProperty()));\n        }\n        \n        if (_valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_beanType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            _delegateDeserializer = _findDelegateDeserializer(ctxt, delegateType,\n                    _valueInstantiator.getDelegateCreator());\n        }\n\n        \n        if (_valueInstantiator.canCreateUsingArrayDelegate()) {\n            JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid array-delegate-creator definition for \"+_beanType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'\");\n            }\n            _arrayDelegateDeserializer = _findDelegateDeserializer(ctxt, delegateType,\n                    _valueInstantiator.getArrayDelegateCreator());\n        }\n\n        \n        if (creatorProps != null) {\n            _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        }\n\n        if (extTypes != null) {\n            \n            \n            _externalTypeIdHandler = extTypes.build();\n            \n            _nonStandardCreation = true;\n        }\n        \n        _unwrappedPropertyHandler = unwrapped;\n        if (unwrapped != null) { \n            _nonStandardCreation = true;\n        }\n\n        \n        _vanillaProcessing = _vanillaProcessing && !_nonStandardCreation;\n    }\n\n    private JsonDeserializer<Object> _findDelegateDeserializer(DeserializationContext ctxt, JavaType delegateType, AnnotatedWithParams delegateCreator) throws JsonMappingException {\n        \n        BeanProperty.Std property = new BeanProperty.Std(TEMP_PROPERTY_NAME,\n                delegateType, null, _classAnnotations, delegateCreator,\n                PropertyMetadata.STD_OPTIONAL);\n\n        TypeDeserializer td = delegateType.getTypeHandler();\n        if (td == null) {\n            td = ctxt.getConfig().findTypeDeserializer(delegateType);\n        }\n        JsonDeserializer<Object> dd = findDeserializer(ctxt, delegateType, property);\n        if (td != null) {\n            td = td.forProperty(property);\n            return new TypeWrappedDeserializer(td, dd);\n        }\n        return dd;\n    }\n\n\n    \n    protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException {\n        final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n        if (intr != null) {\n            Object convDef = intr.findDeserializationConverter(prop.getMember());\n            if (convDef != null) {\n                Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);\n                JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n                JsonDeserializer<?> ser = ctxt.findContextualValueDeserializer(delegateType, prop);\n                return new StdDelegatingDeserializer<Object>(conv, delegateType, ser);\n            }\n        }\n        return null;\n    }\n    \n    \n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n        ObjectIdReader oir = _objectIdReader;\n        \n        \n        final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n        final AnnotatedMember accessor = (property == null || intr == null)\n                ? null : property.getMember();\n        if (accessor != null && intr != null) {\n            ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n            if (objectIdInfo != null) { \n                \n                objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n                \n                Class<?> implClass = objectIdInfo.getGeneratorType();\n                \n                JavaType idType;\n                SettableBeanProperty idProp;\n                ObjectIdGenerator<?> idGen;\n                ObjectIdResolver resolver = ctxt.objectIdResolverInstance(accessor, objectIdInfo);\n                if (implClass == ObjectIdGenerators.PropertyGenerator.class) {\n                    PropertyName propName = objectIdInfo.getPropertyName();\n                    idProp = findProperty(propName);\n                    if (idProp == null) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \"\n                                +handledType().getName()+\": can not find property with name '\"+propName+\"'\");\n                    }\n                    idType = idProp.getType();\n                    idGen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n                } else { \n                    JavaType type = ctxt.constructType(implClass);\n                    idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                    idProp = null;\n                    idGen = ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n                }\n                JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType);\n                oir = ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(),\n                \t\tidGen, deser, idProp, resolver);\n            }\n        }\n        \n        BeanDeserializerBase contextual = this;\n        if (oir != null && oir != _objectIdReader) {\n            contextual = contextual.withObjectIdReader(oir);\n        }\n        \n        if (accessor != null) {\n            JsonIgnoreProperties.Value ignorals = intr.findPropertyIgnorals(accessor);\n            if (ignorals != null) {\n                Set<String> ignored = ignorals.findIgnoredForDeserialization();\n                if (!ignored.isEmpty()) {\n                    Set<String> prev = contextual._ignorableProps;\n                    if ((prev != null) && !prev.isEmpty()) {\n                        ignored = new HashSet<String>(ignored);\n                        ignored.addAll(prev);\n                    }\n                    contextual = contextual.withIgnorableProperties(ignored);\n                }\n            }\n        }\n\n        \n        JsonFormat.Value format = findFormatOverrides(ctxt, property, handledType());\n        JsonFormat.Shape shape = null;\n        if (format != null) {\n            if (format.hasShape()) {\n                shape = format.getShape();\n            }\n            \n            Boolean B = format.getFeature(JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\n            if (B != null) {\n                \n                BeanPropertyMap propsOrig = _beanProperties;\n                BeanPropertyMap props = propsOrig.withCaseInsensitivity(B.booleanValue());\n                if (props != propsOrig) {\n                    contextual = contextual.withBeanProperties(props);\n                }\n            }\n        }\n\n        if (shape == null) {\n            shape = _serializationShape;\n        }\n        if (shape == JsonFormat.Shape.ARRAY) {\n            contextual = contextual.asArrayDeserializer();\n        }\n        return contextual;\n    }\n\n    \n    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n        String refName = prop.getManagedReferenceName();\n        if (refName == null) {\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = valueDeser.findBackReference(refName);\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        \n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        boolean isContainer = prop.getType().isContainerType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }\n\n    \n    protected SettableBeanProperty _resolvedObjectIdProperty(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException {\n        ObjectIdInfo objectIdInfo = prop.getObjectIdInfo();\n        JsonDeserializer<Object> valueDeser = prop.getValueDeserializer();\n        ObjectIdReader objectIdReader = valueDeser.getObjectIdReader();\n        if (objectIdInfo == null && objectIdReader == null) {\n            return prop;\n        }\n        return new ObjectIdReferenceProperty(prop, objectIdInfo);\n    }\n\n    \n    protected SettableBeanProperty _resolveUnwrappedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n        AnnotatedMember am = prop.getMember();\n        if (am != null) {\n            NameTransformer unwrapper = ctxt.getAnnotationIntrospector().findUnwrappingNameTransformer(am);\n            if (unwrapper != null) {\n                JsonDeserializer<Object> orig = prop.getValueDeserializer();\n                JsonDeserializer<Object> unwrapping = orig.unwrappingDeserializer(unwrapper);\n                if (unwrapping != orig && unwrapping != null) {\n                    \n                    return prop.withValueDeserializer(unwrapping);\n                }\n            }\n        }\n        return null;\n    }\n    \n    \n    protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {            \n        \n        JsonDeserializer<Object> deser = prop.getValueDeserializer();\n        \n        if (deser instanceof BeanDeserializerBase) {\n            BeanDeserializerBase bd = (BeanDeserializerBase) deser;\n            ValueInstantiator vi = bd.getValueInstantiator();\n            if (!vi.canCreateUsingDefault()) { \n                Class<?> valueClass = prop.getType().getRawClass();\n                Class<?> enclosing = ClassUtil.getOuterClass(valueClass);\n                \n                if (enclosing != null && enclosing == _beanType.getRawClass()) {\n                    for (Constructor<?> ctor : valueClass.getConstructors()) {\n                        Class<?>[] paramTypes = ctor.getParameterTypes();\n                        if (paramTypes.length == 1 && paramTypes[0] == enclosing) {\n                            if (ctxt.canOverrideAccessModifiers()) {\n                                ClassUtil.checkAndFixAccess(ctor, ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n                            }\n                            return new InnerClassProperty(prop, ctor);\n                        }\n                    }\n                }\n            }\n        }\n        return prop;\n    }\n\n    \n\n    @Override\n    public boolean isCachable() { return true; }\n\n    @Override\n    public Class<?> handledType() {\n        return _beanType.getRawClass();\n    }\n    \n    \n    @Override\n    public ObjectIdReader getObjectIdReader() {\n        return _objectIdReader;\n    }\n    \n    public boolean hasProperty(String propertyName) {\n        return _beanProperties.find(propertyName) != null;\n    }\n\n    public boolean hasViews() {\n        return _needViewProcesing;\n    }\n    \n    \n    public int getPropertyCount() { \n        return _beanProperties.size();\n    }\n\n    @Override\n    public Collection<Object> getKnownPropertyNames() {\n        ArrayList<Object> names = new ArrayList<Object>();\n        for (SettableBeanProperty prop : _beanProperties) {\n            names.add(prop.getName());\n        }\n        return names;\n    }\n\n    \n    @Deprecated\n    public final Class<?> getBeanClass() { return _beanType.getRawClass(); }\n\n    @Override\n    public JavaType getValueType() { return _beanType; }\n\n    \n    public Iterator<SettableBeanProperty> properties() {\n        if (_beanProperties == null) {\n            throw new IllegalStateException(\"Can only call after BeanDeserializer has been resolved\");\n        }\n        return _beanProperties.iterator();\n    }\n\n    \n    public Iterator<SettableBeanProperty> creatorProperties() {\n        if (_propertyBasedCreator == null) {\n            return Collections.<SettableBeanProperty>emptyList().iterator();\n        }\n        return _propertyBasedCreator.properties().iterator();\n    }\n\n    public SettableBeanProperty findProperty(PropertyName propertyName) {\n        \n        return findProperty(propertyName.getSimpleName());\n    }\n    \n    \n    public SettableBeanProperty findProperty(String propertyName) {\n        SettableBeanProperty prop = (_beanProperties == null) ?\n                null : _beanProperties.find(propertyName);\n        if (prop == null && _propertyBasedCreator != null) {\n            prop = _propertyBasedCreator.findCreatorProperty(propertyName);\n        }\n        return prop;\n    }\n\n    \n    public SettableBeanProperty findProperty(int propertyIndex) {\n        SettableBeanProperty prop = (_beanProperties == null) ?\n                null : _beanProperties.find(propertyIndex);\n        if (prop == null && _propertyBasedCreator != null) {\n            prop = _propertyBasedCreator.findCreatorProperty(propertyIndex);\n        }\n        return prop;\n    }\n    \n    \n    @Override\n    public SettableBeanProperty findBackReference(String logicalName) {\n        if (_backRefs == null) {\n            return null;\n        }\n        return _backRefs.get(logicalName);\n    }\n\n    public ValueInstantiator getValueInstantiator() {\n        return _valueInstantiator;\n    }\n\n    \n\n    \n    public void replaceProperty(SettableBeanProperty original, SettableBeanProperty replacement) {\n        _beanProperties.replace(replacement);\n    }\n\n    \n\n    \n    public abstract Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException; @Override public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n        \n        if (_objectIdReader != null) {\n            \n            if (p.canReadObjectId()) {\n                Object id = p.getObjectId();\n                if (id != null) {\n                    Object ob = typeDeserializer.deserializeTypedFromObject(p, ctxt);\n                    return _handleTypedObjectId(p, ctxt, ob, id);\n                }\n            }\n            \n            JsonToken t = p.getCurrentToken();\n            if (t != null) {\n                \n                if (t.isScalarValue()) {\n                    return deserializeFromObjectId(p, ctxt);\n                }\n                \n                if (t == JsonToken.START_OBJECT) {\n                    t = p.nextToken();\n                }\n                if ((t == JsonToken.FIELD_NAME) && _objectIdReader.maySerializeAsObject()\n                        && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {\n                    return deserializeFromObjectId(p, ctxt);\n                }\n            }\n        }\n        \n        return typeDeserializer.deserializeTypedFromObject(p, ctxt);\n    }\n\n    \n    protected Object _handleTypedObjectId(JsonParser p, DeserializationContext ctxt, Object pojo, Object rawId) throws IOException {\n        \n        \n        JsonDeserializer<Object> idDeser = _objectIdReader.getDeserializer();\n        final Object id;\n\n        \n        if (idDeser.handledType() == rawId.getClass()) {\n            \n            id = rawId;\n        } else {\n            id = _convertObjectId(p, ctxt, rawId, idDeser);\n        }\n\n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        roid.bindItem(pojo);\n        \n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp != null) {\n            return idProp.setAndReturn(pojo, id);\n        }\n        return pojo;\n    }\n\n    \n    @SuppressWarnings(\"resource\") \n    protected Object _convertObjectId(JsonParser p, DeserializationContext ctxt, Object rawId, JsonDeserializer<Object> idDeser) throws IOException {\n        TokenBuffer buf = new TokenBuffer(p, ctxt);\n        if (rawId instanceof String) {\n            buf.writeString((String) rawId);\n        } else if (rawId instanceof Long) {\n            buf.writeNumber(((Long) rawId).longValue());\n        } else if (rawId instanceof Integer) {\n            buf.writeNumber(((Integer) rawId).intValue());\n        } else {\n            \n            \n            \n            buf.writeObject(rawId);\n        }\n        JsonParser bufParser = buf.asParser();\n        bufParser.nextToken();\n        return idDeser.deserialize(bufParser, ctxt);\n    }\n\n    \n    \n    protected Object deserializeWithObjectId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        return deserializeFromObject(p, ctxt);\n    }\n\n    \n    protected Object deserializeFromObjectId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        Object id = _objectIdReader.readObjectReference(p, ctxt);\n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        \n        Object pojo = roid.resolve();\n        if (pojo == null) { \n            throw new UnresolvedForwardReference(p,\n                    \"Could not resolve Object Id [\"+id+\"] (for \"+_beanType+\").\",\n                    p.getCurrentLocation(), roid);\n        }\n        return pojo;\n    }\n\n    protected Object deserializeFromObjectUsingNonDefault(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt,\n                    _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return _deserializeUsingPropertyBased(p, ctxt);\n        }\n        \n        if (_beanType.isAbstract()) {\n            return ctxt.handleMissingInstantiator(handledType(), p,\n                    \"abstract type (need to add/enable type information?)\"); } return ctxt.handleMissingInstantiator(_beanType.getRawClass(), p, \"no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)\"); } protected abstract Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException; @SuppressWarnings(\"incomplete-switch\") public Object deserializeFromNumber(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (_objectIdReader != null) {\n            return deserializeFromObjectId(p, ctxt);\n        }\n\n        switch (p.getNumberType()) {\n        case INT:\n            if (_delegateDeserializer != null) {\n                if (!_valueInstantiator.canCreateFromInt()) {\n                    Object bean = _valueInstantiator.createUsingDelegate(ctxt,\n                            _delegateDeserializer.deserialize(p, ctxt));\n                    if (_injectables != null) {\n                        injectValues(ctxt, bean);\n                    }\n                    return bean;\n                }\n            }\n            return _valueInstantiator.createFromInt(ctxt, p.getIntValue());\n        case LONG:\n            if (_delegateDeserializer != null) {\n                if (!_valueInstantiator.canCreateFromInt()) {\n                    Object bean = _valueInstantiator.createUsingDelegate(ctxt,\n                            _delegateDeserializer.deserialize(p, ctxt));\n                    if (_injectables != null) {\n                        injectValues(ctxt, bean);\n                    }\n                    return bean;\n                }\n            }\n            return _valueInstantiator.createFromLong(ctxt, p.getLongValue());\n        }\n        \n        if (_delegateDeserializer != null) {\n            Object bean = _valueInstantiator.createUsingDelegate(ctxt,\n                    _delegateDeserializer.deserialize(p, ctxt));\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            return bean;\n        }\n        return ctxt.handleMissingInstantiator(handledType(), p,\n                \"no suitable creator method found to deserialize from Number value (%s)\",\n                p.getNumberValue());\n    }\n\n    public Object deserializeFromString(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (_objectIdReader != null) {\n            return deserializeFromObjectId(p, ctxt);\n        }\n        \n        \n        if (_delegateDeserializer != null) {\n            if (!_valueInstantiator.canCreateFromString()) {\n                Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                if (_injectables != null) {\n                    injectValues(ctxt, bean);\n                }\n                return bean;\n            }\n        }\n        return _valueInstantiator.createFromString(ctxt, p.getText());\n    }\n\n    \n    public Object deserializeFromDouble(JsonParser p, DeserializationContext ctxt) throws IOException {\n        NumberType t = p.getNumberType();\n        \n        if ((t == NumberType.DOUBLE) || (t == NumberType.FLOAT)) {\n            if (_delegateDeserializer != null) {\n                if (!_valueInstantiator.canCreateFromDouble()) {\n                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                    if (_injectables != null) {\n                        injectValues(ctxt, bean);\n                    }\n                    return bean;\n                }\n            }\n            return _valueInstantiator.createFromDouble(ctxt, p.getDoubleValue());\n        }\n        \n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        return ctxt.handleMissingInstantiator(handledType(), p,\n                \"no suitable creator method found to deserialize from Number value (%s)\",\n                p.getNumberValue());\n    }\n\n    \n    public Object deserializeFromBoolean(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_delegateDeserializer != null) {\n            if (!_valueInstantiator.canCreateFromBoolean()) {\n                Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                if (_injectables != null) {\n                    injectValues(ctxt, bean);\n                }\n                return bean;\n            }\n        }\n        boolean value = (p.getCurrentToken() == JsonToken.VALUE_TRUE);\n        return _valueInstantiator.createFromBoolean(ctxt, value);\n    }\n\n    public Object deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_arrayDelegateDeserializer != null) {\n            try {\n                Object bean = _valueInstantiator.createUsingArrayDelegate(ctxt, _arrayDelegateDeserializer.deserialize(p, ctxt));\n                if (_injectables != null) {\n                    injectValues(ctxt, bean);\n                }\n                return bean;\n            } catch (Exception e) {\n                return wrapInstantiationProblem(e, ctxt);\n            }\n        }\n        \n        if (_delegateDeserializer != null) {\n            try {\n                Object bean = _valueInstantiator.createUsingArrayDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                if (_injectables != null) {\n                    injectValues(ctxt, bean);\n                }\n                return bean;\n            } catch (Exception e) {\n                wrapInstantiationProblem(e, ctxt);\n                return null;\n            }\n        }\n        if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n            JsonToken t = p.nextToken();\n            if (t == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n                return null;\n            }\n            final Object value = deserialize(p, ctxt);\n            if (p.nextToken() != JsonToken.END_ARRAY) {\n                handleMissingEndArrayForSingle(p, ctxt);\n            }\n            return value;\n        }\n        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n            JsonToken t = p.nextToken();\n            if (t == JsonToken.END_ARRAY) {\n                return null;\n            }\n            return ctxt.handleUnexpectedToken(handledType(),\n                    JsonToken.START_ARRAY, p, null);\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    public Object deserializeFromEmbedded(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        \n        if (_objectIdReader != null) {\n            return deserializeFromObjectId(p, ctxt);\n        }\n\n        \n        \n        return p.getEmbeddedObject();\n    }\n\n    \n\n    protected void injectValues(DeserializationContext ctxt, Object bean) throws IOException {\n        for (ValueInjector injector : _injectables) {\n            injector.inject(ctxt, bean);\n        }\n    }\n    \n    \n    @SuppressWarnings(\"resource\")\n    protected Object handleUnknownProperties(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException {\n        \n        unknownTokens.writeEndObject();\n\n        \n        JsonParser bufferParser = unknownTokens.asParser();\n        while (bufferParser.nextToken() != JsonToken.END_OBJECT) {\n            String propName = bufferParser.getCurrentName();\n            \n            bufferParser.nextToken();\n            handleUnknownProperty(bufferParser, ctxt, bean, propName);\n        }\n        return bean;\n    }\n\n    \n    protected void handleUnknownVanilla(JsonParser p, DeserializationContext ctxt, Object bean, String propName) throws IOException {\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, bean, propName);\n        } else if (_anySetter != null) {\n            try {\n               \n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n        } else {\n            \n            handleUnknownProperty(p, ctxt, bean, propName);         \n        }\n    }\n\n    \n    @Override\n    protected void handleUnknownProperty(JsonParser p, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException {\n        if (_ignoreAllUnknown) {\n            p.skipChildren();\n            return;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, beanOrClass, propName);\n        }\n        \n        \n        super.handleUnknownProperty(p, ctxt, beanOrClass, propName);\n    }\n\n    \n    protected void handleIgnoredProperty(JsonParser p, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException {\n        if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES)) {\n            throw IgnoredPropertyException.from(p, beanOrClass, propName, getKnownPropertyNames());\n        }\n        p.skipChildren();\n    }\n    \n    \n    @SuppressWarnings(\"resource\")\n    protected Object handlePolymorphic(JsonParser p, DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException {  \n        \n        JsonDeserializer<Object> subDeser = _findSubclassDeserializer(ctxt, bean, unknownTokens);\n        if (subDeser != null) {\n            if (unknownTokens != null) {\n                \n                unknownTokens.writeEndObject();\n                JsonParser p2 = unknownTokens.asParser();\n                p2.nextToken(); \n                bean = subDeser.deserialize(p2, ctxt, bean);\n            }\n            \n            if (p != null) {\n                bean = subDeser.deserialize(p, ctxt, bean);\n            }\n            return bean;\n        }\n        \n        if (unknownTokens != null) {\n            bean = handleUnknownProperties(ctxt, bean, unknownTokens);\n        }\n        \n        if (p != null) {\n            bean = deserialize(p, ctxt, bean);\n        }\n        return bean;\n    }\n    \n    \n    protected JsonDeserializer<Object> _findSubclassDeserializer(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException {  \n        JsonDeserializer<Object> subDeser;\n\n        \n        synchronized (this) {\n            subDeser = (_subDeserializers == null) ? null : _subDeserializers.get(new ClassKey(bean.getClass()));\n        }\n        if (subDeser != null) {\n            return subDeser;\n        }\n        \n        JavaType type = ctxt.constructType(bean.getClass());\n        \n\n        subDeser = ctxt.findRootValueDeserializer(type);\n        \n        if (subDeser != null) {\n            synchronized (this) {\n                if (_subDeserializers == null) {\n                    _subDeserializers = new HashMap<ClassKey,JsonDeserializer<Object>>();;\n                }\n                _subDeserializers.put(new ClassKey(bean.getClass()), subDeser);\n            }            \n        }\n        return subDeser;\n    }\n    \n    \n\n    \n    public void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException {\n        \n        throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(t, ctxt), bean, fieldName);\n    }\n\n    @Deprecated \n    public void wrapAndThrow(Throwable t, Object bean, int index, DeserializationContext ctxt) throws IOException {\n        \n        throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(t, ctxt), bean, index);\n    }\n\n    private Throwable throwOrReturnThrowable(Throwable t, DeserializationContext ctxt) throws IOException {\n        \n        while (t instanceof InvocationTargetException && t.getCause() != null) {\n            t = t.getCause();\n        }\n        \n        if (t instanceof Error) {\n            throw (Error) t;\n        }\n        boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n        \n        if (t instanceof IOException) {\n            if (!wrap || !(t instanceof JsonProcessingException)) {\n                throw (IOException) t;\n            }\n        } else if (!wrap) { \n            if (t instanceof RuntimeException) {\n                throw (RuntimeException) t;\n            }\n        }\n        return t;\n    }\n\n    protected Object wrapInstantiationProblem(Throwable t, DeserializationContext ctxt) throws IOException {\n        while (t instanceof InvocationTargetException && t.getCause() != null) {\n            t = t.getCause();\n        }\n        \n        if (t instanceof Error) {\n            throw (Error) t;\n        }\n        boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n        if (t instanceof IOException) {\n            \n            throw (IOException) t;\n        } else if (!wrap) { \n            if (t instanceof RuntimeException) {\n                throw (RuntimeException) t;\n            }\n        }\n        return ctxt.handleInstantiationProblem(_beanType.getRawClass(), null, t);\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.io.IOException;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerator;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.annotation.ObjectIdResolver;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.JsonParser.NumberType;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.impl.*;\nimport com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\nimport com.fasterxml.jackson.databind.exc.IgnoredPropertyException;\nimport com.fasterxml.jackson.databind.introspect.*;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.type.ClassKey;\nimport com.fasterxml.jackson.databind.util.*;\n\n\npublic abstract class BeanDeserializerBase extends StdDeserializer<Object> implements ContextualDeserializer, ResolvableDeserializer, java.io.Serializable { private static final long serialVersionUID = 1; protected final static PropertyName TEMP_PROPERTY_NAME = new PropertyName(\"#temporary-name\"); final private transient Annotations _classAnnotations; final protected JavaType _beanType; final protected JsonFormat.Shape _serializationShape; protected final ValueInstantiator _valueInstantiator; protected JsonDeserializer<Object> _delegateDeserializer; protected JsonDeserializer<Object> _arrayDelegateDeserializer; protected PropertyBasedCreator _propertyBasedCreator; protected boolean _nonStandardCreation; protected boolean _vanillaProcessing; final protected BeanPropertyMap _beanProperties; final protected ValueInjector[] _injectables; protected SettableAnyProperty _anySetter; final protected Set<String> _ignorableProps; final protected boolean _ignoreAllUnknown; final protected boolean _needViewProcesing; final protected Map<String, SettableBeanProperty> _backRefs; protected transient HashMap<ClassKey, JsonDeserializer<Object>> _subDeserializers; protected UnwrappedPropertyHandler _unwrappedPropertyHandler; protected ExternalTypeHandler _externalTypeIdHandler; protected final ObjectIdReader _objectIdReader; protected BeanDeserializerBase(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, Set<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) {\n        super(beanDesc.getType());\n\n        AnnotatedClass ac = beanDesc.getClassInfo();\n        _classAnnotations = ac.getAnnotations();       \n        _beanType = beanDesc.getType();\n        _valueInstantiator = builder.getValueInstantiator();\n        \n        _beanProperties = properties;\n        _backRefs = backRefs;\n        _ignorableProps = ignorableProps;\n        _ignoreAllUnknown = ignoreAllUnknown;\n\n        _anySetter = builder.getAnySetter();\n        List<ValueInjector> injectables = builder.getInjectables();\n        _injectables = (injectables == null || injectables.isEmpty()) ? null\n                : injectables.toArray(new ValueInjector[injectables.size()]);\n        _objectIdReader = builder.getObjectIdReader();\n        _nonStandardCreation = (_unwrappedPropertyHandler != null)\n            || _valueInstantiator.canCreateUsingDelegate()\n            || _valueInstantiator.canCreateFromObjectWith()\n            || !_valueInstantiator.canCreateUsingDefault()\n            ;\n\n        \n        JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n        _serializationShape = (format == null) ? null : format.getShape();\n\n        _needViewProcesing = hasViews;\n        _vanillaProcessing = !_nonStandardCreation\n                && (_injectables == null)\n                && !_needViewProcesing\n                \n                && (_objectIdReader == null)\n                ;\n    }\n\n    protected BeanDeserializerBase(BeanDeserializerBase src) {\n        this(src, src._ignoreAllUnknown);\n    }\n\n    protected BeanDeserializerBase(BeanDeserializerBase src, boolean ignoreAllUnknown) {\n        super(src._beanType);\n        \n        _classAnnotations = src._classAnnotations;\n        _beanType = src._beanType;\n        \n        _valueInstantiator = src._valueInstantiator;\n        _delegateDeserializer = src._delegateDeserializer;\n        _propertyBasedCreator = src._propertyBasedCreator;\n        \n        _beanProperties = src._beanProperties;\n        _backRefs = src._backRefs;\n        _ignorableProps = src._ignorableProps;\n        _ignoreAllUnknown = ignoreAllUnknown;\n        _anySetter = src._anySetter;\n        _injectables = src._injectables;\n        _objectIdReader = src._objectIdReader;\n        \n        _nonStandardCreation = src._nonStandardCreation;\n        _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n        _needViewProcesing = src._needViewProcesing;\n        _serializationShape = src._serializationShape;\n\n        _vanillaProcessing = src._vanillaProcessing;\n    }\n \n    protected BeanDeserializerBase(BeanDeserializerBase src, NameTransformer unwrapper) {\n        super(src._beanType);\n\n        _classAnnotations = src._classAnnotations;\n        _beanType = src._beanType;\n        \n        _valueInstantiator = src._valueInstantiator;\n        _delegateDeserializer = src._delegateDeserializer;\n        _propertyBasedCreator = src._propertyBasedCreator;\n\n        _backRefs = src._backRefs;\n        _ignorableProps = src._ignorableProps;\n        _ignoreAllUnknown = (unwrapper != null) || src._ignoreAllUnknown;\n        _anySetter = src._anySetter;\n        _injectables = src._injectables;\n        _objectIdReader = src._objectIdReader;\n\n        _nonStandardCreation = src._nonStandardCreation;\n        UnwrappedPropertyHandler uph = src._unwrappedPropertyHandler;\n\n        if (unwrapper != null) {\n            \n            if (uph != null) { \n                uph = uph.renameAll(unwrapper);\n            }\n            \n            _beanProperties = src._beanProperties.renameAll(unwrapper);\n        } else {\n            _beanProperties = src._beanProperties;\n        }\n        _unwrappedPropertyHandler = uph;\n        _needViewProcesing = src._needViewProcesing;\n        _serializationShape = src._serializationShape;\n\n        \n        _vanillaProcessing = false;\n    }\n\n    public BeanDeserializerBase(BeanDeserializerBase src, ObjectIdReader oir) {\n        super(src._beanType);\n        \n        _classAnnotations = src._classAnnotations;\n        _beanType = src._beanType;\n        \n        _valueInstantiator = src._valueInstantiator;\n        _delegateDeserializer = src._delegateDeserializer;\n        _propertyBasedCreator = src._propertyBasedCreator;\n        \n        _backRefs = src._backRefs;\n        _ignorableProps = src._ignorableProps;\n        _ignoreAllUnknown = src._ignoreAllUnknown;\n        _anySetter = src._anySetter;\n        _injectables = src._injectables;\n        \n        _nonStandardCreation = src._nonStandardCreation;\n        _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n        _needViewProcesing = src._needViewProcesing;\n        _serializationShape = src._serializationShape;\n\n        \n        _objectIdReader = oir;\n\n        if (oir == null) {\n            _beanProperties = src._beanProperties;\n            _vanillaProcessing = src._vanillaProcessing;\n        } else {\n            \n            ObjectIdValueProperty idProp = new ObjectIdValueProperty(oir, PropertyMetadata.STD_REQUIRED);\n            _beanProperties = src._beanProperties.withProperty(idProp);\n            _vanillaProcessing = false;\n        }\n    }\n\n    public BeanDeserializerBase(BeanDeserializerBase src, Set<String> ignorableProps) {\n        super(src._beanType);\n        \n        _classAnnotations = src._classAnnotations;\n        _beanType = src._beanType;\n        \n        _valueInstantiator = src._valueInstantiator;\n        _delegateDeserializer = src._delegateDeserializer;\n        _propertyBasedCreator = src._propertyBasedCreator;\n        \n        _backRefs = src._backRefs;\n        _ignorableProps = ignorableProps;\n        _ignoreAllUnknown = src._ignoreAllUnknown;\n        _anySetter = src._anySetter;\n        _injectables = src._injectables;\n        \n        _nonStandardCreation = src._nonStandardCreation;\n        _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n        _needViewProcesing = src._needViewProcesing;\n        _serializationShape = src._serializationShape;\n\n        _vanillaProcessing = src._vanillaProcessing;\n        _objectIdReader = src._objectIdReader;\n\n        \n        \n        _beanProperties = src._beanProperties.withoutProperties(ignorableProps);\n    }\n\n    \n    protected BeanDeserializerBase(BeanDeserializerBase src, BeanPropertyMap beanProps) {\n        super(src._beanType);\n        \n        _classAnnotations = src._classAnnotations;\n        _beanType = src._beanType;\n        \n        _valueInstantiator = src._valueInstantiator;\n        _delegateDeserializer = src._delegateDeserializer;\n        _propertyBasedCreator = src._propertyBasedCreator;\n        \n        _beanProperties = beanProps;\n        _backRefs = src._backRefs;\n        _ignorableProps = src._ignorableProps;\n        _ignoreAllUnknown = src._ignoreAllUnknown;\n        _anySetter = src._anySetter;\n        _injectables = src._injectables;\n        _objectIdReader = src._objectIdReader;\n        \n        _nonStandardCreation = src._nonStandardCreation;\n        _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n        _needViewProcesing = src._needViewProcesing;\n        _serializationShape = src._serializationShape;\n\n        _vanillaProcessing = src._vanillaProcessing;\n    }\n    \n    @Override\n    public abstract JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper); public abstract BeanDeserializerBase withObjectIdReader(ObjectIdReader oir); public abstract BeanDeserializerBase withIgnorableProperties(Set<String> ignorableProps); public BeanDeserializerBase withBeanProperties(BeanPropertyMap props) {\n        throw new UnsupportedOperationException(\"Class \"+getClass().getName()\n                +\" does not override `withBeanProperties()`, needs to\");\n    }\n    \n    \n    protected abstract BeanDeserializerBase asArrayDeserializer(); @Override public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n        ExternalTypeHandler.Builder extTypes = null;\n        \n        SettableBeanProperty[] creatorProps;\n\n        if (_valueInstantiator.canCreateFromObjectWith()) {\n            creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n\n            \n            \n            \n            \n\n            \n        } else {\n            creatorProps = null;\n        }\n\n        UnwrappedPropertyHandler unwrapped = null;\n\n        for (SettableBeanProperty origProp : _beanProperties) {\n            SettableBeanProperty prop = origProp;\n\n            \n            if (!prop.hasValueDeserializer()) {\n                \n                JsonDeserializer<?> deser = findConvertingDeserializer(ctxt, prop);\n                if (deser == null) {\n                    deser = findDeserializer(ctxt, prop.getType(), prop);\n                }\n                prop = prop.withValueDeserializer(deser);\n            } else { \n                JsonDeserializer<Object> deser = prop.getValueDeserializer();\n                \n                JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop,\n                        prop.getType());\n                if (cd != deser) {\n                    prop = prop.withValueDeserializer(cd);\n                }\n            }\n\n            \n            prop = _resolveManagedReferenceProperty(ctxt, prop);\n\n            \n            if (!(prop instanceof ManagedReferenceProperty)) {\n                prop = _resolvedObjectIdProperty(ctxt, prop);\n            }\n            \n            SettableBeanProperty u = _resolveUnwrappedProperty(ctxt, prop);\n            if (u != null) {\n                prop = u;\n                if (unwrapped == null) {\n                    unwrapped = new UnwrappedPropertyHandler();\n                }\n                unwrapped.addProperty(prop);\n                \n                _beanProperties.remove(prop);\n                continue;\n            }\n            \n            prop = _resolveInnerClassValuedProperty(ctxt, prop);\n            if (prop != origProp) {\n                _beanProperties.replace(prop);\n                \n                if (creatorProps != null) {\n                    \n                    \n                    for (int i = 0, len = creatorProps.length; i < len; ++i) {\n                        if (creatorProps[i] == origProp) {\n                            creatorProps[i] = prop;\n                            break;\n                        }\n                        \n                        \n                        \n                    }\n                }\n            }\n            \n            \n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser = prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes == null) {\n                        extTypes = new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                    \n                    _beanProperties.remove(prop);\n                    continue;\n                }\n            }\n        }\n        \n        if (_anySetter != null && !_anySetter.hasValueDeserializer()) {\n            _anySetter = _anySetter.withValueDeserializer(findDeserializer(ctxt,\n                    _anySetter.getType(), _anySetter.getProperty()));\n        }\n        \n        if (_valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_beanType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            _delegateDeserializer = _findDelegateDeserializer(ctxt, delegateType,\n                    _valueInstantiator.getDelegateCreator());\n        }\n\n        \n        if (_valueInstantiator.canCreateUsingArrayDelegate()) {\n            JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid array-delegate-creator definition for \"+_beanType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'\");\n            }\n            _arrayDelegateDeserializer = _findDelegateDeserializer(ctxt, delegateType,\n                    _valueInstantiator.getArrayDelegateCreator());\n        }\n\n        \n        if (creatorProps != null) {\n            _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        }\n\n        if (extTypes != null) {\n            \n            \n            _externalTypeIdHandler = extTypes.build(_beanProperties);\n            \n            _nonStandardCreation = true;\n        }\n        \n        _unwrappedPropertyHandler = unwrapped;\n        if (unwrapped != null) { \n            _nonStandardCreation = true;\n        }\n\n        \n        _vanillaProcessing = _vanillaProcessing && !_nonStandardCreation;\n    }\n\n    private JsonDeserializer<Object> _findDelegateDeserializer(DeserializationContext ctxt, JavaType delegateType, AnnotatedWithParams delegateCreator) throws JsonMappingException {\n        \n        BeanProperty.Std property = new BeanProperty.Std(TEMP_PROPERTY_NAME,\n                delegateType, null, _classAnnotations, delegateCreator,\n                PropertyMetadata.STD_OPTIONAL);\n\n        TypeDeserializer td = delegateType.getTypeHandler();\n        if (td == null) {\n            td = ctxt.getConfig().findTypeDeserializer(delegateType);\n        }\n        JsonDeserializer<Object> dd = findDeserializer(ctxt, delegateType, property);\n        if (td != null) {\n            td = td.forProperty(property);\n            return new TypeWrappedDeserializer(td, dd);\n        }\n        return dd;\n    }\n\n\n    \n    protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException {\n        final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n        if (intr != null) {\n            Object convDef = intr.findDeserializationConverter(prop.getMember());\n            if (convDef != null) {\n                Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);\n                JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n                JsonDeserializer<?> ser = ctxt.findContextualValueDeserializer(delegateType, prop);\n                return new StdDelegatingDeserializer<Object>(conv, delegateType, ser);\n            }\n        }\n        return null;\n    }\n    \n    \n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n        ObjectIdReader oir = _objectIdReader;\n        \n        \n        final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n        final AnnotatedMember accessor = (property == null || intr == null)\n                ? null : property.getMember();\n        if (accessor != null && intr != null) {\n            ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n            if (objectIdInfo != null) { \n                \n                objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n                \n                Class<?> implClass = objectIdInfo.getGeneratorType();\n                \n                JavaType idType;\n                SettableBeanProperty idProp;\n                ObjectIdGenerator<?> idGen;\n                ObjectIdResolver resolver = ctxt.objectIdResolverInstance(accessor, objectIdInfo);\n                if (implClass == ObjectIdGenerators.PropertyGenerator.class) {\n                    PropertyName propName = objectIdInfo.getPropertyName();\n                    idProp = findProperty(propName);\n                    if (idProp == null) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \"\n                                +handledType().getName()+\": can not find property with name '\"+propName+\"'\");\n                    }\n                    idType = idProp.getType();\n                    idGen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n                } else { \n                    JavaType type = ctxt.constructType(implClass);\n                    idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                    idProp = null;\n                    idGen = ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n                }\n                JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType);\n                oir = ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(),\n                \t\tidGen, deser, idProp, resolver);\n            }\n        }\n        \n        BeanDeserializerBase contextual = this;\n        if (oir != null && oir != _objectIdReader) {\n            contextual = contextual.withObjectIdReader(oir);\n        }\n        \n        if (accessor != null) {\n            JsonIgnoreProperties.Value ignorals = intr.findPropertyIgnorals(accessor);\n            if (ignorals != null) {\n                Set<String> ignored = ignorals.findIgnoredForDeserialization();\n                if (!ignored.isEmpty()) {\n                    Set<String> prev = contextual._ignorableProps;\n                    if ((prev != null) && !prev.isEmpty()) {\n                        ignored = new HashSet<String>(ignored);\n                        ignored.addAll(prev);\n                    }\n                    contextual = contextual.withIgnorableProperties(ignored);\n                }\n            }\n        }\n\n        \n        JsonFormat.Value format = findFormatOverrides(ctxt, property, handledType());\n        JsonFormat.Shape shape = null;\n        if (format != null) {\n            if (format.hasShape()) {\n                shape = format.getShape();\n            }\n            \n            Boolean B = format.getFeature(JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\n            if (B != null) {\n                \n                BeanPropertyMap propsOrig = _beanProperties;\n                BeanPropertyMap props = propsOrig.withCaseInsensitivity(B.booleanValue());\n                if (props != propsOrig) {\n                    contextual = contextual.withBeanProperties(props);\n                }\n            }\n        }\n\n        if (shape == null) {\n            shape = _serializationShape;\n        }\n        if (shape == JsonFormat.Shape.ARRAY) {\n            contextual = contextual.asArrayDeserializer();\n        }\n        return contextual;\n    }\n\n    \n    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n        String refName = prop.getManagedReferenceName();\n        if (refName == null) {\n            return prop;\n        }\n        JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n        SettableBeanProperty backProp = valueDeser.findBackReference(refName);\n        if (backProp == null) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                    +prop.getType());\n        }\n        \n        JavaType referredType = _beanType;\n        JavaType backRefType = backProp.getType();\n        boolean isContainer = prop.getType().isContainerType();\n        if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                    +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n                    +referredType.getRawClass().getName()+\")\");\n        }\n        return new ManagedReferenceProperty(prop, refName, backProp,\n                _classAnnotations, isContainer);\n    }\n\n    \n    protected SettableBeanProperty _resolvedObjectIdProperty(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException {\n        ObjectIdInfo objectIdInfo = prop.getObjectIdInfo();\n        JsonDeserializer<Object> valueDeser = prop.getValueDeserializer();\n        ObjectIdReader objectIdReader = valueDeser.getObjectIdReader();\n        if (objectIdInfo == null && objectIdReader == null) {\n            return prop;\n        }\n        return new ObjectIdReferenceProperty(prop, objectIdInfo);\n    }\n\n    \n    protected SettableBeanProperty _resolveUnwrappedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n        AnnotatedMember am = prop.getMember();\n        if (am != null) {\n            NameTransformer unwrapper = ctxt.getAnnotationIntrospector().findUnwrappingNameTransformer(am);\n            if (unwrapper != null) {\n                JsonDeserializer<Object> orig = prop.getValueDeserializer();\n                JsonDeserializer<Object> unwrapping = orig.unwrappingDeserializer(unwrapper);\n                if (unwrapping != orig && unwrapping != null) {\n                    \n                    return prop.withValueDeserializer(unwrapping);\n                }\n            }\n        }\n        return null;\n    }\n    \n    \n    protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {            \n        \n        JsonDeserializer<Object> deser = prop.getValueDeserializer();\n        \n        if (deser instanceof BeanDeserializerBase) {\n            BeanDeserializerBase bd = (BeanDeserializerBase) deser;\n            ValueInstantiator vi = bd.getValueInstantiator();\n            if (!vi.canCreateUsingDefault()) { \n                Class<?> valueClass = prop.getType().getRawClass();\n                Class<?> enclosing = ClassUtil.getOuterClass(valueClass);\n                \n                if (enclosing != null && enclosing == _beanType.getRawClass()) {\n                    for (Constructor<?> ctor : valueClass.getConstructors()) {\n                        Class<?>[] paramTypes = ctor.getParameterTypes();\n                        if (paramTypes.length == 1 && paramTypes[0] == enclosing) {\n                            if (ctxt.canOverrideAccessModifiers()) {\n                                ClassUtil.checkAndFixAccess(ctor, ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n                            }\n                            return new InnerClassProperty(prop, ctor);\n                        }\n                    }\n                }\n            }\n        }\n        return prop;\n    }\n\n    \n\n    @Override\n    public boolean isCachable() { return true; }\n\n    @Override\n    public Class<?> handledType() {\n        return _beanType.getRawClass();\n    }\n    \n    \n    @Override\n    public ObjectIdReader getObjectIdReader() {\n        return _objectIdReader;\n    }\n    \n    public boolean hasProperty(String propertyName) {\n        return _beanProperties.find(propertyName) != null;\n    }\n\n    public boolean hasViews() {\n        return _needViewProcesing;\n    }\n    \n    \n    public int getPropertyCount() { \n        return _beanProperties.size();\n    }\n\n    @Override\n    public Collection<Object> getKnownPropertyNames() {\n        ArrayList<Object> names = new ArrayList<Object>();\n        for (SettableBeanProperty prop : _beanProperties) {\n            names.add(prop.getName());\n        }\n        return names;\n    }\n\n    \n    @Deprecated\n    public final Class<?> getBeanClass() { return _beanType.getRawClass(); }\n\n    @Override\n    public JavaType getValueType() { return _beanType; }\n\n    \n    public Iterator<SettableBeanProperty> properties() {\n        if (_beanProperties == null) {\n            throw new IllegalStateException(\"Can only call after BeanDeserializer has been resolved\");\n        }\n        return _beanProperties.iterator();\n    }\n\n    \n    public Iterator<SettableBeanProperty> creatorProperties() {\n        if (_propertyBasedCreator == null) {\n            return Collections.<SettableBeanProperty>emptyList().iterator();\n        }\n        return _propertyBasedCreator.properties().iterator();\n    }\n\n    public SettableBeanProperty findProperty(PropertyName propertyName) {\n        \n        return findProperty(propertyName.getSimpleName());\n    }\n    \n    \n    public SettableBeanProperty findProperty(String propertyName) {\n        SettableBeanProperty prop = (_beanProperties == null) ?\n                null : _beanProperties.find(propertyName);\n        if (prop == null && _propertyBasedCreator != null) {\n            prop = _propertyBasedCreator.findCreatorProperty(propertyName);\n        }\n        return prop;\n    }\n\n    \n    public SettableBeanProperty findProperty(int propertyIndex) {\n        SettableBeanProperty prop = (_beanProperties == null) ?\n                null : _beanProperties.find(propertyIndex);\n        if (prop == null && _propertyBasedCreator != null) {\n            prop = _propertyBasedCreator.findCreatorProperty(propertyIndex);\n        }\n        return prop;\n    }\n    \n    \n    @Override\n    public SettableBeanProperty findBackReference(String logicalName) {\n        if (_backRefs == null) {\n            return null;\n        }\n        return _backRefs.get(logicalName);\n    }\n\n    public ValueInstantiator getValueInstantiator() {\n        return _valueInstantiator;\n    }\n\n    \n\n    \n    public void replaceProperty(SettableBeanProperty original, SettableBeanProperty replacement) {\n        _beanProperties.replace(replacement);\n    }\n\n    \n\n    \n    public abstract Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException; @Override public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n        \n        if (_objectIdReader != null) {\n            \n            if (p.canReadObjectId()) {\n                Object id = p.getObjectId();\n                if (id != null) {\n                    Object ob = typeDeserializer.deserializeTypedFromObject(p, ctxt);\n                    return _handleTypedObjectId(p, ctxt, ob, id);\n                }\n            }\n            \n            JsonToken t = p.getCurrentToken();\n            if (t != null) {\n                \n                if (t.isScalarValue()) {\n                    return deserializeFromObjectId(p, ctxt);\n                }\n                \n                if (t == JsonToken.START_OBJECT) {\n                    t = p.nextToken();\n                }\n                if ((t == JsonToken.FIELD_NAME) && _objectIdReader.maySerializeAsObject()\n                        && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {\n                    return deserializeFromObjectId(p, ctxt);\n                }\n            }\n        }\n        \n        return typeDeserializer.deserializeTypedFromObject(p, ctxt);\n    }\n\n    \n    protected Object _handleTypedObjectId(JsonParser p, DeserializationContext ctxt, Object pojo, Object rawId) throws IOException {\n        \n        \n        JsonDeserializer<Object> idDeser = _objectIdReader.getDeserializer();\n        final Object id;\n\n        \n        if (idDeser.handledType() == rawId.getClass()) {\n            \n            id = rawId;\n        } else {\n            id = _convertObjectId(p, ctxt, rawId, idDeser);\n        }\n\n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        roid.bindItem(pojo);\n        \n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp != null) {\n            return idProp.setAndReturn(pojo, id);\n        }\n        return pojo;\n    }\n\n    \n    @SuppressWarnings(\"resource\") \n    protected Object _convertObjectId(JsonParser p, DeserializationContext ctxt, Object rawId, JsonDeserializer<Object> idDeser) throws IOException {\n        TokenBuffer buf = new TokenBuffer(p, ctxt);\n        if (rawId instanceof String) {\n            buf.writeString((String) rawId);\n        } else if (rawId instanceof Long) {\n            buf.writeNumber(((Long) rawId).longValue());\n        } else if (rawId instanceof Integer) {\n            buf.writeNumber(((Integer) rawId).intValue());\n        } else {\n            \n            \n            \n            buf.writeObject(rawId);\n        }\n        JsonParser bufParser = buf.asParser();\n        bufParser.nextToken();\n        return idDeser.deserialize(bufParser, ctxt);\n    }\n\n    \n    \n    protected Object deserializeWithObjectId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        return deserializeFromObject(p, ctxt);\n    }\n\n    \n    protected Object deserializeFromObjectId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        Object id = _objectIdReader.readObjectReference(p, ctxt);\n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        \n        Object pojo = roid.resolve();\n        if (pojo == null) { \n            throw new UnresolvedForwardReference(p,\n                    \"Could not resolve Object Id [\"+id+\"] (for \"+_beanType+\").\",\n                    p.getCurrentLocation(), roid);\n        }\n        return pojo;\n    }\n\n    protected Object deserializeFromObjectUsingNonDefault(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt,\n                    _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return _deserializeUsingPropertyBased(p, ctxt);\n        }\n        \n        if (_beanType.isAbstract()) {\n            return ctxt.handleMissingInstantiator(handledType(), p,\n                    \"abstract type (need to add/enable type information?)\"); } return ctxt.handleMissingInstantiator(_beanType.getRawClass(), p, \"no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)\"); } protected abstract Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException; @SuppressWarnings(\"incomplete-switch\") public Object deserializeFromNumber(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (_objectIdReader != null) {\n            return deserializeFromObjectId(p, ctxt);\n        }\n\n        switch (p.getNumberType()) {\n        case INT:\n            if (_delegateDeserializer != null) {\n                if (!_valueInstantiator.canCreateFromInt()) {\n                    Object bean = _valueInstantiator.createUsingDelegate(ctxt,\n                            _delegateDeserializer.deserialize(p, ctxt));\n                    if (_injectables != null) {\n                        injectValues(ctxt, bean);\n                    }\n                    return bean;\n                }\n            }\n            return _valueInstantiator.createFromInt(ctxt, p.getIntValue());\n        case LONG:\n            if (_delegateDeserializer != null) {\n                if (!_valueInstantiator.canCreateFromInt()) {\n                    Object bean = _valueInstantiator.createUsingDelegate(ctxt,\n                            _delegateDeserializer.deserialize(p, ctxt));\n                    if (_injectables != null) {\n                        injectValues(ctxt, bean);\n                    }\n                    return bean;\n                }\n            }\n            return _valueInstantiator.createFromLong(ctxt, p.getLongValue());\n        }\n        \n        if (_delegateDeserializer != null) {\n            Object bean = _valueInstantiator.createUsingDelegate(ctxt,\n                    _delegateDeserializer.deserialize(p, ctxt));\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            return bean;\n        }\n        return ctxt.handleMissingInstantiator(handledType(), p,\n                \"no suitable creator method found to deserialize from Number value (%s)\",\n                p.getNumberValue());\n    }\n\n    public Object deserializeFromString(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (_objectIdReader != null) {\n            return deserializeFromObjectId(p, ctxt);\n        }\n        \n        \n        if (_delegateDeserializer != null) {\n            if (!_valueInstantiator.canCreateFromString()) {\n                Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                if (_injectables != null) {\n                    injectValues(ctxt, bean);\n                }\n                return bean;\n            }\n        }\n        return _valueInstantiator.createFromString(ctxt, p.getText());\n    }\n\n    \n    public Object deserializeFromDouble(JsonParser p, DeserializationContext ctxt) throws IOException {\n        NumberType t = p.getNumberType();\n        \n        if ((t == NumberType.DOUBLE) || (t == NumberType.FLOAT)) {\n            if (_delegateDeserializer != null) {\n                if (!_valueInstantiator.canCreateFromDouble()) {\n                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                    if (_injectables != null) {\n                        injectValues(ctxt, bean);\n                    }\n                    return bean;\n                }\n            }\n            return _valueInstantiator.createFromDouble(ctxt, p.getDoubleValue());\n        }\n        \n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        return ctxt.handleMissingInstantiator(handledType(), p,\n                \"no suitable creator method found to deserialize from Number value (%s)\",\n                p.getNumberValue());\n    }\n\n    \n    public Object deserializeFromBoolean(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_delegateDeserializer != null) {\n            if (!_valueInstantiator.canCreateFromBoolean()) {\n                Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                if (_injectables != null) {\n                    injectValues(ctxt, bean);\n                }\n                return bean;\n            }\n        }\n        boolean value = (p.getCurrentToken() == JsonToken.VALUE_TRUE);\n        return _valueInstantiator.createFromBoolean(ctxt, value);\n    }\n\n    public Object deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_arrayDelegateDeserializer != null) {\n            try {\n                Object bean = _valueInstantiator.createUsingArrayDelegate(ctxt, _arrayDelegateDeserializer.deserialize(p, ctxt));\n                if (_injectables != null) {\n                    injectValues(ctxt, bean);\n                }\n                return bean;\n            } catch (Exception e) {\n                return wrapInstantiationProblem(e, ctxt);\n            }\n        }\n        \n        if (_delegateDeserializer != null) {\n            try {\n                Object bean = _valueInstantiator.createUsingArrayDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                if (_injectables != null) {\n                    injectValues(ctxt, bean);\n                }\n                return bean;\n            } catch (Exception e) {\n                wrapInstantiationProblem(e, ctxt);\n                return null;\n            }\n        }\n        if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n            JsonToken t = p.nextToken();\n            if (t == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n                return null;\n            }\n            final Object value = deserialize(p, ctxt);\n            if (p.nextToken() != JsonToken.END_ARRAY) {\n                handleMissingEndArrayForSingle(p, ctxt);\n            }\n            return value;\n        }\n        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n            JsonToken t = p.nextToken();\n            if (t == JsonToken.END_ARRAY) {\n                return null;\n            }\n            return ctxt.handleUnexpectedToken(handledType(),\n                    JsonToken.START_ARRAY, p, null);\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    public Object deserializeFromEmbedded(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        \n        if (_objectIdReader != null) {\n            return deserializeFromObjectId(p, ctxt);\n        }\n\n        \n        \n        return p.getEmbeddedObject();\n    }\n\n    \n\n    protected void injectValues(DeserializationContext ctxt, Object bean) throws IOException {\n        for (ValueInjector injector : _injectables) {\n            injector.inject(ctxt, bean);\n        }\n    }\n    \n    \n    @SuppressWarnings(\"resource\")\n    protected Object handleUnknownProperties(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException {\n        \n        unknownTokens.writeEndObject();\n\n        \n        JsonParser bufferParser = unknownTokens.asParser();\n        while (bufferParser.nextToken() != JsonToken.END_OBJECT) {\n            String propName = bufferParser.getCurrentName();\n            \n            bufferParser.nextToken();\n            handleUnknownProperty(bufferParser, ctxt, bean, propName);\n        }\n        return bean;\n    }\n\n    \n    protected void handleUnknownVanilla(JsonParser p, DeserializationContext ctxt, Object bean, String propName) throws IOException {\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, bean, propName);\n        } else if (_anySetter != null) {\n            try {\n               \n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n        } else {\n            \n            handleUnknownProperty(p, ctxt, bean, propName);         \n        }\n    }\n\n    \n    @Override\n    protected void handleUnknownProperty(JsonParser p, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException {\n        if (_ignoreAllUnknown) {\n            p.skipChildren();\n            return;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, beanOrClass, propName);\n        }\n        \n        \n        super.handleUnknownProperty(p, ctxt, beanOrClass, propName);\n    }\n\n    \n    protected void handleIgnoredProperty(JsonParser p, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException {\n        if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES)) {\n            throw IgnoredPropertyException.from(p, beanOrClass, propName, getKnownPropertyNames());\n        }\n        p.skipChildren();\n    }\n    \n    \n    @SuppressWarnings(\"resource\")\n    protected Object handlePolymorphic(JsonParser p, DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException {  \n        \n        JsonDeserializer<Object> subDeser = _findSubclassDeserializer(ctxt, bean, unknownTokens);\n        if (subDeser != null) {\n            if (unknownTokens != null) {\n                \n                unknownTokens.writeEndObject();\n                JsonParser p2 = unknownTokens.asParser();\n                p2.nextToken(); \n                bean = subDeser.deserialize(p2, ctxt, bean);\n            }\n            \n            if (p != null) {\n                bean = subDeser.deserialize(p, ctxt, bean);\n            }\n            return bean;\n        }\n        \n        if (unknownTokens != null) {\n            bean = handleUnknownProperties(ctxt, bean, unknownTokens);\n        }\n        \n        if (p != null) {\n            bean = deserialize(p, ctxt, bean);\n        }\n        return bean;\n    }\n    \n    \n    protected JsonDeserializer<Object> _findSubclassDeserializer(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException {  \n        JsonDeserializer<Object> subDeser;\n\n        \n        synchronized (this) {\n            subDeser = (_subDeserializers == null) ? null : _subDeserializers.get(new ClassKey(bean.getClass()));\n        }\n        if (subDeser != null) {\n            return subDeser;\n        }\n        \n        JavaType type = ctxt.constructType(bean.getClass());\n        \n\n        subDeser = ctxt.findRootValueDeserializer(type);\n        \n        if (subDeser != null) {\n            synchronized (this) {\n                if (_subDeserializers == null) {\n                    _subDeserializers = new HashMap<ClassKey,JsonDeserializer<Object>>();;\n                }\n                _subDeserializers.put(new ClassKey(bean.getClass()), subDeser);\n            }            \n        }\n        return subDeser;\n    }\n    \n    \n\n    \n    public void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException {\n        \n        throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(t, ctxt), bean, fieldName);\n    }\n\n    @Deprecated \n    public void wrapAndThrow(Throwable t, Object bean, int index, DeserializationContext ctxt) throws IOException {\n        \n        throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(t, ctxt), bean, index);\n    }\n\n    private Throwable throwOrReturnThrowable(Throwable t, DeserializationContext ctxt) throws IOException {\n        \n        while (t instanceof InvocationTargetException && t.getCause() != null) {\n            t = t.getCause();\n        }\n        \n        if (t instanceof Error) {\n            throw (Error) t;\n        }\n        boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n        \n        if (t instanceof IOException) {\n            if (!wrap || !(t instanceof JsonProcessingException)) {\n                throw (IOException) t;\n            }\n        } else if (!wrap) { \n            if (t instanceof RuntimeException) {\n                throw (RuntimeException) t;\n            }\n        }\n        return t;\n    }\n\n    protected Object wrapInstantiationProblem(Throwable t, DeserializationContext ctxt) throws IOException {\n        while (t instanceof InvocationTargetException && t.getCause() != null) {\n            t = t.getCause();\n        }\n        \n        if (t instanceof Error) {\n            throw (Error) t;\n        }\n        boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n        if (t instanceof IOException) {\n            \n            throw (IOException) t;\n        } else if (!wrap) { \n            if (t instanceof RuntimeException) {\n                throw (RuntimeException) t;\n            }\n        }\n        return ctxt.handleInstantiationProblem(_beanType.getRawClass(), null, t);\n    }\n}\n",
      "buggy_signatures": [
        "protected BeanDeserializerBase(BeanDeserializerBase src)",
        "protected BeanDeserializerBase(BeanDeserializerBase src, boolean ignoreAllUnknown)",
        "protected BeanDeserializerBase(BeanDeserializerBase src, NameTransformer unwrapper)",
        "public BeanDeserializerBase(BeanDeserializerBase src, ObjectIdReader oir)",
        "public BeanDeserializerBase(BeanDeserializerBase src, Set<String> ignorableProps)",
        "protected BeanDeserializerBase(BeanDeserializerBase src, BeanPropertyMap beanProps)",
        "public abstract JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper); public abstract BeanDeserializerBase withObjectIdReader(ObjectIdReader oir); public abstract BeanDeserializerBase withIgnorableProperties(Set<String> ignorableProps); public BeanDeserializerBase withBeanProperties(BeanPropertyMap props)",
        "protected abstract BeanDeserializerBase asArrayDeserializer(); @Override public void resolve(DeserializationContext ctxt) throws JsonMappingException",
        "private JsonDeserializer<Object> _findDelegateDeserializer(DeserializationContext ctxt, JavaType delegateType, AnnotatedWithParams delegateCreator) throws JsonMappingException",
        "protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException",
        "public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException",
        "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop)",
        "protected SettableBeanProperty _resolvedObjectIdProperty(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException",
        "protected SettableBeanProperty _resolveUnwrappedProperty(DeserializationContext ctxt, SettableBeanProperty prop)",
        "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop)",
        "public boolean isCachable()",
        "public Class<?> handledType()",
        "public ObjectIdReader getObjectIdReader()",
        "public boolean hasProperty(String propertyName)",
        "public boolean hasViews()",
        "public int getPropertyCount()",
        "public Collection<Object> getKnownPropertyNames()",
        "public final Class<?> getBeanClass()",
        "public JavaType getValueType()",
        "public Iterator<SettableBeanProperty> properties()",
        "public Iterator<SettableBeanProperty> creatorProperties()",
        "public SettableBeanProperty findProperty(PropertyName propertyName)",
        "public SettableBeanProperty findProperty(String propertyName)",
        "public SettableBeanProperty findProperty(int propertyIndex)",
        "public SettableBeanProperty findBackReference(String logicalName)",
        "public ValueInstantiator getValueInstantiator()",
        "public void replaceProperty(SettableBeanProperty original, SettableBeanProperty replacement)",
        "public abstract Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException; @Override public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException",
        "protected Object _handleTypedObjectId(JsonParser p, DeserializationContext ctxt, Object pojo, Object rawId) throws IOException",
        "protected Object _convertObjectId(JsonParser p, DeserializationContext ctxt, Object rawId, JsonDeserializer<Object> idDeser) throws IOException",
        "protected Object deserializeWithObjectId(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeFromObjectId(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeFromObjectUsingNonDefault(JsonParser p, DeserializationContext ctxt) throws IOException",
        "abstract type (need to add/enable type information?)\"); } return ctxt.handleMissingInstantiator(_beanType.getRawClass(), p, \"no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)\"); } protected abstract Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException; @SuppressWarnings(\"incomplete-switch\") public Object deserializeFromNumber(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserializeFromString(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserializeFromDouble(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserializeFromBoolean(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserializeFromEmbedded(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected void injectValues(DeserializationContext ctxt, Object bean) throws IOException",
        "protected Object handleUnknownProperties(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException",
        "protected void handleUnknownVanilla(JsonParser p, DeserializationContext ctxt, Object bean, String propName) throws IOException",
        "protected void handleUnknownProperty(JsonParser p, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException",
        "protected void handleIgnoredProperty(JsonParser p, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException",
        "protected Object handlePolymorphic(JsonParser p, DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException",
        "protected JsonDeserializer<Object> _findSubclassDeserializer(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException",
        "synchronized (this)",
        "synchronized (this)",
        "public void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException",
        "public void wrapAndThrow(Throwable t, Object bean, int index, DeserializationContext ctxt) throws IOException",
        "private Throwable throwOrReturnThrowable(Throwable t, DeserializationContext ctxt) throws IOException",
        "protected Object wrapInstantiationProblem(Throwable t, DeserializationContext ctxt) throws IOException"
      ],
      "fixed_signatures": [
        "protected BeanDeserializerBase(BeanDeserializerBase src)",
        "protected BeanDeserializerBase(BeanDeserializerBase src, boolean ignoreAllUnknown)",
        "protected BeanDeserializerBase(BeanDeserializerBase src, NameTransformer unwrapper)",
        "public BeanDeserializerBase(BeanDeserializerBase src, ObjectIdReader oir)",
        "public BeanDeserializerBase(BeanDeserializerBase src, Set<String> ignorableProps)",
        "protected BeanDeserializerBase(BeanDeserializerBase src, BeanPropertyMap beanProps)",
        "public abstract JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper); public abstract BeanDeserializerBase withObjectIdReader(ObjectIdReader oir); public abstract BeanDeserializerBase withIgnorableProperties(Set<String> ignorableProps); public BeanDeserializerBase withBeanProperties(BeanPropertyMap props)",
        "protected abstract BeanDeserializerBase asArrayDeserializer(); @Override public void resolve(DeserializationContext ctxt) throws JsonMappingException",
        "private JsonDeserializer<Object> _findDelegateDeserializer(DeserializationContext ctxt, JavaType delegateType, AnnotatedWithParams delegateCreator) throws JsonMappingException",
        "protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException",
        "public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException",
        "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop)",
        "protected SettableBeanProperty _resolvedObjectIdProperty(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException",
        "protected SettableBeanProperty _resolveUnwrappedProperty(DeserializationContext ctxt, SettableBeanProperty prop)",
        "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop)",
        "public boolean isCachable()",
        "public Class<?> handledType()",
        "public ObjectIdReader getObjectIdReader()",
        "public boolean hasProperty(String propertyName)",
        "public boolean hasViews()",
        "public int getPropertyCount()",
        "public Collection<Object> getKnownPropertyNames()",
        "public final Class<?> getBeanClass()",
        "public JavaType getValueType()",
        "public Iterator<SettableBeanProperty> properties()",
        "public Iterator<SettableBeanProperty> creatorProperties()",
        "public SettableBeanProperty findProperty(PropertyName propertyName)",
        "public SettableBeanProperty findProperty(String propertyName)",
        "public SettableBeanProperty findProperty(int propertyIndex)",
        "public SettableBeanProperty findBackReference(String logicalName)",
        "public ValueInstantiator getValueInstantiator()",
        "public void replaceProperty(SettableBeanProperty original, SettableBeanProperty replacement)",
        "public abstract Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException; @Override public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException",
        "protected Object _handleTypedObjectId(JsonParser p, DeserializationContext ctxt, Object pojo, Object rawId) throws IOException",
        "protected Object _convertObjectId(JsonParser p, DeserializationContext ctxt, Object rawId, JsonDeserializer<Object> idDeser) throws IOException",
        "protected Object deserializeWithObjectId(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeFromObjectId(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeFromObjectUsingNonDefault(JsonParser p, DeserializationContext ctxt) throws IOException",
        "abstract type (need to add/enable type information?)\"); } return ctxt.handleMissingInstantiator(_beanType.getRawClass(), p, \"no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)\"); } protected abstract Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException; @SuppressWarnings(\"incomplete-switch\") public Object deserializeFromNumber(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserializeFromString(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserializeFromDouble(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserializeFromBoolean(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserializeFromEmbedded(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected void injectValues(DeserializationContext ctxt, Object bean) throws IOException",
        "protected Object handleUnknownProperties(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException",
        "protected void handleUnknownVanilla(JsonParser p, DeserializationContext ctxt, Object bean, String propName) throws IOException",
        "protected void handleUnknownProperty(JsonParser p, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException",
        "protected void handleIgnoredProperty(JsonParser p, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException",
        "protected Object handlePolymorphic(JsonParser p, DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException",
        "protected JsonDeserializer<Object> _findSubclassDeserializer(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException",
        "synchronized (this)",
        "synchronized (this)",
        "public void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException",
        "public void wrapAndThrow(Throwable t, Object bean, int index, DeserializationContext ctxt) throws IOException",
        "private Throwable throwOrReturnThrowable(Throwable t, DeserializationContext ctxt) throws IOException",
        "protected Object wrapInstantiationProblem(Throwable t, DeserializationContext ctxt) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n  ExternalTypeHandler.Builder extTypes = null;\n  \n  SettableBeanProperty[] creatorProps;\n\n  if (_valueInstantiator.canCreateFromObjectWith()) {\n  creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n\n  \n  \n  \n  \n\n  \n  } else {\n  creatorProps = null;\n  }\n\n  UnwrappedPropertyHandler unwrapped = null;\n\n  for (SettableBeanProperty origProp : _beanProperties) {\n  SettableBeanProperty prop = origProp;\n\n  \n  if (!prop.hasValueDeserializer()) {\n  \n  JsonDeserializer<?> deser = findConvertingDeserializer(ctxt, prop);\n  if (deser == null) {\n  deser = findDeserializer(ctxt, prop.getType(), prop);\n  }\n  prop = prop.withValueDeserializer(deser);\n  } else { \n  JsonDeserializer<Object> deser = prop.getValueDeserializer();\n  \n  JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop,\n  prop.getType());\n  if (cd != deser) {\n  prop = prop.withValueDeserializer(cd);\n  }\n  }\n\n  \n  prop = _resolveManagedReferenceProperty(ctxt, prop);\n\n  \n  if (!(prop instanceof ManagedReferenceProperty)) {\n  prop = _resolvedObjectIdProperty(ctxt, prop);\n  }\n  \n  SettableBeanProperty u = _resolveUnwrappedProperty(ctxt, prop);\n  if (u != null) {\n  prop = u;\n  if (unwrapped == null) {\n  unwrapped = new UnwrappedPropertyHandler();\n  }\n  unwrapped.addProperty(prop);\n  \n  _beanProperties.remove(prop);\n  continue;\n  }\n  \n  prop = _resolveInnerClassValuedProperty(ctxt, prop);\n  if (prop != origProp) {\n  _beanProperties.replace(prop);\n  \n  if (creatorProps != null) {\n  \n  \n  for (int i = 0, len = creatorProps.length; i < len; ++i) {\n  if (creatorProps[i] == origProp) {\n  creatorProps[i] = prop;\n  break;\n  }\n  \n  \n  \n  }\n  }\n  }\n  \n  \n  if (prop.hasValueTypeDeserializer()) {\n  TypeDeserializer typeDeser = prop.getValueTypeDeserializer();\n  if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n  if (extTypes == null) {\n  extTypes = new ExternalTypeHandler.Builder();\n  }\n  extTypes.addExternal(prop, typeDeser);\n  \n  _beanProperties.remove(prop);\n  continue;\n  }\n  }\n  }\n  \n  if (_anySetter != null && !_anySetter.hasValueDeserializer()) {\n  _anySetter = _anySetter.withValueDeserializer(findDeserializer(ctxt,\n  _anySetter.getType(), _anySetter.getProperty()));\n  }\n  \n  if (_valueInstantiator.canCreateUsingDelegate()) {\n  JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n  if (delegateType == null) {\n  throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_beanType\n  +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n  +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n  }\n  _delegateDeserializer = _findDelegateDeserializer(ctxt, delegateType,\n  _valueInstantiator.getDelegateCreator());\n  }\n\n  \n  if (_valueInstantiator.canCreateUsingArrayDelegate()) {\n  JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n  if (delegateType == null) {\n  throw new IllegalArgumentException(\"Invalid array-delegate-creator definition for \"+_beanType\n  +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n  +\") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'\");\n  }\n  _arrayDelegateDeserializer = _findDelegateDeserializer(ctxt, delegateType,\n  _valueInstantiator.getArrayDelegateCreator());\n  }\n\n  \n  if (creatorProps != null) {\n  _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n  }\n\n  if (extTypes != null) {\n  \n  \n  _externalTypeIdHandler = extTypes.build();\n  \n  _nonStandardCreation = true;\n  }\n  \n  _unwrappedPropertyHandler = unwrapped;\n  if (unwrapped != null) { \n  _nonStandardCreation = true;\n  }\n\n  \n  _vanillaProcessing = _vanillaProcessing && !_nonStandardCreation;\n  }",
          "fixed_method": "  public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n  ExternalTypeHandler.Builder extTypes = null;\n  \n  SettableBeanProperty[] creatorProps;\n\n  if (_valueInstantiator.canCreateFromObjectWith()) {\n  creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n\n  \n  \n  \n  \n\n  \n  } else {\n  creatorProps = null;\n  }\n\n  UnwrappedPropertyHandler unwrapped = null;\n\n  for (SettableBeanProperty origProp : _beanProperties) {\n  SettableBeanProperty prop = origProp;\n\n  \n  if (!prop.hasValueDeserializer()) {\n  \n  JsonDeserializer<?> deser = findConvertingDeserializer(ctxt, prop);\n  if (deser == null) {\n  deser = findDeserializer(ctxt, prop.getType(), prop);\n  }\n  prop = prop.withValueDeserializer(deser);\n  } else { \n  JsonDeserializer<Object> deser = prop.getValueDeserializer();\n  \n  JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop,\n  prop.getType());\n  if (cd != deser) {\n  prop = prop.withValueDeserializer(cd);\n  }\n  }\n\n  \n  prop = _resolveManagedReferenceProperty(ctxt, prop);\n\n  \n  if (!(prop instanceof ManagedReferenceProperty)) {\n  prop = _resolvedObjectIdProperty(ctxt, prop);\n  }\n  \n  SettableBeanProperty u = _resolveUnwrappedProperty(ctxt, prop);\n  if (u != null) {\n  prop = u;\n  if (unwrapped == null) {\n  unwrapped = new UnwrappedPropertyHandler();\n  }\n  unwrapped.addProperty(prop);\n  \n  _beanProperties.remove(prop);\n  continue;\n  }\n  \n  prop = _resolveInnerClassValuedProperty(ctxt, prop);\n  if (prop != origProp) {\n  _beanProperties.replace(prop);\n  \n  if (creatorProps != null) {\n  \n  \n  for (int i = 0, len = creatorProps.length; i < len; ++i) {\n  if (creatorProps[i] == origProp) {\n  creatorProps[i] = prop;\n  break;\n  }\n  \n  \n  \n  }\n  }\n  }\n  \n  \n  if (prop.hasValueTypeDeserializer()) {\n  TypeDeserializer typeDeser = prop.getValueTypeDeserializer();\n  if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n  if (extTypes == null) {\n  extTypes = new ExternalTypeHandler.Builder();\n  }\n  extTypes.addExternal(prop, typeDeser);\n  \n  _beanProperties.remove(prop);\n  continue;\n  }\n  }\n  }\n  \n  if (_anySetter != null && !_anySetter.hasValueDeserializer()) {\n  _anySetter = _anySetter.withValueDeserializer(findDeserializer(ctxt,\n  _anySetter.getType(), _anySetter.getProperty()));\n  }\n  \n  if (_valueInstantiator.canCreateUsingDelegate()) {\n  JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n  if (delegateType == null) {\n  throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_beanType\n  +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n  +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n  }\n  _delegateDeserializer = _findDelegateDeserializer(ctxt, delegateType,\n  _valueInstantiator.getDelegateCreator());\n  }\n\n  \n  if (_valueInstantiator.canCreateUsingArrayDelegate()) {\n  JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n  if (delegateType == null) {\n  throw new IllegalArgumentException(\"Invalid array-delegate-creator definition for \"+_beanType\n  +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n  +\") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'\");\n  }\n  _arrayDelegateDeserializer = _findDelegateDeserializer(ctxt, delegateType,\n  _valueInstantiator.getArrayDelegateCreator());\n  }\n\n  \n  if (creatorProps != null) {\n  _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n  }\n\n  if (extTypes != null) {\n  \n  \n  _externalTypeIdHandler = extTypes.build(_beanProperties);\n  \n  _nonStandardCreation = true;\n  }\n  \n  _unwrappedPropertyHandler = unwrapped;\n  if (unwrapped != null) { \n  _nonStandardCreation = true;\n  }\n\n  \n  _vanillaProcessing = _vanillaProcessing && !_nonStandardCreation;\n  }",
          "diff": [
            "@@ -609,7 +609,7 @@",
            "         if (extTypes != null) {\n",
            "             // 21-Jun-2016, tatu: related to [databind#999], may need to link type ids too,\n",
            "             //    so need to pass collected properties\n",
            "-            _externalTypeIdHandler = extTypes.build();\n",
            "+            _externalTypeIdHandler = extTypes.build(_beanProperties);\n",
            "             // we consider this non-standard, to offline handling\n",
            "             _nonStandardCreation = true;\n",
            "         }\n"
          ],
          "changed_lines": 2
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens) {\n        _properties = properties;\n        _nameToPropertyIndex = nameToPropertyIndex;\n        _typeIds = typeIds;\n        _tokens = tokens;\n    }\n\n    protected ExternalTypeHandler(ExternalTypeHandler h) {\n        _properties = h._properties;\n        _nameToPropertyIndex = h._nameToPropertyIndex;\n        int len = _properties.length;\n        _typeIds = new String[len];\n        _tokens = new TokenBuffer[len];\n    }\n\n    \n    public ExternalTypeHandler start() {\n        return new ExternalTypeHandler(this);\n    }\n\n    \n    public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Integer I = _nameToPropertyIndex.get(propName);\n        if (I == null) {\n            return false;\n        }\n        int index = I.intValue();\n        ExtTypedProperty prop = _properties[index];\n        if (!prop.hasTypePropertyName(propName)) {\n            return false;\n        }\n        String typeId = p.getText();\n        \n        boolean canDeserialize = (bean != null) && (_tokens[index] != null);\n        \n        if (canDeserialize) {\n            _deserializeAndSet(p, ctxt, bean, index, typeId);\n            \n            _tokens[index] = null;\n        } else {\n            _typeIds[index] = typeId;\n        }\n        return true;\n    }\n\n    \n    public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Integer I = _nameToPropertyIndex.get(propName);\n        if (I == null) {\n            return false;\n        }\n        int index = I.intValue();\n        ExtTypedProperty prop = _properties[index];\n        boolean canDeserialize;\n        if (prop.hasTypePropertyName(propName)) {\n            _typeIds[index] = p.getText();\n            p.skipChildren();\n            canDeserialize = (bean != null) && (_tokens[index] != null);\n        } else {\n            @SuppressWarnings(\"resource\")\n            TokenBuffer tokens = new TokenBuffer(p, ctxt);\n            tokens.copyCurrentStructure(p);\n            _tokens[index] = tokens;\n            canDeserialize = (bean != null) && (_typeIds[index] != null);\n        }\n        \n        if (canDeserialize) {\n            String typeId = _typeIds[index];\n            \n            _typeIds[index] = null;\n            _deserializeAndSet(p, ctxt, bean, index, typeId);\n            _tokens[index] = null;\n        }\n        return true;\n    }\n\n    \n    @SuppressWarnings(\"resource\")\n    public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        for (int i = 0, len = _properties.length; i < len; ++i) {\n            String typeId = _typeIds[i];\n            if (typeId == null) {\n                TokenBuffer tokens = _tokens[i];\n                \n                \n                if (tokens == null) {\n                    continue;\n                }\n                \n                \n                JsonToken t = tokens.firstToken();\n                if (t != null && t.isScalarValue()) {\n                    JsonParser buffered = tokens.asParser(p);\n                    buffered.nextToken();\n                    SettableBeanProperty extProp = _properties[i].getProperty();\n                    Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType());\n                    if (result != null) {\n                        extProp.set(bean, result);\n                        continue;\n                    }\n                    \n                    if (!_properties[i].hasDefaultType()) {\n                        ctxt.reportMappingException(\"Missing external type id property '%s'\",\n                                _properties[i].getTypePropertyName());                                \n                    } else  {\n                        typeId = _properties[i].getDefaultTypeId();\n                    }\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = _properties[i].getProperty();\n                ctxt.reportMappingException(\"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            _deserializeAndSet(p, ctxt, bean, i, typeId);\n        }\n        return bean;\n    }\n\n    \n    public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException {\n        \n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            final ExtTypedProperty extProp = _properties[i];\n\n            if (typeId == null) {\n                \n                if (_tokens[i] == null) {\n                    continue;\n                }\n                \n                \n                if (!extProp.hasDefaultType()) {\n                    ctxt.reportMappingException(\"Missing external type id property '%s'\",\n                            extProp.getTypePropertyName());\n                } else {\n                    typeId = extProp.getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = extProp.getProperty();\n                ctxt.reportMappingException(\"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            values[i] = _deserialize(p, ctxt, i, typeId);\n\n            final SettableBeanProperty prop = extProp.getProperty();\n            \n            if (prop.getCreatorIndex() >= 0) {\n                buffer.assignParameter(prop, values[i]);\n\n                \n                SettableBeanProperty typeProp = extProp.getTypeProperty();\n                \n                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                    buffer.assignParameter(typeProp, typeId);\n                }\n            }\n        }\n\n        Object bean = creator.build(ctxt, buffer);\n        \n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (prop.getCreatorIndex() < 0) {\n                prop.set(bean, values[i]);\n            }\n        }\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException {\n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        if (t == JsonToken.VALUE_NULL) {\n            return null;\n        }\n        TokenBuffer merged = new TokenBuffer(p, ctxt);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        return _properties[index].getProperty().deserialize(mp, ctxt);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException {\n        \n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        if (t == JsonToken.VALUE_NULL) {\n            _properties[index].getProperty().set(bean, null);\n            return;\n        }\n        TokenBuffer merged = new TokenBuffer(p, ctxt);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n\n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean);\n    }\n\n    \n    \n    public static class Builder { private final ArrayList<ExtTypedProperty> _properties = new ArrayList<ExtTypedProperty>(); private final HashMap<String, Integer> _nameToPropertyIndex = new HashMap<String, Integer>(); public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            Integer index = _properties.size();\n            _properties.add(new ExtTypedProperty(property, typeDeser));\n            _nameToPropertyIndex.put(property.getName(), index);\n            _nameToPropertyIndex.put(typeDeser.getPropertyName(), index);\n        }\n\n        \n            \n\n        @Deprecated \n        public ExternalTypeHandler build() {\n            return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]),\n                    _nameToPropertyIndex, null, null);\n        }\n    }\n\n    private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            _property = property;\n            _typeDeserializer = typeDeser;\n            _typePropertyName = typeDeser.getPropertyName();\n        }\n\n        \n        public void linkTypeProperty(SettableBeanProperty p) {\n            _typeProperty = p;\n        }\n\n        public boolean hasTypePropertyName(String n) {\n            return n.equals(_typePropertyName);\n        }\n\n        public boolean hasDefaultType() {\n            return _typeDeserializer.getDefaultImpl() != null;\n        }\n\n        \n        public String getDefaultTypeId() {\n            Class<?> defaultType = _typeDeserializer.getDefaultImpl();\n            if (defaultType == null) {\n                return null;\n            }\n            return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType);\n        }\n\n        public String getTypePropertyName() { return _typePropertyName; }\n\n        public SettableBeanProperty getProperty() {\n            return _property;\n        }\n\n        \n        public SettableBeanProperty getTypeProperty() {\n            return _typeProperty;\n        }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens) {\n        _properties = properties;\n        _nameToPropertyIndex = nameToPropertyIndex;\n        _typeIds = typeIds;\n        _tokens = tokens;\n    }\n\n    protected ExternalTypeHandler(ExternalTypeHandler h) {\n        _properties = h._properties;\n        _nameToPropertyIndex = h._nameToPropertyIndex;\n        int len = _properties.length;\n        _typeIds = new String[len];\n        _tokens = new TokenBuffer[len];\n    }\n\n    \n    public ExternalTypeHandler start() {\n        return new ExternalTypeHandler(this);\n    }\n\n    \n    public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Integer I = _nameToPropertyIndex.get(propName);\n        if (I == null) {\n            return false;\n        }\n        int index = I.intValue();\n        ExtTypedProperty prop = _properties[index];\n        if (!prop.hasTypePropertyName(propName)) {\n            return false;\n        }\n        String typeId = p.getText();\n        \n        boolean canDeserialize = (bean != null) && (_tokens[index] != null);\n        \n        if (canDeserialize) {\n            _deserializeAndSet(p, ctxt, bean, index, typeId);\n            \n            _tokens[index] = null;\n        } else {\n            _typeIds[index] = typeId;\n        }\n        return true;\n    }\n\n    \n    public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Integer I = _nameToPropertyIndex.get(propName);\n        if (I == null) {\n            return false;\n        }\n        int index = I.intValue();\n        ExtTypedProperty prop = _properties[index];\n        boolean canDeserialize;\n        if (prop.hasTypePropertyName(propName)) {\n            _typeIds[index] = p.getText();\n            p.skipChildren();\n            canDeserialize = (bean != null) && (_tokens[index] != null);\n        } else {\n            @SuppressWarnings(\"resource\")\n            TokenBuffer tokens = new TokenBuffer(p, ctxt);\n            tokens.copyCurrentStructure(p);\n            _tokens[index] = tokens;\n            canDeserialize = (bean != null) && (_typeIds[index] != null);\n        }\n        \n        if (canDeserialize) {\n            String typeId = _typeIds[index];\n            \n            _typeIds[index] = null;\n            _deserializeAndSet(p, ctxt, bean, index, typeId);\n            _tokens[index] = null;\n        }\n        return true;\n    }\n\n    \n    @SuppressWarnings(\"resource\")\n    public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        for (int i = 0, len = _properties.length; i < len; ++i) {\n            String typeId = _typeIds[i];\n            if (typeId == null) {\n                TokenBuffer tokens = _tokens[i];\n                \n                \n                if (tokens == null) {\n                    continue;\n                }\n                \n                \n                JsonToken t = tokens.firstToken();\n                if (t != null && t.isScalarValue()) {\n                    JsonParser buffered = tokens.asParser(p);\n                    buffered.nextToken();\n                    SettableBeanProperty extProp = _properties[i].getProperty();\n                    Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType());\n                    if (result != null) {\n                        extProp.set(bean, result);\n                        continue;\n                    }\n                    \n                    if (!_properties[i].hasDefaultType()) {\n                        ctxt.reportMappingException(\"Missing external type id property '%s'\",\n                                _properties[i].getTypePropertyName());                                \n                    } else  {\n                        typeId = _properties[i].getDefaultTypeId();\n                    }\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = _properties[i].getProperty();\n                ctxt.reportMappingException(\"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            _deserializeAndSet(p, ctxt, bean, i, typeId);\n        }\n        return bean;\n    }\n\n    \n    public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException {\n        \n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            final ExtTypedProperty extProp = _properties[i];\n\n            if (typeId == null) {\n                \n                if (_tokens[i] == null) {\n                    continue;\n                }\n                \n                \n                if (!extProp.hasDefaultType()) {\n                    ctxt.reportMappingException(\"Missing external type id property '%s'\",\n                            extProp.getTypePropertyName());\n                } else {\n                    typeId = extProp.getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = extProp.getProperty();\n                ctxt.reportMappingException(\"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            values[i] = _deserialize(p, ctxt, i, typeId);\n\n            final SettableBeanProperty prop = extProp.getProperty();\n            \n            if (prop.getCreatorIndex() >= 0) {\n                buffer.assignParameter(prop, values[i]);\n\n                \n                SettableBeanProperty typeProp = extProp.getTypeProperty();\n                \n                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                    buffer.assignParameter(typeProp, typeId);\n                }\n            }\n        }\n\n        Object bean = creator.build(ctxt, buffer);\n        \n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (prop.getCreatorIndex() < 0) {\n                prop.set(bean, values[i]);\n            }\n        }\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException {\n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        if (t == JsonToken.VALUE_NULL) {\n            return null;\n        }\n        TokenBuffer merged = new TokenBuffer(p, ctxt);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        return _properties[index].getProperty().deserialize(mp, ctxt);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException {\n        \n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        if (t == JsonToken.VALUE_NULL) {\n            _properties[index].getProperty().set(bean, null);\n            return;\n        }\n        TokenBuffer merged = new TokenBuffer(p, ctxt);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n\n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean);\n    }\n\n    \n    \n    public static class Builder { private final ArrayList<ExtTypedProperty> _properties = new ArrayList<ExtTypedProperty>(); private final HashMap<String, Integer> _nameToPropertyIndex = new HashMap<String, Integer>(); public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            Integer index = _properties.size();\n            _properties.add(new ExtTypedProperty(property, typeDeser));\n            _nameToPropertyIndex.put(property.getName(), index);\n            _nameToPropertyIndex.put(typeDeser.getPropertyName(), index);\n        }\n\n        \n        public ExternalTypeHandler build(BeanPropertyMap otherProps) {\n            \n            final int len = _properties.size();\n            ExtTypedProperty[] extProps = new ExtTypedProperty[len];\n            for (int i = 0; i < len; ++i) {\n                ExtTypedProperty extProp = _properties.get(i);\n                String typePropId = extProp.getTypePropertyName();\n                SettableBeanProperty typeProp = otherProps.find(typePropId);\n                if (typeProp != null) {\n                    extProp.linkTypeProperty(typeProp);\n                }\n                extProps[i] = extProp;\n            }\n            return new ExternalTypeHandler(extProps, _nameToPropertyIndex, null, null);\n        }\n\n        @Deprecated \n        public ExternalTypeHandler build() {\n            return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]),\n                    _nameToPropertyIndex, null, null);\n        }\n    }\n\n    private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            _property = property;\n            _typeDeserializer = typeDeser;\n            _typePropertyName = typeDeser.getPropertyName();\n        }\n\n        \n        public void linkTypeProperty(SettableBeanProperty p) {\n            _typeProperty = p;\n        }\n\n        public boolean hasTypePropertyName(String n) {\n            return n.equals(_typePropertyName);\n        }\n\n        public boolean hasDefaultType() {\n            return _typeDeserializer.getDefaultImpl() != null;\n        }\n\n        \n        public String getDefaultTypeId() {\n            Class<?> defaultType = _typeDeserializer.getDefaultImpl();\n            if (defaultType == null) {\n                return null;\n            }\n            return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType);\n        }\n\n        public String getTypePropertyName() { return _typePropertyName; }\n\n        public SettableBeanProperty getProperty() {\n            return _property;\n        }\n\n        \n        public SettableBeanProperty getTypeProperty() {\n            return _typeProperty;\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens)",
        "protected ExternalTypeHandler(ExternalTypeHandler h)",
        "public ExternalTypeHandler start()",
        "public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException",
        "protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException",
        "protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException",
        "public ExternalTypeHandler build()",
        "private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser)",
        "public void linkTypeProperty(SettableBeanProperty p)",
        "public boolean hasTypePropertyName(String n)",
        "public boolean hasDefaultType()",
        "public String getDefaultTypeId()",
        "public String getTypePropertyName()",
        "public SettableBeanProperty getProperty()",
        "public SettableBeanProperty getTypeProperty()"
      ],
      "fixed_signatures": [
        "public class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens)",
        "protected ExternalTypeHandler(ExternalTypeHandler h)",
        "public ExternalTypeHandler start()",
        "public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException",
        "protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException",
        "protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException",
        "public ExternalTypeHandler build(BeanPropertyMap otherProps)",
        "public ExternalTypeHandler build()",
        "private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser)",
        "public void linkTypeProperty(SettableBeanProperty p)",
        "public boolean hasTypePropertyName(String n)",
        "public boolean hasDefaultType()",
        "public String getDefaultTypeId()",
        "public String getTypePropertyName()",
        "public SettableBeanProperty getProperty()",
        "public SettableBeanProperty getTypeProperty()"
      ],
      "methods": [
        {
          "buggy_method": "  public ExternalTypeHandler build() {\n  return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]),\n  _nameToPropertyIndex, null, null);\n  }",
          "fixed_method": "  public ExternalTypeHandler build(BeanPropertyMap otherProps) {\n  \n  final int len = _properties.size();\n  ExtTypedProperty[] extProps = new ExtTypedProperty[len];\n  for (int i = 0; i < len; ++i) {\n  ExtTypedProperty extProp = _properties.get(i);\n  String typePropId = extProp.getTypePropertyName();\n  SettableBeanProperty typeProp = otherProps.find(typePropId);\n  if (typeProp != null) {\n  extProp.linkTypeProperty(typeProp);\n  }\n  extProps[i] = extProp;\n  }\n  return new ExternalTypeHandler(extProps, _nameToPropertyIndex, null, null);\n  }",
          "diff": [
            "@@ -307,7 +307,21 @@",
            "          *\n",
            "          * @since 2.8\n",
            "          */\n",
            "+        public ExternalTypeHandler build(BeanPropertyMap otherProps) {\n",
            "             // 21-Jun-2016, tatu: as per [databind#999], may need to link type id property also\n",
            "+            final int len = _properties.size();\n",
            "+            ExtTypedProperty[] extProps = new ExtTypedProperty[len];\n",
            "+            for (int i = 0; i < len; ++i) {\n",
            "+                ExtTypedProperty extProp = _properties.get(i);\n",
            "+                String typePropId = extProp.getTypePropertyName();\n",
            "+                SettableBeanProperty typeProp = otherProps.find(typePropId);\n",
            "+                if (typeProp != null) {\n",
            "+                    extProp.linkTypeProperty(typeProp);\n",
            "+                }\n",
            "+                extProps[i] = extProp;\n",
            "+            }\n",
            "+            return new ExternalTypeHandler(extProps, _nameToPropertyIndex, null, null);\n",
            "+        }\n",
            " \n",
            "         @Deprecated // since 2.8; may be removed as early as 2.9\n",
            "         public ExternalTypeHandler build() {\n"
          ],
          "changed_lines": 14
        }
      ]
    }
  ]
}
