{
  "bug_id": "1",
  "failed_tests": {
    "org.apache.commons.codec.language.CaverphoneTest": [
      {
        "methodName": "testLocaleIndependence",
        "error": "junit.framework.ComparisonFailure",
        "message": "tr:  expected:<[A]111111111> but was:<[1]111111111>",
        "fail_line": "",
        "test_source": "",
        "stack": [
          "StringEncoderAbstractTest.testLocaleIndependence line 91"
        ]
      }
    ],
    "org.apache.commons.codec.language.DoubleMetaphoneTest": [
      {
        "methodName": "testLocaleIndependence",
        "error": "junit.framework.ComparisonFailure",
        "message": "tr:  expected:<[I]> but was:<[İ]>",
        "fail_line": "",
        "test_source": "",
        "stack": [
          "StringEncoderAbstractTest.testLocaleIndependence line 91"
        ]
      }
    ],
    "org.apache.commons.codec.language.MetaphoneTest": [
      {
        "methodName": "testLocaleIndependence",
        "error": "junit.framework.ComparisonFailure",
        "message": "tr:  expected:<[I]> but was:<[İ]>",
        "fail_line": "",
        "test_source": "",
        "stack": [
          "StringEncoderAbstractTest.testLocaleIndependence line 91"
        ]
      }
    ],
    "org.apache.commons.codec.language.RefinedSoundexTest": [
      {
        "methodName": "testLocaleIndependence",
        "error": "junit.framework.AssertionFailedError",
        "message": "tr: Index 239 out of bounds for length 26",
        "fail_line": "",
        "test_source": "",
        "stack": [
          "StringEncoderAbstractTest.testLocaleIndependence line 89"
        ]
      }
    ],
    "org.apache.commons.codec.language.SoundexTest": [
      {
        "methodName": "testLocaleIndependence",
        "error": "junit.framework.AssertionFailedError",
        "message": "tr: The character is not mapped: İ",
        "fail_line": "",
        "test_source": "",
        "stack": [
          "StringEncoderAbstractTest.testLocaleIndependence line 89"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/codec/language/Caverphone.java",
      "buggy_full_code": "\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\npublic class Caverphone implements StringEncoder { public Caverphone() {\n        super();\n    }\n\n    \n    public String caverphone(String txt) {\n        \n        \n\n        if( txt == null || txt.length() == 0 ) {\n            return \"1111111111\";\n        }\n\n        \n        txt = txt.toLowerCase();\n\n        \n        txt = txt.replaceAll(\"[^a-z]\", \"\");\n\n        \n        txt = txt.replaceAll(\"e$\", \"\");             \n\n        \n        txt = txt.replaceAll(\"^cough\", \"cou2f\");\n        txt = txt.replaceAll(\"^rough\", \"rou2f\");\n        txt = txt.replaceAll(\"^tough\", \"tou2f\");\n        txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n        txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n        txt = txt.replaceAll(\"^gn\", \"2n\");\n        txt = txt.replaceAll(\"^mb\", \"m2\");\n\n        \n        txt = txt.replaceAll(\"cq\", \"2q\");\n        txt = txt.replaceAll(\"ci\", \"si\");\n        txt = txt.replaceAll(\"ce\", \"se\");\n        txt = txt.replaceAll(\"cy\", \"sy\");\n        txt = txt.replaceAll(\"tch\", \"2ch\");\n        txt = txt.replaceAll(\"c\", \"k\");\n        txt = txt.replaceAll(\"q\", \"k\");\n        txt = txt.replaceAll(\"x\", \"k\");\n        txt = txt.replaceAll(\"v\", \"f\");\n        txt = txt.replaceAll(\"dg\", \"2g\");\n        txt = txt.replaceAll(\"tio\", \"sio\");\n        txt = txt.replaceAll(\"tia\", \"sia\");\n        txt = txt.replaceAll(\"d\", \"t\");\n        txt = txt.replaceAll(\"ph\", \"fh\");\n        txt = txt.replaceAll(\"b\", \"p\");\n        txt = txt.replaceAll(\"sh\", \"s2\");\n        txt = txt.replaceAll(\"z\", \"s\");\n        txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n        txt = txt.replaceAll(\"[aeiou]\", \"3\");\n        txt = txt.replaceAll(\"j\", \"y\");        \n        txt = txt.replaceAll(\"^y3\", \"Y3\");     \n        txt = txt.replaceAll(\"^y\", \"A\");       \n        txt = txt.replaceAll(\"y\", \"3\");        \n        txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n        txt = txt.replaceAll(\"gh\", \"22\");\n        txt = txt.replaceAll(\"g\", \"k\");\n        txt = txt.replaceAll(\"s+\", \"S\");\n        txt = txt.replaceAll(\"t+\", \"T\");\n        txt = txt.replaceAll(\"p+\", \"P\");\n        txt = txt.replaceAll(\"k+\", \"K\");\n        txt = txt.replaceAll(\"f+\", \"F\");\n        txt = txt.replaceAll(\"m+\", \"M\");\n        txt = txt.replaceAll(\"n+\", \"N\");\n        txt = txt.replaceAll(\"w3\", \"W3\");\n        \n        txt = txt.replaceAll(\"wh3\", \"Wh3\");\n        txt = txt.replaceAll(\"w$\", \"3\");       \n        \n        txt = txt.replaceAll(\"w\", \"2\");\n        txt = txt.replaceAll(\"^h\", \"A\");\n        txt = txt.replaceAll(\"h\", \"2\");\n        txt = txt.replaceAll(\"r3\", \"R3\");\n        txt = txt.replaceAll(\"r$\", \"3\");       \n        \n        txt = txt.replaceAll(\"r\", \"2\");\n        txt = txt.replaceAll(\"l3\", \"L3\");\n        txt = txt.replaceAll(\"l$\", \"3\");       \n        \n        txt = txt.replaceAll(\"l\", \"2\");\n        \n        \n        \n\n        \n        txt = txt.replaceAll(\"2\", \"\");\n        txt = txt.replaceAll(\"3$\", \"A\");       \n        txt = txt.replaceAll(\"3\", \"\");\n\n        \n        txt = txt + \"111111\" + \"1111\";        \n\n        \n        return txt.substring(0, 10);          \n    }\n\n    \n    public Object encode(Object pObject) throws EncoderException {\n        if (!(pObject instanceof java.lang.String)) {\n            throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\"); \n        }\n        return caverphone((String) pObject);\n    }\n\n    \n    public String encode(String pString) {\n        return caverphone(pString);   \n    }\n\n    \n    public boolean isCaverphoneEqual(String str1, String str2) {\n        return caverphone(str1).equals(caverphone(str2));\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\npublic class Caverphone implements StringEncoder { public Caverphone() {\n        super();\n    }\n\n    \n    public String caverphone(String txt) {\n        \n        \n\n        if( txt == null || txt.length() == 0 ) {\n            return \"1111111111\";\n        }\n\n        \n        txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n\n        \n        txt = txt.replaceAll(\"[^a-z]\", \"\");\n\n        \n        txt = txt.replaceAll(\"e$\", \"\");             \n\n        \n        txt = txt.replaceAll(\"^cough\", \"cou2f\");\n        txt = txt.replaceAll(\"^rough\", \"rou2f\");\n        txt = txt.replaceAll(\"^tough\", \"tou2f\");\n        txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n        txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n        txt = txt.replaceAll(\"^gn\", \"2n\");\n        txt = txt.replaceAll(\"^mb\", \"m2\");\n\n        \n        txt = txt.replaceAll(\"cq\", \"2q\");\n        txt = txt.replaceAll(\"ci\", \"si\");\n        txt = txt.replaceAll(\"ce\", \"se\");\n        txt = txt.replaceAll(\"cy\", \"sy\");\n        txt = txt.replaceAll(\"tch\", \"2ch\");\n        txt = txt.replaceAll(\"c\", \"k\");\n        txt = txt.replaceAll(\"q\", \"k\");\n        txt = txt.replaceAll(\"x\", \"k\");\n        txt = txt.replaceAll(\"v\", \"f\");\n        txt = txt.replaceAll(\"dg\", \"2g\");\n        txt = txt.replaceAll(\"tio\", \"sio\");\n        txt = txt.replaceAll(\"tia\", \"sia\");\n        txt = txt.replaceAll(\"d\", \"t\");\n        txt = txt.replaceAll(\"ph\", \"fh\");\n        txt = txt.replaceAll(\"b\", \"p\");\n        txt = txt.replaceAll(\"sh\", \"s2\");\n        txt = txt.replaceAll(\"z\", \"s\");\n        txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n        txt = txt.replaceAll(\"[aeiou]\", \"3\");\n        txt = txt.replaceAll(\"j\", \"y\");        \n        txt = txt.replaceAll(\"^y3\", \"Y3\");     \n        txt = txt.replaceAll(\"^y\", \"A\");       \n        txt = txt.replaceAll(\"y\", \"3\");        \n        txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n        txt = txt.replaceAll(\"gh\", \"22\");\n        txt = txt.replaceAll(\"g\", \"k\");\n        txt = txt.replaceAll(\"s+\", \"S\");\n        txt = txt.replaceAll(\"t+\", \"T\");\n        txt = txt.replaceAll(\"p+\", \"P\");\n        txt = txt.replaceAll(\"k+\", \"K\");\n        txt = txt.replaceAll(\"f+\", \"F\");\n        txt = txt.replaceAll(\"m+\", \"M\");\n        txt = txt.replaceAll(\"n+\", \"N\");\n        txt = txt.replaceAll(\"w3\", \"W3\");\n        \n        txt = txt.replaceAll(\"wh3\", \"Wh3\");\n        txt = txt.replaceAll(\"w$\", \"3\");       \n        \n        txt = txt.replaceAll(\"w\", \"2\");\n        txt = txt.replaceAll(\"^h\", \"A\");\n        txt = txt.replaceAll(\"h\", \"2\");\n        txt = txt.replaceAll(\"r3\", \"R3\");\n        txt = txt.replaceAll(\"r$\", \"3\");       \n        \n        txt = txt.replaceAll(\"r\", \"2\");\n        txt = txt.replaceAll(\"l3\", \"L3\");\n        txt = txt.replaceAll(\"l$\", \"3\");       \n        \n        txt = txt.replaceAll(\"l\", \"2\");\n        \n        \n        \n\n        \n        txt = txt.replaceAll(\"2\", \"\");\n        txt = txt.replaceAll(\"3$\", \"A\");       \n        txt = txt.replaceAll(\"3\", \"\");\n\n        \n        txt = txt + \"111111\" + \"1111\";        \n\n        \n        return txt.substring(0, 10);          \n    }\n\n    \n    public Object encode(Object pObject) throws EncoderException {\n        if (!(pObject instanceof java.lang.String)) {\n            throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\"); \n        }\n        return caverphone((String) pObject);\n    }\n\n    \n    public String encode(String pString) {\n        return caverphone(pString);   \n    }\n\n    \n    public boolean isCaverphoneEqual(String str1, String str2) {\n        return caverphone(str1).equals(caverphone(str2));\n    }\n\n}\n",
      "buggy_signatures": [
        "public class Caverphone implements StringEncoder { public Caverphone()",
        "public String caverphone(String txt)",
        "public Object encode(Object pObject) throws EncoderException",
        "public String encode(String pString)",
        "public boolean isCaverphoneEqual(String str1, String str2)"
      ],
      "fixed_signatures": [
        "public class Caverphone implements StringEncoder { public Caverphone()",
        "public String caverphone(String txt)",
        "public Object encode(Object pObject) throws EncoderException",
        "public String encode(String pString)",
        "public boolean isCaverphoneEqual(String str1, String str2)"
      ],
      "methods": [
        {
          "buggy_method": "  public String caverphone(String txt) {\n  \n  \n\n  if( txt == null || txt.length() == 0 ) {\n  return \"1111111111\";\n  }\n\n  \n  txt = txt.toLowerCase();\n\n  \n  txt = txt.replaceAll(\"[^a-z]\", \"\");\n\n  \n  txt = txt.replaceAll(\"e$\", \"\");  \n\n  \n  txt = txt.replaceAll(\"^cough\", \"cou2f\");\n  txt = txt.replaceAll(\"^rough\", \"rou2f\");\n  txt = txt.replaceAll(\"^tough\", \"tou2f\");\n  txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n  txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n  txt = txt.replaceAll(\"^gn\", \"2n\");\n  txt = txt.replaceAll(\"^mb\", \"m2\");\n\n  \n  txt = txt.replaceAll(\"cq\", \"2q\");\n  txt = txt.replaceAll(\"ci\", \"si\");\n  txt = txt.replaceAll(\"ce\", \"se\");\n  txt = txt.replaceAll(\"cy\", \"sy\");\n  txt = txt.replaceAll(\"tch\", \"2ch\");\n  txt = txt.replaceAll(\"c\", \"k\");\n  txt = txt.replaceAll(\"q\", \"k\");\n  txt = txt.replaceAll(\"x\", \"k\");\n  txt = txt.replaceAll(\"v\", \"f\");\n  txt = txt.replaceAll(\"dg\", \"2g\");\n  txt = txt.replaceAll(\"tio\", \"sio\");\n  txt = txt.replaceAll(\"tia\", \"sia\");\n  txt = txt.replaceAll(\"d\", \"t\");\n  txt = txt.replaceAll(\"ph\", \"fh\");\n  txt = txt.replaceAll(\"b\", \"p\");\n  txt = txt.replaceAll(\"sh\", \"s2\");\n  txt = txt.replaceAll(\"z\", \"s\");\n  txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n  txt = txt.replaceAll(\"[aeiou]\", \"3\");\n  txt = txt.replaceAll(\"j\", \"y\");  \n  txt = txt.replaceAll(\"^y3\", \"Y3\");  \n  txt = txt.replaceAll(\"^y\", \"A\");  \n  txt = txt.replaceAll(\"y\", \"3\");  \n  txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n  txt = txt.replaceAll(\"gh\", \"22\");\n  txt = txt.replaceAll(\"g\", \"k\");\n  txt = txt.replaceAll(\"s+\", \"S\");\n  txt = txt.replaceAll(\"t+\", \"T\");\n  txt = txt.replaceAll(\"p+\", \"P\");\n  txt = txt.replaceAll(\"k+\", \"K\");\n  txt = txt.replaceAll(\"f+\", \"F\");\n  txt = txt.replaceAll(\"m+\", \"M\");\n  txt = txt.replaceAll(\"n+\", \"N\");\n  txt = txt.replaceAll(\"w3\", \"W3\");\n  \n  txt = txt.replaceAll(\"wh3\", \"Wh3\");\n  txt = txt.replaceAll(\"w$\", \"3\");  \n  \n  txt = txt.replaceAll(\"w\", \"2\");\n  txt = txt.replaceAll(\"^h\", \"A\");\n  txt = txt.replaceAll(\"h\", \"2\");\n  txt = txt.replaceAll(\"r3\", \"R3\");\n  txt = txt.replaceAll(\"r$\", \"3\");  \n  \n  txt = txt.replaceAll(\"r\", \"2\");\n  txt = txt.replaceAll(\"l3\", \"L3\");\n  txt = txt.replaceAll(\"l$\", \"3\");  \n  \n  txt = txt.replaceAll(\"l\", \"2\");\n  \n  \n  \n\n  \n  txt = txt.replaceAll(\"2\", \"\");\n  txt = txt.replaceAll(\"3$\", \"A\");  \n  txt = txt.replaceAll(\"3\", \"\");\n\n  \n  txt = txt + \"111111\" + \"1111\";  \n\n  \n  return txt.substring(0, 10);  \n  }",
          "fixed_method": "  public String caverphone(String txt) {\n  \n  \n\n  if( txt == null || txt.length() == 0 ) {\n  return \"1111111111\";\n  }\n\n  \n  txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n\n  \n  txt = txt.replaceAll(\"[^a-z]\", \"\");\n\n  \n  txt = txt.replaceAll(\"e$\", \"\");  \n\n  \n  txt = txt.replaceAll(\"^cough\", \"cou2f\");\n  txt = txt.replaceAll(\"^rough\", \"rou2f\");\n  txt = txt.replaceAll(\"^tough\", \"tou2f\");\n  txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n  txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n  txt = txt.replaceAll(\"^gn\", \"2n\");\n  txt = txt.replaceAll(\"^mb\", \"m2\");\n\n  \n  txt = txt.replaceAll(\"cq\", \"2q\");\n  txt = txt.replaceAll(\"ci\", \"si\");\n  txt = txt.replaceAll(\"ce\", \"se\");\n  txt = txt.replaceAll(\"cy\", \"sy\");\n  txt = txt.replaceAll(\"tch\", \"2ch\");\n  txt = txt.replaceAll(\"c\", \"k\");\n  txt = txt.replaceAll(\"q\", \"k\");\n  txt = txt.replaceAll(\"x\", \"k\");\n  txt = txt.replaceAll(\"v\", \"f\");\n  txt = txt.replaceAll(\"dg\", \"2g\");\n  txt = txt.replaceAll(\"tio\", \"sio\");\n  txt = txt.replaceAll(\"tia\", \"sia\");\n  txt = txt.replaceAll(\"d\", \"t\");\n  txt = txt.replaceAll(\"ph\", \"fh\");\n  txt = txt.replaceAll(\"b\", \"p\");\n  txt = txt.replaceAll(\"sh\", \"s2\");\n  txt = txt.replaceAll(\"z\", \"s\");\n  txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n  txt = txt.replaceAll(\"[aeiou]\", \"3\");\n  txt = txt.replaceAll(\"j\", \"y\");  \n  txt = txt.replaceAll(\"^y3\", \"Y3\");  \n  txt = txt.replaceAll(\"^y\", \"A\");  \n  txt = txt.replaceAll(\"y\", \"3\");  \n  txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n  txt = txt.replaceAll(\"gh\", \"22\");\n  txt = txt.replaceAll(\"g\", \"k\");\n  txt = txt.replaceAll(\"s+\", \"S\");\n  txt = txt.replaceAll(\"t+\", \"T\");\n  txt = txt.replaceAll(\"p+\", \"P\");\n  txt = txt.replaceAll(\"k+\", \"K\");\n  txt = txt.replaceAll(\"f+\", \"F\");\n  txt = txt.replaceAll(\"m+\", \"M\");\n  txt = txt.replaceAll(\"n+\", \"N\");\n  txt = txt.replaceAll(\"w3\", \"W3\");\n  \n  txt = txt.replaceAll(\"wh3\", \"Wh3\");\n  txt = txt.replaceAll(\"w$\", \"3\");  \n  \n  txt = txt.replaceAll(\"w\", \"2\");\n  txt = txt.replaceAll(\"^h\", \"A\");\n  txt = txt.replaceAll(\"h\", \"2\");\n  txt = txt.replaceAll(\"r3\", \"R3\");\n  txt = txt.replaceAll(\"r$\", \"3\");  \n  \n  txt = txt.replaceAll(\"r\", \"2\");\n  txt = txt.replaceAll(\"l3\", \"L3\");\n  txt = txt.replaceAll(\"l$\", \"3\");  \n  \n  txt = txt.replaceAll(\"l\", \"2\");\n  \n  \n  \n\n  \n  txt = txt.replaceAll(\"2\", \"\");\n  txt = txt.replaceAll(\"3$\", \"A\");  \n  txt = txt.replaceAll(\"3\", \"\");\n\n  \n  txt = txt + \"111111\" + \"1111\";  \n\n  \n  return txt.substring(0, 10);  \n  }",
          "diff": [
            "@@ -56,7 +56,7 @@",
            "         }\n",
            " \n",
            "         // 1. Convert to lowercase\n",
            "-        txt = txt.toLowerCase();\n",
            "+        txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n",
            " \n",
            "         // 2. Remove anything not A-Z\n",
            "         txt = txt.replaceAll(\"[^a-z]\", \"\");\n"
          ],
          "changed_lines": 2
        }
      ]
    },
    {
      "name": "org/apache/commons/codec/language/Metaphone.java",
      "buggy_full_code": "\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\npublic class Metaphone implements StringEncoder { private static final String VOWELS = \"AEIOU\" ; private static final String FRONTV = \"EIY\" ; private static final String VARSON = \"CSPTG\" ; private int maxCodeLen = 4 ; public Metaphone() {\n        super();\n    }\n\n    \n    public String metaphone(String txt) {\n        boolean hard = false ;\n        if ((txt == null) || (txt.length() == 0)) {\n            return \"\" ;\n        }\n        \n        if (txt.length() == 1) {\n            return txt.toUpperCase() ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); \n        StringBuffer code = new StringBuffer(10) ; \n        \n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : \n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': \n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : \n            if (inwd[1] == 'R') {   \n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); \n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : \n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } \n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { \n            char symb = local.charAt(n) ;\n            \n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { \n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; \n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { \n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : \n                    \n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { \n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; \n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { \n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { \n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { \n                            code.append('K');\n                        } else { \n                            code.append('X'); \n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : \n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; \n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; \n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); \n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { \n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); \n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        \n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t\n                        break;\n                    }\n                    \n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : \n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } \n                n++ ;\n            } \n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }\n\n\tprivate boolean isVowel(StringBuffer string, int index) {\n\t\treturn VOWELS.indexOf(string.charAt(index)) >= 0;\n\t}\n\n\tprivate boolean isPreviousChar(StringBuffer string, int index, char c) {\n\t\tboolean matches = false;\n\t\tif( index > 0 &&\n\t\t    index < string.length() ) {\n\t\t\tmatches = string.charAt(index - 1) == c;\n\t\t}\n\t\treturn matches;\n\t}\n\n\tprivate boolean isNextChar(StringBuffer string, int index, char c) {\n\t\tboolean matches = false;\n\t\tif( index >= 0 &&\n\t\t    index < string.length() - 1 ) {\n\t\t\tmatches = string.charAt(index + 1) == c;\n\t\t}\n\t\treturn matches;\n\t}\n\n\tprivate boolean regionMatch(StringBuffer string, int index, String test) {\n\t\tboolean matches = false;\n\t\tif( index >= 0 &&\n\t\t    (index + test.length() - 1) < string.length() ) {\n\t\t\tString substring = string.substring( index, index + test.length());\n\t\t\tmatches = substring.equals( test );\n\t\t}\n\t\treturn matches;\n\t}\n\n\tprivate boolean isLastChar(int wdsz, int n) {\n\t\treturn n + 1 == wdsz;\n\t} \n    \n    \n    \n    public Object encode(Object pObject) throws EncoderException {\n        if (!(pObject instanceof java.lang.String)) {\n            throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\"); \n        }\n        return metaphone((String) pObject);\n    }\n\n    \n    public String encode(String pString) {\n        return metaphone(pString);   \n    }\n\n    \n    public boolean isMetaphoneEqual(String str1, String str2) {\n        return metaphone(str1).equals(metaphone(str2));\n    }\n\n    \n    public int getMaxCodeLen() { return this.maxCodeLen; }\n\n    \n    public void setMaxCodeLen(int maxCodeLen) { this.maxCodeLen = maxCodeLen; }\n\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\npublic class Metaphone implements StringEncoder { private static final String VOWELS = \"AEIOU\" ; private static final String FRONTV = \"EIY\" ; private static final String VARSON = \"CSPTG\" ; private int maxCodeLen = 4 ; public Metaphone() {\n        super();\n    }\n\n    \n    public String metaphone(String txt) {\n        boolean hard = false ;\n        if ((txt == null) || (txt.length() == 0)) {\n            return \"\" ;\n        }\n        \n        if (txt.length() == 1) {\n            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n        }\n      \n        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n      \n        StringBuffer local = new StringBuffer(40); \n        StringBuffer code = new StringBuffer(10) ; \n        \n        switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : \n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': \n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : \n            if (inwd[1] == 'R') {   \n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); \n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : \n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        } \n\n        int wdsz = local.length();\n        int n = 0 ;\n\n        while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz) ) { \n            char symb = local.charAt(n) ;\n            \n            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n                n++ ;\n            } else { \n                switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; \n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { \n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : \n                    \n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { \n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; \n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { \n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { \n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { \n                            code.append('K');\n                        } else { \n                            code.append('X'); \n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : \n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; \n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; \n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); \n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { \n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); \n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        \n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t\n                        break;\n                    }\n                    \n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : \n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                } \n                n++ ;\n            } \n            if (code.length() > this.getMaxCodeLen()) { \n            \tcode.setLength(this.getMaxCodeLen()); \n            }\n        }\n        return code.toString();\n    }\n\n\tprivate boolean isVowel(StringBuffer string, int index) {\n\t\treturn VOWELS.indexOf(string.charAt(index)) >= 0;\n\t}\n\n\tprivate boolean isPreviousChar(StringBuffer string, int index, char c) {\n\t\tboolean matches = false;\n\t\tif( index > 0 &&\n\t\t    index < string.length() ) {\n\t\t\tmatches = string.charAt(index - 1) == c;\n\t\t}\n\t\treturn matches;\n\t}\n\n\tprivate boolean isNextChar(StringBuffer string, int index, char c) {\n\t\tboolean matches = false;\n\t\tif( index >= 0 &&\n\t\t    index < string.length() - 1 ) {\n\t\t\tmatches = string.charAt(index + 1) == c;\n\t\t}\n\t\treturn matches;\n\t}\n\n\tprivate boolean regionMatch(StringBuffer string, int index, String test) {\n\t\tboolean matches = false;\n\t\tif( index >= 0 &&\n\t\t    (index + test.length() - 1) < string.length() ) {\n\t\t\tString substring = string.substring( index, index + test.length());\n\t\t\tmatches = substring.equals( test );\n\t\t}\n\t\treturn matches;\n\t}\n\n\tprivate boolean isLastChar(int wdsz, int n) {\n\t\treturn n + 1 == wdsz;\n\t} \n    \n    \n    \n    public Object encode(Object pObject) throws EncoderException {\n        if (!(pObject instanceof java.lang.String)) {\n            throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\"); \n        }\n        return metaphone((String) pObject);\n    }\n\n    \n    public String encode(String pString) {\n        return metaphone(pString);   \n    }\n\n    \n    public boolean isMetaphoneEqual(String str1, String str2) {\n        return metaphone(str1).equals(metaphone(str2));\n    }\n\n    \n    public int getMaxCodeLen() { return this.maxCodeLen; }\n\n    \n    public void setMaxCodeLen(int maxCodeLen) { this.maxCodeLen = maxCodeLen; }\n\n}\n",
      "buggy_signatures": [
        "public String metaphone(String txt)",
        "private boolean isVowel(StringBuffer string, int index)",
        "private boolean isPreviousChar(StringBuffer string, int index, char c)",
        "private boolean isNextChar(StringBuffer string, int index, char c)",
        "private boolean regionMatch(StringBuffer string, int index, String test)",
        "private boolean isLastChar(int wdsz, int n)",
        "public Object encode(Object pObject) throws EncoderException",
        "public String encode(String pString)",
        "public boolean isMetaphoneEqual(String str1, String str2)",
        "public int getMaxCodeLen()",
        "public void setMaxCodeLen(int maxCodeLen)"
      ],
      "fixed_signatures": [
        "public String metaphone(String txt)",
        "private boolean isVowel(StringBuffer string, int index)",
        "private boolean isPreviousChar(StringBuffer string, int index, char c)",
        "private boolean isNextChar(StringBuffer string, int index, char c)",
        "private boolean regionMatch(StringBuffer string, int index, String test)",
        "private boolean isLastChar(int wdsz, int n)",
        "public Object encode(Object pObject) throws EncoderException",
        "public String encode(String pString)",
        "public boolean isMetaphoneEqual(String str1, String str2)",
        "public int getMaxCodeLen()",
        "public void setMaxCodeLen(int maxCodeLen)"
      ],
      "methods": [
        {
          "buggy_method": "  public String metaphone(String txt) {\n  boolean hard = false ;\n  if ((txt == null) || (txt.length() == 0)) {\n  return \"\" ;\n  }\n  \n  if (txt.length() == 1) {\n  return txt.toUpperCase() ;\n  }\n  \n  char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n  \n  StringBuffer local = new StringBuffer(40); \n  StringBuffer code = new StringBuffer(10) ; \n  \n  switch(inwd[0]) {\n  case 'K' : \n  case 'G' : \n  case 'P' : \n  if (inwd[1] == 'N') {\n  local.append(inwd, 1, inwd.length - 1);\n  } else {\n  local.append(inwd);\n  }\n  break;\n  case 'A': \n  if (inwd[1] == 'E') {\n  local.append(inwd, 1, inwd.length - 1);\n  } else {\n  local.append(inwd);\n  }\n  break;\n  case 'W' : \n  if (inwd[1] == 'R') {  \n  local.append(inwd, 1, inwd.length - 1); \n  break ;\n  }\n  if (inwd[1] == 'H') {\n  local.append(inwd, 1, inwd.length - 1);\n  local.setCharAt(0, 'W'); \n  } else {\n  local.append(inwd);\n  }\n  break;\n  case 'X' : \n  inwd[0] = 'S';\n  local.append(inwd);\n  break ;\n  default :\n  local.append(inwd);\n  } \n\n  int wdsz = local.length();\n  int n = 0 ;\n\n  while ((code.length() < this.getMaxCodeLen()) && \n  \t  (n < wdsz) ) { \n  char symb = local.charAt(n) ;\n  \n  if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n  n++ ;\n  } else { \n  switch(symb) {\n  case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n  if (n == 0) { \n  code.append(symb);\n  }\n  break ; \n  case 'B' :\n  if ( isPreviousChar(local, n, 'M') && \n  isLastChar(wdsz, n) ) { \n\t\t\t\t\t\tbreak;\n  }\n  code.append(symb);\n  break;\n  case 'C' : \n  \n  if ( isPreviousChar(local, n, 'S') && \n  !isLastChar(wdsz, n) && \n  (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n  break;\n  }\n  if (regionMatch(local, n, \"CIA\")) { \n  code.append('X'); \n  break;\n  }\n  if (!isLastChar(wdsz, n) && \n  (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n  code.append('S');\n  break; \n  }\n  if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { \n  code.append('K') ; \n  break ;\n  }\n  if (isNextChar(local, n, 'H')) { \n  if ((n == 0) && \n  \t(wdsz >= 3) && \n  isVowel(local,2) ) { \n  code.append('K');\n  } else { \n  code.append('X'); \n  }\n  } else { \n  code.append('K');\n  }\n  break ;\n  case 'D' :\n  if (!isLastChar(wdsz, n + 1) && \n  isNextChar(local, n, 'G') && \n  (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { \n  code.append('J'); n += 2 ;\n  } else { \n  code.append('T');\n  }\n  break ;\n  case 'G' : \n  if (isLastChar(wdsz, n + 1) && \n  isNextChar(local, n, 'H')) {\n  break;\n  }\n  if (!isLastChar(wdsz, n + 1) &&  \n  isNextChar(local,n,'H') && \n  !isVowel(local,n+2)) {\n  break;\n  }\n  if ((n > 0) && \n  \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t  regionMatch(local, n, \"GNED\") ) ) {\n  break; \n  }\n  if (isPreviousChar(local, n, 'G')) {\n  hard = true ;\n  } else {\n  hard = false ;\n  }\n  if (!isLastChar(wdsz, n) && \n  (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n  (!hard)) {\n  code.append('J');\n  } else {\n  code.append('K');\n  }\n  break ;\n  case 'H':\n  if (isLastChar(wdsz, n)) {\n  break ; \n  }\n  if ((n > 0) && \n  (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n  break;\n  }\n  if (isVowel(local,n+1)) {\n  code.append('H'); \n  }\n  break;\n  case 'F': \n  case 'J' : \n  case 'L' :\n  case 'M': \n  case 'N' : \n  case 'R' :\n  code.append(symb); \n  break;\n  case 'K' :\n  if (n > 0) { \n  if (!isPreviousChar(local, n, 'C')) {\n  code.append(symb);\n  }\n  } else {\n  code.append(symb); \n  }\n  break ;\n  case 'P' :\n  if (isNextChar(local,n,'H')) {\n  \n  code.append('F');\n  } else {\n  code.append(symb);\n  }\n  break ;\n  case 'Q' :\n  code.append('K');\n  break;\n  case 'S' :\n  if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t  regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t  regionMatch(local,n,\"SIA\")) {\n  code.append('X');\n  } else {\n  code.append('S');\n  }\n  break;\n  case 'T' :\n  if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n  code.append('X'); \n  break;\n  }\n  if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t\n  break;\n  }\n  \n  if (regionMatch(local,n,\"TH\")) {\n  code.append('0');\n  } else {\n  code.append('T');\n  }\n  break ;\n  case 'V' :\n  code.append('F'); break ;\n  case 'W' : case 'Y' : \n  if (!isLastChar(wdsz,n) && \n  \tisVowel(local,n+1)) {\n  code.append(symb);\n  }\n  break ;\n  case 'X' :\n  code.append('K'); code.append('S');\n  break ;\n  case 'Z' :\n  code.append('S'); break ;\n  } \n  n++ ;\n  } \n  if (code.length() > this.getMaxCodeLen()) { \n  \tcode.setLength(this.getMaxCodeLen()); \n  }\n  }\n  return code.toString();\n  }",
          "fixed_method": "  public String metaphone(String txt) {\n  boolean hard = false ;\n  if ((txt == null) || (txt.length() == 0)) {\n  return \"\" ;\n  }\n  \n  if (txt.length() == 1) {\n  return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n  }\n  \n  char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n  \n  StringBuffer local = new StringBuffer(40); \n  StringBuffer code = new StringBuffer(10) ; \n  \n  switch(inwd[0]) {\n  case 'K' : \n  case 'G' : \n  case 'P' : \n  if (inwd[1] == 'N') {\n  local.append(inwd, 1, inwd.length - 1);\n  } else {\n  local.append(inwd);\n  }\n  break;\n  case 'A': \n  if (inwd[1] == 'E') {\n  local.append(inwd, 1, inwd.length - 1);\n  } else {\n  local.append(inwd);\n  }\n  break;\n  case 'W' : \n  if (inwd[1] == 'R') {  \n  local.append(inwd, 1, inwd.length - 1); \n  break ;\n  }\n  if (inwd[1] == 'H') {\n  local.append(inwd, 1, inwd.length - 1);\n  local.setCharAt(0, 'W'); \n  } else {\n  local.append(inwd);\n  }\n  break;\n  case 'X' : \n  inwd[0] = 'S';\n  local.append(inwd);\n  break ;\n  default :\n  local.append(inwd);\n  } \n\n  int wdsz = local.length();\n  int n = 0 ;\n\n  while ((code.length() < this.getMaxCodeLen()) && \n  \t  (n < wdsz) ) { \n  char symb = local.charAt(n) ;\n  \n  if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n  n++ ;\n  } else { \n  switch(symb) {\n  case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n  if (n == 0) { \n  code.append(symb);\n  }\n  break ; \n  case 'B' :\n  if ( isPreviousChar(local, n, 'M') && \n  isLastChar(wdsz, n) ) { \n\t\t\t\t\t\tbreak;\n  }\n  code.append(symb);\n  break;\n  case 'C' : \n  \n  if ( isPreviousChar(local, n, 'S') && \n  !isLastChar(wdsz, n) && \n  (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n  break;\n  }\n  if (regionMatch(local, n, \"CIA\")) { \n  code.append('X'); \n  break;\n  }\n  if (!isLastChar(wdsz, n) && \n  (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n  code.append('S');\n  break; \n  }\n  if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { \n  code.append('K') ; \n  break ;\n  }\n  if (isNextChar(local, n, 'H')) { \n  if ((n == 0) && \n  \t(wdsz >= 3) && \n  isVowel(local,2) ) { \n  code.append('K');\n  } else { \n  code.append('X'); \n  }\n  } else { \n  code.append('K');\n  }\n  break ;\n  case 'D' :\n  if (!isLastChar(wdsz, n + 1) && \n  isNextChar(local, n, 'G') && \n  (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { \n  code.append('J'); n += 2 ;\n  } else { \n  code.append('T');\n  }\n  break ;\n  case 'G' : \n  if (isLastChar(wdsz, n + 1) && \n  isNextChar(local, n, 'H')) {\n  break;\n  }\n  if (!isLastChar(wdsz, n + 1) &&  \n  isNextChar(local,n,'H') && \n  !isVowel(local,n+2)) {\n  break;\n  }\n  if ((n > 0) && \n  \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t  regionMatch(local, n, \"GNED\") ) ) {\n  break; \n  }\n  if (isPreviousChar(local, n, 'G')) {\n  hard = true ;\n  } else {\n  hard = false ;\n  }\n  if (!isLastChar(wdsz, n) && \n  (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n  (!hard)) {\n  code.append('J');\n  } else {\n  code.append('K');\n  }\n  break ;\n  case 'H':\n  if (isLastChar(wdsz, n)) {\n  break ; \n  }\n  if ((n > 0) && \n  (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n  break;\n  }\n  if (isVowel(local,n+1)) {\n  code.append('H'); \n  }\n  break;\n  case 'F': \n  case 'J' : \n  case 'L' :\n  case 'M': \n  case 'N' : \n  case 'R' :\n  code.append(symb); \n  break;\n  case 'K' :\n  if (n > 0) { \n  if (!isPreviousChar(local, n, 'C')) {\n  code.append(symb);\n  }\n  } else {\n  code.append(symb); \n  }\n  break ;\n  case 'P' :\n  if (isNextChar(local,n,'H')) {\n  \n  code.append('F');\n  } else {\n  code.append(symb);\n  }\n  break ;\n  case 'Q' :\n  code.append('K');\n  break;\n  case 'S' :\n  if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t  regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t  regionMatch(local,n,\"SIA\")) {\n  code.append('X');\n  } else {\n  code.append('S');\n  }\n  break;\n  case 'T' :\n  if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n  code.append('X'); \n  break;\n  }\n  if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t\n  break;\n  }\n  \n  if (regionMatch(local,n,\"TH\")) {\n  code.append('0');\n  } else {\n  code.append('T');\n  }\n  break ;\n  case 'V' :\n  code.append('F'); break ;\n  case 'W' : case 'Y' : \n  if (!isLastChar(wdsz,n) && \n  \tisVowel(local,n+1)) {\n  code.append(symb);\n  }\n  break ;\n  case 'X' :\n  code.append('K'); code.append('S');\n  break ;\n  case 'Z' :\n  code.append('S'); break ;\n  } \n  n++ ;\n  } \n  if (code.length() > this.getMaxCodeLen()) { \n  \tcode.setLength(this.getMaxCodeLen()); \n  }\n  }\n  return code.toString();\n  }",
          "diff": [
            "@@ -85,7 +85,7 @@",
            "         }\n",
            "         // single character is itself\n",
            "         if (txt.length() == 1) {\n",
            "-            return txt.toUpperCase() ;\n",
            "+            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n",
            "         }\n",
            "       \n",
            "         char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n"
          ],
          "changed_lines": 2
        }
      ]
    },
    {
      "name": "org/apache/commons/codec/language/SoundexUtils.java",
      "buggy_full_code": "\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\nfinal class SoundexUtils {\n\n    \n    static String clean(String str) {\n        if (str == null || str.length() == 0) {\n            return str;\n        }\n        int len = str.length();\n        char[] chars = new char[len];\n        int count = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isLetter(str.charAt(i))) {\n                chars[count++] = str.charAt(i);\n            }\n        }\n        if (count == len) {\n            return str.toUpperCase();\n        }\n        return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH);\n    }\n\n    \n    static int difference(StringEncoder encoder, String s1, String s2) throws EncoderException {\n        return differenceEncoded(encoder.encode(s1), encoder.encode(s2));\n    }\n\n    \n    static int differenceEncoded(String es1, String es2) {\n\n        if (es1 == null || es2 == null) {\n            return 0;\n        }\n        int lengthToMatch = Math.min(es1.length(), es2.length());\n        int diff = 0;\n        for (int i = 0; i < lengthToMatch; i++) {\n            if (es1.charAt(i) == es2.charAt(i)) {\n                diff++;\n            }\n        }\n        return diff;\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\nfinal class SoundexUtils {\n\n    \n    static String clean(String str) {\n        if (str == null || str.length() == 0) {\n            return str;\n        }\n        int len = str.length();\n        char[] chars = new char[len];\n        int count = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isLetter(str.charAt(i))) {\n                chars[count++] = str.charAt(i);\n            }\n        }\n        if (count == len) {\n            return str.toUpperCase(java.util.Locale.ENGLISH);\n        }\n        return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH);\n    }\n\n    \n    static int difference(StringEncoder encoder, String s1, String s2) throws EncoderException {\n        return differenceEncoded(encoder.encode(s1), encoder.encode(s2));\n    }\n\n    \n    static int differenceEncoded(String es1, String es2) {\n\n        if (es1 == null || es2 == null) {\n            return 0;\n        }\n        int lengthToMatch = Math.min(es1.length(), es2.length());\n        int diff = 0;\n        for (int i = 0; i < lengthToMatch; i++) {\n            if (es1.charAt(i) == es2.charAt(i)) {\n                diff++;\n            }\n        }\n        return diff;\n    }\n\n}\n",
      "buggy_signatures": [
        "static String clean(String str)",
        "static int difference(StringEncoder encoder, String s1, String s2) throws EncoderException",
        "static int differenceEncoded(String es1, String es2)"
      ],
      "fixed_signatures": [
        "static String clean(String str)",
        "static int difference(StringEncoder encoder, String s1, String s2) throws EncoderException",
        "static int differenceEncoded(String es1, String es2)"
      ],
      "methods": [
        {
          "buggy_method": "  static String clean(String str) {\n  if (str == null || str.length() == 0) {\n  return str;\n  }\n  int len = str.length();\n  char[] chars = new char[len];\n  int count = 0;\n  for (int i = 0; i < len; i++) {\n  if (Character.isLetter(str.charAt(i))) {\n  chars[count++] = str.charAt(i);\n  }\n  }\n  if (count == len) {\n  return str.toUpperCase();\n  }\n  return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH);\n  }",
          "fixed_method": "  static String clean(String str) {\n  if (str == null || str.length() == 0) {\n  return str;\n  }\n  int len = str.length();\n  char[] chars = new char[len];\n  int count = 0;\n  for (int i = 0; i < len; i++) {\n  if (Character.isLetter(str.charAt(i))) {\n  chars[count++] = str.charAt(i);\n  }\n  }\n  if (count == len) {\n  return str.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH);\n  }",
          "diff": [
            "@@ -50,7 +50,7 @@",
            "             }\n",
            "         }\n",
            "         if (count == len) {\n",
            "-            return str.toUpperCase();\n",
            "+            return str.toUpperCase(java.util.Locale.ENGLISH);\n",
            "         }\n",
            "         return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH);\n",
            "     }\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
