{
  "bug_id": "48",
  "failed_tests": {
    "com.fasterxml.jackson.databind.ser.TestFeatures": [
      {
        "methodName": "testVisibilityFeatures",
        "error": "junit.framework.AssertionFailedError",
        "message": "Should find 1 property, not 2; properties = [[Property 'name'; ctors: null, field(s): null, getter(s): null, setter(s): [method com.fasterxml.jackson.databind.ser.TestFeatures$TCls#setName(1 params)][visible=true,ignore=false,explicitName=false]], [Property 'groupname'; ctors: null, field(s): [field com.fasterxml.jackson.databind.ser.TestFeatures$TCls#groupname][visible=true,ignore=false,explicitName=true], getter(s): null, setter(s): null]]",
        "fail_line": "            fail(\"Should find 1 property, not \"+props.size()+\"; properties = \"+props);",
        "test_source": "  public void testVisibilityFeatures() throws Exception {\n  ObjectMapper om = new ObjectMapper();\n  // Only use explicitly specified values to be serialized/deserialized (i.e., JSONProperty).\n  om.configure(MapperFeature.AUTO_DETECT_FIELDS, false);\n  om.configure(MapperFeature.AUTO_DETECT_GETTERS, false);\n  om.configure(MapperFeature.AUTO_DETECT_SETTERS, false);\n  om.configure(MapperFeature.AUTO_DETECT_IS_GETTERS, false);\n  om.configure(MapperFeature.USE_GETTERS_AS_SETTERS, false);\n  om.configure(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);\n  om.configure(MapperFeature.INFER_PROPERTY_MUTATORS, false);\n  om.configure(MapperFeature.USE_ANNOTATIONS, true);\n\n  JavaType javaType = om.getTypeFactory().constructType(TCls.class);  \n  BeanDescription desc = (BeanDescription) om.getSerializationConfig().introspect(javaType);\n  List<BeanPropertyDefinition> props = desc.findProperties();\n  if (props.size() != 1) {\n  fail(\"Should find 1 property, not \"+props.size()+\"; properties = \"+props);\n  }\n  }",
        "stack": [
          "TestFeatures.testVisibilityFeatures line 300"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/DeserializationConfig.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind;\n\nimport java.text.DateFormat;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.cfg.*;\nimport com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\nimport com.fasterxml.jackson.databind.introspect.*;\nimport com.fasterxml.jackson.databind.jsontype.*;\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport com.fasterxml.jackson.databind.util.LinkedNode;\nimport com.fasterxml.jackson.databind.util.RootNameLookup;\n\n\npublic final class DeserializationConfig extends MapperConfigBase<DeserializationFeature, DeserializationConfig> implements java.io.Serializable { private static final long serialVersionUID = 1; protected final LinkedNode<DeserializationProblemHandler> _problemHandlers; protected final JsonNodeFactory _nodeFactory; protected final int _deserFeatures; protected final int _parserFeatures; protected final int _parserFeaturesToChange; protected final int _formatReadFeatures; protected final int _formatReadFeaturesToChange; public DeserializationConfig(BaseSettings base, SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames) {\n        super(base, str, mixins, rootNames);\n        _deserFeatures = collectFeatureDefaults(DeserializationFeature.class);\n        _nodeFactory = JsonNodeFactory.instance;\n        _problemHandlers = null;\n        _parserFeatures = 0;\n        _parserFeaturesToChange = 0;\n        _formatReadFeatures = 0;\n        _formatReadFeaturesToChange = 0;\n    }\n\n    private DeserializationConfig(DeserializationConfig src, int mapperFeatures, int deserFeatures, int parserFeatures, int parserFeatureMask, int formatFeatures, int formatFeatureMask) {\n        super(src, mapperFeatures);\n        _deserFeatures = deserFeatures;\n        _nodeFactory = src._nodeFactory;\n        _problemHandlers = src._problemHandlers;\n        _parserFeatures = parserFeatures;\n        _parserFeaturesToChange = parserFeatureMask;\n        _formatReadFeatures = formatFeatures;\n        _formatReadFeaturesToChange = formatFeatureMask;\n    }\n    \n    \n    private DeserializationConfig(DeserializationConfig src, SubtypeResolver str) {\n        super(src, str);\n        _deserFeatures = src._deserFeatures;\n        _nodeFactory = src._nodeFactory;\n        _problemHandlers = src._problemHandlers;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    private DeserializationConfig(DeserializationConfig src, BaseSettings base) {\n        super(src, base);\n        _deserFeatures = src._deserFeatures;\n        _nodeFactory = src._nodeFactory;\n        _problemHandlers = src._problemHandlers;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n    \n    private DeserializationConfig(DeserializationConfig src, JsonNodeFactory f) {\n        super(src);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = f;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    private DeserializationConfig(DeserializationConfig src, LinkedNode<DeserializationProblemHandler> problemHandlers) {\n        super(src);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    private DeserializationConfig(DeserializationConfig src, PropertyName rootName) {\n        super(src, rootName);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    private DeserializationConfig(DeserializationConfig src, Class<?> view) {\n        super(src, view);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    protected DeserializationConfig(DeserializationConfig src, ContextAttributes attrs) {\n        super(src, attrs);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins) {\n        super(src, mixins);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    \n    protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins, RootNameLookup rootNames) {\n        super(src, mixins, rootNames);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    \n    protected BaseSettings getBaseSettings() { return _base; }\n\n    \n    \n    @Override\n    public DeserializationConfig with(MapperFeature... features) {\n        int newMapperFlags = _mapperFeatures;\n        for (MapperFeature f : features) {\n            newMapperFlags |= f.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this :\n            new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n                    \n    }\n\n    @Override\n    public DeserializationConfig without(MapperFeature... features) {\n        int newMapperFlags = _mapperFeatures;\n        for (MapperFeature f : features) {\n             newMapperFlags &= ~f.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this :\n            new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    @Override\n    public DeserializationConfig with(MapperFeature feature, boolean state) {\n        int newMapperFlags;\n        if (state) {\n            newMapperFlags = _mapperFeatures | feature.getMask();\n        } else {\n            newMapperFlags = _mapperFeatures & ~feature.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this :\n            new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    @Override\n    public DeserializationConfig with(ClassIntrospector ci) {\n        return _withBase(_base.withClassIntrospector(ci));\n    }\n\n    @Override\n    public DeserializationConfig with(AnnotationIntrospector ai) {\n        return _withBase(_base.withAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public DeserializationConfig with(VisibilityChecker<?> vc) {\n        return _withBase(_base.withVisibilityChecker(vc));\n    }\n\n    @Override\n    public DeserializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n        return _withBase( _base.withVisibility(forMethod, visibility));\n    }\n    \n    @Override\n    public DeserializationConfig with(TypeResolverBuilder<?> trb) {\n        return _withBase(_base.withTypeResolverBuilder(trb));\n    }\n\n    @Override\n    public DeserializationConfig with(SubtypeResolver str) {\n        return (_subtypeResolver == str) ? this : new DeserializationConfig(this, str);\n    }\n    \n    @Override\n    public DeserializationConfig with(PropertyNamingStrategy pns) {\n        return _withBase(_base.withPropertyNamingStrategy(pns));\n    }\n\n    @Override\n    public DeserializationConfig withRootName(PropertyName rootName) {\n        if (rootName == null) {\n            if (_rootName == null) {\n                return this;\n            }\n        } else if (rootName.equals(_rootName)) {\n            return this;\n        }\n        return new DeserializationConfig(this, rootName);\n    }\n\n    @Override\n    public DeserializationConfig with(TypeFactory tf) {\n        return _withBase( _base.withTypeFactory(tf));\n    }\n\n    @Override\n    public DeserializationConfig with(DateFormat df) {\n        return _withBase(_base.withDateFormat(df));\n    }\n    \n    @Override\n    public DeserializationConfig with(HandlerInstantiator hi) {\n        return _withBase(_base.withHandlerInstantiator(hi));\n    }\n\n    @Override\n    public DeserializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public DeserializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public DeserializationConfig withView(Class<?> view) {\n        return (_view == view) ? this : new DeserializationConfig(this, view);\n    }\n\n    @Override\n    public DeserializationConfig with(Locale l) {\n        return _withBase(_base.with(l));\n    }\n\n    @Override\n    public DeserializationConfig with(TimeZone tz) {\n        return _withBase(_base.with(tz));\n    }\n\n    @Override\n    public DeserializationConfig with(Base64Variant base64) {\n        return _withBase(_base.with(base64));\n    }\n\n    @Override\n    public DeserializationConfig with(ContextAttributes attrs) {\n        return (attrs == _attributes) ? this : new DeserializationConfig(this, attrs);\n    }\n    \n    private final DeserializationConfig _withBase(BaseSettings newBase) {\n        return (_base == newBase) ? this : new DeserializationConfig(this, newBase);\n    }\n\n    \n\n    \n    public DeserializationConfig with(DeserializationFeature feature) {\n        int newDeserFeatures = (_deserFeatures | feature.getMask());\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig with(DeserializationFeature first, DeserializationFeature... features) {\n        int newDeserFeatures = _deserFeatures | first.getMask();\n        for (DeserializationFeature f : features) {\n            newDeserFeatures |= f.getMask();\n        }\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig withFeatures(DeserializationFeature... features) {\n        int newDeserFeatures = _deserFeatures;\n        for (DeserializationFeature f : features) {\n            newDeserFeatures |= f.getMask();\n        }\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n    \n    \n    public DeserializationConfig without(DeserializationFeature feature) {\n        int newDeserFeatures = _deserFeatures & ~feature.getMask();\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig without(DeserializationFeature first, DeserializationFeature... features) {\n        int newDeserFeatures = _deserFeatures & ~first.getMask();\n        for (DeserializationFeature f : features) {\n            newDeserFeatures &= ~f.getMask();\n        }\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig withoutFeatures(DeserializationFeature... features) {\n        int newDeserFeatures = _deserFeatures;\n        for (DeserializationFeature f : features) {\n            newDeserFeatures &= ~f.getMask();\n        }\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n\n    \n    public DeserializationConfig with(JsonParser.Feature feature) {\n        int newSet = _parserFeatures | feature.getMask();\n        int newMask = _parserFeaturesToChange | feature.getMask();\n        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig withFeatures(JsonParser.Feature... features) {\n        int newSet = _parserFeatures;\n        int newMask = _parserFeaturesToChange;\n        for (JsonParser.Feature f : features) {\n            int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n        }\n        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n    \n    \n    public DeserializationConfig without(JsonParser.Feature feature) {\n        int newSet = _parserFeatures & ~feature.getMask();\n        int newMask = _parserFeaturesToChange | feature.getMask();\n        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig withoutFeatures(JsonParser.Feature... features) {\n        int newSet = _parserFeatures;\n        int newMask = _parserFeaturesToChange;\n        for (JsonParser.Feature f : features) {\n            int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n        }\n        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n\n    \n    public DeserializationConfig with(FormatFeature feature) {\n        int newSet = _formatReadFeatures | feature.getMask();\n        int newMask = _formatReadFeaturesToChange | feature.getMask();\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }\n\n    \n    public DeserializationConfig withFeatures(FormatFeature... features) {\n        int newSet = _formatReadFeatures;\n        int newMask = _formatReadFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n        }\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }\n    \n    \n    public DeserializationConfig without(FormatFeature feature) {\n        int newSet = _formatReadFeatures & ~feature.getMask();\n        int newMask = _formatReadFeaturesToChange | feature.getMask();\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }\n\n    \n    public DeserializationConfig withoutFeatures(FormatFeature... features) {\n        int newSet = _formatReadFeatures;\n        int newMask = _formatReadFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n        }\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }    \n\n    \n\n    \n    public DeserializationConfig with(JsonNodeFactory f) {\n        if (_nodeFactory == f) {\n            return this;\n        }\n        return new DeserializationConfig(this, f);\n    }\n\n    \n    public DeserializationConfig withHandler(DeserializationProblemHandler h) {\n        \n        if (LinkedNode.contains(_problemHandlers, h)) {\n            return this;\n        }\n        return new DeserializationConfig(this,\n                new LinkedNode<DeserializationProblemHandler>(h, _problemHandlers));\n    }\n\n    \n    public DeserializationConfig withNoProblemHandlers() {\n        if (_problemHandlers == null) {\n            return this;\n        }\n        return new DeserializationConfig(this,\n                (LinkedNode<DeserializationProblemHandler>) null);\n    }\n\n    \n\n    \n    public void initialize(JsonParser p) {\n        if (_parserFeaturesToChange != 0) {\n            p.overrideStdFeatures(_parserFeatures, _parserFeaturesToChange);\n        }\n        if (_formatReadFeaturesToChange != 0) {\n            p.overrideFormatFeatures(_formatReadFeatures, _formatReadFeaturesToChange);\n        }\n    }\n\n    \n\n    \n    @Override\n    public AnnotationIntrospector getAnnotationIntrospector() {\n        \n        if (isEnabled(MapperFeature.USE_ANNOTATIONS)) {\n            return super.getAnnotationIntrospector();\n        }\n        return NopAnnotationIntrospector.instance;\n    }\n\n    \n    @Override\n    public BeanDescription introspectClassAnnotations(JavaType type) {\n        return getClassIntrospector().forClassAnnotations(this, type, this);\n    }\n\n    \n    @Override\n    public BeanDescription introspectDirectClassAnnotations(JavaType type) {\n        return getClassIntrospector().forDirectClassAnnotations(this, type, this);\n    }\n\n    @Override\n    public VisibilityChecker<?> getDefaultVisibilityChecker() {\n        VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n        if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS)) {\n            vchecker = vchecker.withSetterVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n            vchecker = vchecker.withCreatorVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n            vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n        }\n        return vchecker;\n    }\n\n    \n    \n    \n    @Override\n    public JsonInclude.Value getDefaultPropertyInclusion() {\n        return EMPTY_INCLUDE;\n    }\n\n    @Override\n    public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) {\n        return EMPTY_INCLUDE;\n    }\n\n    @Override\n    public JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) {\n        \n        return EMPTY_FORMAT;\n    }\n\n    \n\n    @Override\n    public boolean useRootWrapping() {\n        if (_rootName != null) { \n            return !_rootName.isEmpty();\n        }\n        return isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE);\n    }\n\n    public final boolean isEnabled(DeserializationFeature f) {\n        return (_deserFeatures & f.getMask()) != 0;\n    }\n\n    public final boolean isEnabled(JsonParser.Feature f, JsonFactory factory) {\n        int mask = f.getMask();\n        if ((_parserFeaturesToChange & mask) != 0) {\n            return (_parserFeatures & f.getMask()) != 0;\n        }\n        return factory.isEnabled(f);\n    }\n\n    \n    public final boolean hasDeserializationFeatures(int featureMask) {\n        return (_deserFeatures & featureMask) == featureMask;\n    }\n\n    \n    public final boolean hasSomeOfFeatures(int featureMask) {\n        return (_deserFeatures & featureMask) != 0;\n    }\n\n    \n    public final int getDeserializationFeatures() {\n        return _deserFeatures;\n    }\n\n    \n\n    \n    public LinkedNode<DeserializationProblemHandler> getProblemHandlers() {\n        return _problemHandlers;\n    }\n\n    public final JsonNodeFactory getNodeFactory() {\n        return _nodeFactory;\n    }\n\n    \n\n    \n    @SuppressWarnings(\"unchecked\")\n    public <T extends BeanDescription> T introspect(JavaType type) {\n        return (T) getClassIntrospector().forDeserialization(this, type, this);\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    public <T extends BeanDescription> T introspectForCreation(JavaType type) {\n        return (T) getClassIntrospector().forCreation(this, type, this);\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    public <T extends BeanDescription> T introspectForBuilder(JavaType type) {\n        return (T) getClassIntrospector().forDeserializationWithBuilder(this, type, this);\n    }\n\n    \n    \n    \n    public TypeDeserializer findTypeDeserializer(JavaType baseType) throws JsonMappingException {\n        BeanDescription bean = introspectClassAnnotations(baseType.getRawClass());\n        AnnotatedClass ac = bean.getClassInfo();\n        TypeResolverBuilder<?> b = getAnnotationIntrospector().findTypeResolver(this, ac, baseType);\n\n        \n        Collection<NamedType> subtypes = null;\n        if (b == null) {\n            b = getDefaultTyper(baseType);\n            if (b == null) {\n                return null;\n            }\n        } else {\n            subtypes = getSubtypeResolver().collectAndResolveSubtypesByTypeId(this, ac);\n        }\n        \n        \n        return b.buildTypeDeserializer(this, baseType, subtypes);\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind;\n\nimport java.text.DateFormat;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.cfg.*;\nimport com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\nimport com.fasterxml.jackson.databind.introspect.*;\nimport com.fasterxml.jackson.databind.jsontype.*;\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport com.fasterxml.jackson.databind.util.LinkedNode;\nimport com.fasterxml.jackson.databind.util.RootNameLookup;\n\n\npublic final class DeserializationConfig extends MapperConfigBase<DeserializationFeature, DeserializationConfig> implements java.io.Serializable { private static final long serialVersionUID = 1; protected final LinkedNode<DeserializationProblemHandler> _problemHandlers; protected final JsonNodeFactory _nodeFactory; protected final int _deserFeatures; protected final int _parserFeatures; protected final int _parserFeaturesToChange; protected final int _formatReadFeatures; protected final int _formatReadFeaturesToChange; public DeserializationConfig(BaseSettings base, SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames) {\n        super(base, str, mixins, rootNames);\n        _deserFeatures = collectFeatureDefaults(DeserializationFeature.class);\n        _nodeFactory = JsonNodeFactory.instance;\n        _problemHandlers = null;\n        _parserFeatures = 0;\n        _parserFeaturesToChange = 0;\n        _formatReadFeatures = 0;\n        _formatReadFeaturesToChange = 0;\n    }\n\n    private DeserializationConfig(DeserializationConfig src, int mapperFeatures, int deserFeatures, int parserFeatures, int parserFeatureMask, int formatFeatures, int formatFeatureMask) {\n        super(src, mapperFeatures);\n        _deserFeatures = deserFeatures;\n        _nodeFactory = src._nodeFactory;\n        _problemHandlers = src._problemHandlers;\n        _parserFeatures = parserFeatures;\n        _parserFeaturesToChange = parserFeatureMask;\n        _formatReadFeatures = formatFeatures;\n        _formatReadFeaturesToChange = formatFeatureMask;\n    }\n    \n    \n    private DeserializationConfig(DeserializationConfig src, SubtypeResolver str) {\n        super(src, str);\n        _deserFeatures = src._deserFeatures;\n        _nodeFactory = src._nodeFactory;\n        _problemHandlers = src._problemHandlers;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    private DeserializationConfig(DeserializationConfig src, BaseSettings base) {\n        super(src, base);\n        _deserFeatures = src._deserFeatures;\n        _nodeFactory = src._nodeFactory;\n        _problemHandlers = src._problemHandlers;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n    \n    private DeserializationConfig(DeserializationConfig src, JsonNodeFactory f) {\n        super(src);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = f;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    private DeserializationConfig(DeserializationConfig src, LinkedNode<DeserializationProblemHandler> problemHandlers) {\n        super(src);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    private DeserializationConfig(DeserializationConfig src, PropertyName rootName) {\n        super(src, rootName);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    private DeserializationConfig(DeserializationConfig src, Class<?> view) {\n        super(src, view);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    protected DeserializationConfig(DeserializationConfig src, ContextAttributes attrs) {\n        super(src, attrs);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins) {\n        super(src, mixins);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    \n    protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins, RootNameLookup rootNames) {\n        super(src, mixins, rootNames);\n        _deserFeatures = src._deserFeatures;\n        _problemHandlers = src._problemHandlers;\n        _nodeFactory = src._nodeFactory;\n        _parserFeatures = src._parserFeatures;\n        _parserFeaturesToChange = src._parserFeaturesToChange;\n        _formatReadFeatures = src._formatReadFeatures;\n        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;\n    }\n\n    \n    protected BaseSettings getBaseSettings() { return _base; }\n\n    \n    \n    @Override\n    public DeserializationConfig with(MapperFeature... features) {\n        int newMapperFlags = _mapperFeatures;\n        for (MapperFeature f : features) {\n            newMapperFlags |= f.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this :\n            new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n                    \n    }\n\n    @Override\n    public DeserializationConfig without(MapperFeature... features) {\n        int newMapperFlags = _mapperFeatures;\n        for (MapperFeature f : features) {\n             newMapperFlags &= ~f.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this :\n            new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    @Override\n    public DeserializationConfig with(MapperFeature feature, boolean state) {\n        int newMapperFlags;\n        if (state) {\n            newMapperFlags = _mapperFeatures | feature.getMask();\n        } else {\n            newMapperFlags = _mapperFeatures & ~feature.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this :\n            new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    @Override\n    public DeserializationConfig with(ClassIntrospector ci) {\n        return _withBase(_base.withClassIntrospector(ci));\n    }\n\n    @Override\n    public DeserializationConfig with(AnnotationIntrospector ai) {\n        return _withBase(_base.withAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public DeserializationConfig with(VisibilityChecker<?> vc) {\n        return _withBase(_base.withVisibilityChecker(vc));\n    }\n\n    @Override\n    public DeserializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n        return _withBase( _base.withVisibility(forMethod, visibility));\n    }\n    \n    @Override\n    public DeserializationConfig with(TypeResolverBuilder<?> trb) {\n        return _withBase(_base.withTypeResolverBuilder(trb));\n    }\n\n    @Override\n    public DeserializationConfig with(SubtypeResolver str) {\n        return (_subtypeResolver == str) ? this : new DeserializationConfig(this, str);\n    }\n    \n    @Override\n    public DeserializationConfig with(PropertyNamingStrategy pns) {\n        return _withBase(_base.withPropertyNamingStrategy(pns));\n    }\n\n    @Override\n    public DeserializationConfig withRootName(PropertyName rootName) {\n        if (rootName == null) {\n            if (_rootName == null) {\n                return this;\n            }\n        } else if (rootName.equals(_rootName)) {\n            return this;\n        }\n        return new DeserializationConfig(this, rootName);\n    }\n\n    @Override\n    public DeserializationConfig with(TypeFactory tf) {\n        return _withBase( _base.withTypeFactory(tf));\n    }\n\n    @Override\n    public DeserializationConfig with(DateFormat df) {\n        return _withBase(_base.withDateFormat(df));\n    }\n    \n    @Override\n    public DeserializationConfig with(HandlerInstantiator hi) {\n        return _withBase(_base.withHandlerInstantiator(hi));\n    }\n\n    @Override\n    public DeserializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public DeserializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public DeserializationConfig withView(Class<?> view) {\n        return (_view == view) ? this : new DeserializationConfig(this, view);\n    }\n\n    @Override\n    public DeserializationConfig with(Locale l) {\n        return _withBase(_base.with(l));\n    }\n\n    @Override\n    public DeserializationConfig with(TimeZone tz) {\n        return _withBase(_base.with(tz));\n    }\n\n    @Override\n    public DeserializationConfig with(Base64Variant base64) {\n        return _withBase(_base.with(base64));\n    }\n\n    @Override\n    public DeserializationConfig with(ContextAttributes attrs) {\n        return (attrs == _attributes) ? this : new DeserializationConfig(this, attrs);\n    }\n    \n    private final DeserializationConfig _withBase(BaseSettings newBase) {\n        return (_base == newBase) ? this : new DeserializationConfig(this, newBase);\n    }\n\n    \n\n    \n    public DeserializationConfig with(DeserializationFeature feature) {\n        int newDeserFeatures = (_deserFeatures | feature.getMask());\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig with(DeserializationFeature first, DeserializationFeature... features) {\n        int newDeserFeatures = _deserFeatures | first.getMask();\n        for (DeserializationFeature f : features) {\n            newDeserFeatures |= f.getMask();\n        }\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig withFeatures(DeserializationFeature... features) {\n        int newDeserFeatures = _deserFeatures;\n        for (DeserializationFeature f : features) {\n            newDeserFeatures |= f.getMask();\n        }\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n    \n    \n    public DeserializationConfig without(DeserializationFeature feature) {\n        int newDeserFeatures = _deserFeatures & ~feature.getMask();\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig without(DeserializationFeature first, DeserializationFeature... features) {\n        int newDeserFeatures = _deserFeatures & ~first.getMask();\n        for (DeserializationFeature f : features) {\n            newDeserFeatures &= ~f.getMask();\n        }\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig withoutFeatures(DeserializationFeature... features) {\n        int newDeserFeatures = _deserFeatures;\n        for (DeserializationFeature f : features) {\n            newDeserFeatures &= ~f.getMask();\n        }\n        return (newDeserFeatures == _deserFeatures) ? this :\n            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n\n    \n    public DeserializationConfig with(JsonParser.Feature feature) {\n        int newSet = _parserFeatures | feature.getMask();\n        int newMask = _parserFeaturesToChange | feature.getMask();\n        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig withFeatures(JsonParser.Feature... features) {\n        int newSet = _parserFeatures;\n        int newMask = _parserFeaturesToChange;\n        for (JsonParser.Feature f : features) {\n            int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n        }\n        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n    \n    \n    public DeserializationConfig without(JsonParser.Feature feature) {\n        int newSet = _parserFeatures & ~feature.getMask();\n        int newMask = _parserFeaturesToChange | feature.getMask();\n        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n    public DeserializationConfig withoutFeatures(JsonParser.Feature... features) {\n        int newSet = _parserFeatures;\n        int newMask = _parserFeaturesToChange;\n        for (JsonParser.Feature f : features) {\n            int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n        }\n        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    newSet, newMask,\n                    _formatReadFeatures, _formatReadFeaturesToChange);\n    }\n\n    \n\n    \n    public DeserializationConfig with(FormatFeature feature) {\n        int newSet = _formatReadFeatures | feature.getMask();\n        int newMask = _formatReadFeaturesToChange | feature.getMask();\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }\n\n    \n    public DeserializationConfig withFeatures(FormatFeature... features) {\n        int newSet = _formatReadFeatures;\n        int newMask = _formatReadFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n        }\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }\n    \n    \n    public DeserializationConfig without(FormatFeature feature) {\n        int newSet = _formatReadFeatures & ~feature.getMask();\n        int newMask = _formatReadFeaturesToChange | feature.getMask();\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }\n\n    \n    public DeserializationConfig withoutFeatures(FormatFeature... features) {\n        int newSet = _formatReadFeatures;\n        int newMask = _formatReadFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n        }\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    _parserFeatures, _parserFeaturesToChange,\n                    newSet, newMask);\n    }    \n\n    \n\n    \n    public DeserializationConfig with(JsonNodeFactory f) {\n        if (_nodeFactory == f) {\n            return this;\n        }\n        return new DeserializationConfig(this, f);\n    }\n\n    \n    public DeserializationConfig withHandler(DeserializationProblemHandler h) {\n        \n        if (LinkedNode.contains(_problemHandlers, h)) {\n            return this;\n        }\n        return new DeserializationConfig(this,\n                new LinkedNode<DeserializationProblemHandler>(h, _problemHandlers));\n    }\n\n    \n    public DeserializationConfig withNoProblemHandlers() {\n        if (_problemHandlers == null) {\n            return this;\n        }\n        return new DeserializationConfig(this,\n                (LinkedNode<DeserializationProblemHandler>) null);\n    }\n\n    \n\n    \n    public void initialize(JsonParser p) {\n        if (_parserFeaturesToChange != 0) {\n            p.overrideStdFeatures(_parserFeatures, _parserFeaturesToChange);\n        }\n        if (_formatReadFeaturesToChange != 0) {\n            p.overrideFormatFeatures(_formatReadFeatures, _formatReadFeaturesToChange);\n        }\n    }\n\n    \n\n    \n    @Override\n    public AnnotationIntrospector getAnnotationIntrospector() {\n        \n        if (isEnabled(MapperFeature.USE_ANNOTATIONS)) {\n            return super.getAnnotationIntrospector();\n        }\n        return NopAnnotationIntrospector.instance;\n    }\n\n    \n    @Override\n    public BeanDescription introspectClassAnnotations(JavaType type) {\n        return getClassIntrospector().forClassAnnotations(this, type, this);\n    }\n\n    \n    @Override\n    public BeanDescription introspectDirectClassAnnotations(JavaType type) {\n        return getClassIntrospector().forDirectClassAnnotations(this, type, this);\n    }\n\n    @Override\n    public VisibilityChecker<?> getDefaultVisibilityChecker() {\n        VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n        if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS)) {\n            vchecker = vchecker.withSetterVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n            vchecker = vchecker.withCreatorVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n            vchecker = vchecker.withGetterVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) {\n            vchecker = vchecker.withIsGetterVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n            vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n        }\n        return vchecker;\n    }\n\n    \n    \n    \n    @Override\n    public JsonInclude.Value getDefaultPropertyInclusion() {\n        return EMPTY_INCLUDE;\n    }\n\n    @Override\n    public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) {\n        return EMPTY_INCLUDE;\n    }\n\n    @Override\n    public JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) {\n        \n        return EMPTY_FORMAT;\n    }\n\n    \n\n    @Override\n    public boolean useRootWrapping() {\n        if (_rootName != null) { \n            return !_rootName.isEmpty();\n        }\n        return isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE);\n    }\n\n    public final boolean isEnabled(DeserializationFeature f) {\n        return (_deserFeatures & f.getMask()) != 0;\n    }\n\n    public final boolean isEnabled(JsonParser.Feature f, JsonFactory factory) {\n        int mask = f.getMask();\n        if ((_parserFeaturesToChange & mask) != 0) {\n            return (_parserFeatures & f.getMask()) != 0;\n        }\n        return factory.isEnabled(f);\n    }\n\n    \n    public final boolean hasDeserializationFeatures(int featureMask) {\n        return (_deserFeatures & featureMask) == featureMask;\n    }\n\n    \n    public final boolean hasSomeOfFeatures(int featureMask) {\n        return (_deserFeatures & featureMask) != 0;\n    }\n\n    \n    public final int getDeserializationFeatures() {\n        return _deserFeatures;\n    }\n\n    \n\n    \n    public LinkedNode<DeserializationProblemHandler> getProblemHandlers() {\n        return _problemHandlers;\n    }\n\n    public final JsonNodeFactory getNodeFactory() {\n        return _nodeFactory;\n    }\n\n    \n\n    \n    @SuppressWarnings(\"unchecked\")\n    public <T extends BeanDescription> T introspect(JavaType type) {\n        return (T) getClassIntrospector().forDeserialization(this, type, this);\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    public <T extends BeanDescription> T introspectForCreation(JavaType type) {\n        return (T) getClassIntrospector().forCreation(this, type, this);\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    public <T extends BeanDescription> T introspectForBuilder(JavaType type) {\n        return (T) getClassIntrospector().forDeserializationWithBuilder(this, type, this);\n    }\n\n    \n    \n    \n    public TypeDeserializer findTypeDeserializer(JavaType baseType) throws JsonMappingException {\n        BeanDescription bean = introspectClassAnnotations(baseType.getRawClass());\n        AnnotatedClass ac = bean.getClassInfo();\n        TypeResolverBuilder<?> b = getAnnotationIntrospector().findTypeResolver(this, ac, baseType);\n\n        \n        Collection<NamedType> subtypes = null;\n        if (b == null) {\n            b = getDefaultTyper(baseType);\n            if (b == null) {\n                return null;\n            }\n        } else {\n            subtypes = getSubtypeResolver().collectAndResolveSubtypesByTypeId(this, ac);\n        }\n        \n        \n        return b.buildTypeDeserializer(this, baseType, subtypes);\n    }\n}\n",
      "buggy_signatures": [
        "private DeserializationConfig(DeserializationConfig src, int mapperFeatures, int deserFeatures, int parserFeatures, int parserFeatureMask, int formatFeatures, int formatFeatureMask)",
        "private DeserializationConfig(DeserializationConfig src, SubtypeResolver str)",
        "private DeserializationConfig(DeserializationConfig src, BaseSettings base)",
        "private DeserializationConfig(DeserializationConfig src, JsonNodeFactory f)",
        "private DeserializationConfig(DeserializationConfig src, LinkedNode<DeserializationProblemHandler> problemHandlers)",
        "private DeserializationConfig(DeserializationConfig src, PropertyName rootName)",
        "private DeserializationConfig(DeserializationConfig src, Class<?> view)",
        "protected DeserializationConfig(DeserializationConfig src, ContextAttributes attrs)",
        "protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins)",
        "protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins, RootNameLookup rootNames)",
        "protected BaseSettings getBaseSettings()",
        "public DeserializationConfig with(MapperFeature... features)",
        "public DeserializationConfig without(MapperFeature... features)",
        "public DeserializationConfig with(MapperFeature feature, boolean state)",
        "public DeserializationConfig with(ClassIntrospector ci)",
        "public DeserializationConfig with(AnnotationIntrospector ai)",
        "public DeserializationConfig with(VisibilityChecker<?> vc)",
        "public DeserializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)",
        "public DeserializationConfig with(TypeResolverBuilder<?> trb)",
        "public DeserializationConfig with(SubtypeResolver str)",
        "public DeserializationConfig with(PropertyNamingStrategy pns)",
        "public DeserializationConfig withRootName(PropertyName rootName)",
        "public DeserializationConfig with(TypeFactory tf)",
        "public DeserializationConfig with(DateFormat df)",
        "public DeserializationConfig with(HandlerInstantiator hi)",
        "public DeserializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public DeserializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public DeserializationConfig withView(Class<?> view)",
        "public DeserializationConfig with(Locale l)",
        "public DeserializationConfig with(TimeZone tz)",
        "public DeserializationConfig with(Base64Variant base64)",
        "public DeserializationConfig with(ContextAttributes attrs)",
        "private final DeserializationConfig _withBase(BaseSettings newBase)",
        "public DeserializationConfig with(DeserializationFeature feature)",
        "public DeserializationConfig with(DeserializationFeature first, DeserializationFeature... features)",
        "public DeserializationConfig withFeatures(DeserializationFeature... features)",
        "public DeserializationConfig without(DeserializationFeature feature)",
        "public DeserializationConfig without(DeserializationFeature first, DeserializationFeature... features)",
        "public DeserializationConfig withoutFeatures(DeserializationFeature... features)",
        "public DeserializationConfig with(JsonParser.Feature feature)",
        "public DeserializationConfig withFeatures(JsonParser.Feature... features)",
        "public DeserializationConfig without(JsonParser.Feature feature)",
        "public DeserializationConfig withoutFeatures(JsonParser.Feature... features)",
        "public DeserializationConfig with(FormatFeature feature)",
        "public DeserializationConfig withFeatures(FormatFeature... features)",
        "public DeserializationConfig without(FormatFeature feature)",
        "public DeserializationConfig withoutFeatures(FormatFeature... features)",
        "public DeserializationConfig with(JsonNodeFactory f)",
        "public DeserializationConfig withHandler(DeserializationProblemHandler h)",
        "public DeserializationConfig withNoProblemHandlers()",
        "public void initialize(JsonParser p)",
        "public AnnotationIntrospector getAnnotationIntrospector()",
        "public BeanDescription introspectClassAnnotations(JavaType type)",
        "public BeanDescription introspectDirectClassAnnotations(JavaType type)",
        "public VisibilityChecker<?> getDefaultVisibilityChecker()",
        "public JsonInclude.Value getDefaultPropertyInclusion()",
        "public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType)",
        "public JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType)",
        "public boolean useRootWrapping()",
        "public final boolean isEnabled(DeserializationFeature f)",
        "public final boolean isEnabled(JsonParser.Feature f, JsonFactory factory)",
        "public final boolean hasDeserializationFeatures(int featureMask)",
        "public final boolean hasSomeOfFeatures(int featureMask)",
        "public final int getDeserializationFeatures()",
        "public LinkedNode<DeserializationProblemHandler> getProblemHandlers()",
        "public final JsonNodeFactory getNodeFactory()",
        "public <T extends BeanDescription> T introspect(JavaType type)",
        "public <T extends BeanDescription> T introspectForCreation(JavaType type)",
        "public <T extends BeanDescription> T introspectForBuilder(JavaType type)",
        "public TypeDeserializer findTypeDeserializer(JavaType baseType) throws JsonMappingException"
      ],
      "fixed_signatures": [
        "private DeserializationConfig(DeserializationConfig src, int mapperFeatures, int deserFeatures, int parserFeatures, int parserFeatureMask, int formatFeatures, int formatFeatureMask)",
        "private DeserializationConfig(DeserializationConfig src, SubtypeResolver str)",
        "private DeserializationConfig(DeserializationConfig src, BaseSettings base)",
        "private DeserializationConfig(DeserializationConfig src, JsonNodeFactory f)",
        "private DeserializationConfig(DeserializationConfig src, LinkedNode<DeserializationProblemHandler> problemHandlers)",
        "private DeserializationConfig(DeserializationConfig src, PropertyName rootName)",
        "private DeserializationConfig(DeserializationConfig src, Class<?> view)",
        "protected DeserializationConfig(DeserializationConfig src, ContextAttributes attrs)",
        "protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins)",
        "protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins, RootNameLookup rootNames)",
        "protected BaseSettings getBaseSettings()",
        "public DeserializationConfig with(MapperFeature... features)",
        "public DeserializationConfig without(MapperFeature... features)",
        "public DeserializationConfig with(MapperFeature feature, boolean state)",
        "public DeserializationConfig with(ClassIntrospector ci)",
        "public DeserializationConfig with(AnnotationIntrospector ai)",
        "public DeserializationConfig with(VisibilityChecker<?> vc)",
        "public DeserializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)",
        "public DeserializationConfig with(TypeResolverBuilder<?> trb)",
        "public DeserializationConfig with(SubtypeResolver str)",
        "public DeserializationConfig with(PropertyNamingStrategy pns)",
        "public DeserializationConfig withRootName(PropertyName rootName)",
        "public DeserializationConfig with(TypeFactory tf)",
        "public DeserializationConfig with(DateFormat df)",
        "public DeserializationConfig with(HandlerInstantiator hi)",
        "public DeserializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public DeserializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public DeserializationConfig withView(Class<?> view)",
        "public DeserializationConfig with(Locale l)",
        "public DeserializationConfig with(TimeZone tz)",
        "public DeserializationConfig with(Base64Variant base64)",
        "public DeserializationConfig with(ContextAttributes attrs)",
        "private final DeserializationConfig _withBase(BaseSettings newBase)",
        "public DeserializationConfig with(DeserializationFeature feature)",
        "public DeserializationConfig with(DeserializationFeature first, DeserializationFeature... features)",
        "public DeserializationConfig withFeatures(DeserializationFeature... features)",
        "public DeserializationConfig without(DeserializationFeature feature)",
        "public DeserializationConfig without(DeserializationFeature first, DeserializationFeature... features)",
        "public DeserializationConfig withoutFeatures(DeserializationFeature... features)",
        "public DeserializationConfig with(JsonParser.Feature feature)",
        "public DeserializationConfig withFeatures(JsonParser.Feature... features)",
        "public DeserializationConfig without(JsonParser.Feature feature)",
        "public DeserializationConfig withoutFeatures(JsonParser.Feature... features)",
        "public DeserializationConfig with(FormatFeature feature)",
        "public DeserializationConfig withFeatures(FormatFeature... features)",
        "public DeserializationConfig without(FormatFeature feature)",
        "public DeserializationConfig withoutFeatures(FormatFeature... features)",
        "public DeserializationConfig with(JsonNodeFactory f)",
        "public DeserializationConfig withHandler(DeserializationProblemHandler h)",
        "public DeserializationConfig withNoProblemHandlers()",
        "public void initialize(JsonParser p)",
        "public AnnotationIntrospector getAnnotationIntrospector()",
        "public BeanDescription introspectClassAnnotations(JavaType type)",
        "public BeanDescription introspectDirectClassAnnotations(JavaType type)",
        "public VisibilityChecker<?> getDefaultVisibilityChecker()",
        "public JsonInclude.Value getDefaultPropertyInclusion()",
        "public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType)",
        "public JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType)",
        "public boolean useRootWrapping()",
        "public final boolean isEnabled(DeserializationFeature f)",
        "public final boolean isEnabled(JsonParser.Feature f, JsonFactory factory)",
        "public final boolean hasDeserializationFeatures(int featureMask)",
        "public final boolean hasSomeOfFeatures(int featureMask)",
        "public final int getDeserializationFeatures()",
        "public LinkedNode<DeserializationProblemHandler> getProblemHandlers()",
        "public final JsonNodeFactory getNodeFactory()",
        "public <T extends BeanDescription> T introspect(JavaType type)",
        "public <T extends BeanDescription> T introspectForCreation(JavaType type)",
        "public <T extends BeanDescription> T introspectForBuilder(JavaType type)",
        "public TypeDeserializer findTypeDeserializer(JavaType baseType) throws JsonMappingException"
      ],
      "methods": [
        {
          "buggy_method": "  public VisibilityChecker<?> getDefaultVisibilityChecker() {\n  VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n  if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS)) {\n  vchecker = vchecker.withSetterVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n  vchecker = vchecker.withCreatorVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n  vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n  }\n  return vchecker;\n  }",
          "fixed_method": "  public VisibilityChecker<?> getDefaultVisibilityChecker() {\n  VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n  if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS)) {\n  vchecker = vchecker.withSetterVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n  vchecker = vchecker.withCreatorVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n  vchecker = vchecker.withGetterVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) {\n  vchecker = vchecker.withIsGetterVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n  vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n  }\n  return vchecker;\n  }",
          "diff": [
            "@@ -777,6 +777,12 @@",
            "         if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n",
            "             vchecker = vchecker.withCreatorVisibility(Visibility.NONE);\n",
            "         }\n",
            "+        if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n",
            "+            vchecker = vchecker.withGetterVisibility(Visibility.NONE);\n",
            "+        }\n",
            "+        if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) {\n",
            "+            vchecker = vchecker.withIsGetterVisibility(Visibility.NONE);\n",
            "+        }\n",
            "         if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n",
            "             vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n",
            "         }\n"
          ],
          "changed_lines": 6
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/SerializationConfig.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind;\n\nimport java.text.DateFormat;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\nimport com.fasterxml.jackson.core.util.Instantiatable;\nimport com.fasterxml.jackson.databind.cfg.*;\nimport com.fasterxml.jackson.databind.introspect.ClassIntrospector;\nimport com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;\nimport com.fasterxml.jackson.databind.introspect.VisibilityChecker;\nimport com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\nimport com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.ser.FilterProvider;\nimport com.fasterxml.jackson.databind.ser.SerializerFactory;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport com.fasterxml.jackson.databind.util.RootNameLookup;\n\n\npublic final class SerializationConfig extends MapperConfigBase<SerializationFeature, SerializationConfig> implements java.io.Serializable { private static final long serialVersionUID = 1; protected final static PrettyPrinter DEFAULT_PRETTY_PRINTER = new DefaultPrettyPrinter(); protected final static JsonInclude.Value DEFAULT_INCLUSION = JsonInclude.Value.empty(); protected final FilterProvider _filterProvider; protected final PrettyPrinter _defaultPrettyPrinter; protected final int _serFeatures; protected final int _generatorFeatures; protected final int _generatorFeaturesToChange; protected final int _formatWriteFeatures; protected final int _formatWriteFeaturesToChange; protected final JsonInclude.Value _serializationInclusion; public SerializationConfig(BaseSettings base, SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames) {\n        super(base, str, mixins, rootNames);\n        _serFeatures = collectFeatureDefaults(SerializationFeature.class);\n        _filterProvider = null;\n        _defaultPrettyPrinter = DEFAULT_PRETTY_PRINTER;\n        _generatorFeatures = 0;\n        _generatorFeaturesToChange = 0;\n        _formatWriteFeatures = 0;\n        _formatWriteFeaturesToChange = 0;\n        _serializationInclusion = DEFAULT_INCLUSION;\n    }\n\n    private SerializationConfig(SerializationConfig src, SubtypeResolver str) {\n        super(src, str);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    private SerializationConfig(SerializationConfig src, int mapperFeatures, int serFeatures, int generatorFeatures, int generatorFeatureMask, int formatFeatures, int formatFeaturesMask) {\n        super(src, mapperFeatures);\n        _serFeatures = serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = generatorFeatures;\n        _generatorFeaturesToChange = generatorFeatureMask;\n        _formatWriteFeatures = formatFeatures;\n        _formatWriteFeaturesToChange = formatFeaturesMask;\n    }\n    \n    private SerializationConfig(SerializationConfig src, BaseSettings base) {\n        super(src, base);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    private SerializationConfig(SerializationConfig src, FilterProvider filters) {\n        super(src);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = filters;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    private SerializationConfig(SerializationConfig src, Class<?> view) {\n        super(src, view);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    private SerializationConfig(SerializationConfig src, JsonInclude.Value incl) {\n        super(src);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = incl;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    private SerializationConfig(SerializationConfig src, PropertyName rootName) {\n        super(src, rootName);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    \n    protected SerializationConfig(SerializationConfig src, ContextAttributes attrs) {\n        super(src, attrs);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    \n    protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins) {\n        super(src, mixins);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n    \n    \n    protected SerializationConfig(SerializationConfig src, PrettyPrinter defaultPP) {\n        super(src);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = defaultPP;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    \n    protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins, RootNameLookup rootNames) {\n        super(src, mixins, rootNames);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    \n\n    \n    @Override\n    public SerializationConfig with(MapperFeature... features) {\n        int newMapperFlags = _mapperFeatures;\n        for (MapperFeature f : features) {\n            newMapperFlags |= f.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this\n                : new SerializationConfig(this, newMapperFlags, _serFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n    \n    \n    @Override\n    public SerializationConfig without(MapperFeature... features) {\n        int newMapperFlags = _mapperFeatures;\n        for (MapperFeature f : features) {\n             newMapperFlags &= ~f.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this\n                : new SerializationConfig(this, newMapperFlags, _serFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    @Override\n    public SerializationConfig with(MapperFeature feature, boolean state) {\n        int newMapperFlags;\n        if (state) {\n            newMapperFlags = _mapperFeatures | feature.getMask();\n        } else {\n            newMapperFlags = _mapperFeatures & ~feature.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this\n            : new SerializationConfig(this, newMapperFlags, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n    \n    @Override\n    public SerializationConfig with(AnnotationIntrospector ai) {\n        return _withBase(_base.withAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public SerializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public SerializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public SerializationConfig with(ClassIntrospector ci) {\n        return _withBase(_base.withClassIntrospector(ci));\n    }\n\n    \n    @Override\n    public SerializationConfig with(DateFormat df) {\n        SerializationConfig cfg =  new SerializationConfig(this, _base.withDateFormat(df));\n        \n        if (df == null) {\n            cfg = cfg.with(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        } else {\n            cfg = cfg.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        }\n        return cfg;\n    }\n\n    @Override\n    public SerializationConfig with(HandlerInstantiator hi) {\n        return _withBase(_base.withHandlerInstantiator(hi));\n    }\n\n    @Override\n    public SerializationConfig with(PropertyNamingStrategy pns) {\n        return _withBase(_base.withPropertyNamingStrategy(pns));\n    }\n\n    @Override\n    public SerializationConfig withRootName(PropertyName rootName) {\n        if (rootName == null) {\n            if (_rootName == null) {\n                return this;\n            }\n        } else if (rootName.equals(_rootName)) {\n            return this;\n        }\n        return new SerializationConfig(this, rootName);\n    }\n\n    @Override\n    public SerializationConfig with(SubtypeResolver str) {\n        return (str == _subtypeResolver)? this : new SerializationConfig(this, str);\n    }\n\n    @Override\n    public SerializationConfig with(TypeFactory tf) {\n        return _withBase(_base.withTypeFactory(tf));\n    }\n\n    @Override\n    public SerializationConfig with(TypeResolverBuilder<?> trb) {\n        return _withBase(_base.withTypeResolverBuilder(trb));\n    }\n\n    @Override\n    public SerializationConfig withView(Class<?> view) {\n        return (_view == view) ? this : new SerializationConfig(this, view);\n    }\n\n    @Override\n    public SerializationConfig with(VisibilityChecker<?> vc) {\n        return _withBase(_base.withVisibilityChecker(vc));\n    }\n\n    @Override\n    public SerializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n        return _withBase(_base.withVisibility(forMethod, visibility));\n    }\n\n    @Override\n    public SerializationConfig with(Locale l) {\n        return _withBase(_base.with(l));\n    }\n\n    @Override\n    public SerializationConfig with(TimeZone tz) {\n        return _withBase(_base.with(tz));\n    }\n\n    @Override\n    public SerializationConfig with(Base64Variant base64) {\n        return _withBase(_base.with(base64));\n    }\n\n    @Override\n    public SerializationConfig with(ContextAttributes attrs) {\n        return (attrs == _attributes) ? this : new SerializationConfig(this, attrs);\n    }\n\n    private final SerializationConfig _withBase(BaseSettings newBase) {\n        return (_base == newBase) ? this : new SerializationConfig(this, newBase);\n    }\n\n    \n\n    \n    public SerializationConfig with(SerializationFeature feature) {\n        int newSerFeatures = _serFeatures | feature.getMask();\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig with(SerializationFeature first, SerializationFeature... features) {\n        int newSerFeatures = _serFeatures | first.getMask();\n        for (SerializationFeature f : features) {\n            newSerFeatures |= f.getMask();\n        }\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig withFeatures(SerializationFeature... features) {\n        int newSerFeatures = _serFeatures;\n        for (SerializationFeature f : features) {\n            newSerFeatures |= f.getMask();\n        }\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig without(SerializationFeature feature) {\n        int newSerFeatures = _serFeatures & ~feature.getMask();\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig without(SerializationFeature first, SerializationFeature... features) {\n        int newSerFeatures = _serFeatures & ~first.getMask();\n        for (SerializationFeature f : features) {\n            newSerFeatures &= ~f.getMask();\n        }\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig withoutFeatures(SerializationFeature... features) {\n        int newSerFeatures = _serFeatures;\n        for (SerializationFeature f : features) {\n            newSerFeatures &= ~f.getMask();\n        }\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    \n    public SerializationConfig with(JsonGenerator.Feature feature) {\n        int newSet = _generatorFeatures | feature.getMask();\n        int newMask = _generatorFeaturesToChange | feature.getMask();\n        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig withFeatures(JsonGenerator.Feature... features) {\n        int newSet = _generatorFeatures;\n        int newMask = _generatorFeaturesToChange;\n        for (JsonGenerator.Feature f : features) {\n            int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n        }\n        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig without(JsonGenerator.Feature feature) {\n        int newSet = _generatorFeatures & ~feature.getMask();\n        int newMask = _generatorFeaturesToChange | feature.getMask();\n        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig withoutFeatures(JsonGenerator.Feature... features) {\n        int newSet = _generatorFeatures;\n        int newMask = _generatorFeaturesToChange;\n        for (JsonGenerator.Feature f : features) {\n            int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n        }\n        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    \n    public SerializationConfig with(FormatFeature feature) {\n        int newSet = _formatWriteFeatures | feature.getMask();\n        int newMask = _formatWriteFeaturesToChange | feature.getMask();\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }\n\n    \n    public SerializationConfig withFeatures(FormatFeature... features) {\n        int newSet = _formatWriteFeatures;\n        int newMask = _formatWriteFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n        }\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }\n\n    \n    public SerializationConfig without(FormatFeature feature) {\n        int newSet = _formatWriteFeatures & ~feature.getMask();\n        int newMask = _formatWriteFeaturesToChange | feature.getMask();\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }\n\n    \n    public SerializationConfig withoutFeatures(FormatFeature... features) {\n        int newSet = _formatWriteFeatures;\n        int newMask = _formatWriteFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n        }\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }\n    \n    \n\n    public SerializationConfig withFilters(FilterProvider filterProvider) {\n        return (filterProvider == _filterProvider) ? this : new SerializationConfig(this, filterProvider);\n    }\n\n    \n    @Deprecated\n    public SerializationConfig withSerializationInclusion(JsonInclude.Include incl) {\n        return withPropertyInclusion(DEFAULT_INCLUSION.withValueInclusion(incl));\n    }\n\n    \n    public SerializationConfig withPropertyInclusion(JsonInclude.Value incl) {\n        if (_serializationInclusion.equals(incl)) {\n            return this;\n        }\n        return new SerializationConfig(this, incl);\n    }\n    \n    \n    public SerializationConfig withDefaultPrettyPrinter(PrettyPrinter pp) {\n        return (_defaultPrettyPrinter == pp) ? this:  new SerializationConfig(this, pp);\n    }\n\n    \n\n    public PrettyPrinter constructDefaultPrettyPrinter() {\n        PrettyPrinter pp = _defaultPrettyPrinter;\n        if (pp instanceof Instantiatable<?>) {\n            pp = (PrettyPrinter) ((Instantiatable<?>) pp).createInstance();\n        }\n        return pp;\n    }\n    \n    \n\n    \n    public void initialize(JsonGenerator g) {\n        if (SerializationFeature.INDENT_OUTPUT.enabledIn(_serFeatures)) {\n            \n            if (g.getPrettyPrinter() == null) {\n                PrettyPrinter pp = constructDefaultPrettyPrinter();\n                if (pp != null) {\n                    g.setPrettyPrinter(pp);\n                }\n            }\n        }\n        @SuppressWarnings(\"deprecation\")\n        boolean useBigDec = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_serFeatures);\n\n        int mask = _generatorFeaturesToChange;\n        if ((mask != 0) || useBigDec) {\n            int newFlags = _generatorFeatures;\n            \n            if (useBigDec) {\n                int f = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.getMask();\n                newFlags |= f;\n                mask |= f;\n            }\n            g.overrideStdFeatures(newFlags, mask);\n        }\n        if (_formatWriteFeaturesToChange != 0) {\n            g.overrideFormatFeatures(_formatWriteFeatures, _formatWriteFeaturesToChange);\n        }\n    }\n\n    \n\n    @Override\n    public AnnotationIntrospector getAnnotationIntrospector() {\n        if (isEnabled(MapperFeature.USE_ANNOTATIONS)) {\n            return super.getAnnotationIntrospector();\n        }\n        return AnnotationIntrospector.nopInstance();\n    }\n\n    \n    @Override\n    public BeanDescription introspectClassAnnotations(JavaType type) {\n        return getClassIntrospector().forClassAnnotations(this, type, this);\n    }\n\n    \n    @Override\n    public BeanDescription introspectDirectClassAnnotations(JavaType type) {\n        return getClassIntrospector().forDirectClassAnnotations(this, type, this);\n    }\n\n    @Override\n    public VisibilityChecker<?> getDefaultVisibilityChecker() {\n        VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n        \n        if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n            vchecker = vchecker.withGetterVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) {\n            vchecker = vchecker.withIsGetterVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n            vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n        }\n        return vchecker;\n    }\n\n    \n    \n    \n    @Deprecated\n    public JsonInclude.Include getSerializationInclusion() {\n        JsonInclude.Include incl = _serializationInclusion.getValueInclusion();\n        return (incl == JsonInclude.Include.USE_DEFAULTS) ? JsonInclude.Include.ALWAYS : incl;\n    }\n\n    @Override\n    public JsonInclude.Value getDefaultPropertyInclusion() {\n        return _serializationInclusion;\n    }\n\n    @Override\n    public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) {\n        \n        return _serializationInclusion;\n    }\n\n    @Override\n    public JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) {\n        \n        return EMPTY_FORMAT;\n    }\n    \n    \n\n    @Override\n    public boolean useRootWrapping() {\n        if (_rootName != null) { \n            return !_rootName.isEmpty();\n        }\n        return isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n    }\n    \n    public final boolean isEnabled(SerializationFeature f) {\n        return (_serFeatures & f.getMask()) != 0;\n    }\n\n    \n    public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory) {\n        int mask = f.getMask();\n        if ((_generatorFeaturesToChange & mask) != 0) {\n            return (_generatorFeatures & f.getMask()) != 0;\n        }\n        return factory.isEnabled(f);\n    }\n    \n    \n    public final boolean hasSerializationFeatures(int featureMask) {\n        return (_serFeatures & featureMask) == featureMask;\n    }\n\n    public final int getSerializationFeatures() {\n        return _serFeatures;\n    }\n\n    \n    public FilterProvider getFilterProvider() {\n        return _filterProvider;\n    }\n\n    \n    public PrettyPrinter getDefaultPrettyPrinter() {\n        return _defaultPrettyPrinter;\n    }\n\n    \n\n    \n    @SuppressWarnings(\"unchecked\")\n    public <T extends BeanDescription> T introspect(JavaType type) {\n        return (T) getClassIntrospector().forSerialization(this, type, this);\n    }\n    \n    \n\n    @Override\n    public String toString() {\n        return \"[SerializationConfig: flags=0x\"+Integer.toHexString(_serFeatures)+\"]\";\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind;\n\nimport java.text.DateFormat;\nimport java.util.*;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\nimport com.fasterxml.jackson.core.util.Instantiatable;\nimport com.fasterxml.jackson.databind.cfg.*;\nimport com.fasterxml.jackson.databind.introspect.ClassIntrospector;\nimport com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;\nimport com.fasterxml.jackson.databind.introspect.VisibilityChecker;\nimport com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\nimport com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.ser.FilterProvider;\nimport com.fasterxml.jackson.databind.ser.SerializerFactory;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport com.fasterxml.jackson.databind.util.RootNameLookup;\n\n\npublic final class SerializationConfig extends MapperConfigBase<SerializationFeature, SerializationConfig> implements java.io.Serializable { private static final long serialVersionUID = 1; protected final static PrettyPrinter DEFAULT_PRETTY_PRINTER = new DefaultPrettyPrinter(); protected final static JsonInclude.Value DEFAULT_INCLUSION = JsonInclude.Value.empty(); protected final FilterProvider _filterProvider; protected final PrettyPrinter _defaultPrettyPrinter; protected final int _serFeatures; protected final int _generatorFeatures; protected final int _generatorFeaturesToChange; protected final int _formatWriteFeatures; protected final int _formatWriteFeaturesToChange; protected final JsonInclude.Value _serializationInclusion; public SerializationConfig(BaseSettings base, SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames) {\n        super(base, str, mixins, rootNames);\n        _serFeatures = collectFeatureDefaults(SerializationFeature.class);\n        _filterProvider = null;\n        _defaultPrettyPrinter = DEFAULT_PRETTY_PRINTER;\n        _generatorFeatures = 0;\n        _generatorFeaturesToChange = 0;\n        _formatWriteFeatures = 0;\n        _formatWriteFeaturesToChange = 0;\n        _serializationInclusion = DEFAULT_INCLUSION;\n    }\n\n    private SerializationConfig(SerializationConfig src, SubtypeResolver str) {\n        super(src, str);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    private SerializationConfig(SerializationConfig src, int mapperFeatures, int serFeatures, int generatorFeatures, int generatorFeatureMask, int formatFeatures, int formatFeaturesMask) {\n        super(src, mapperFeatures);\n        _serFeatures = serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = generatorFeatures;\n        _generatorFeaturesToChange = generatorFeatureMask;\n        _formatWriteFeatures = formatFeatures;\n        _formatWriteFeaturesToChange = formatFeaturesMask;\n    }\n    \n    private SerializationConfig(SerializationConfig src, BaseSettings base) {\n        super(src, base);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    private SerializationConfig(SerializationConfig src, FilterProvider filters) {\n        super(src);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = filters;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    private SerializationConfig(SerializationConfig src, Class<?> view) {\n        super(src, view);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    private SerializationConfig(SerializationConfig src, JsonInclude.Value incl) {\n        super(src);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = incl;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    private SerializationConfig(SerializationConfig src, PropertyName rootName) {\n        super(src, rootName);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    \n    protected SerializationConfig(SerializationConfig src, ContextAttributes attrs) {\n        super(src, attrs);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    \n    protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins) {\n        super(src, mixins);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n    \n    \n    protected SerializationConfig(SerializationConfig src, PrettyPrinter defaultPP) {\n        super(src);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = defaultPP;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    \n    protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins, RootNameLookup rootNames) {\n        super(src, mixins, rootNames);\n        _serFeatures = src._serFeatures;\n        _serializationInclusion = src._serializationInclusion;\n        _filterProvider = src._filterProvider;\n        _defaultPrettyPrinter = src._defaultPrettyPrinter;\n        _generatorFeatures = src._generatorFeatures;\n        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n        _formatWriteFeatures = src._formatWriteFeatures;\n        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;\n    }\n\n    \n\n    \n    @Override\n    public SerializationConfig with(MapperFeature... features) {\n        int newMapperFlags = _mapperFeatures;\n        for (MapperFeature f : features) {\n            newMapperFlags |= f.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this\n                : new SerializationConfig(this, newMapperFlags, _serFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n    \n    \n    @Override\n    public SerializationConfig without(MapperFeature... features) {\n        int newMapperFlags = _mapperFeatures;\n        for (MapperFeature f : features) {\n             newMapperFlags &= ~f.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this\n                : new SerializationConfig(this, newMapperFlags, _serFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    @Override\n    public SerializationConfig with(MapperFeature feature, boolean state) {\n        int newMapperFlags;\n        if (state) {\n            newMapperFlags = _mapperFeatures | feature.getMask();\n        } else {\n            newMapperFlags = _mapperFeatures & ~feature.getMask();\n        }\n        return (newMapperFlags == _mapperFeatures) ? this\n            : new SerializationConfig(this, newMapperFlags, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n    \n    @Override\n    public SerializationConfig with(AnnotationIntrospector ai) {\n        return _withBase(_base.withAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public SerializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public SerializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n    }\n\n    @Override\n    public SerializationConfig with(ClassIntrospector ci) {\n        return _withBase(_base.withClassIntrospector(ci));\n    }\n\n    \n    @Override\n    public SerializationConfig with(DateFormat df) {\n        SerializationConfig cfg =  new SerializationConfig(this, _base.withDateFormat(df));\n        \n        if (df == null) {\n            cfg = cfg.with(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        } else {\n            cfg = cfg.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        }\n        return cfg;\n    }\n\n    @Override\n    public SerializationConfig with(HandlerInstantiator hi) {\n        return _withBase(_base.withHandlerInstantiator(hi));\n    }\n\n    @Override\n    public SerializationConfig with(PropertyNamingStrategy pns) {\n        return _withBase(_base.withPropertyNamingStrategy(pns));\n    }\n\n    @Override\n    public SerializationConfig withRootName(PropertyName rootName) {\n        if (rootName == null) {\n            if (_rootName == null) {\n                return this;\n            }\n        } else if (rootName.equals(_rootName)) {\n            return this;\n        }\n        return new SerializationConfig(this, rootName);\n    }\n\n    @Override\n    public SerializationConfig with(SubtypeResolver str) {\n        return (str == _subtypeResolver)? this : new SerializationConfig(this, str);\n    }\n\n    @Override\n    public SerializationConfig with(TypeFactory tf) {\n        return _withBase(_base.withTypeFactory(tf));\n    }\n\n    @Override\n    public SerializationConfig with(TypeResolverBuilder<?> trb) {\n        return _withBase(_base.withTypeResolverBuilder(trb));\n    }\n\n    @Override\n    public SerializationConfig withView(Class<?> view) {\n        return (_view == view) ? this : new SerializationConfig(this, view);\n    }\n\n    @Override\n    public SerializationConfig with(VisibilityChecker<?> vc) {\n        return _withBase(_base.withVisibilityChecker(vc));\n    }\n\n    @Override\n    public SerializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n        return _withBase(_base.withVisibility(forMethod, visibility));\n    }\n\n    @Override\n    public SerializationConfig with(Locale l) {\n        return _withBase(_base.with(l));\n    }\n\n    @Override\n    public SerializationConfig with(TimeZone tz) {\n        return _withBase(_base.with(tz));\n    }\n\n    @Override\n    public SerializationConfig with(Base64Variant base64) {\n        return _withBase(_base.with(base64));\n    }\n\n    @Override\n    public SerializationConfig with(ContextAttributes attrs) {\n        return (attrs == _attributes) ? this : new SerializationConfig(this, attrs);\n    }\n\n    private final SerializationConfig _withBase(BaseSettings newBase) {\n        return (_base == newBase) ? this : new SerializationConfig(this, newBase);\n    }\n\n    \n\n    \n    public SerializationConfig with(SerializationFeature feature) {\n        int newSerFeatures = _serFeatures | feature.getMask();\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig with(SerializationFeature first, SerializationFeature... features) {\n        int newSerFeatures = _serFeatures | first.getMask();\n        for (SerializationFeature f : features) {\n            newSerFeatures |= f.getMask();\n        }\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig withFeatures(SerializationFeature... features) {\n        int newSerFeatures = _serFeatures;\n        for (SerializationFeature f : features) {\n            newSerFeatures |= f.getMask();\n        }\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig without(SerializationFeature feature) {\n        int newSerFeatures = _serFeatures & ~feature.getMask();\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig without(SerializationFeature first, SerializationFeature... features) {\n        int newSerFeatures = _serFeatures & ~first.getMask();\n        for (SerializationFeature f : features) {\n            newSerFeatures &= ~f.getMask();\n        }\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig withoutFeatures(SerializationFeature... features) {\n        int newSerFeatures = _serFeatures;\n        for (SerializationFeature f : features) {\n            newSerFeatures &= ~f.getMask();\n        }\n        return (newSerFeatures == _serFeatures) ? this\n                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    \n    public SerializationConfig with(JsonGenerator.Feature feature) {\n        int newSet = _generatorFeatures | feature.getMask();\n        int newMask = _generatorFeaturesToChange | feature.getMask();\n        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig withFeatures(JsonGenerator.Feature... features) {\n        int newSet = _generatorFeatures;\n        int newMask = _generatorFeaturesToChange;\n        for (JsonGenerator.Feature f : features) {\n            int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n        }\n        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig without(JsonGenerator.Feature feature) {\n        int newSet = _generatorFeatures & ~feature.getMask();\n        int newMask = _generatorFeaturesToChange | feature.getMask();\n        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    public SerializationConfig withoutFeatures(JsonGenerator.Feature... features) {\n        int newSet = _generatorFeatures;\n        int newMask = _generatorFeaturesToChange;\n        for (JsonGenerator.Feature f : features) {\n            int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n        }\n        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    newSet, newMask,\n                    _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }\n\n    \n    \n    public SerializationConfig with(FormatFeature feature) {\n        int newSet = _formatWriteFeatures | feature.getMask();\n        int newMask = _formatWriteFeaturesToChange | feature.getMask();\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }\n\n    \n    public SerializationConfig withFeatures(FormatFeature... features) {\n        int newSet = _formatWriteFeatures;\n        int newMask = _formatWriteFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n        }\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }\n\n    \n    public SerializationConfig without(FormatFeature feature) {\n        int newSet = _formatWriteFeatures & ~feature.getMask();\n        int newMask = _formatWriteFeaturesToChange | feature.getMask();\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }\n\n    \n    public SerializationConfig withoutFeatures(FormatFeature... features) {\n        int newSet = _formatWriteFeatures;\n        int newMask = _formatWriteFeaturesToChange;\n        for (FormatFeature f : features) {\n            int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n        }\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    _generatorFeatures, _generatorFeaturesToChange,\n                    newSet, newMask);\n    }\n    \n    \n\n    public SerializationConfig withFilters(FilterProvider filterProvider) {\n        return (filterProvider == _filterProvider) ? this : new SerializationConfig(this, filterProvider);\n    }\n\n    \n    @Deprecated\n    public SerializationConfig withSerializationInclusion(JsonInclude.Include incl) {\n        return withPropertyInclusion(DEFAULT_INCLUSION.withValueInclusion(incl));\n    }\n\n    \n    public SerializationConfig withPropertyInclusion(JsonInclude.Value incl) {\n        if (_serializationInclusion.equals(incl)) {\n            return this;\n        }\n        return new SerializationConfig(this, incl);\n    }\n    \n    \n    public SerializationConfig withDefaultPrettyPrinter(PrettyPrinter pp) {\n        return (_defaultPrettyPrinter == pp) ? this:  new SerializationConfig(this, pp);\n    }\n\n    \n\n    public PrettyPrinter constructDefaultPrettyPrinter() {\n        PrettyPrinter pp = _defaultPrettyPrinter;\n        if (pp instanceof Instantiatable<?>) {\n            pp = (PrettyPrinter) ((Instantiatable<?>) pp).createInstance();\n        }\n        return pp;\n    }\n    \n    \n\n    \n    public void initialize(JsonGenerator g) {\n        if (SerializationFeature.INDENT_OUTPUT.enabledIn(_serFeatures)) {\n            \n            if (g.getPrettyPrinter() == null) {\n                PrettyPrinter pp = constructDefaultPrettyPrinter();\n                if (pp != null) {\n                    g.setPrettyPrinter(pp);\n                }\n            }\n        }\n        @SuppressWarnings(\"deprecation\")\n        boolean useBigDec = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_serFeatures);\n\n        int mask = _generatorFeaturesToChange;\n        if ((mask != 0) || useBigDec) {\n            int newFlags = _generatorFeatures;\n            \n            if (useBigDec) {\n                int f = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.getMask();\n                newFlags |= f;\n                mask |= f;\n            }\n            g.overrideStdFeatures(newFlags, mask);\n        }\n        if (_formatWriteFeaturesToChange != 0) {\n            g.overrideFormatFeatures(_formatWriteFeatures, _formatWriteFeaturesToChange);\n        }\n    }\n\n    \n\n    @Override\n    public AnnotationIntrospector getAnnotationIntrospector() {\n        if (isEnabled(MapperFeature.USE_ANNOTATIONS)) {\n            return super.getAnnotationIntrospector();\n        }\n        return AnnotationIntrospector.nopInstance();\n    }\n\n    \n    @Override\n    public BeanDescription introspectClassAnnotations(JavaType type) {\n        return getClassIntrospector().forClassAnnotations(this, type, this);\n    }\n\n    \n    @Override\n    public BeanDescription introspectDirectClassAnnotations(JavaType type) {\n        return getClassIntrospector().forDirectClassAnnotations(this, type, this);\n    }\n\n    @Override\n    public VisibilityChecker<?> getDefaultVisibilityChecker() {\n        VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n        \n        if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS)) {\n            vchecker = vchecker.withSetterVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n            vchecker = vchecker.withCreatorVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n            vchecker = vchecker.withGetterVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) {\n            vchecker = vchecker.withIsGetterVisibility(Visibility.NONE);\n        }\n        if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n            vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n        }\n        return vchecker;\n    }\n\n    \n    \n    \n    @Deprecated\n    public JsonInclude.Include getSerializationInclusion() {\n        JsonInclude.Include incl = _serializationInclusion.getValueInclusion();\n        return (incl == JsonInclude.Include.USE_DEFAULTS) ? JsonInclude.Include.ALWAYS : incl;\n    }\n\n    @Override\n    public JsonInclude.Value getDefaultPropertyInclusion() {\n        return _serializationInclusion;\n    }\n\n    @Override\n    public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) {\n        \n        return _serializationInclusion;\n    }\n\n    @Override\n    public JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) {\n        \n        return EMPTY_FORMAT;\n    }\n    \n    \n\n    @Override\n    public boolean useRootWrapping() {\n        if (_rootName != null) { \n            return !_rootName.isEmpty();\n        }\n        return isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n    }\n    \n    public final boolean isEnabled(SerializationFeature f) {\n        return (_serFeatures & f.getMask()) != 0;\n    }\n\n    \n    public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory) {\n        int mask = f.getMask();\n        if ((_generatorFeaturesToChange & mask) != 0) {\n            return (_generatorFeatures & f.getMask()) != 0;\n        }\n        return factory.isEnabled(f);\n    }\n    \n    \n    public final boolean hasSerializationFeatures(int featureMask) {\n        return (_serFeatures & featureMask) == featureMask;\n    }\n\n    public final int getSerializationFeatures() {\n        return _serFeatures;\n    }\n\n    \n    public FilterProvider getFilterProvider() {\n        return _filterProvider;\n    }\n\n    \n    public PrettyPrinter getDefaultPrettyPrinter() {\n        return _defaultPrettyPrinter;\n    }\n\n    \n\n    \n    @SuppressWarnings(\"unchecked\")\n    public <T extends BeanDescription> T introspect(JavaType type) {\n        return (T) getClassIntrospector().forSerialization(this, type, this);\n    }\n    \n    \n\n    @Override\n    public String toString() {\n        return \"[SerializationConfig: flags=0x\"+Integer.toHexString(_serFeatures)+\"]\";\n    }\n}\n",
      "buggy_signatures": [
        "private SerializationConfig(SerializationConfig src, SubtypeResolver str)",
        "private SerializationConfig(SerializationConfig src, int mapperFeatures, int serFeatures, int generatorFeatures, int generatorFeatureMask, int formatFeatures, int formatFeaturesMask)",
        "private SerializationConfig(SerializationConfig src, BaseSettings base)",
        "private SerializationConfig(SerializationConfig src, FilterProvider filters)",
        "private SerializationConfig(SerializationConfig src, Class<?> view)",
        "private SerializationConfig(SerializationConfig src, JsonInclude.Value incl)",
        "private SerializationConfig(SerializationConfig src, PropertyName rootName)",
        "protected SerializationConfig(SerializationConfig src, ContextAttributes attrs)",
        "protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins)",
        "protected SerializationConfig(SerializationConfig src, PrettyPrinter defaultPP)",
        "protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins, RootNameLookup rootNames)",
        "public SerializationConfig with(MapperFeature... features)",
        "public SerializationConfig without(MapperFeature... features)",
        "public SerializationConfig with(MapperFeature feature, boolean state)",
        "public SerializationConfig with(AnnotationIntrospector ai)",
        "public SerializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public SerializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public SerializationConfig with(ClassIntrospector ci)",
        "public SerializationConfig with(DateFormat df)",
        "public SerializationConfig with(HandlerInstantiator hi)",
        "public SerializationConfig with(PropertyNamingStrategy pns)",
        "public SerializationConfig withRootName(PropertyName rootName)",
        "public SerializationConfig with(SubtypeResolver str)",
        "public SerializationConfig with(TypeFactory tf)",
        "public SerializationConfig with(TypeResolverBuilder<?> trb)",
        "public SerializationConfig withView(Class<?> view)",
        "public SerializationConfig with(VisibilityChecker<?> vc)",
        "public SerializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)",
        "public SerializationConfig with(Locale l)",
        "public SerializationConfig with(TimeZone tz)",
        "public SerializationConfig with(Base64Variant base64)",
        "public SerializationConfig with(ContextAttributes attrs)",
        "private final SerializationConfig _withBase(BaseSettings newBase)",
        "public SerializationConfig with(SerializationFeature feature)",
        "public SerializationConfig with(SerializationFeature first, SerializationFeature... features)",
        "public SerializationConfig withFeatures(SerializationFeature... features)",
        "public SerializationConfig without(SerializationFeature feature)",
        "public SerializationConfig without(SerializationFeature first, SerializationFeature... features)",
        "public SerializationConfig withoutFeatures(SerializationFeature... features)",
        "public SerializationConfig with(JsonGenerator.Feature feature)",
        "public SerializationConfig withFeatures(JsonGenerator.Feature... features)",
        "public SerializationConfig without(JsonGenerator.Feature feature)",
        "public SerializationConfig withoutFeatures(JsonGenerator.Feature... features)",
        "public SerializationConfig with(FormatFeature feature)",
        "public SerializationConfig withFeatures(FormatFeature... features)",
        "public SerializationConfig without(FormatFeature feature)",
        "public SerializationConfig withoutFeatures(FormatFeature... features)",
        "public SerializationConfig withFilters(FilterProvider filterProvider)",
        "public SerializationConfig withSerializationInclusion(JsonInclude.Include incl)",
        "public SerializationConfig withPropertyInclusion(JsonInclude.Value incl)",
        "public SerializationConfig withDefaultPrettyPrinter(PrettyPrinter pp)",
        "public PrettyPrinter constructDefaultPrettyPrinter()",
        "public void initialize(JsonGenerator g)",
        "public AnnotationIntrospector getAnnotationIntrospector()",
        "public BeanDescription introspectClassAnnotations(JavaType type)",
        "public BeanDescription introspectDirectClassAnnotations(JavaType type)",
        "public VisibilityChecker<?> getDefaultVisibilityChecker()",
        "public JsonInclude.Include getSerializationInclusion()",
        "public JsonInclude.Value getDefaultPropertyInclusion()",
        "public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType)",
        "public JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType)",
        "public boolean useRootWrapping()",
        "public final boolean isEnabled(SerializationFeature f)",
        "public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory)",
        "public final boolean hasSerializationFeatures(int featureMask)",
        "public final int getSerializationFeatures()",
        "public FilterProvider getFilterProvider()",
        "public PrettyPrinter getDefaultPrettyPrinter()",
        "public <T extends BeanDescription> T introspect(JavaType type)",
        "public String toString()"
      ],
      "fixed_signatures": [
        "private SerializationConfig(SerializationConfig src, SubtypeResolver str)",
        "private SerializationConfig(SerializationConfig src, int mapperFeatures, int serFeatures, int generatorFeatures, int generatorFeatureMask, int formatFeatures, int formatFeaturesMask)",
        "private SerializationConfig(SerializationConfig src, BaseSettings base)",
        "private SerializationConfig(SerializationConfig src, FilterProvider filters)",
        "private SerializationConfig(SerializationConfig src, Class<?> view)",
        "private SerializationConfig(SerializationConfig src, JsonInclude.Value incl)",
        "private SerializationConfig(SerializationConfig src, PropertyName rootName)",
        "protected SerializationConfig(SerializationConfig src, ContextAttributes attrs)",
        "protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins)",
        "protected SerializationConfig(SerializationConfig src, PrettyPrinter defaultPP)",
        "protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins, RootNameLookup rootNames)",
        "public SerializationConfig with(MapperFeature... features)",
        "public SerializationConfig without(MapperFeature... features)",
        "public SerializationConfig with(MapperFeature feature, boolean state)",
        "public SerializationConfig with(AnnotationIntrospector ai)",
        "public SerializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public SerializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai)",
        "public SerializationConfig with(ClassIntrospector ci)",
        "public SerializationConfig with(DateFormat df)",
        "public SerializationConfig with(HandlerInstantiator hi)",
        "public SerializationConfig with(PropertyNamingStrategy pns)",
        "public SerializationConfig withRootName(PropertyName rootName)",
        "public SerializationConfig with(SubtypeResolver str)",
        "public SerializationConfig with(TypeFactory tf)",
        "public SerializationConfig with(TypeResolverBuilder<?> trb)",
        "public SerializationConfig withView(Class<?> view)",
        "public SerializationConfig with(VisibilityChecker<?> vc)",
        "public SerializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)",
        "public SerializationConfig with(Locale l)",
        "public SerializationConfig with(TimeZone tz)",
        "public SerializationConfig with(Base64Variant base64)",
        "public SerializationConfig with(ContextAttributes attrs)",
        "private final SerializationConfig _withBase(BaseSettings newBase)",
        "public SerializationConfig with(SerializationFeature feature)",
        "public SerializationConfig with(SerializationFeature first, SerializationFeature... features)",
        "public SerializationConfig withFeatures(SerializationFeature... features)",
        "public SerializationConfig without(SerializationFeature feature)",
        "public SerializationConfig without(SerializationFeature first, SerializationFeature... features)",
        "public SerializationConfig withoutFeatures(SerializationFeature... features)",
        "public SerializationConfig with(JsonGenerator.Feature feature)",
        "public SerializationConfig withFeatures(JsonGenerator.Feature... features)",
        "public SerializationConfig without(JsonGenerator.Feature feature)",
        "public SerializationConfig withoutFeatures(JsonGenerator.Feature... features)",
        "public SerializationConfig with(FormatFeature feature)",
        "public SerializationConfig withFeatures(FormatFeature... features)",
        "public SerializationConfig without(FormatFeature feature)",
        "public SerializationConfig withoutFeatures(FormatFeature... features)",
        "public SerializationConfig withFilters(FilterProvider filterProvider)",
        "public SerializationConfig withSerializationInclusion(JsonInclude.Include incl)",
        "public SerializationConfig withPropertyInclusion(JsonInclude.Value incl)",
        "public SerializationConfig withDefaultPrettyPrinter(PrettyPrinter pp)",
        "public PrettyPrinter constructDefaultPrettyPrinter()",
        "public void initialize(JsonGenerator g)",
        "public AnnotationIntrospector getAnnotationIntrospector()",
        "public BeanDescription introspectClassAnnotations(JavaType type)",
        "public BeanDescription introspectDirectClassAnnotations(JavaType type)",
        "public VisibilityChecker<?> getDefaultVisibilityChecker()",
        "public JsonInclude.Include getSerializationInclusion()",
        "public JsonInclude.Value getDefaultPropertyInclusion()",
        "public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType)",
        "public JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType)",
        "public boolean useRootWrapping()",
        "public final boolean isEnabled(SerializationFeature f)",
        "public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory)",
        "public final boolean hasSerializationFeatures(int featureMask)",
        "public final int getSerializationFeatures()",
        "public FilterProvider getFilterProvider()",
        "public PrettyPrinter getDefaultPrettyPrinter()",
        "public <T extends BeanDescription> T introspect(JavaType type)",
        "public String toString()"
      ],
      "methods": [
        {
          "buggy_method": "  public VisibilityChecker<?> getDefaultVisibilityChecker() {\n  VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n  \n  if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n  vchecker = vchecker.withGetterVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) {\n  vchecker = vchecker.withIsGetterVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n  vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n  }\n  return vchecker;\n  }",
          "fixed_method": "  public VisibilityChecker<?> getDefaultVisibilityChecker() {\n  VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n  \n  if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS)) {\n  vchecker = vchecker.withSetterVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n  vchecker = vchecker.withCreatorVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n  vchecker = vchecker.withGetterVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) {\n  vchecker = vchecker.withIsGetterVisibility(Visibility.NONE);\n  }\n  if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n  vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n  }\n  return vchecker;\n  }",
          "diff": [
            "@@ -862,6 +862,12 @@",
            "     {\n",
            "         VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n",
            "         // then global overrides (disabling)\n",
            "+        if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS)) {\n",
            "+            vchecker = vchecker.withSetterVisibility(Visibility.NONE);\n",
            "+        }\n",
            "+        if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n",
            "+            vchecker = vchecker.withCreatorVisibility(Visibility.NONE);\n",
            "+        }\n",
            "         if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n",
            "             vchecker = vchecker.withGetterVisibility(Visibility.NONE);\n",
            "         }\n"
          ],
          "changed_lines": 6
        }
      ]
    }
  ]
}
