{
  "bug_id": "39",
  "failed_tests": {
    "org.apache.commons.cli.PatternOptionBuilderTest": [
      {
        "methodName": "testExistingFilePattern",
        "error": "junit.framework.AssertionFailedError",
        "message": "option g not FileInputStream",
        "fail_line": "        assertTrue(\"option g not FileInputStream\", parsedReadableFileStream instanceof FileInputStream);",
        "test_source": "  public void testExistingFilePattern() throws Exception {\n  final Options options = PatternOptionBuilder.parsePattern(\"g<\");\n  final CommandLineParser parser = new PosixParser();\n  final CommandLine line = parser.parse(options, new String[] { \"-g\", \"src/test/resources/existing-readable.file\" });\n\n  final Object parsedReadableFileStream = line.getOptionObject(\"g\");\n\n  assertNotNull(\"option g not parsed\", parsedReadableFileStream);\n  assertTrue(\"option g not FileInputStream\", parsedReadableFileStream instanceof FileInputStream);\n  }",
        "stack": [
          "PatternOptionBuilderTest.testExistingFilePattern line 171"
        ]
      },
      {
        "methodName": "testExistingFilePatternFileNotExist",
        "error": "junit.framework.AssertionFailedError",
        "message": "option f parsed expected null, but was:<non-existing.file>",
        "fail_line": "        assertNull(\"option f parsed\", line.getOptionObject(\"f\"));",
        "test_source": "  public void testExistingFilePatternFileNotExist() throws Exception {\n  final Options options = PatternOptionBuilder.parsePattern(\"f<\");\n  final CommandLineParser parser = new PosixParser();\n  final CommandLine line = parser.parse(options, new String[] { \"-f\", \"non-existing.file\" });\n\n  assertNull(\"option f parsed\", line.getOptionObject(\"f\"));\n  }",
        "stack": [
          "PatternOptionBuilderTest.testExistingFilePatternFileNotExist line 180"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/cli/TypeHandler.java",
      "buggy_full_code": "\n\npackage org.apache.commons.cli;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport java.util.Date;\n\n\npublic class TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException {\n        return createValue(str, (Class<?>) obj);\n    }\n\n    \n    public static Object createValue(final String str, final Class<?> clazz) throws ParseException {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return createURL(str);\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    \n    public static Object createObject(final String classname) throws ParseException {\n        Class<?> cl;\n\n        try\n        {\n            cl = Class.forName(classname);\n        }\n        catch (final ClassNotFoundException cnfe)\n        {\n            throw new ParseException(\"Unable to find the class: \" + classname);\n        }\n        \n        try\n        {\n            return cl.newInstance();\n        }\n        catch (final Exception e)\n        {\n            throw new ParseException(e.getClass().getName() + \"; Unable to create an instance of: \" + classname);\n        }\n    }\n\n    \n    public static Number createNumber(final String str) throws ParseException {\n        try\n        {\n            if (str.indexOf('.') != -1)\n            {\n                return Double.valueOf(str);\n            }\n            return Long.valueOf(str);\n        }\n        catch (final NumberFormatException e)\n        {\n            throw new ParseException(e.getMessage());\n        }\n    }\n\n    \n    public static Class<?> createClass(final String classname) throws ParseException {\n        try\n        {\n            return Class.forName(classname);\n        }\n        catch (final ClassNotFoundException e)\n        {\n            throw new ParseException(\"Unable to find the class: \" + classname);\n        }\n    }\n\n    \n    public static Date createDate(final String str) {\n        throw new UnsupportedOperationException(\"Not yet implemented\");\n    }\n\n    \n    public static URL createURL(final String str) throws ParseException {\n        try\n        {\n            return new URL(str);\n        }\n        catch (final MalformedURLException e)\n        {\n            throw new ParseException(\"Unable to parse the URL: \" + str);\n        }\n    }\n\n    \n    public static File createFile(final String str) {\n        return new File(str);\n    }\n\n    \n\n    \n    public static File[] createFiles(final String str) {\n        \n        \n        throw new UnsupportedOperationException(\"Not yet implemented\");\n    }\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.cli;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport java.util.Date;\n\n\npublic class TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException {\n        return createValue(str, (Class<?>) obj);\n    }\n\n    \n    public static Object createValue(final String str, final Class<?> clazz) throws ParseException {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return createURL(str);\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    \n    public static Object createObject(final String classname) throws ParseException {\n        Class<?> cl;\n\n        try\n        {\n            cl = Class.forName(classname);\n        }\n        catch (final ClassNotFoundException cnfe)\n        {\n            throw new ParseException(\"Unable to find the class: \" + classname);\n        }\n        \n        try\n        {\n            return cl.newInstance();\n        }\n        catch (final Exception e)\n        {\n            throw new ParseException(e.getClass().getName() + \"; Unable to create an instance of: \" + classname);\n        }\n    }\n\n    \n    public static Number createNumber(final String str) throws ParseException {\n        try\n        {\n            if (str.indexOf('.') != -1)\n            {\n                return Double.valueOf(str);\n            }\n            return Long.valueOf(str);\n        }\n        catch (final NumberFormatException e)\n        {\n            throw new ParseException(e.getMessage());\n        }\n    }\n\n    \n    public static Class<?> createClass(final String classname) throws ParseException {\n        try\n        {\n            return Class.forName(classname);\n        }\n        catch (final ClassNotFoundException e)\n        {\n            throw new ParseException(\"Unable to find the class: \" + classname);\n        }\n    }\n\n    \n    public static Date createDate(final String str) {\n        throw new UnsupportedOperationException(\"Not yet implemented\");\n    }\n\n    \n    public static URL createURL(final String str) throws ParseException {\n        try\n        {\n            return new URL(str);\n        }\n        catch (final MalformedURLException e)\n        {\n            throw new ParseException(\"Unable to parse the URL: \" + str);\n        }\n    }\n\n    \n    public static File createFile(final String str) {\n        return new File(str);\n    }\n\n    \n    public static FileInputStream openFile(String str) throws ParseException {\n        try\n        {\n            return new FileInputStream(str);\n        }\n        catch (FileNotFoundException e)\n        {\n            throw new ParseException(\"Unable to find file: \" + str);\n        }\n    }\n\n    \n    public static File[] createFiles(final String str) {\n        \n        \n        throw new UnsupportedOperationException(\"Not yet implemented\");\n    }\n}\n",
      "buggy_signatures": [
        "public class TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException",
        "public static Object createValue(final String str, final Class<?> clazz) throws ParseException",
        "public static Object createObject(final String classname) throws ParseException",
        "public static Number createNumber(final String str) throws ParseException",
        "public static Class<?> createClass(final String classname) throws ParseException",
        "public static Date createDate(final String str)",
        "public static URL createURL(final String str) throws ParseException",
        "public static File createFile(final String str)",
        "public static File[] createFiles(final String str)"
      ],
      "fixed_signatures": [
        "public class TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException",
        "public static Object createValue(final String str, final Class<?> clazz) throws ParseException",
        "public static Object createObject(final String classname) throws ParseException",
        "public static Number createNumber(final String str) throws ParseException",
        "public static Class<?> createClass(final String classname) throws ParseException",
        "public static Date createDate(final String str)",
        "public static URL createURL(final String str) throws ParseException",
        "public static File createFile(final String str)",
        "public static FileInputStream openFile(String str) throws ParseException",
        "public static File[] createFiles(final String str)"
      ],
      "methods": [
        {
          "buggy_method": "  public static Object createValue(final String str, final Class<?> clazz) throws ParseException {\n  if (PatternOptionBuilder.STRING_VALUE == clazz)\n  {\n  return str;\n  }\n  else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n  {\n  return createObject(str);\n  }\n  else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n  {\n  return createNumber(str);\n  }\n  else if (PatternOptionBuilder.DATE_VALUE == clazz)\n  {\n  return createDate(str);\n  }\n  else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n  {\n  return createClass(str);\n  }\n  else if (PatternOptionBuilder.FILE_VALUE == clazz)\n  {\n  return createFile(str);\n  }\n  else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n  {\n  return createFile(str);\n  }\n  else if (PatternOptionBuilder.FILES_VALUE == clazz)\n  {\n  return createFiles(str);\n  }\n  else if (PatternOptionBuilder.URL_VALUE == clazz)\n  {\n  return createURL(str);\n  }\n  else\n  {\n  return null;\n  }\n  }",
          "fixed_method": "  public static Object createValue(final String str, final Class<?> clazz) throws ParseException {\n  if (PatternOptionBuilder.STRING_VALUE == clazz)\n  {\n  return str;\n  }\n  else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n  {\n  return createObject(str);\n  }\n  else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n  {\n  return createNumber(str);\n  }\n  else if (PatternOptionBuilder.DATE_VALUE == clazz)\n  {\n  return createDate(str);\n  }\n  else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n  {\n  return createClass(str);\n  }\n  else if (PatternOptionBuilder.FILE_VALUE == clazz)\n  {\n  return createFile(str);\n  }\n  else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n  {\n  return openFile(str);\n  }\n  else if (PatternOptionBuilder.FILES_VALUE == clazz)\n  {\n  return createFiles(str);\n  }\n  else if (PatternOptionBuilder.URL_VALUE == clazz)\n  {\n  return createURL(str);\n  }\n  else\n  {\n  return null;\n  }\n  }",
          "diff": [
            "@@ -89,7 +89,7 @@",
            "         }\n",
            "         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n",
            "         {\n",
            "-            return createFile(str);\n",
            "+            return openFile(str);\n",
            "         }\n",
            "         else if (PatternOptionBuilder.FILES_VALUE == clazz)\n",
            "         {\n"
          ],
          "changed_lines": 2
        },
        {
          "buggy_method": "  public static File createFile(final String str) {\n  return new File(str);\n  }",
          "fixed_method": "  public static FileInputStream openFile(String str) throws ParseException {\n  try\n  {\n  return new FileInputStream(str);\n  }\n  catch (FileNotFoundException e)\n  {\n  throw new ParseException(\"Unable to find file: \" + str);\n  }\n  }",
          "diff": [
            "@@ -231,6 +231,17 @@",
            "      * @return The file input stream represented by <code>str</code>.\n",
            "      * @throws ParseException if the file is not exist or not readable\n",
            "      */\n",
            "+    public static FileInputStream openFile(String str) throws ParseException\n",
            "+    {\n",
            "+        try\n",
            "+        {\n",
            "+            return new FileInputStream(str);\n",
            "+        }\n",
            "+        catch (FileNotFoundException e)\n",
            "+        {\n",
            "+            throw new ParseException(\"Unable to find file: \" + str);\n",
            "+        }\n",
            "+    }\n",
            " \n",
            "     /**\n",
            "      * Returns the File[] represented by <code>str</code>.\n"
          ],
          "changed_lines": 11
        }
      ]
    }
  ]
}
