{
  "bug_id": "22",
  "failed_tests": {
    "org.apache.commons.cli.ApplicationTest": [
      {
        "methodName": "testGroovy",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<[println 'hello']> but was:<[--]>",
        "fail_line": "        assertEquals(\"println 'hello'\", line.getOptionValue('e'));",
        "test_source": "  public void testGroovy() throws Exception {\n  Options options = new Options();\n\n  options.addOption(\n  OptionBuilder.withLongOpt(\"define\").\n  withDescription(\"define a system property\").\n  hasArg(true).\n  withArgName(\"name=value\").\n  create('D'));\n  options.addOption(\n  OptionBuilder.hasArg(false)\n  .withDescription(\"usage information\")\n  .withLongOpt(\"help\")\n  .create('h'));\n  options.addOption(\n  OptionBuilder.hasArg(false)\n  .withDescription(\"debug mode will print out full stack traces\")\n  .withLongOpt(\"debug\")\n  .create('d'));\n  options.addOption(\n  OptionBuilder.hasArg(false)\n  .withDescription(\"display the Groovy and JVM versions\")\n  .withLongOpt(\"version\")\n  .create('v'));\n  options.addOption(\n  OptionBuilder.withArgName(\"charset\")\n  .hasArg()\n  .withDescription(\"specify the encoding of the files\")\n  .withLongOpt(\"encoding\")\n  .create('c'));\n  options.addOption(\n  OptionBuilder.withArgName(\"script\")\n  .hasArg()\n  .withDescription(\"specify a command line script\")\n  .create('e'));\n  options.addOption(\n  OptionBuilder.withArgName(\"extension\")\n  .hasOptionalArg()\n  .withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n  .create('i'));\n  options.addOption(\n  OptionBuilder.hasArg(false)\n  .withDescription(\"process files line by line using implicit 'line' variable\")\n  .create('n'));\n  options.addOption(\n  OptionBuilder.hasArg(false)\n  .withDescription(\"process files line by line and print result (see also -n)\")\n  .create('p'));\n  options.addOption(\n  OptionBuilder.withArgName(\"port\")\n  .hasOptionalArg()\n  .withDescription(\"listen on a port and process inbound lines\")\n  .create('l'));\n  options.addOption(\n  OptionBuilder.withArgName(\"splitPattern\")\n  .hasOptionalArg()\n  .withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n  .withLongOpt(\"autosplit\")\n  .create('a'));\n\n  Parser parser = new PosixParser();\n  CommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\n\n  assertTrue(line.hasOption('e'));\n  assertEquals(\"println 'hello'\", line.getOptionValue('e'));\n  }",
        "stack": [
          "ApplicationTest.testGroovy line 169"
        ]
      }
    ],
    "org.apache.commons.cli.PosixParserTest": [
      {
        "methodName": "testStopAtExpectedArg",
        "error": "junit.framework.ComparisonFailure",
        "message": "Confirm -b is set expected:<[foo]> but was:<[--]>",
        "fail_line": "",
        "test_source": "",
        "stack": [
          "ParserTestCase.testStopAtExpectedArg line 194"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/cli/PosixParser.java",
      "buggy_full_code": "\n\npackage org.apache.commons.cli;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\n\n\npublic class PosixParser extends Parser { private List tokens = new ArrayList(); private boolean eatTheRest; private Options options; private void init() {\n        eatTheRest = false;\n        tokens.clear();\n    }\n\n    \n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n        init();\n        this.options = options;\n\n        \n        Iterator iter = Arrays.asList(arguments).iterator();\n\n        \n        while (iter.hasNext())\n        {\n            \n            String token = (String) iter.next();\n\n            \n            if (token.startsWith(\"--\"))\n            {\n                int pos = token.indexOf('=');\n                String opt = pos == -1 ? token : token.substring(0, pos); \n\n                if (!options.hasOption(opt))\n                {\n                    processNonOptionToken(token);\n                }\n                else\n                {\n                    \n                    tokens.add(opt);\n                    if (pos != -1)\n                    {\n                        tokens.add(token.substring(pos + 1));\n                    }\n                }\n            }\n\n            \n            else if (\"-\".equals(token))\n            {\n                tokens.add(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2 || options.hasOption(token))\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n                \n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                processNonOptionToken(token);\n            }\n            else\n            {\n                tokens.add(token);\n            }\n\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }\n\n    \n    private void gobble(Iterator iter) {\n        if (eatTheRest)\n        {\n            while (iter.hasNext())\n            {\n                tokens.add(iter.next());\n            }\n        }\n    }\n\n    \n    private void processNonOptionToken(String value) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n\n        tokens.add(value);\n    }\n\n    \n    private void processOptionToken(String token, boolean stopAtNonOption) {\n        if (stopAtNonOption && !options.hasOption(token))\n        {\n            eatTheRest = true;\n        }\n\n\n        tokens.add(token);\n    }\n\n    \n    protected void burstToken(String token, boolean stopAtNonOption) {\n        Option currentOption;\n        for (int i = 1; i < token.length(); i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n\n            if (options.hasOption(ch))\n            {\n                tokens.add(\"-\" + ch);\n                currentOption = options.getOption(ch);\n\n                if (currentOption.hasArg() && (token.length() != (i + 1)))\n                {\n                    tokens.add(token.substring(i + 1));\n\n                    break;\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                processNonOptionToken(token.substring(i));\n                break;\n            }\n            else\n            {\n                tokens.add(token);\n                break;\n            }\n        }\n    }\n}\n",
      "fixed_full_code": "\n\npackage org.apache.commons.cli;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\n\n\npublic class PosixParser extends Parser { private List tokens = new ArrayList(); private boolean eatTheRest; private Option currentOption; private Options options; private void init() {\n        eatTheRest = false;\n        tokens.clear();\n    }\n\n    \n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n        init();\n        this.options = options;\n\n        \n        Iterator iter = Arrays.asList(arguments).iterator();\n\n        \n        while (iter.hasNext())\n        {\n            \n            String token = (String) iter.next();\n\n            \n            if (token.startsWith(\"--\"))\n            {\n                int pos = token.indexOf('=');\n                String opt = pos == -1 ? token : token.substring(0, pos); \n\n                if (!options.hasOption(opt))\n                {\n                    processNonOptionToken(token, stopAtNonOption);\n                }\n                else\n                {\n                    currentOption = options.getOption(opt);\n                    \n                    tokens.add(opt);\n                    if (pos != -1)\n                    {\n                        tokens.add(token.substring(pos + 1));\n                    }\n                }\n            }\n\n            \n            else if (\"-\".equals(token))\n            {\n                tokens.add(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2 || options.hasOption(token))\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n                \n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            else\n            {\n                processNonOptionToken(token, stopAtNonOption);\n            }\n\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }\n\n    \n    private void gobble(Iterator iter) {\n        if (eatTheRest)\n        {\n            while (iter.hasNext())\n            {\n                tokens.add(iter.next());\n            }\n        }\n    }\n\n    \n    private void processNonOptionToken(String value, boolean stopAtNonOption) {\n        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n\n        tokens.add(value);\n    }\n\n    \n    private void processOptionToken(String token, boolean stopAtNonOption) {\n        if (stopAtNonOption && !options.hasOption(token))\n        {\n            eatTheRest = true;\n        }\n\n        if (options.hasOption(token))\n        {\n            currentOption = options.getOption(token);\n        }\n\n        tokens.add(token);\n    }\n\n    \n    protected void burstToken(String token, boolean stopAtNonOption) {\n        for (int i = 1; i < token.length(); i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n\n            if (options.hasOption(ch))\n            {\n                tokens.add(\"-\" + ch);\n                currentOption = options.getOption(ch);\n\n                if (currentOption.hasArg() && (token.length() != (i + 1)))\n                {\n                    tokens.add(token.substring(i + 1));\n\n                    break;\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                processNonOptionToken(token.substring(i), true);\n                break;\n            }\n            else\n            {\n                tokens.add(token);\n                break;\n            }\n        }\n    }\n}\n",
      "buggy_signatures": [
        "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
        "private void gobble(Iterator iter)",
        "private void processNonOptionToken(String value)",
        "private void processOptionToken(String token, boolean stopAtNonOption)",
        "protected void burstToken(String token, boolean stopAtNonOption)"
      ],
      "fixed_signatures": [
        "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
        "private void gobble(Iterator iter)",
        "private void processNonOptionToken(String value, boolean stopAtNonOption)",
        "private void processOptionToken(String token, boolean stopAtNonOption)",
        "protected void burstToken(String token, boolean stopAtNonOption)"
      ],
      "methods": [
        {
          "buggy_method": "  private List tokens = new ArrayList(); private boolean eatTheRest; private Options options; private void init() {\n  eatTheRest = false;\n  tokens.clear();\n  }",
          "fixed_method": "  private List tokens = new ArrayList(); private boolean eatTheRest; private Option currentOption; private Options options; private void init() {\n  eatTheRest = false;\n  tokens.clear();\n  }",
          "diff": [
            "@@ -38,6 +38,7 @@",
            "     private boolean eatTheRest;\n",
            " \n",
            "     /** holder for the current option */\n",
            "+    private Option currentOption;\n",
            " \n",
            "     /** the command line Options */\n",
            "     private Options options;\n"
          ],
          "changed_lines": 1
        },
        {
          "buggy_method": "  protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n  init();\n  this.options = options;\n\n  \n  Iterator iter = Arrays.asList(arguments).iterator();\n\n  \n  while (iter.hasNext())\n  {\n  \n  String token = (String) iter.next();\n\n  \n  if (token.startsWith(\"--\"))\n  {\n  int pos = token.indexOf('=');\n  String opt = pos == -1 ? token : token.substring(0, pos); \n\n  if (!options.hasOption(opt))\n  {\n  processNonOptionToken(token);\n  }\n  else\n  {\n  \n  tokens.add(opt);\n  if (pos != -1)\n  {\n  tokens.add(token.substring(pos + 1));\n  }\n  }\n  }\n\n  \n  else if (\"-\".equals(token))\n  {\n  tokens.add(token);\n  }\n  else if (token.startsWith(\"-\"))\n  {\n  if (token.length() == 2 || options.hasOption(token))\n  {\n  processOptionToken(token, stopAtNonOption);\n  }\n  \n  else\n  {\n  burstToken(token, stopAtNonOption);\n  }\n  }\n  else if (stopAtNonOption)\n  {\n  processNonOptionToken(token);\n  }\n  else\n  {\n  tokens.add(token);\n  }\n\n  gobble(iter);\n  }\n\n  return (String[]) tokens.toArray(new String[tokens.size()]);\n  }",
          "fixed_method": "  protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n  init();\n  this.options = options;\n\n  \n  Iterator iter = Arrays.asList(arguments).iterator();\n\n  \n  while (iter.hasNext())\n  {\n  \n  String token = (String) iter.next();\n\n  \n  if (token.startsWith(\"--\"))\n  {\n  int pos = token.indexOf('=');\n  String opt = pos == -1 ? token : token.substring(0, pos); \n\n  if (!options.hasOption(opt))\n  {\n  processNonOptionToken(token, stopAtNonOption);\n  }\n  else\n  {\n  currentOption = options.getOption(opt);\n  \n  tokens.add(opt);\n  if (pos != -1)\n  {\n  tokens.add(token.substring(pos + 1));\n  }\n  }\n  }\n\n  \n  else if (\"-\".equals(token))\n  {\n  tokens.add(token);\n  }\n  else if (token.startsWith(\"-\"))\n  {\n  if (token.length() == 2 || options.hasOption(token))\n  {\n  processOptionToken(token, stopAtNonOption);\n  }\n  \n  else\n  {\n  burstToken(token, stopAtNonOption);\n  }\n  }\n  else\n  {\n  processNonOptionToken(token, stopAtNonOption);\n  }\n\n  gobble(iter);\n  }\n\n  return (String[]) tokens.toArray(new String[tokens.size()]);\n  }",
          "diff": [
            "@@ -113,10 +114,11 @@",
            " \n",
            "                 if (!options.hasOption(opt))\n",
            "                 {\n",
            "-                    processNonOptionToken(token);\n",
            "+                    processNonOptionToken(token, stopAtNonOption);\n",
            "                 }\n",
            "                 else\n",
            "                 {\n",
            "+                    currentOption = options.getOption(opt);\n",
            "                     \n",
            "                     tokens.add(opt);\n",
            "                     if (pos != -1)\n",
            "@@ -143,13 +145,9 @@",
            "                     burstToken(token, stopAtNonOption);\n",
            "                 }\n",
            "             }\n",
            "-            else if (stopAtNonOption)\n",
            "-            {\n",
            "-                processNonOptionToken(token);\n",
            "-            }\n",
            "             else\n",
            "             {\n",
            "-                tokens.add(token);\n",
            "+                processNonOptionToken(token, stopAtNonOption);\n",
            "             }\n",
            " \n",
            "             gobble(iter);\n"
          ],
          "changed_lines": 9
        },
        {
          "buggy_method": "  private void processNonOptionToken(String value) {\n  eatTheRest = true;\n  tokens.add(\"--\");\n\n  tokens.add(value);\n  }",
          "fixed_method": "  private void processNonOptionToken(String value, boolean stopAtNonOption) {\n  if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))\n  {\n  eatTheRest = true;\n  tokens.add(\"--\");\n  }\n\n  tokens.add(value);\n  }",
          "diff": [
            "@@ -181,10 +179,13 @@",
            "      *\n",
            "      * @param value The current token\n",
            "      */\n",
            "-    private void processNonOptionToken(String value)\n",
            "-    {\n",
            "+    private void processNonOptionToken(String value, boolean stopAtNonOption)\n",
            "+    {\n",
            "+        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))\n",
            "+        {\n",
            "             eatTheRest = true;\n",
            "             tokens.add(\"--\");\n",
            "+        }\n",
            " \n",
            "         tokens.add(value);\n",
            "     }\n"
          ],
          "changed_lines": 7
        },
        {
          "buggy_method": "  private void processOptionToken(String token, boolean stopAtNonOption) {\n  if (stopAtNonOption && !options.hasOption(token))\n  {\n  eatTheRest = true;\n  }\n\n\n  tokens.add(token);\n  }",
          "fixed_method": "  private void processOptionToken(String token, boolean stopAtNonOption) {\n  if (stopAtNonOption && !options.hasOption(token))\n  {\n  eatTheRest = true;\n  }\n\n  if (options.hasOption(token))\n  {\n  currentOption = options.getOption(token);\n  }\n\n  tokens.add(token);\n  }",
          "diff": [
            "@@ -208,6 +209,10 @@",
            "             eatTheRest = true;\n",
            "         }\n",
            " \n",
            "+        if (options.hasOption(token))\n",
            "+        {\n",
            "+            currentOption = options.getOption(token);\n",
            "+        }\n",
            " \n",
            "         tokens.add(token);\n",
            "     }\n"
          ],
          "changed_lines": 4
        },
        {
          "buggy_method": "  protected void burstToken(String token, boolean stopAtNonOption) {\n  Option currentOption;\n  for (int i = 1; i < token.length(); i++)\n  {\n  String ch = String.valueOf(token.charAt(i));\n\n  if (options.hasOption(ch))\n  {\n  tokens.add(\"-\" + ch);\n  currentOption = options.getOption(ch);\n\n  if (currentOption.hasArg() && (token.length() != (i + 1)))\n  {\n  tokens.add(token.substring(i + 1));\n\n  break;\n  }\n  }\n  else if (stopAtNonOption)\n  {\n  processNonOptionToken(token.substring(i));\n  break;\n  }\n  else\n  {\n  tokens.add(token);\n  break;\n  }\n  }\n  }",
          "fixed_method": "  protected void burstToken(String token, boolean stopAtNonOption) {\n  for (int i = 1; i < token.length(); i++)\n  {\n  String ch = String.valueOf(token.charAt(i));\n\n  if (options.hasOption(ch))\n  {\n  tokens.add(\"-\" + ch);\n  currentOption = options.getOption(ch);\n\n  if (currentOption.hasArg() && (token.length() != (i + 1)))\n  {\n  tokens.add(token.substring(i + 1));\n\n  break;\n  }\n  }\n  else if (stopAtNonOption)\n  {\n  processNonOptionToken(token.substring(i), true);\n  break;\n  }\n  else\n  {\n  tokens.add(token);\n  break;\n  }\n  }\n  }",
          "diff": [
            "@@ -240,7 +245,6 @@",
            "      */\n",
            "     protected void burstToken(String token, boolean stopAtNonOption)\n",
            "     {\n",
            "-        Option currentOption;\n",
            "         for (int i = 1; i < token.length(); i++)\n",
            "         {\n",
            "             String ch = String.valueOf(token.charAt(i));\n",
            "@@ -259,7 +263,7 @@",
            "             }\n",
            "             else if (stopAtNonOption)\n",
            "             {\n",
            "-                processNonOptionToken(token.substring(i));\n",
            "+                processNonOptionToken(token.substring(i), true);\n",
            "                 break;\n",
            "             }\n",
            "             else\n"
          ],
          "changed_lines": 3
        }
      ]
    }
  ]
}
