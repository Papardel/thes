{
  "bug_id": "52",
  "failed_tests": {
    "org.apache.commons.lang.StringEscapeUtilsTest": [
      {
        "methodName": "testEscapeJavaScript",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<...ipt>alert(\\'aaa\\');<[\\]/script>\\';> but was:<...ipt>alert(\\'aaa\\');<[]/script>\\';>",
        "fail_line": "        assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", ",
        "test_source": "  public void testEscapeJavaScript() {\n  assertEquals(null, StringEscapeUtils.escapeJavaScript(null));\n  try {\n  StringEscapeUtils.escapeJavaScript(null, null);\n  fail();\n  } catch (IOException ex) {\n  fail();\n  } catch (IllegalArgumentException ex) {\n  }\n  try {\n  StringEscapeUtils.escapeJavaScript(null, \"\");\n  fail();\n  } catch (IOException ex) {\n  fail();\n  } catch (IllegalArgumentException ex) {\n  }\n  \n  assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeJavaScript(\"He didn't say, \\\"stop!\\\"\"));\n  assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", \n  StringEscapeUtils.escapeJavaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\n  }",
        "stack": [
          "StringEscapeUtilsTest.testEscapeJavaScript line 187"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/lang/StringEscapeUtils.java",
      "buggy_full_code": "\npackage org.apache.commons.lang;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\n\nimport org.apache.commons.lang.exception.NestableRuntimeException;\n\n\npublic class StringEscapeUtils { public StringEscapeUtils() {\n      super();\n    }\n\n    \n    \n    \n    public static String escapeJava(String str) {\n        return escapeJavaStyleString(str, false);\n    }\n\n    \n    public static void escapeJava(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, false);\n    }\n\n    \n    public static String escapeJavaScript(String str) {\n        return escapeJavaStyleString(str, true);\n    }\n\n    \n    public static void escapeJavaScript(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, true);\n    }\n\n    \n    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(str.length() * 2);\n            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n            return writer.toString();\n        } catch (IOException ioe) {\n            \n            ioe.printStackTrace();\n            return null;\n        }\n    }\n\n    \n    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (str == null) {\n            return;\n        }\n        int sz;\n        sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n\n            \n            if (ch > 0xfff) {\n                out.write(\"\\\\u\" + hex(ch));\n            } else if (ch > 0xff) {\n                out.write(\"\\\\u0\" + hex(ch));\n            } else if (ch > 0x7f) {\n                out.write(\"\\\\u00\" + hex(ch));\n            } else if (ch < 32) {\n                switch (ch) {\n                    case '\\b':\n                        out.write('\\\\');\n                        out.write('b');\n                        break;\n                    case '\\n':\n                        out.write('\\\\');\n                        out.write('n');\n                        break;\n                    case '\\t':\n                        out.write('\\\\');\n                        out.write('t');\n                        break;\n                    case '\\f':\n                        out.write('\\\\');\n                        out.write('f');\n                        break;\n                    case '\\r':\n                        out.write('\\\\');\n                        out.write('r');\n                        break;\n                    default :\n                        if (ch > 0xf) {\n                            out.write(\"\\\\u00\" + hex(ch));\n                        } else {\n                            out.write(\"\\\\u000\" + hex(ch));\n                        }\n                        break;\n                }\n            } else {\n                switch (ch) {\n                    case '\\'':\n                        if (escapeSingleQuote) {\n                          out.write('\\\\');\n                        }\n                        out.write('\\'');\n                        break;\n                    case '\"':\n                        out.write('\\\\');\n                        out.write('\"');\n                        break;\n                    case '\\\\':\n                        out.write('\\\\');\n                        out.write('\\\\');\n                        break;\n                    default :\n                        out.write(ch);\n                        break;\n                }\n            }\n        }\n    }\n\n    \n    private static String hex(char ch) {\n        return Integer.toHexString(ch).toUpperCase();\n    }\n\n    \n    public static String unescapeJava(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(str.length());\n            unescapeJava(writer, str);\n            return writer.toString();\n        } catch (IOException ioe) {\n            \n            ioe.printStackTrace();\n            return null;\n        }\n    }\n\n    \n    public static void unescapeJava(Writer out, String str) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (str == null) {\n            return;\n        }\n        int sz = str.length();\n        StringBuffer unicode = new StringBuffer(4);\n        boolean hadSlash = false;\n        boolean inUnicode = false;\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n            if (inUnicode) {\n                \n                \n                unicode.append(ch);\n                if (unicode.length() == 4) {\n                    \n                    \n                    try {\n                        int value = Integer.parseInt(unicode.toString(), 16);\n                        out.write((char) value);\n                        unicode.setLength(0);\n                        inUnicode = false;\n                        hadSlash = false;\n                    } catch (NumberFormatException nfe) {\n                        throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);\n                    }\n                }\n                continue;\n            }\n            if (hadSlash) {\n                \n                hadSlash = false;\n                switch (ch) {\n                    case '\\\\':\n                        out.write('\\\\');\n                        break;\n                    case '\\'':\n                        out.write('\\'');\n                        break;\n                    case '\\\"':\n                        out.write('\"');\n                        break;\n                    case 'r':\n                        out.write('\\r');\n                        break;\n                    case 'f':\n                        out.write('\\f');\n                        break;\n                    case 't':\n                        out.write('\\t');\n                        break;\n                    case 'n':\n                        out.write('\\n');\n                        break;\n                    case 'b':\n                        out.write('\\b');\n                        break;\n                    case 'u':\n                        {\n                            \n                            inUnicode = true;\n                            break;\n                        }\n                    default :\n                        out.write(ch);\n                        break;\n                }\n                continue;\n            } else if (ch == '\\\\') {\n                hadSlash = true;\n                continue;\n            }\n            out.write(ch);\n        }\n        if (hadSlash) {\n            \n            \n            out.write('\\\\');\n        }\n    }\n\n    \n    public static String unescapeJavaScript(String str) {\n        return unescapeJava(str);\n    }\n\n    \n    public static void unescapeJavaScript(Writer out, String str) throws IOException {\n        unescapeJava(out, str);\n    }\n\n    \n    \n    \n    public static String escapeHtml(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n            escapeHtml(writer, str);\n            return writer.toString();\n        } catch (IOException e) {\n            \n            \n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    \n    public static void escapeHtml(Writer writer, String string) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (string == null) {\n            return;\n        }\n        Entities.HTML40.escape(writer, string);\n    }\n\n    \n    \n    public static String unescapeHtml(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n            unescapeHtml(writer, str);\n            return writer.toString();\n        } catch (IOException e) {\n            \n            \n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    \n    public static void unescapeHtml(Writer writer, String string) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (string == null) {\n            return;\n        }\n        Entities.HTML40.unescape(writer, string);\n    }\n\n    \n    \n    public static void escapeXml(Writer writer, String str) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (str == null) {\n            return;\n        }\n        Entities.XML.escape(writer, str);\n    }\n\n    \n    public static String escapeXml(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Entities.XML.escape(str);\n    }\n\n    \n    \n    public static void unescapeXml(Writer writer, String str) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (str == null) {\n            return;\n        }\n        Entities.XML.unescape(writer, str);\n    }\n\n    \n    public static String unescapeXml(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Entities.XML.unescape(str);\n    }\n\n    \n    \n    public static String escapeSql(String str) {\n        if (str == null) {\n            return null;\n        }\n        return StringUtils.replace(str, \"'\", \"''\");\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.lang;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\n\nimport org.apache.commons.lang.exception.NestableRuntimeException;\n\n\npublic class StringEscapeUtils { public StringEscapeUtils() {\n      super();\n    }\n\n    \n    \n    \n    public static String escapeJava(String str) {\n        return escapeJavaStyleString(str, false);\n    }\n\n    \n    public static void escapeJava(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, false);\n    }\n\n    \n    public static String escapeJavaScript(String str) {\n        return escapeJavaStyleString(str, true);\n    }\n\n    \n    public static void escapeJavaScript(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, true);\n    }\n\n    \n    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(str.length() * 2);\n            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n            return writer.toString();\n        } catch (IOException ioe) {\n            \n            ioe.printStackTrace();\n            return null;\n        }\n    }\n\n    \n    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (str == null) {\n            return;\n        }\n        int sz;\n        sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n\n            \n            if (ch > 0xfff) {\n                out.write(\"\\\\u\" + hex(ch));\n            } else if (ch > 0xff) {\n                out.write(\"\\\\u0\" + hex(ch));\n            } else if (ch > 0x7f) {\n                out.write(\"\\\\u00\" + hex(ch));\n            } else if (ch < 32) {\n                switch (ch) {\n                    case '\\b':\n                        out.write('\\\\');\n                        out.write('b');\n                        break;\n                    case '\\n':\n                        out.write('\\\\');\n                        out.write('n');\n                        break;\n                    case '\\t':\n                        out.write('\\\\');\n                        out.write('t');\n                        break;\n                    case '\\f':\n                        out.write('\\\\');\n                        out.write('f');\n                        break;\n                    case '\\r':\n                        out.write('\\\\');\n                        out.write('r');\n                        break;\n                    default :\n                        if (ch > 0xf) {\n                            out.write(\"\\\\u00\" + hex(ch));\n                        } else {\n                            out.write(\"\\\\u000\" + hex(ch));\n                        }\n                        break;\n                }\n            } else {\n                switch (ch) {\n                    case '\\'':\n                        if (escapeSingleQuote) {\n                          out.write('\\\\');\n                        }\n                        out.write('\\'');\n                        break;\n                    case '\"':\n                        out.write('\\\\');\n                        out.write('\"');\n                        break;\n                    case '\\\\':\n                        out.write('\\\\');\n                        out.write('\\\\');\n                        break;\n                    case '/':\n                        out.write('\\\\');\n                        out.write('/');\n                        break;\n                    default :\n                        out.write(ch);\n                        break;\n                }\n            }\n        }\n    }\n\n    \n    private static String hex(char ch) {\n        return Integer.toHexString(ch).toUpperCase();\n    }\n\n    \n    public static String unescapeJava(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(str.length());\n            unescapeJava(writer, str);\n            return writer.toString();\n        } catch (IOException ioe) {\n            \n            ioe.printStackTrace();\n            return null;\n        }\n    }\n\n    \n    public static void unescapeJava(Writer out, String str) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (str == null) {\n            return;\n        }\n        int sz = str.length();\n        StringBuffer unicode = new StringBuffer(4);\n        boolean hadSlash = false;\n        boolean inUnicode = false;\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n            if (inUnicode) {\n                \n                \n                unicode.append(ch);\n                if (unicode.length() == 4) {\n                    \n                    \n                    try {\n                        int value = Integer.parseInt(unicode.toString(), 16);\n                        out.write((char) value);\n                        unicode.setLength(0);\n                        inUnicode = false;\n                        hadSlash = false;\n                    } catch (NumberFormatException nfe) {\n                        throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);\n                    }\n                }\n                continue;\n            }\n            if (hadSlash) {\n                \n                hadSlash = false;\n                switch (ch) {\n                    case '\\\\':\n                        out.write('\\\\');\n                        break;\n                    case '\\'':\n                        out.write('\\'');\n                        break;\n                    case '\\\"':\n                        out.write('\"');\n                        break;\n                    case 'r':\n                        out.write('\\r');\n                        break;\n                    case 'f':\n                        out.write('\\f');\n                        break;\n                    case 't':\n                        out.write('\\t');\n                        break;\n                    case 'n':\n                        out.write('\\n');\n                        break;\n                    case 'b':\n                        out.write('\\b');\n                        break;\n                    case 'u':\n                        {\n                            \n                            inUnicode = true;\n                            break;\n                        }\n                    default :\n                        out.write(ch);\n                        break;\n                }\n                continue;\n            } else if (ch == '\\\\') {\n                hadSlash = true;\n                continue;\n            }\n            out.write(ch);\n        }\n        if (hadSlash) {\n            \n            \n            out.write('\\\\');\n        }\n    }\n\n    \n    public static String unescapeJavaScript(String str) {\n        return unescapeJava(str);\n    }\n\n    \n    public static void unescapeJavaScript(Writer out, String str) throws IOException {\n        unescapeJava(out, str);\n    }\n\n    \n    \n    \n    public static String escapeHtml(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n            escapeHtml(writer, str);\n            return writer.toString();\n        } catch (IOException e) {\n            \n            \n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    \n    public static void escapeHtml(Writer writer, String string) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (string == null) {\n            return;\n        }\n        Entities.HTML40.escape(writer, string);\n    }\n\n    \n    \n    public static String unescapeHtml(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n            unescapeHtml(writer, str);\n            return writer.toString();\n        } catch (IOException e) {\n            \n            \n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    \n    public static void unescapeHtml(Writer writer, String string) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (string == null) {\n            return;\n        }\n        Entities.HTML40.unescape(writer, string);\n    }\n\n    \n    \n    public static void escapeXml(Writer writer, String str) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (str == null) {\n            return;\n        }\n        Entities.XML.escape(writer, str);\n    }\n\n    \n    public static String escapeXml(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Entities.XML.escape(str);\n    }\n\n    \n    \n    public static void unescapeXml(Writer writer, String str) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (str == null) {\n            return;\n        }\n        Entities.XML.unescape(writer, str);\n    }\n\n    \n    public static String unescapeXml(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Entities.XML.unescape(str);\n    }\n\n    \n    \n    public static String escapeSql(String str) {\n        if (str == null) {\n            return null;\n        }\n        return StringUtils.replace(str, \"'\", \"''\");\n    }\n\n}\n",
      "buggy_signatures": [
        "public class StringEscapeUtils { public StringEscapeUtils()",
        "public static String escapeJava(String str)",
        "public static void escapeJava(Writer out, String str) throws IOException",
        "public static String escapeJavaScript(String str)",
        "public static void escapeJavaScript(Writer out, String str) throws IOException",
        "private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes)",
        "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException",
        "private static String hex(char ch)",
        "public static String unescapeJava(String str)",
        "public static void unescapeJava(Writer out, String str) throws IOException",
        "public static String unescapeJavaScript(String str)",
        "public static void unescapeJavaScript(Writer out, String str) throws IOException",
        "public static String escapeHtml(String str)",
        "public static void escapeHtml(Writer writer, String string) throws IOException",
        "public static String unescapeHtml(String str)",
        "public static void unescapeHtml(Writer writer, String string) throws IOException",
        "public static void escapeXml(Writer writer, String str) throws IOException",
        "public static String escapeXml(String str)",
        "public static void unescapeXml(Writer writer, String str) throws IOException",
        "public static String unescapeXml(String str)",
        "public static String escapeSql(String str)"
      ],
      "fixed_signatures": [
        "public class StringEscapeUtils { public StringEscapeUtils()",
        "public static String escapeJava(String str)",
        "public static void escapeJava(Writer out, String str) throws IOException",
        "public static String escapeJavaScript(String str)",
        "public static void escapeJavaScript(Writer out, String str) throws IOException",
        "private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes)",
        "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException",
        "private static String hex(char ch)",
        "public static String unescapeJava(String str)",
        "public static void unescapeJava(Writer out, String str) throws IOException",
        "public static String unescapeJavaScript(String str)",
        "public static void unescapeJavaScript(Writer out, String str) throws IOException",
        "public static String escapeHtml(String str)",
        "public static void escapeHtml(Writer writer, String string) throws IOException",
        "public static String unescapeHtml(String str)",
        "public static void unescapeHtml(Writer writer, String string) throws IOException",
        "public static void escapeXml(Writer writer, String str) throws IOException",
        "public static String escapeXml(String str)",
        "public static void unescapeXml(Writer writer, String str) throws IOException",
        "public static String unescapeXml(String str)",
        "public static String escapeSql(String str)"
      ],
      "methods": [
        {
          "buggy_method": "  private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n  if (out == null) {\n  throw new IllegalArgumentException(\"The Writer must not be null\");\n  }\n  if (str == null) {\n  return;\n  }\n  int sz;\n  sz = str.length();\n  for (int i = 0; i < sz; i++) {\n  char ch = str.charAt(i);\n\n  \n  if (ch > 0xfff) {\n  out.write(\"\\\\u\" + hex(ch));\n  } else if (ch > 0xff) {\n  out.write(\"\\\\u0\" + hex(ch));\n  } else if (ch > 0x7f) {\n  out.write(\"\\\\u00\" + hex(ch));\n  } else if (ch < 32) {\n  switch (ch) {\n  case '\\b':\n  out.write('\\\\');\n  out.write('b');\n  break;\n  case '\\n':\n  out.write('\\\\');\n  out.write('n');\n  break;\n  case '\\t':\n  out.write('\\\\');\n  out.write('t');\n  break;\n  case '\\f':\n  out.write('\\\\');\n  out.write('f');\n  break;\n  case '\\r':\n  out.write('\\\\');\n  out.write('r');\n  break;\n  default :\n  if (ch > 0xf) {\n  out.write(\"\\\\u00\" + hex(ch));\n  } else {\n  out.write(\"\\\\u000\" + hex(ch));\n  }\n  break;\n  }\n  } else {\n  switch (ch) {\n  case '\\'':\n  if (escapeSingleQuote) {\n  out.write('\\\\');\n  }\n  out.write('\\'');\n  break;\n  case '\"':\n  out.write('\\\\');\n  out.write('\"');\n  break;\n  case '\\\\':\n  out.write('\\\\');\n  out.write('\\\\');\n  break;\n  default :\n  out.write(ch);\n  break;\n  }\n  }\n  }\n  }",
          "fixed_method": "  private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n  if (out == null) {\n  throw new IllegalArgumentException(\"The Writer must not be null\");\n  }\n  if (str == null) {\n  return;\n  }\n  int sz;\n  sz = str.length();\n  for (int i = 0; i < sz; i++) {\n  char ch = str.charAt(i);\n\n  \n  if (ch > 0xfff) {\n  out.write(\"\\\\u\" + hex(ch));\n  } else if (ch > 0xff) {\n  out.write(\"\\\\u0\" + hex(ch));\n  } else if (ch > 0x7f) {\n  out.write(\"\\\\u00\" + hex(ch));\n  } else if (ch < 32) {\n  switch (ch) {\n  case '\\b':\n  out.write('\\\\');\n  out.write('b');\n  break;\n  case '\\n':\n  out.write('\\\\');\n  out.write('n');\n  break;\n  case '\\t':\n  out.write('\\\\');\n  out.write('t');\n  break;\n  case '\\f':\n  out.write('\\\\');\n  out.write('f');\n  break;\n  case '\\r':\n  out.write('\\\\');\n  out.write('r');\n  break;\n  default :\n  if (ch > 0xf) {\n  out.write(\"\\\\u00\" + hex(ch));\n  } else {\n  out.write(\"\\\\u000\" + hex(ch));\n  }\n  break;\n  }\n  } else {\n  switch (ch) {\n  case '\\'':\n  if (escapeSingleQuote) {\n  out.write('\\\\');\n  }\n  out.write('\\'');\n  break;\n  case '\"':\n  out.write('\\\\');\n  out.write('\"');\n  break;\n  case '\\\\':\n  out.write('\\\\');\n  out.write('\\\\');\n  break;\n  case '/':\n  out.write('\\\\');\n  out.write('/');\n  break;\n  default :\n  out.write(ch);\n  break;\n  }\n  }\n  }\n  }",
          "diff": [
            "@@ -232,6 +232,10 @@",
            "                     case '\\\\':\n",
            "                         out.write('\\\\');\n",
            "                         out.write('\\\\');\n",
            "+                        break;\n",
            "+                    case '/':\n",
            "+                        out.write('\\\\');\n",
            "+                        out.write('/');\n",
            "                         break;\n",
            "                     default :\n",
            "                         out.write(ch);\n"
          ],
          "changed_lines": 4
        }
      ]
    }
  ]
}
