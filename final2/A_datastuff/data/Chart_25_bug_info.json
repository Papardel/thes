{
  "bug_id": "25",
  "failed_tests": {
    "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests": [
      {
        "methodName": "testDrawWithNullMeanVertical",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullMeanVertical() {\n  boolean success = false;\n  try {\n  DefaultStatisticalCategoryDataset dataset \n  = new DefaultStatisticalCategoryDataset();\n  dataset.add(1.0, 2.0, \"S1\", \"C1\");\n  dataset.add(null, new Double(4.0), \"S1\", \"C2\");\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  new StatisticalBarRenderer());\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "StatisticalBarRendererTests.testDrawWithNullMeanVertical line 208"
        ]
      },
      {
        "methodName": "testDrawWithNullDeviationVertical",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullDeviationVertical() {\n  boolean success = false;\n  try {\n  DefaultStatisticalCategoryDataset dataset \n  = new DefaultStatisticalCategoryDataset();\n  dataset.add(1.0, 2.0, \"S1\", \"C1\");\n  dataset.add(new Double(4.0), null, \"S1\", \"C2\");\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  new StatisticalBarRenderer());\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "StatisticalBarRendererTests.testDrawWithNullDeviationVertical line 263"
        ]
      },
      {
        "methodName": "testDrawWithNullMeanHorizontal",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullMeanHorizontal() {\n  boolean success = false;\n  try {\n  DefaultStatisticalCategoryDataset dataset \n  = new DefaultStatisticalCategoryDataset();\n  dataset.add(1.0, 2.0, \"S1\", \"C1\");\n  dataset.add(null, new Double(4.0), \"S1\", \"C2\");\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  new StatisticalBarRenderer());\n  plot.setOrientation(PlotOrientation.HORIZONTAL);\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "StatisticalBarRendererTests.testDrawWithNullMeanHorizontal line 236"
        ]
      },
      {
        "methodName": "testDrawWithNullDeviationHorizontal",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertTrue(success);",
        "test_source": "  public void testDrawWithNullDeviationHorizontal() {\n  boolean success = false;\n  try {\n  DefaultStatisticalCategoryDataset dataset \n  = new DefaultStatisticalCategoryDataset();\n  dataset.add(1.0, 2.0, \"S1\", \"C1\");\n  dataset.add(new Double(4.0), null, \"S1\", \"C2\");\n  CategoryPlot plot = new CategoryPlot(dataset, \n  new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n  new StatisticalBarRenderer());\n  plot.setOrientation(PlotOrientation.HORIZONTAL);\n  JFreeChart chart = new JFreeChart(plot);\n  /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n  null);\n  success = true;\n  }\n  catch (NullPointerException e) {\n  e.printStackTrace();\n  success = false;\n  }\n  assertTrue(success);\n  }",
        "stack": [
          "StatisticalBarRendererTests.testDrawWithNullDeviationHorizontal line 291"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
      "buggy_full_code": "\n\npackage org.jfree.chart.renderer.category;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.Paint;\nimport java.awt.Stroke;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\n\nimport org.jfree.chart.axis.CategoryAxis;\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.chart.entity.EntityCollection;\nimport org.jfree.chart.event.RendererChangeEvent;\nimport org.jfree.chart.labels.CategoryItemLabelGenerator;\nimport org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.util.PaintUtilities;\nimport org.jfree.chart.util.PublicCloneable;\nimport org.jfree.chart.util.RectangleEdge;\nimport org.jfree.chart.util.SerialUtilities;\nimport org.jfree.data.category.CategoryDataset;\nimport org.jfree.data.statistics.StatisticalCategoryDataset;\n\n\npublic class StatisticalBarRenderer extends BarRenderer implements CategoryItemRenderer, Cloneable, PublicCloneable, Serializable { private static final long serialVersionUID = -4986038395414039117L; private transient Paint errorIndicatorPaint; private transient Stroke errorIndicatorStroke; public StatisticalBarRenderer() {\n        super();\n        this.errorIndicatorPaint = Color.gray;\n        this.errorIndicatorStroke = new BasicStroke(0.5f);\n    }\n\n    \n    public Paint getErrorIndicatorPaint() {\n        return this.errorIndicatorPaint;   \n    }\n\n    \n    public void setErrorIndicatorPaint(Paint paint) {\n        this.errorIndicatorPaint = paint;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n    \n    \n    public Stroke getErrorIndicatorStroke() {\n        return this.errorIndicatorStroke;   \n    }\n\n    \n    public void setErrorIndicatorStroke(Stroke stroke) {\n        this.errorIndicatorStroke = stroke;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n    \n    \n    public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {\n\n        \n        if (!(data instanceof StatisticalCategoryDataset)) {\n            throw new IllegalArgumentException(\n                \"Requires StatisticalCategoryDataset.\");\n        }\n        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n\n        PlotOrientation orientation = plot.getOrientation();\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                    rangeAxis, statData, row, column);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n                    statData, row, column);\n        }\n    }\n                \n    \n    protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        \n        double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                dataArea, xAxisLocation);\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectY = rectY + row * state.getBarWidth();\n        }\n\n        \n        Number meanValue = dataset.getMeanValue(row, column);\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  \n            if (value >= uclip) {\n                return; \n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) { \n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else { \n            if (value <= lclip) {\n                return; \n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n                yAxisLocation);\n        double rectX = Math.min(transY2, transY1);\n\n        double rectHeight = state.getBarWidth();\n        double rectWidth = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n                rectHeight);\n        Paint seriesPaint = getItemPaint(row, column);\n        g2.setPaint(seriesPaint);\n        g2.fill(bar);\n        if (isDrawBarOutline() && state.getBarWidth() > 3) {\n            g2.setStroke(getItemStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        \n            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);  \n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));   \n            }\n        \n            Line2D line = null;\n            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, \n                                     highVal, rectY + rectHeight / 2.0d);\n            g2.draw(line);\n            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, \n                                     highVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n                                     lowVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n        \n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n                    (value < 0.0));\n        }        \n\n        \n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n\n    }\n\n    \n    protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        \n        double rectX = domainAxis.getCategoryStart(\n            column, getColumnCount(), dataArea, xAxisLocation\n        );\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectX = rectX + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectX = rectX + row * state.getBarWidth();\n        }\n\n        \n        Number meanValue = dataset.getMeanValue(row, column);\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  \n            if (value >= uclip) {\n                return; \n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) { \n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else { \n            if (value <= lclip) {\n                return; \n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n                yAxisLocation);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth = state.getBarWidth();\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n                rectHeight);\n        Paint seriesPaint = getItemPaint(row, column);\n        g2.setPaint(seriesPaint);\n        g2.fill(bar);\n        if (isDrawBarOutline() && state.getBarWidth() > 3) {\n            g2.setStroke(getItemStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        \n            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);  \n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));   \n            }\n            Line2D line = null;\n            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal,\n                                     rectX + rectWidth / 2.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, lowVal);\n            g2.draw(line);\n        \n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n                    (value < 0.0));\n        }        \n\n        \n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof StatisticalBarRenderer)) {\n            return false;   \n        }\n        if (!super.equals(obj)) {\n            return false;   \n        }\n        StatisticalBarRenderer that = (StatisticalBarRenderer) obj;\n        if (!PaintUtilities.equal(this.errorIndicatorPaint, \n                that.errorIndicatorPaint)) {\n            return false;\n        }\n        return true;\n    }\n    \n    \n    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.errorIndicatorPaint, stream);\n        SerialUtilities.writeStroke(this.errorIndicatorStroke, stream);\n    }\n\n    \n    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.errorIndicatorPaint = SerialUtilities.readPaint(stream);\n        this.errorIndicatorStroke = SerialUtilities.readStroke(stream);\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.jfree.chart.renderer.category;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.Paint;\nimport java.awt.Stroke;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\n\nimport org.jfree.chart.axis.CategoryAxis;\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.chart.entity.EntityCollection;\nimport org.jfree.chart.event.RendererChangeEvent;\nimport org.jfree.chart.labels.CategoryItemLabelGenerator;\nimport org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.util.PaintUtilities;\nimport org.jfree.chart.util.PublicCloneable;\nimport org.jfree.chart.util.RectangleEdge;\nimport org.jfree.chart.util.SerialUtilities;\nimport org.jfree.data.category.CategoryDataset;\nimport org.jfree.data.statistics.StatisticalCategoryDataset;\n\n\npublic class StatisticalBarRenderer extends BarRenderer implements CategoryItemRenderer, Cloneable, PublicCloneable, Serializable { private static final long serialVersionUID = -4986038395414039117L; private transient Paint errorIndicatorPaint; private transient Stroke errorIndicatorStroke; public StatisticalBarRenderer() {\n        super();\n        this.errorIndicatorPaint = Color.gray;\n        this.errorIndicatorStroke = new BasicStroke(0.5f);\n    }\n\n    \n    public Paint getErrorIndicatorPaint() {\n        return this.errorIndicatorPaint;   \n    }\n\n    \n    public void setErrorIndicatorPaint(Paint paint) {\n        this.errorIndicatorPaint = paint;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n    \n    \n    public Stroke getErrorIndicatorStroke() {\n        return this.errorIndicatorStroke;   \n    }\n\n    \n    public void setErrorIndicatorStroke(Stroke stroke) {\n        this.errorIndicatorStroke = stroke;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n    \n    \n    public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {\n\n        \n        if (!(data instanceof StatisticalCategoryDataset)) {\n            throw new IllegalArgumentException(\n                \"Requires StatisticalCategoryDataset.\");\n        }\n        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n\n        PlotOrientation orientation = plot.getOrientation();\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                    rangeAxis, statData, row, column);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n                    statData, row, column);\n        }\n    }\n                \n    \n    protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        \n        double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                dataArea, xAxisLocation);\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectY = rectY + row * state.getBarWidth();\n        }\n\n        \n        Number meanValue = dataset.getMeanValue(row, column);\n        if (meanValue == null) {\n            return;\n        }\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  \n            if (value >= uclip) {\n                return; \n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) { \n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else { \n            if (value <= lclip) {\n                return; \n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n                yAxisLocation);\n        double rectX = Math.min(transY2, transY1);\n\n        double rectHeight = state.getBarWidth();\n        double rectWidth = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n                rectHeight);\n        Paint seriesPaint = getItemPaint(row, column);\n        g2.setPaint(seriesPaint);\n        g2.fill(bar);\n        if (isDrawBarOutline() && state.getBarWidth() > 3) {\n            g2.setStroke(getItemStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        \n        Number n = dataset.getStdDevValue(row, column);\n        if (n != null) {\n            double valueDelta = n.doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);  \n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));   \n            }\n        \n            Line2D line = null;\n            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, \n                                     highVal, rectY + rectHeight / 2.0d);\n            g2.draw(line);\n            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, \n                                     highVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n                                     lowVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n        }\n        \n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n                    (value < 0.0));\n        }        \n\n        \n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n\n    }\n\n    \n    protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        \n        double rectX = domainAxis.getCategoryStart(\n            column, getColumnCount(), dataArea, xAxisLocation\n        );\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectX = rectX + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectX = rectX + row * state.getBarWidth();\n        }\n\n        \n        Number meanValue = dataset.getMeanValue(row, column);\n        if (meanValue == null) {\n            return;\n        }\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  \n            if (value >= uclip) {\n                return; \n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) { \n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else { \n            if (value <= lclip) {\n                return; \n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n                yAxisLocation);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth = state.getBarWidth();\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n                rectHeight);\n        Paint seriesPaint = getItemPaint(row, column);\n        g2.setPaint(seriesPaint);\n        g2.fill(bar);\n        if (isDrawBarOutline() && state.getBarWidth() > 3) {\n            g2.setStroke(getItemStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        \n        Number n = dataset.getStdDevValue(row, column);\n        if (n != null) {\n            double valueDelta = n.doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);  \n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));   \n            }\n            Line2D line = null;\n            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal,\n                                     rectX + rectWidth / 2.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, lowVal);\n            g2.draw(line);\n        }\n        \n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n                    (value < 0.0));\n        }        \n\n        \n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof StatisticalBarRenderer)) {\n            return false;   \n        }\n        if (!super.equals(obj)) {\n            return false;   \n        }\n        StatisticalBarRenderer that = (StatisticalBarRenderer) obj;\n        if (!PaintUtilities.equal(this.errorIndicatorPaint, \n                that.errorIndicatorPaint)) {\n            return false;\n        }\n        return true;\n    }\n    \n    \n    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.errorIndicatorPaint, stream);\n        SerialUtilities.writeStroke(this.errorIndicatorStroke, stream);\n    }\n\n    \n    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.errorIndicatorPaint = SerialUtilities.readPaint(stream);\n        this.errorIndicatorStroke = SerialUtilities.readStroke(stream);\n    }\n\n}\n",
      "buggy_signatures": [
        "public Paint getErrorIndicatorPaint()",
        "public void setErrorIndicatorPaint(Paint paint)",
        "public Stroke getErrorIndicatorStroke()",
        "public void setErrorIndicatorStroke(Stroke stroke)",
        "public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass)",
        "protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column)",
        "protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column)",
        "public boolean equals(Object obj)",
        "private void writeObject(ObjectOutputStream stream) throws IOException",
        "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException"
      ],
      "fixed_signatures": [
        "public Paint getErrorIndicatorPaint()",
        "public void setErrorIndicatorPaint(Paint paint)",
        "public Stroke getErrorIndicatorStroke()",
        "public void setErrorIndicatorStroke(Stroke stroke)",
        "public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass)",
        "protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column)",
        "protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column)",
        "public boolean equals(Object obj)",
        "private void writeObject(ObjectOutputStream stream) throws IOException",
        "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException"
      ],
      "methods": [
        {
          "buggy_method": "  protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {\n  \n  RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n  \n  \n  double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n  dataArea, xAxisLocation);\n\n  int seriesCount = getRowCount();\n  int categoryCount = getColumnCount();\n  if (seriesCount > 1) {\n  double seriesGap = dataArea.getHeight() * getItemMargin()\n  / (categoryCount * (seriesCount - 1));\n  rectY = rectY + row * (state.getBarWidth() + seriesGap);\n  }\n  else {\n  rectY = rectY + row * state.getBarWidth();\n  }\n\n  \n  Number meanValue = dataset.getMeanValue(row, column);\n\n  double value = meanValue.doubleValue();\n  double base = 0.0;\n  double lclip = getLowerClip();\n  double uclip = getUpperClip();\n\n  if (uclip <= 0.0) {  \n  if (value >= uclip) {\n  return; \n  }\n  base = uclip;\n  if (value <= lclip) {\n  value = lclip;\n  }\n  }\n  else if (lclip <= 0.0) { \n  if (value >= uclip) {\n  value = uclip;\n  }\n  else {\n  if (value <= lclip) {\n  value = lclip;\n  }\n  }\n  }\n  else { \n  if (value <= lclip) {\n  return; \n  }\n  base = getLowerClip();\n  if (value >= uclip) {\n  value = uclip;\n  }\n  }\n\n  RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n  double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n  double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n  yAxisLocation);\n  double rectX = Math.min(transY2, transY1);\n\n  double rectHeight = state.getBarWidth();\n  double rectWidth = Math.abs(transY2 - transY1);\n\n  Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n  rectHeight);\n  Paint seriesPaint = getItemPaint(row, column);\n  g2.setPaint(seriesPaint);\n  g2.fill(bar);\n  if (isDrawBarOutline() && state.getBarWidth() > 3) {\n  g2.setStroke(getItemStroke(row, column));\n  g2.setPaint(getItemOutlinePaint(row, column));\n  g2.draw(bar);\n  }\n\n  \n  double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n  double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n  + valueDelta, dataArea, yAxisLocation);\n  double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n  - valueDelta, dataArea, yAxisLocation);\n\n  if (this.errorIndicatorStroke != null) {\n  g2.setStroke(this.errorIndicatorStroke);\n  }\n  else {\n  g2.setStroke(getItemOutlineStroke(row, column));\n  }\n  if (this.errorIndicatorPaint != null) {\n  g2.setPaint(this.errorIndicatorPaint);  \n  }\n  else {\n  g2.setPaint(getItemOutlinePaint(row, column));  \n  }\n  \n  Line2D line = null;\n  line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, \n  highVal, rectY + rectHeight / 2.0d);\n  g2.draw(line);\n  line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, \n  highVal, rectY + rectHeight * 0.75);\n  g2.draw(line);\n  line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n  lowVal, rectY + rectHeight * 0.75);\n  g2.draw(line);\n  \n  CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n  column);\n  if (generator != null && isItemLabelVisible(row, column)) {\n  drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n  (value < 0.0));\n  }  \n\n  \n  EntityCollection entities = state.getEntityCollection();\n  if (entities != null) {\n  addItemEntity(entities, dataset, row, column, bar);\n  }\n\n  }",
          "fixed_method": "  protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {\n  \n  RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n  \n  \n  double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n  dataArea, xAxisLocation);\n\n  int seriesCount = getRowCount();\n  int categoryCount = getColumnCount();\n  if (seriesCount > 1) {\n  double seriesGap = dataArea.getHeight() * getItemMargin()\n  / (categoryCount * (seriesCount - 1));\n  rectY = rectY + row * (state.getBarWidth() + seriesGap);\n  }\n  else {\n  rectY = rectY + row * state.getBarWidth();\n  }\n\n  \n  Number meanValue = dataset.getMeanValue(row, column);\n  if (meanValue == null) {\n  return;\n  }\n\n  double value = meanValue.doubleValue();\n  double base = 0.0;\n  double lclip = getLowerClip();\n  double uclip = getUpperClip();\n\n  if (uclip <= 0.0) {  \n  if (value >= uclip) {\n  return; \n  }\n  base = uclip;\n  if (value <= lclip) {\n  value = lclip;\n  }\n  }\n  else if (lclip <= 0.0) { \n  if (value >= uclip) {\n  value = uclip;\n  }\n  else {\n  if (value <= lclip) {\n  value = lclip;\n  }\n  }\n  }\n  else { \n  if (value <= lclip) {\n  return; \n  }\n  base = getLowerClip();\n  if (value >= uclip) {\n  value = uclip;\n  }\n  }\n\n  RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n  double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n  double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n  yAxisLocation);\n  double rectX = Math.min(transY2, transY1);\n\n  double rectHeight = state.getBarWidth();\n  double rectWidth = Math.abs(transY2 - transY1);\n\n  Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n  rectHeight);\n  Paint seriesPaint = getItemPaint(row, column);\n  g2.setPaint(seriesPaint);\n  g2.fill(bar);\n  if (isDrawBarOutline() && state.getBarWidth() > 3) {\n  g2.setStroke(getItemStroke(row, column));\n  g2.setPaint(getItemOutlinePaint(row, column));\n  g2.draw(bar);\n  }\n\n  \n  Number n = dataset.getStdDevValue(row, column);\n  if (n != null) {\n  double valueDelta = n.doubleValue();\n  double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n  + valueDelta, dataArea, yAxisLocation);\n  double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n  - valueDelta, dataArea, yAxisLocation);\n\n  if (this.errorIndicatorStroke != null) {\n  g2.setStroke(this.errorIndicatorStroke);\n  }\n  else {\n  g2.setStroke(getItemOutlineStroke(row, column));\n  }\n  if (this.errorIndicatorPaint != null) {\n  g2.setPaint(this.errorIndicatorPaint);  \n  }\n  else {\n  g2.setPaint(getItemOutlinePaint(row, column));  \n  }\n  \n  Line2D line = null;\n  line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, \n  highVal, rectY + rectHeight / 2.0d);\n  g2.draw(line);\n  line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, \n  highVal, rectY + rectHeight * 0.75);\n  g2.draw(line);\n  line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n  lowVal, rectY + rectHeight * 0.75);\n  g2.draw(line);\n  }\n  \n  CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n  column);\n  if (generator != null && isItemLabelVisible(row, column)) {\n  drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n  (value < 0.0));\n  }  \n\n  \n  EntityCollection entities = state.getEntityCollection();\n  if (entities != null) {\n  addItemEntity(entities, dataset, row, column, bar);\n  }\n\n  }",
          "diff": [
            "@@ -256,6 +256,9 @@",
            " \n",
            "         // BAR X\n",
            "         Number meanValue = dataset.getMeanValue(row, column);\n",
            "+        if (meanValue == null) {\n",
            "+            return;\n",
            "+        }\n",
            " \n",
            "         double value = meanValue.doubleValue();\n",
            "         double base = 0.0;\n",
            "@@ -312,7 +315,9 @@",
            "         }\n",
            " \n",
            "         // standard deviation lines\n",
            "-            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n",
            "+        Number n = dataset.getStdDevValue(row, column);\n",
            "+        if (n != null) {\n",
            "+            double valueDelta = n.doubleValue();\n",
            "             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n",
            "                     + valueDelta, dataArea, yAxisLocation);\n",
            "             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n",
            "@@ -341,6 +346,7 @@",
            "             line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n",
            "                                      lowVal, rectY + rectHeight * 0.75);\n",
            "             g2.draw(line);\n",
            "+        }\n",
            "         \n",
            "         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n",
            "                 column);\n"
          ],
          "changed_lines": 8
        },
        {
          "buggy_method": "  protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {\n  \n  RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n  \n  \n  double rectX = domainAxis.getCategoryStart(\n  column, getColumnCount(), dataArea, xAxisLocation\n  );\n\n  int seriesCount = getRowCount();\n  int categoryCount = getColumnCount();\n  if (seriesCount > 1) {\n  double seriesGap = dataArea.getWidth() * getItemMargin()\n  / (categoryCount * (seriesCount - 1));\n  rectX = rectX + row * (state.getBarWidth() + seriesGap);\n  }\n  else {\n  rectX = rectX + row * state.getBarWidth();\n  }\n\n  \n  Number meanValue = dataset.getMeanValue(row, column);\n\n  double value = meanValue.doubleValue();\n  double base = 0.0;\n  double lclip = getLowerClip();\n  double uclip = getUpperClip();\n\n  if (uclip <= 0.0) {  \n  if (value >= uclip) {\n  return; \n  }\n  base = uclip;\n  if (value <= lclip) {\n  value = lclip;\n  }\n  }\n  else if (lclip <= 0.0) { \n  if (value >= uclip) {\n  value = uclip;\n  }\n  else {\n  if (value <= lclip) {\n  value = lclip;\n  }\n  }\n  }\n  else { \n  if (value <= lclip) {\n  return; \n  }\n  base = getLowerClip();\n  if (value >= uclip) {\n  value = uclip;\n  }\n  }\n\n  RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n  double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n  double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n  yAxisLocation);\n  double rectY = Math.min(transY2, transY1);\n\n  double rectWidth = state.getBarWidth();\n  double rectHeight = Math.abs(transY2 - transY1);\n\n  Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n  rectHeight);\n  Paint seriesPaint = getItemPaint(row, column);\n  g2.setPaint(seriesPaint);\n  g2.fill(bar);\n  if (isDrawBarOutline() && state.getBarWidth() > 3) {\n  g2.setStroke(getItemStroke(row, column));\n  g2.setPaint(getItemOutlinePaint(row, column));\n  g2.draw(bar);\n  }\n\n  \n  double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n  double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n  + valueDelta, dataArea, yAxisLocation);\n  double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n  - valueDelta, dataArea, yAxisLocation);\n\n  if (this.errorIndicatorStroke != null) {\n  g2.setStroke(this.errorIndicatorStroke);\n  }\n  else {\n  g2.setStroke(getItemOutlineStroke(row, column));\n  }\n  if (this.errorIndicatorPaint != null) {\n  g2.setPaint(this.errorIndicatorPaint);  \n  }\n  else {\n  g2.setPaint(getItemOutlinePaint(row, column));  \n  }\n  Line2D line = null;\n  line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal,\n  rectX + rectWidth / 2.0d, highVal);\n  g2.draw(line);\n  line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal,\n  rectX + rectWidth / 2.0d + 5.0d, highVal);\n  g2.draw(line);\n  line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n  rectX + rectWidth / 2.0d + 5.0d, lowVal);\n  g2.draw(line);\n  \n  CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n  column);\n  if (generator != null && isItemLabelVisible(row, column)) {\n  drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n  (value < 0.0));\n  }  \n\n  \n  EntityCollection entities = state.getEntityCollection();\n  if (entities != null) {\n  addItemEntity(entities, dataset, row, column, bar);\n  }\n  }",
          "fixed_method": "  protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {\n  \n  RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n  \n  \n  double rectX = domainAxis.getCategoryStart(\n  column, getColumnCount(), dataArea, xAxisLocation\n  );\n\n  int seriesCount = getRowCount();\n  int categoryCount = getColumnCount();\n  if (seriesCount > 1) {\n  double seriesGap = dataArea.getWidth() * getItemMargin()\n  / (categoryCount * (seriesCount - 1));\n  rectX = rectX + row * (state.getBarWidth() + seriesGap);\n  }\n  else {\n  rectX = rectX + row * state.getBarWidth();\n  }\n\n  \n  Number meanValue = dataset.getMeanValue(row, column);\n  if (meanValue == null) {\n  return;\n  }\n\n  double value = meanValue.doubleValue();\n  double base = 0.0;\n  double lclip = getLowerClip();\n  double uclip = getUpperClip();\n\n  if (uclip <= 0.0) {  \n  if (value >= uclip) {\n  return; \n  }\n  base = uclip;\n  if (value <= lclip) {\n  value = lclip;\n  }\n  }\n  else if (lclip <= 0.0) { \n  if (value >= uclip) {\n  value = uclip;\n  }\n  else {\n  if (value <= lclip) {\n  value = lclip;\n  }\n  }\n  }\n  else { \n  if (value <= lclip) {\n  return; \n  }\n  base = getLowerClip();\n  if (value >= uclip) {\n  value = uclip;\n  }\n  }\n\n  RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n  double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n  double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n  yAxisLocation);\n  double rectY = Math.min(transY2, transY1);\n\n  double rectWidth = state.getBarWidth();\n  double rectHeight = Math.abs(transY2 - transY1);\n\n  Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n  rectHeight);\n  Paint seriesPaint = getItemPaint(row, column);\n  g2.setPaint(seriesPaint);\n  g2.fill(bar);\n  if (isDrawBarOutline() && state.getBarWidth() > 3) {\n  g2.setStroke(getItemStroke(row, column));\n  g2.setPaint(getItemOutlinePaint(row, column));\n  g2.draw(bar);\n  }\n\n  \n  Number n = dataset.getStdDevValue(row, column);\n  if (n != null) {\n  double valueDelta = n.doubleValue();\n  double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n  + valueDelta, dataArea, yAxisLocation);\n  double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n  - valueDelta, dataArea, yAxisLocation);\n\n  if (this.errorIndicatorStroke != null) {\n  g2.setStroke(this.errorIndicatorStroke);\n  }\n  else {\n  g2.setStroke(getItemOutlineStroke(row, column));\n  }\n  if (this.errorIndicatorPaint != null) {\n  g2.setPaint(this.errorIndicatorPaint);  \n  }\n  else {\n  g2.setPaint(getItemOutlinePaint(row, column));  \n  }\n  Line2D line = null;\n  line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal,\n  rectX + rectWidth / 2.0d, highVal);\n  g2.draw(line);\n  line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal,\n  rectX + rectWidth / 2.0d + 5.0d, highVal);\n  g2.draw(line);\n  line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n  rectX + rectWidth / 2.0d + 5.0d, lowVal);\n  g2.draw(line);\n  }\n  \n  CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n  column);\n  if (generator != null && isItemLabelVisible(row, column)) {\n  drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n  (value < 0.0));\n  }  \n\n  \n  EntityCollection entities = state.getEntityCollection();\n  if (entities != null) {\n  addItemEntity(entities, dataset, row, column, bar);\n  }\n  }",
          "diff": [
            "@@ -400,6 +406,9 @@",
            " \n",
            "         // BAR Y\n",
            "         Number meanValue = dataset.getMeanValue(row, column);\n",
            "+        if (meanValue == null) {\n",
            "+            return;\n",
            "+        }\n",
            " \n",
            "         double value = meanValue.doubleValue();\n",
            "         double base = 0.0;\n",
            "@@ -456,7 +465,9 @@",
            "         }\n",
            " \n",
            "         // standard deviation lines\n",
            "-            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n",
            "+        Number n = dataset.getStdDevValue(row, column);\n",
            "+        if (n != null) {\n",
            "+            double valueDelta = n.doubleValue();\n",
            "             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n",
            "                     + valueDelta, dataArea, yAxisLocation);\n",
            "             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n",
            "@@ -484,6 +495,7 @@",
            "             line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n",
            "                                      rectX + rectWidth / 2.0d + 5.0d, lowVal);\n",
            "             g2.draw(line);\n",
            "+        }\n",
            "         \n",
            "         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n",
            "                 column);\n"
          ],
          "changed_lines": 8
        }
      ]
    }
  ]
}
