{
  "bug_id": "85",
  "failed_tests": {
    "com.fasterxml.jackson.databind.ser.DateSerializationTest": [
      {
        "methodName": "testFormatWithoutPattern",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<{\"date\":\"1970-01-01[X01:00:]00\"}> but was:<{\"date\":\"1970-01-01[T01:00:00.000+01]00\"}>",
        "fail_line": "        assertEquals(aposToQuotes(\"{'date':'1970-01-01X01:00:00'}\"), json);",
        "test_source": "  public void testFormatWithoutPattern() throws Exception {\n  ObjectMapper mapper = new ObjectMapper();\n  mapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd'X'HH:mm:ss\"));\n  String json = mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));\n  assertEquals(aposToQuotes(\"{'date':'1970-01-01X01:00:00'}\"), json);\n  }",
        "stack": [
          "DateSerializationTest.testFormatWithoutPattern line 316"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.ser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.*;\nimport com.fasterxml.jackson.databind.ser.ContextualSerializer;\nimport com.fasterxml.jackson.databind.util.StdDateFormat;\n\n@SuppressWarnings(\"serial\")\npublic abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat) {\n        super(type);\n        _useTimestamp = useTimestamp;\n        _customFormat = customFormat;\n    }\n\n    public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        \n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        \n        \n                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                                || format.hasLocale() || format.hasTimeZone()) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        \n\n\n        \n\n        \n        \n        \n\n            \n        return this;\n    }\n\n    \n\n    @Deprecated\n    @Override\n    public boolean isEmpty(T value) {\n        \n        return (value == null) || (_timestamp(value) == 0L);\n    }\n\n    @Override\n    public boolean isEmpty(SerializerProvider serializers, T value) {\n        \n        return (value == null) || (_timestamp(value) == 0L);\n    }\n    \n    protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint) {\n        \n        return createSchemaNode(_asTimestamp(serializers) ? \"number\" : \"string\", true);\n    }\n\n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        _acceptJsonFormatVisitor(visitor, typeHint, _asTimestamp(visitor.getProvider()));\n    }\n\n    \n\n    @Override\n    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers) {\n        if (_useTimestamp != null) {\n            return _useTimestamp.booleanValue();\n        }\n        if (_customFormat == null) {\n            if (serializers != null) {\n                return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n            }\n            \n            throw new IllegalArgumentException(\"Null SerializerProvider passed for \"+handledType().getName());\n        }\n        return false;\n    }\n\n    protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException {\n        if (asNumber) {\n            visitIntFormat(visitor, typeHint,\n                    JsonParser.NumberType.LONG, JsonValueFormat.UTC_MILLISEC);\n        } else {\n            visitStringFormat(visitor, typeHint, JsonValueFormat.DATE_TIME);\n        }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.ser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.*;\nimport com.fasterxml.jackson.databind.ser.ContextualSerializer;\nimport com.fasterxml.jackson.databind.util.StdDateFormat;\n\n@SuppressWarnings(\"serial\")\npublic abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat) {\n        super(type);\n        _useTimestamp = useTimestamp;\n        _customFormat = customFormat;\n    }\n\n    public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        \n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        \n        \n        if (format.hasPattern()) {\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                    : serializers.getTimeZone();\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        \n        final boolean hasLocale = format.hasLocale();\n        final boolean hasTZ = format.hasTimeZone();\n        final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n        if (!hasLocale && !hasTZ && !asString) {\n            return this;\n        }\n\n        DateFormat df0 = serializers.getConfig().getDateFormat();\n        \n        if (df0 instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df0;\n            if (format.hasLocale()) {\n                std = std.withLocale(format.getLocale());\n            }\n            if (format.hasTimeZone()) {\n                std = std.withTimeZone(format.getTimeZone());\n            }\n            return withFormat(Boolean.FALSE, std);\n        }\n\n        \n        \n        \n        if (!(df0 instanceof SimpleDateFormat)) {\n\n            serializers.reportMappingProblem(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\",\ndf0.getClass().getName());\n        }\n        SimpleDateFormat df = (SimpleDateFormat) df0;\n        if (hasLocale) {\n            \n            df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n        } else {\n            df = (SimpleDateFormat) df.clone();\n        }\n        TimeZone newTz = format.getTimeZone();\n        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n        if (changeTZ) {\n            df.setTimeZone(newTz);\n        }\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    \n\n    @Deprecated\n    @Override\n    public boolean isEmpty(T value) {\n        \n        return (value == null) || (_timestamp(value) == 0L);\n    }\n\n    @Override\n    public boolean isEmpty(SerializerProvider serializers, T value) {\n        \n        return (value == null) || (_timestamp(value) == 0L);\n    }\n    \n    protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint) {\n        \n        return createSchemaNode(_asTimestamp(serializers) ? \"number\" : \"string\", true);\n    }\n\n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        _acceptJsonFormatVisitor(visitor, typeHint, _asTimestamp(visitor.getProvider()));\n    }\n\n    \n\n    @Override\n    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers) {\n        if (_useTimestamp != null) {\n            return _useTimestamp.booleanValue();\n        }\n        if (_customFormat == null) {\n            if (serializers != null) {\n                return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n            }\n            \n            throw new IllegalArgumentException(\"Null SerializerProvider passed for \"+handledType().getName());\n        }\n        return false;\n    }\n\n    protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException {\n        if (asNumber) {\n            visitIntFormat(visitor, typeHint,\n                    JsonParser.NumberType.LONG, JsonValueFormat.UTC_MILLISEC);\n        } else {\n            visitStringFormat(visitor, typeHint, JsonValueFormat.DATE_TIME);\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat)",
        "public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException",
        "public boolean isEmpty(T value)",
        "public boolean isEmpty(SerializerProvider serializers, T value)",
        "protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint)",
        "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
        "public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers)",
        "protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException"
      ],
      "fixed_signatures": [
        "public abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat)",
        "public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException",
        "public boolean isEmpty(T value)",
        "public boolean isEmpty(SerializerProvider serializers, T value)",
        "protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint)",
        "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
        "public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers)",
        "protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException"
      ],
      "methods": [
        {
          "buggy_method": "  public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n  if (property == null) {\n  return this;\n  }\n  JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n  if (format == null) {\n  return this;\n  }\n  \n  JsonFormat.Shape shape = format.getShape();\n  if (shape.isNumeric()) {\n  return withFormat(Boolean.TRUE, null);\n  }\n\n  \n  \n  if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n  || format.hasLocale() || format.hasTimeZone()) {\n  TimeZone tz = format.getTimeZone();\n  final String pattern = format.hasPattern()\n  ? format.getPattern()\n  : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n  final Locale loc = format.hasLocale()\n  ? format.getLocale()\n  : serializers.getLocale();\n  SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n  if (tz == null) {\n  tz = serializers.getTimeZone();\n  }\n  df.setTimeZone(tz);\n  return withFormat(Boolean.FALSE, df);\n  }\n\n  \n\n\n  \n\n  \n  \n  \n\n  \n  return this;\n  }",
          "fixed_method": "  public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n  if (property == null) {\n  return this;\n  }\n  JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n  if (format == null) {\n  return this;\n  }\n  \n  JsonFormat.Shape shape = format.getShape();\n  if (shape.isNumeric()) {\n  return withFormat(Boolean.TRUE, null);\n  }\n\n  \n  \n  if (format.hasPattern()) {\n  final Locale loc = format.hasLocale()\n  ? format.getLocale()\n  : serializers.getLocale();\n  SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n  TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n  : serializers.getTimeZone();\n  df.setTimeZone(tz);\n  return withFormat(Boolean.FALSE, df);\n  }\n\n  \n  final boolean hasLocale = format.hasLocale();\n  final boolean hasTZ = format.hasTimeZone();\n  final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n  if (!hasLocale && !hasTZ && !asString) {\n  return this;\n  }\n\n  DateFormat df0 = serializers.getConfig().getDateFormat();\n  \n  if (df0 instanceof StdDateFormat) {\n  StdDateFormat std = (StdDateFormat) df0;\n  if (format.hasLocale()) {\n  std = std.withLocale(format.getLocale());\n  }\n  if (format.hasTimeZone()) {\n  std = std.withTimeZone(format.getTimeZone());\n  }\n  return withFormat(Boolean.FALSE, std);\n  }\n\n  \n  \n  \n  if (!(df0 instanceof SimpleDateFormat)) {\n\n  serializers.reportMappingProblem(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\",\ndf0.getClass().getName());\n  }\n  SimpleDateFormat df = (SimpleDateFormat) df0;\n  if (hasLocale) {\n  \n  df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n  } else {\n  df = (SimpleDateFormat) df.clone();\n  }\n  TimeZone newTz = format.getTimeZone();\n  boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n  if (changeTZ) {\n  df.setTimeZone(newTz);\n  }\n  return withFormat(Boolean.FALSE, df);\n  }",
          "diff": [
            "@@ -64,34 +64,61 @@",
            " \n",
            "         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n",
            "         // First: custom pattern will override things\n",
            "-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n",
            "-                                || format.hasLocale() || format.hasTimeZone()) {\n",
            "-                    TimeZone tz = format.getTimeZone();\n",
            "-                    final String pattern = format.hasPattern()\n",
            "-                                    ? format.getPattern()\n",
            "-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n",
            "+        if (format.hasPattern()) {\n",
            "             final Locale loc = format.hasLocale()\n",
            "                             ? format.getLocale()\n",
            "                             : serializers.getLocale();\n",
            "-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n",
            "-                    if (tz == null) {\n",
            "-                        tz = serializers.getTimeZone();\n",
            "-                    }\n",
            "+            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n",
            "+            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n",
            "+                    : serializers.getTimeZone();\n",
            "             df.setTimeZone(tz);\n",
            "             return withFormat(Boolean.FALSE, df);\n",
            "         }\n",
            " \n",
            "         // Otherwise, need one of these changes:\n",
            "+        final boolean hasLocale = format.hasLocale();\n",
            "+        final boolean hasTZ = format.hasTimeZone();\n",
            "+        final boolean asString = (shape == JsonFormat.Shape.STRING);\n",
            " \n",
            "+        if (!hasLocale && !hasTZ && !asString) {\n",
            "+            return this;\n",
            "+        }\n",
            " \n",
            "+        DateFormat df0 = serializers.getConfig().getDateFormat();\n",
            "         // Jackson's own `StdDateFormat` is quite easy to deal with...\n",
            "+        if (df0 instanceof StdDateFormat) {\n",
            "+            StdDateFormat std = (StdDateFormat) df0;\n",
            "+            if (format.hasLocale()) {\n",
            "+                std = std.withLocale(format.getLocale());\n",
            "+            }\n",
            "+            if (format.hasTimeZone()) {\n",
            "+                std = std.withTimeZone(format.getTimeZone());\n",
            "+            }\n",
            "+            return withFormat(Boolean.FALSE, std);\n",
            "+        }\n",
            " \n",
            "         // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n",
            "         //    mechanism for changing `DateFormat` instances (or even clone()ing)\n",
            "         //    So: require it be `SimpleDateFormat`; can't config other types\n",
            "+        if (!(df0 instanceof SimpleDateFormat)) {\n",
            " //            serializers.reportBadDefinition(handledType(), String.format(\n",
            "+            serializers.reportMappingProblem(\n",
            "+\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\",\n",
            "+df0.getClass().getName());\n",
            "+        }\n",
            "+        SimpleDateFormat df = (SimpleDateFormat) df0;\n",
            "+        if (hasLocale) {\n",
            "             // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n",
            "-        return this;\n",
            "+            df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n",
            "+        } else {\n",
            "+            df = (SimpleDateFormat) df.clone();\n",
            "+        }\n",
            "+        TimeZone newTz = format.getTimeZone();\n",
            "+        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n",
            "+        if (changeTZ) {\n",
            "+            df.setTimeZone(newTz);\n",
            "+        }\n",
            "+        return withFormat(Boolean.FALSE, df);\n",
            "     }\n",
            " \n",
            "     /*\n"
          ],
          "changed_lines": 49
        }
      ]
    }
  ]
}
