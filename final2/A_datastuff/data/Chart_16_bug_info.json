{
  "bug_id": "16",
  "failed_tests": {
    "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests": [
      {
        "methodName": "testGetCategoryIndex",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "    \tassertEquals(-1, empty.getCategoryIndex(\"ABC\"));",
        "test_source": "  public void testGetCategoryIndex() {\n  \t// check an empty dataset\n  \tDefaultIntervalCategoryDataset empty \n  \t  = new DefaultIntervalCategoryDataset(new double[0][0], \n  \t  \t\tnew double[0][0]);\n  \tassertEquals(-1, empty.getCategoryIndex(\"ABC\"));\n  }",
        "stack": [
          "DefaultIntervalCategoryDataset.getCategoryIndex line 574, DefaultIntervalCategoryDatasetTests.testGetCategoryIndex line 415"
        ]
      },
      {
        "methodName": "testSetCategoryKeys",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "    \tassertTrue(pass);",
        "test_source": "  public void testSetCategoryKeys() {\n  \t// check an empty dataset\n  \tDefaultIntervalCategoryDataset empty \n  \t  = new DefaultIntervalCategoryDataset(new double[0][0], \n  \t  \t\tnew double[0][0]);\n  \tboolean pass = true;\n  \ttry {\n  \t\tempty.setCategoryKeys(new String[0]);\n  \t}\n  \tcatch (RuntimeException e) {\n  \t\tpass = false;\n  \t}\n  \tassertTrue(pass);\n  }",
        "stack": [
          "DefaultIntervalCategoryDatasetTests.testSetCategoryKeys line 444"
        ]
      },
      {
        "methodName": "testGetSeriesIndex",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "    \tassertEquals(-1, empty.getSeriesIndex(\"ABC\"));",
        "test_source": "  public void testGetSeriesIndex() {\n  \t// check an empty dataset\n  \tDefaultIntervalCategoryDataset empty \n  \t  = new DefaultIntervalCategoryDataset(new double[0][0], \n  \t  \t\tnew double[0][0]);\n  \tassertEquals(-1, empty.getSeriesIndex(\"ABC\"));\n  }",
        "stack": [
          "DefaultIntervalCategoryDataset.getSeriesIndex line 242, DefaultIntervalCategoryDatasetTests.testGetSeriesIndex line 375"
        ]
      },
      {
        "methodName": "testGetRowCount",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "        assertEquals(0, empty.getColumnCount());",
        "test_source": "  public void testGetRowCount() {\n  \t// check an empty dataset\n  \tDefaultIntervalCategoryDataset empty \n  \t  = new DefaultIntervalCategoryDataset(new double[0][0], \n  \t  \t\tnew double[0][0]);\n  assertEquals(0, empty.getColumnCount());\n  }",
        "stack": [
          "DefaultIntervalCategoryDataset.getColumnCount line 690, DefaultIntervalCategoryDatasetTests.testGetRowCount line 490"
        ]
      },
      {
        "methodName": "testGetRowIndex",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "    \tassertEquals(-1, empty.getRowIndex(\"ABC\"));",
        "test_source": "  public void testGetRowIndex() {\n  \t// check an empty dataset\n  \tDefaultIntervalCategoryDataset empty \n  \t  = new DefaultIntervalCategoryDataset(new double[0][0], \n  \t  \t\tnew double[0][0]);\n  \tassertEquals(-1, empty.getRowIndex(\"ABC\"));\n  }",
        "stack": [
          "DefaultIntervalCategoryDataset.getSeriesIndex line 242, DefaultIntervalCategoryDataset.getRowIndex line 641, DefaultIntervalCategoryDatasetTests.testGetRowIndex line 386"
        ]
      },
      {
        "methodName": "testGetColumnCount",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "        assertEquals(0, empty.getColumnCount());",
        "test_source": "  public void testGetColumnCount() {\n  \t// check an empty dataset\n  \tDefaultIntervalCategoryDataset empty \n  \t  = new DefaultIntervalCategoryDataset(new double[0][0], \n  \t  \t\tnew double[0][0]);\n  assertEquals(0, empty.getColumnCount());\n  }",
        "stack": [
          "DefaultIntervalCategoryDataset.getColumnCount line 690, DefaultIntervalCategoryDatasetTests.testGetColumnCount line 479"
        ]
      },
      {
        "methodName": "testGetColumnIndex",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "    \tassertEquals(-1, empty.getColumnIndex(\"ABC\"));",
        "test_source": "  public void testGetColumnIndex() {\n  \t// check an empty dataset\n  \tDefaultIntervalCategoryDataset empty \n  \t  = new DefaultIntervalCategoryDataset(new double[0][0], \n  \t  \t\tnew double[0][0]);\n  \tassertEquals(-1, empty.getColumnIndex(\"ABC\"));\n  }",
        "stack": [
          "DefaultIntervalCategoryDataset.getCategoryIndex line 574, DefaultIntervalCategoryDataset.getColumnIndex line 628, DefaultIntervalCategoryDatasetTests.testGetColumnIndex line 426"
        ]
      },
      {
        "methodName": "testCloning2",
        "error": "java.lang.NullPointerException",
        "message": "",
        "fail_line": "            d2 = (DefaultIntervalCategoryDataset) d1.clone();",
        "test_source": "  public void testCloning2() {\n  \tDefaultIntervalCategoryDataset d1 \n  = new DefaultIntervalCategoryDataset(new double[0][0], \n  \t\t  new double[0][0]);\n  DefaultIntervalCategoryDataset d2 = null;\n  try {\n  d2 = (DefaultIntervalCategoryDataset) d1.clone();\n  }\n  catch (CloneNotSupportedException e) {\n  e.printStackTrace();\n  }\n  assertTrue(d1 != d2);\n  assertTrue(d1.getClass() == d2.getClass());\n  assertTrue(d1.equals(d2));\t\n  }",
        "stack": [
          "DefaultIntervalCategoryDataset.clone line 748, DefaultIntervalCategoryDatasetTests.testCloning2 line 265"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jfree/data/category/DefaultIntervalCategoryDataset.java",
      "buggy_full_code": "\n\npackage org.jfree.data.category;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport org.jfree.data.DataUtilities;\nimport org.jfree.data.UnknownKeyException;\nimport org.jfree.data.general.AbstractSeriesDataset;\n\n\npublic class DefaultIntervalCategoryDataset extends AbstractSeriesDataset implements IntervalCategoryDataset { private Comparable[] seriesKeys; private Comparable[] categoryKeys; private Number[][] startData; private Number[][] endData; public DefaultIntervalCategoryDataset(double[][] starts, double[][] ends) {\n        this(DataUtilities.createNumberArray2D(starts),\n                DataUtilities.createNumberArray2D(ends));\n    }\n\n    \n    public DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends) {\n        this(null, null, starts, ends);\n    }\n\n    \n    public DefaultIntervalCategoryDataset(String[] seriesNames, Number[][] starts, Number[][] ends) {\n\n        this(seriesNames, null, starts, ends);\n\n    }\n\n    \n    public DefaultIntervalCategoryDataset(Comparable[] seriesKeys, Comparable[] categoryKeys, Number[][] starts, Number[][] ends) {\n\n        this.startData = starts;\n        this.endData = ends;\n\n        if (starts != null && ends != null) {\n\n            String baseName = \"org.jfree.data.resources.DataPackageResources\";\n            ResourceBundle resources = ResourceBundle.getBundle(baseName);\n\n            int seriesCount = starts.length;\n            if (seriesCount != ends.length) {\n                String errMsg = \"DefaultIntervalCategoryDataset: the number \"\n                    + \"of series in the start value dataset does \"\n                    + \"not match the number of series in the end \"\n                    + \"value dataset.\";\n                throw new IllegalArgumentException(errMsg);\n            }\n            if (seriesCount > 0) {\n\n                \n                if (seriesKeys != null) {\n\n                    if (seriesKeys.length != seriesCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of series keys does not \"\n                                + \"match the number of series in the data.\");\n                    }\n\n                    this.seriesKeys = seriesKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"series.default-prefix\") + \" \";\n                    this.seriesKeys = generateKeys(seriesCount, prefix);\n                }\n\n                \n                int categoryCount = starts[0].length;\n                if (categoryCount != ends[0].length) {\n                    String errMsg = \"DefaultIntervalCategoryDataset: the \"\n                                + \"number of categories in the start value \"\n                                + \"dataset does not match the number of \"\n                                + \"categories in the end value dataset.\";\n                    throw new IllegalArgumentException(errMsg);\n                }\n                if (categoryKeys != null) {\n                    if (categoryKeys.length != categoryCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of category keys does not match \"\n                                + \"the number of categories in the data.\");\n                    }\n                    this.categoryKeys = categoryKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"categories.default-prefix\") + \" \";\n                    this.categoryKeys = generateKeys(categoryCount, prefix);\n                }\n\n            }\n            else {\n                this.seriesKeys = null;\n                this.categoryKeys = null;\n            }\n        }\n\n    }\n\n    \n    public int getSeriesCount() {\n        int result = 0;\n        if (this.startData != null) {\n            result = this.startData.length;\n        }\n        return result;\n    }\n\n    \n    public int getSeriesIndex(Comparable seriesKey) {\n        int result = -1;\n        for (int i = 0; i < this.seriesKeys.length; i++) {\n            if (seriesKey.equals(this.seriesKeys[i])) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n\n    \n    public Comparable getSeriesKey(int series) {\n        if ((series >= getSeriesCount()) || (series < 0)) {\n            throw new IllegalArgumentException(\"No such series : \" + series);\n        }\n        return this.seriesKeys[series];\n    }\n\n    \n    public void setSeriesKeys(Comparable[] seriesKeys) {\n        if (seriesKeys == null) {\n            throw new IllegalArgumentException(\"Null 'seriesKeys' argument.\");\n        }\n        if (seriesKeys.length != getSeriesCount()) {\n            throw new IllegalArgumentException(\n                    \"The number of series keys does not match the data.\");\n        }\n        this.seriesKeys = seriesKeys;\n        fireDatasetChanged();\n    }\n\n    \n    public int getCategoryCount() {\n        int result = 0;\n        if (this.startData != null) {\n            if (getSeriesCount() > 0) {\n                result = this.startData[0].length;\n            }\n        }\n        return result;\n    }\n    \n    \n    public List getColumnKeys() {\n        \n        \n        if (this.categoryKeys == null) {\n            return new ArrayList();\n        }\n        else {\n            return Collections.unmodifiableList(Arrays.asList(\n                    this.categoryKeys));\n        }\n    }\n\n    \n    public void setCategoryKeys(Comparable[] categoryKeys) {\n        if (categoryKeys == null) {\n            throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n        }\n        if (categoryKeys.length != this.startData[0].length) {\n            throw new IllegalArgumentException(\n                    \"The number of categories does not match the data.\");\n        }\n        for (int i = 0; i < categoryKeys.length; i++) {\n            if (categoryKeys[i] == null) {\n                throw new IllegalArgumentException(\n                    \"DefaultIntervalCategoryDataset.setCategoryKeys(): \"\n                    + \"null category not permitted.\");\n            }\n        }\n        this.categoryKeys = categoryKeys;\n        fireDatasetChanged();\n    }\n\n    \n    public Number getValue(Comparable series, Comparable category) {\n        int seriesIndex = getSeriesIndex(series);\n        if (seriesIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'series' key.\");\n        }\n        int itemIndex = getColumnIndex(category);\n        if (itemIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'category' key.\");\n        }\n        return getValue(seriesIndex, itemIndex);\n    }\n\n    \n    public Number getValue(int series, int category) {\n        return getEndValue(series, category);\n    }\n\n    \n    public Number getStartValue(Comparable series, Comparable category) {\n        int seriesIndex = getSeriesIndex(series);\n        if (seriesIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'series' key.\");\n        }\n        int itemIndex = getColumnIndex(category);\n        if (itemIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'category' key.\");\n        }\n        return getStartValue(seriesIndex, itemIndex);\n    }\n\n    \n    public Number getStartValue(int series, int category) {\n\n        \n        if ((series < 0) || (series >= getSeriesCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"series index out of range.\");\n        }\n\n        if ((category < 0) || (category >= getCategoryCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"category index out of range.\");\n        }\n\n        \n        return this.startData[series][category];\n\n    }\n\n    \n    public Number getEndValue(Comparable series, Comparable category) {\n        int seriesIndex = getSeriesIndex(series);\n        if (seriesIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'series' key.\");\n        }\n        int itemIndex = getColumnIndex(category);\n        if (itemIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'category' key.\");\n        }\n        return getEndValue(seriesIndex, itemIndex);\n    }\n\n    \n    public Number getEndValue(int series, int category) {\n        if ((series < 0) || (series >= getSeriesCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"series index out of range.\");\n        }\n\n        if ((category < 0) || (category >= getCategoryCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"category index out of range.\");\n        }\n\n        return this.endData[series][category];\n    }\n\n    \n    public void setStartValue(int series, Comparable category, Number value) {\n\n        \n        if ((series < 0) || (series > getSeriesCount() - 1)) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.setValue: \"\n                + \"series outside valid range.\");\n        }\n\n        \n        int categoryIndex = getCategoryIndex(category);\n        if (categoryIndex < 0) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.setValue: \"\n                + \"unrecognised category.\");\n        }\n\n        \n        this.startData[series][categoryIndex] = value;\n        fireDatasetChanged();\n\n    }\n\n    \n    public void setEndValue(int series, Comparable category, Number value) {\n\n        \n        if ((series < 0) || (series > getSeriesCount() - 1)) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.setValue: \"\n                + \"series outside valid range.\");\n        }\n\n        \n        int categoryIndex = getCategoryIndex(category);\n        if (categoryIndex < 0) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.setValue: \"\n                + \"unrecognised category.\");\n        }\n\n        \n        this.endData[series][categoryIndex] = value;\n        fireDatasetChanged();\n\n    }\n\n    \n    public int getCategoryIndex(Comparable category) {\n        int result = -1;\n        for (int i = 0; i < this.categoryKeys.length; i++) {\n            if (category.equals(this.categoryKeys[i])) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n\n    \n    private Comparable[] generateKeys(int count, String prefix) {\n        Comparable[] result = new Comparable[count];\n        String name;\n        for (int i = 0; i < count; i++) {\n            name = prefix + (i + 1);\n            result[i] = name;\n        }\n        return result;\n    }\n\n    \n    public Comparable getColumnKey(int column) {\n        return this.categoryKeys[column];\n    }\n\n    \n    public int getColumnIndex(Comparable columnKey) {\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        return getCategoryIndex(columnKey);\n    }\n\n    \n    public int getRowIndex(Comparable rowKey) {\n        return getSeriesIndex(rowKey);\n    }\n\n    \n    public List getRowKeys() {\n        \n        \n        if (this.seriesKeys == null) {\n            return new java.util.ArrayList();\n        }\n        else {\n            return Collections.unmodifiableList(Arrays.asList(this.seriesKeys));\n        }\n    }\n\n    \n    public Comparable getRowKey(int row) {\n        if ((row >= getRowCount()) || (row < 0)) {\n            throw new IllegalArgumentException(\n                    \"The 'row' argument is out of bounds.\");\n        }\n        return this.seriesKeys[row];\n    }\n\n    \n    public int getColumnCount() {\n        return this.categoryKeys.length;\n    }\n\n    \n    public int getRowCount() {\n        return this.seriesKeys.length;\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof DefaultIntervalCategoryDataset)) {\n            return false;\n        }\n        DefaultIntervalCategoryDataset that \n                = (DefaultIntervalCategoryDataset) obj;\n        if (!Arrays.equals(this.seriesKeys, that.seriesKeys)) {\n            return false;\n        }\n        if (!Arrays.equals(this.categoryKeys, that.categoryKeys)) {\n            return false;\n        }\n        if (!equal(this.startData, that.startData)) {\n            return false;\n        }\n        if (!equal(this.endData, that.endData)) {\n            return false;\n        }\n        \n        return true;\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        DefaultIntervalCategoryDataset clone \n                = (DefaultIntervalCategoryDataset) super.clone();\n        clone.categoryKeys = (Comparable[]) this.categoryKeys.clone();\n        clone.seriesKeys = (Comparable[]) this.seriesKeys.clone();\n        clone.startData = clone(this.startData);\n        clone.endData = clone(this.endData);\n        return clone;\n    }\n    \n    \n    private static boolean equal(Number[][] array1, Number[][] array2) {\n        if (array1 == null) {\n            return (array2 == null);\n        }\n        if (array2 == null) {\n            return false;\n        }\n        if (array1.length != array2.length) {\n            return false;\n        }\n        for (int i = 0; i < array1.length; i++) {\n            if (!Arrays.equals(array1[i], array2[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    \n    private static Number[][] clone(Number[][] array) {\n        if (array == null) {\n            throw new IllegalArgumentException(\"Null 'array' argument.\");\n        }\n        Number[][] result = new Number[array.length][];\n        for (int i = 0; i < array.length; i++) {\n            Number[] child = array[i];\n            Number[] copychild = new Number[child.length];\n            System.arraycopy(child, 0, copychild, 0, child.length);\n            result[i] = copychild;\n        }\n        return result;\n    }\n\n}\n",
      "fixed_full_code": "\n\npackage org.jfree.data.category;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport org.jfree.data.DataUtilities;\nimport org.jfree.data.UnknownKeyException;\nimport org.jfree.data.general.AbstractSeriesDataset;\n\n\npublic class DefaultIntervalCategoryDataset extends AbstractSeriesDataset implements IntervalCategoryDataset { private Comparable[] seriesKeys; private Comparable[] categoryKeys; private Number[][] startData; private Number[][] endData; public DefaultIntervalCategoryDataset(double[][] starts, double[][] ends) {\n        this(DataUtilities.createNumberArray2D(starts),\n                DataUtilities.createNumberArray2D(ends));\n    }\n\n    \n    public DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends) {\n        this(null, null, starts, ends);\n    }\n\n    \n    public DefaultIntervalCategoryDataset(String[] seriesNames, Number[][] starts, Number[][] ends) {\n\n        this(seriesNames, null, starts, ends);\n\n    }\n\n    \n    public DefaultIntervalCategoryDataset(Comparable[] seriesKeys, Comparable[] categoryKeys, Number[][] starts, Number[][] ends) {\n\n        this.startData = starts;\n        this.endData = ends;\n\n        if (starts != null && ends != null) {\n\n            String baseName = \"org.jfree.data.resources.DataPackageResources\";\n            ResourceBundle resources = ResourceBundle.getBundle(baseName);\n\n            int seriesCount = starts.length;\n            if (seriesCount != ends.length) {\n                String errMsg = \"DefaultIntervalCategoryDataset: the number \"\n                    + \"of series in the start value dataset does \"\n                    + \"not match the number of series in the end \"\n                    + \"value dataset.\";\n                throw new IllegalArgumentException(errMsg);\n            }\n            if (seriesCount > 0) {\n\n                \n                if (seriesKeys != null) {\n\n                    if (seriesKeys.length != seriesCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of series keys does not \"\n                                + \"match the number of series in the data.\");\n                    }\n\n                    this.seriesKeys = seriesKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"series.default-prefix\") + \" \";\n                    this.seriesKeys = generateKeys(seriesCount, prefix);\n                }\n\n                \n                int categoryCount = starts[0].length;\n                if (categoryCount != ends[0].length) {\n                    String errMsg = \"DefaultIntervalCategoryDataset: the \"\n                                + \"number of categories in the start value \"\n                                + \"dataset does not match the number of \"\n                                + \"categories in the end value dataset.\";\n                    throw new IllegalArgumentException(errMsg);\n                }\n                if (categoryKeys != null) {\n                    if (categoryKeys.length != categoryCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of category keys does not match \"\n                                + \"the number of categories in the data.\");\n                    }\n                    this.categoryKeys = categoryKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"categories.default-prefix\") + \" \";\n                    this.categoryKeys = generateKeys(categoryCount, prefix);\n                }\n\n            }\n            else {\n                this.seriesKeys = new Comparable[0];\n                this.categoryKeys = new Comparable[0];\n            }\n        }\n\n    }\n\n    \n    public int getSeriesCount() {\n        int result = 0;\n        if (this.startData != null) {\n            result = this.startData.length;\n        }\n        return result;\n    }\n\n    \n    public int getSeriesIndex(Comparable seriesKey) {\n        int result = -1;\n        for (int i = 0; i < this.seriesKeys.length; i++) {\n            if (seriesKey.equals(this.seriesKeys[i])) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n\n    \n    public Comparable getSeriesKey(int series) {\n        if ((series >= getSeriesCount()) || (series < 0)) {\n            throw new IllegalArgumentException(\"No such series : \" + series);\n        }\n        return this.seriesKeys[series];\n    }\n\n    \n    public void setSeriesKeys(Comparable[] seriesKeys) {\n        if (seriesKeys == null) {\n            throw new IllegalArgumentException(\"Null 'seriesKeys' argument.\");\n        }\n        if (seriesKeys.length != getSeriesCount()) {\n            throw new IllegalArgumentException(\n                    \"The number of series keys does not match the data.\");\n        }\n        this.seriesKeys = seriesKeys;\n        fireDatasetChanged();\n    }\n\n    \n    public int getCategoryCount() {\n        int result = 0;\n        if (this.startData != null) {\n            if (getSeriesCount() > 0) {\n                result = this.startData[0].length;\n            }\n        }\n        return result;\n    }\n    \n    \n    public List getColumnKeys() {\n        \n        \n        if (this.categoryKeys == null) {\n            return new ArrayList();\n        }\n        else {\n            return Collections.unmodifiableList(Arrays.asList(\n                    this.categoryKeys));\n        }\n    }\n\n    \n    public void setCategoryKeys(Comparable[] categoryKeys) {\n        if (categoryKeys == null) {\n            throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n        }\n        if (categoryKeys.length != getCategoryCount()) {\n            throw new IllegalArgumentException(\n                    \"The number of categories does not match the data.\");\n        }\n        for (int i = 0; i < categoryKeys.length; i++) {\n            if (categoryKeys[i] == null) {\n                throw new IllegalArgumentException(\n                    \"DefaultIntervalCategoryDataset.setCategoryKeys(): \"\n                    + \"null category not permitted.\");\n            }\n        }\n        this.categoryKeys = categoryKeys;\n        fireDatasetChanged();\n    }\n\n    \n    public Number getValue(Comparable series, Comparable category) {\n        int seriesIndex = getSeriesIndex(series);\n        if (seriesIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'series' key.\");\n        }\n        int itemIndex = getColumnIndex(category);\n        if (itemIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'category' key.\");\n        }\n        return getValue(seriesIndex, itemIndex);\n    }\n\n    \n    public Number getValue(int series, int category) {\n        return getEndValue(series, category);\n    }\n\n    \n    public Number getStartValue(Comparable series, Comparable category) {\n        int seriesIndex = getSeriesIndex(series);\n        if (seriesIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'series' key.\");\n        }\n        int itemIndex = getColumnIndex(category);\n        if (itemIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'category' key.\");\n        }\n        return getStartValue(seriesIndex, itemIndex);\n    }\n\n    \n    public Number getStartValue(int series, int category) {\n\n        \n        if ((series < 0) || (series >= getSeriesCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"series index out of range.\");\n        }\n\n        if ((category < 0) || (category >= getCategoryCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"category index out of range.\");\n        }\n\n        \n        return this.startData[series][category];\n\n    }\n\n    \n    public Number getEndValue(Comparable series, Comparable category) {\n        int seriesIndex = getSeriesIndex(series);\n        if (seriesIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'series' key.\");\n        }\n        int itemIndex = getColumnIndex(category);\n        if (itemIndex < 0) {\n            throw new UnknownKeyException(\"Unknown 'category' key.\");\n        }\n        return getEndValue(seriesIndex, itemIndex);\n    }\n\n    \n    public Number getEndValue(int series, int category) {\n        if ((series < 0) || (series >= getSeriesCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"series index out of range.\");\n        }\n\n        if ((category < 0) || (category >= getCategoryCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"category index out of range.\");\n        }\n\n        return this.endData[series][category];\n    }\n\n    \n    public void setStartValue(int series, Comparable category, Number value) {\n\n        \n        if ((series < 0) || (series > getSeriesCount() - 1)) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.setValue: \"\n                + \"series outside valid range.\");\n        }\n\n        \n        int categoryIndex = getCategoryIndex(category);\n        if (categoryIndex < 0) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.setValue: \"\n                + \"unrecognised category.\");\n        }\n\n        \n        this.startData[series][categoryIndex] = value;\n        fireDatasetChanged();\n\n    }\n\n    \n    public void setEndValue(int series, Comparable category, Number value) {\n\n        \n        if ((series < 0) || (series > getSeriesCount() - 1)) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.setValue: \"\n                + \"series outside valid range.\");\n        }\n\n        \n        int categoryIndex = getCategoryIndex(category);\n        if (categoryIndex < 0) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.setValue: \"\n                + \"unrecognised category.\");\n        }\n\n        \n        this.endData[series][categoryIndex] = value;\n        fireDatasetChanged();\n\n    }\n\n    \n    public int getCategoryIndex(Comparable category) {\n        int result = -1;\n        for (int i = 0; i < this.categoryKeys.length; i++) {\n            if (category.equals(this.categoryKeys[i])) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n\n    \n    private Comparable[] generateKeys(int count, String prefix) {\n        Comparable[] result = new Comparable[count];\n        String name;\n        for (int i = 0; i < count; i++) {\n            name = prefix + (i + 1);\n            result[i] = name;\n        }\n        return result;\n    }\n\n    \n    public Comparable getColumnKey(int column) {\n        return this.categoryKeys[column];\n    }\n\n    \n    public int getColumnIndex(Comparable columnKey) {\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        return getCategoryIndex(columnKey);\n    }\n\n    \n    public int getRowIndex(Comparable rowKey) {\n        return getSeriesIndex(rowKey);\n    }\n\n    \n    public List getRowKeys() {\n        \n        \n        if (this.seriesKeys == null) {\n            return new java.util.ArrayList();\n        }\n        else {\n            return Collections.unmodifiableList(Arrays.asList(this.seriesKeys));\n        }\n    }\n\n    \n    public Comparable getRowKey(int row) {\n        if ((row >= getRowCount()) || (row < 0)) {\n            throw new IllegalArgumentException(\n                    \"The 'row' argument is out of bounds.\");\n        }\n        return this.seriesKeys[row];\n    }\n\n    \n    public int getColumnCount() {\n        return this.categoryKeys.length;\n    }\n\n    \n    public int getRowCount() {\n        return this.seriesKeys.length;\n    }\n    \n    \n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof DefaultIntervalCategoryDataset)) {\n            return false;\n        }\n        DefaultIntervalCategoryDataset that \n                = (DefaultIntervalCategoryDataset) obj;\n        if (!Arrays.equals(this.seriesKeys, that.seriesKeys)) {\n            return false;\n        }\n        if (!Arrays.equals(this.categoryKeys, that.categoryKeys)) {\n            return false;\n        }\n        if (!equal(this.startData, that.startData)) {\n            return false;\n        }\n        if (!equal(this.endData, that.endData)) {\n            return false;\n        }\n        \n        return true;\n    }\n\n    \n    public Object clone() throws CloneNotSupportedException {\n        DefaultIntervalCategoryDataset clone \n                = (DefaultIntervalCategoryDataset) super.clone();\n        clone.categoryKeys = (Comparable[]) this.categoryKeys.clone();\n        clone.seriesKeys = (Comparable[]) this.seriesKeys.clone();\n        clone.startData = clone(this.startData);\n        clone.endData = clone(this.endData);\n        return clone;\n    }\n    \n    \n    private static boolean equal(Number[][] array1, Number[][] array2) {\n        if (array1 == null) {\n            return (array2 == null);\n        }\n        if (array2 == null) {\n            return false;\n        }\n        if (array1.length != array2.length) {\n            return false;\n        }\n        for (int i = 0; i < array1.length; i++) {\n            if (!Arrays.equals(array1[i], array2[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    \n    private static Number[][] clone(Number[][] array) {\n        if (array == null) {\n            throw new IllegalArgumentException(\"Null 'array' argument.\");\n        }\n        Number[][] result = new Number[array.length][];\n        for (int i = 0; i < array.length; i++) {\n            Number[] child = array[i];\n            Number[] copychild = new Number[child.length];\n            System.arraycopy(child, 0, copychild, 0, child.length);\n            result[i] = copychild;\n        }\n        return result;\n    }\n\n}\n",
      "buggy_signatures": [
        "public class DefaultIntervalCategoryDataset extends AbstractSeriesDataset implements IntervalCategoryDataset { private Comparable[] seriesKeys; private Comparable[] categoryKeys; private Number[][] startData; private Number[][] endData; public DefaultIntervalCategoryDataset(double[][] starts, double[][] ends)",
        "public DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends)",
        "public DefaultIntervalCategoryDataset(String[] seriesNames, Number[][] starts, Number[][] ends)",
        "public DefaultIntervalCategoryDataset(Comparable[] seriesKeys, Comparable[] categoryKeys, Number[][] starts, Number[][] ends)",
        "public int getSeriesCount()",
        "public int getSeriesIndex(Comparable seriesKey)",
        "public Comparable getSeriesKey(int series)",
        "public void setSeriesKeys(Comparable[] seriesKeys)",
        "public int getCategoryCount()",
        "public List getColumnKeys()",
        "public void setCategoryKeys(Comparable[] categoryKeys)",
        "public Number getValue(Comparable series, Comparable category)",
        "public Number getValue(int series, int category)",
        "public Number getStartValue(Comparable series, Comparable category)",
        "public Number getStartValue(int series, int category)",
        "public Number getEndValue(Comparable series, Comparable category)",
        "public Number getEndValue(int series, int category)",
        "public void setStartValue(int series, Comparable category, Number value)",
        "public void setEndValue(int series, Comparable category, Number value)",
        "public int getCategoryIndex(Comparable category)",
        "private Comparable[] generateKeys(int count, String prefix)",
        "public Comparable getColumnKey(int column)",
        "public int getColumnIndex(Comparable columnKey)",
        "public int getRowIndex(Comparable rowKey)",
        "public List getRowKeys()",
        "public Comparable getRowKey(int row)",
        "public int getColumnCount()",
        "public int getRowCount()",
        "public boolean equals(Object obj)",
        "public Object clone() throws CloneNotSupportedException",
        "private static boolean equal(Number[][] array1, Number[][] array2)",
        "private static Number[][] clone(Number[][] array)"
      ],
      "fixed_signatures": [
        "public class DefaultIntervalCategoryDataset extends AbstractSeriesDataset implements IntervalCategoryDataset { private Comparable[] seriesKeys; private Comparable[] categoryKeys; private Number[][] startData; private Number[][] endData; public DefaultIntervalCategoryDataset(double[][] starts, double[][] ends)",
        "public DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends)",
        "public DefaultIntervalCategoryDataset(String[] seriesNames, Number[][] starts, Number[][] ends)",
        "public DefaultIntervalCategoryDataset(Comparable[] seriesKeys, Comparable[] categoryKeys, Number[][] starts, Number[][] ends)",
        "public int getSeriesCount()",
        "public int getSeriesIndex(Comparable seriesKey)",
        "public Comparable getSeriesKey(int series)",
        "public void setSeriesKeys(Comparable[] seriesKeys)",
        "public int getCategoryCount()",
        "public List getColumnKeys()",
        "public void setCategoryKeys(Comparable[] categoryKeys)",
        "public Number getValue(Comparable series, Comparable category)",
        "public Number getValue(int series, int category)",
        "public Number getStartValue(Comparable series, Comparable category)",
        "public Number getStartValue(int series, int category)",
        "public Number getEndValue(Comparable series, Comparable category)",
        "public Number getEndValue(int series, int category)",
        "public void setStartValue(int series, Comparable category, Number value)",
        "public void setEndValue(int series, Comparable category, Number value)",
        "public int getCategoryIndex(Comparable category)",
        "private Comparable[] generateKeys(int count, String prefix)",
        "public Comparable getColumnKey(int column)",
        "public int getColumnIndex(Comparable columnKey)",
        "public int getRowIndex(Comparable rowKey)",
        "public List getRowKeys()",
        "public Comparable getRowKey(int row)",
        "public int getColumnCount()",
        "public int getRowCount()",
        "public boolean equals(Object obj)",
        "public Object clone() throws CloneNotSupportedException",
        "private static boolean equal(Number[][] array1, Number[][] array2)",
        "private static Number[][] clone(Number[][] array)"
      ],
      "methods": [
        {
          "buggy_method": "  public DefaultIntervalCategoryDataset(Comparable[] seriesKeys, Comparable[] categoryKeys, Number[][] starts, Number[][] ends) {\n\n  this.startData = starts;\n  this.endData = ends;\n\n  if (starts != null && ends != null) {\n\n  String baseName = \"org.jfree.data.resources.DataPackageResources\";\n  ResourceBundle resources = ResourceBundle.getBundle(baseName);\n\n  int seriesCount = starts.length;\n  if (seriesCount != ends.length) {\n  String errMsg = \"DefaultIntervalCategoryDataset: the number \"\n  + \"of series in the start value dataset does \"\n  + \"not match the number of series in the end \"\n  + \"value dataset.\";\n  throw new IllegalArgumentException(errMsg);\n  }\n  if (seriesCount > 0) {\n\n  \n  if (seriesKeys != null) {\n\n  if (seriesKeys.length != seriesCount) {\n  throw new IllegalArgumentException(\n  \"The number of series keys does not \"\n  + \"match the number of series in the data.\");\n  }\n\n  this.seriesKeys = seriesKeys;\n  }\n  else {\n  String prefix = resources.getString(\n  \"series.default-prefix\") + \" \";\n  this.seriesKeys = generateKeys(seriesCount, prefix);\n  }\n\n  \n  int categoryCount = starts[0].length;\n  if (categoryCount != ends[0].length) {\n  String errMsg = \"DefaultIntervalCategoryDataset: the \"\n  + \"number of categories in the start value \"\n  + \"dataset does not match the number of \"\n  + \"categories in the end value dataset.\";\n  throw new IllegalArgumentException(errMsg);\n  }\n  if (categoryKeys != null) {\n  if (categoryKeys.length != categoryCount) {\n  throw new IllegalArgumentException(\n  \"The number of category keys does not match \"\n  + \"the number of categories in the data.\");\n  }\n  this.categoryKeys = categoryKeys;\n  }\n  else {\n  String prefix = resources.getString(\n  \"categories.default-prefix\") + \" \";\n  this.categoryKeys = generateKeys(categoryCount, prefix);\n  }\n\n  }\n  else {\n  this.seriesKeys = null;\n  this.categoryKeys = null;\n  }\n  }\n\n  }",
          "fixed_method": "  public DefaultIntervalCategoryDataset(Comparable[] seriesKeys, Comparable[] categoryKeys, Number[][] starts, Number[][] ends) {\n\n  this.startData = starts;\n  this.endData = ends;\n\n  if (starts != null && ends != null) {\n\n  String baseName = \"org.jfree.data.resources.DataPackageResources\";\n  ResourceBundle resources = ResourceBundle.getBundle(baseName);\n\n  int seriesCount = starts.length;\n  if (seriesCount != ends.length) {\n  String errMsg = \"DefaultIntervalCategoryDataset: the number \"\n  + \"of series in the start value dataset does \"\n  + \"not match the number of series in the end \"\n  + \"value dataset.\";\n  throw new IllegalArgumentException(errMsg);\n  }\n  if (seriesCount > 0) {\n\n  \n  if (seriesKeys != null) {\n\n  if (seriesKeys.length != seriesCount) {\n  throw new IllegalArgumentException(\n  \"The number of series keys does not \"\n  + \"match the number of series in the data.\");\n  }\n\n  this.seriesKeys = seriesKeys;\n  }\n  else {\n  String prefix = resources.getString(\n  \"series.default-prefix\") + \" \";\n  this.seriesKeys = generateKeys(seriesCount, prefix);\n  }\n\n  \n  int categoryCount = starts[0].length;\n  if (categoryCount != ends[0].length) {\n  String errMsg = \"DefaultIntervalCategoryDataset: the \"\n  + \"number of categories in the start value \"\n  + \"dataset does not match the number of \"\n  + \"categories in the end value dataset.\";\n  throw new IllegalArgumentException(errMsg);\n  }\n  if (categoryKeys != null) {\n  if (categoryKeys.length != categoryCount) {\n  throw new IllegalArgumentException(\n  \"The number of category keys does not match \"\n  + \"the number of categories in the data.\");\n  }\n  this.categoryKeys = categoryKeys;\n  }\n  else {\n  String prefix = resources.getString(\n  \"categories.default-prefix\") + \" \";\n  this.categoryKeys = generateKeys(categoryCount, prefix);\n  }\n\n  }\n  else {\n  this.seriesKeys = new Comparable[0];\n  this.categoryKeys = new Comparable[0];\n  }\n  }\n\n  }",
          "diff": [
            "@@ -204,8 +204,8 @@",
            " \n",
            "             }\n",
            "             else {\n",
            "-                this.seriesKeys = null;\n",
            "-                this.categoryKeys = null;\n",
            "+                this.seriesKeys = new Comparable[0];\n",
            "+                this.categoryKeys = new Comparable[0];\n",
            "             }\n",
            "         }\n",
            " \n"
          ],
          "changed_lines": 4
        },
        {
          "buggy_method": "  public void setCategoryKeys(Comparable[] categoryKeys) {\n  if (categoryKeys == null) {\n  throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n  }\n  if (categoryKeys.length != this.startData[0].length) {\n  throw new IllegalArgumentException(\n  \"The number of categories does not match the data.\");\n  }\n  for (int i = 0; i < categoryKeys.length; i++) {\n  if (categoryKeys[i] == null) {\n  throw new IllegalArgumentException(\n  \"DefaultIntervalCategoryDataset.setCategoryKeys(): \"\n  + \"null category not permitted.\");\n  }\n  }\n  this.categoryKeys = categoryKeys;\n  fireDatasetChanged();\n  }",
          "fixed_method": "  public void setCategoryKeys(Comparable[] categoryKeys) {\n  if (categoryKeys == null) {\n  throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n  }\n  if (categoryKeys.length != getCategoryCount()) {\n  throw new IllegalArgumentException(\n  \"The number of categories does not match the data.\");\n  }\n  for (int i = 0; i < categoryKeys.length; i++) {\n  if (categoryKeys[i] == null) {\n  throw new IllegalArgumentException(\n  \"DefaultIntervalCategoryDataset.setCategoryKeys(): \"\n  + \"null category not permitted.\");\n  }\n  }\n  this.categoryKeys = categoryKeys;\n  fireDatasetChanged();\n  }",
          "diff": [
            "@@ -335,7 +335,7 @@",
            "         if (categoryKeys == null) {\n",
            "             throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n",
            "         }\n",
            "-        if (categoryKeys.length != this.startData[0].length) {\n",
            "+        if (categoryKeys.length != getCategoryCount()) {\n",
            "             throw new IllegalArgumentException(\n",
            "                     \"The number of categories does not match the data.\");\n",
            "         }\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
