{
  "bug_id": "59",
  "failed_tests": {
    "org.jsoup.parser.HtmlParserTest": [
      {
        "methodName": "handlesControlCodeInAttributeName",
        "error": "java.lang.IllegalArgumentException",
        "message": "String must not be empty",
        "fail_line": "        Document doc = Jsoup.parse(\"<p><a \\06=foo>One</a><a/\\06=bar><a foo\\06=bar>Two</a></p>\");",
        "test_source": "",
        "stack": [
          "Validate.notEmpty line 92, Attribute.<init> line 35, Token$Tag.newAttribute line 110, Token$Tag.finaliseTag line 128, Tokeniser.emitTagPending line 206, TokeniserState$40.read line 815, Tokeniser.read line 50, TreeBuilder.runParser line 49, TreeBuilder.parse line 43, HtmlTreeBuilder.parse line 56, Parser.parse line 100, Jsoup.parse line 58, HtmlParserTest.handlesControlCodeInAttributeName line 946"
        ]
      }
    ],
    "org.jsoup.safety.CleanerTest": [
      {
        "methodName": "handlesControlCharactersAfterTagName",
        "error": "java.lang.IllegalArgumentException",
        "message": "String must not be empty",
        "fail_line": "        String clean = Jsoup.clean(html, Whitelist.basic());",
        "test_source": "",
        "stack": [
          "Validate.notEmpty line 92, Attribute.<init> line 35, BooleanAttribute.<init> line 12, Token$Tag.newAttribute line 114, Token$Tag.finaliseTag line 128, Tokeniser.emitTagPending line 206, TokeniserState$35.read line 614, Tokeniser.read line 50, TreeBuilder.runParser line 49, HtmlTreeBuilder.parseFragment line 103, Parser.parseFragment line 115, Parser.parseBodyFragment line 157, Jsoup.parseBodyFragment line 148, Jsoup.clean line 198, Jsoup.clean line 215, CleanerTest.handlesControlCharactersAfterTagName line 283"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jsoup/parser/Token.java",
      "buggy_full_code": "package org.jsoup.parser;\n\nimport org.jsoup.helper.Validate;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.BooleanAttribute;\n\n\nabstract class Token { TokenType type; private Token() {\n    }\n    \n    String tokenType() {\n        return this.getClass().getSimpleName();\n    }\n\n    \n    abstract Token reset(); static void reset(StringBuilder sb) {\n        if (sb != null) {\n            sb.delete(0, sb.length());\n        }\n    }\n\n    static final class Doctype extends Token { final StringBuilder name = new StringBuilder(); String pubSysKey = null; final StringBuilder publicIdentifier = new StringBuilder(); final StringBuilder systemIdentifier = new StringBuilder(); boolean forceQuirks = false; Doctype() {\n            type = TokenType.Doctype;\n        }\n\n        @Override\n        Token reset() {\n            reset(name);\n            pubSysKey = null;\n            reset(publicIdentifier);\n            reset(systemIdentifier);\n            forceQuirks = false;\n            return this;\n        }\n\n        String getName() {\n            return name.toString();\n        }\n\n        String getPubSysKey() {\n            return pubSysKey;\n        }\n\n        String getPublicIdentifier() {\n            return publicIdentifier.toString();\n        }\n\n        public String getSystemIdentifier() {\n            return systemIdentifier.toString();\n        }\n\n        public boolean isForceQuirks() {\n            return forceQuirks;\n        }\n    }\n\n    static abstract class Tag extends Token { protected String tagName; protected String normalName; private String pendingAttributeName; private StringBuilder pendingAttributeValue = new StringBuilder(); private String pendingAttributeValueS; private boolean hasEmptyAttributeValue = false; private boolean hasPendingAttributeValue = false; boolean selfClosing = false; Attributes attributes; @Override Tag reset() {\n            tagName = null;\n            normalName = null;\n            pendingAttributeName = null;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS = null;\n            hasEmptyAttributeValue = false;\n            hasPendingAttributeValue = false;\n            selfClosing = false;\n            attributes = null;\n            return this;\n        }\n\n        final void newAttribute() {\n            if (attributes == null)\n                attributes = new Attributes();\n\n            if (pendingAttributeName != null) {\n                \n                pendingAttributeName = pendingAttributeName.trim();\n                    Attribute attribute;\n                    if (hasPendingAttributeValue)\n                        attribute = new Attribute(pendingAttributeName,\n                            pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n                    else if (hasEmptyAttributeValue)\n                        attribute = new Attribute(pendingAttributeName, \"\");\n                    else\n                        attribute = new BooleanAttribute(pendingAttributeName);\n                    attributes.put(attribute);\n            }\n            pendingAttributeName = null;\n            hasEmptyAttributeValue = false;\n            hasPendingAttributeValue = false;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS = null;\n        }\n\n        final void finaliseTag() {\n            \n            if (pendingAttributeName != null) {\n                \n                newAttribute();\n            }\n        }\n\n        final String name() { \n            Validate.isFalse(tagName == null || tagName.length() == 0);\n            return tagName;\n        }\n\n        final String normalName() { \n            return normalName;\n        }\n\n        final Tag name(String name) {\n            tagName = name;\n            normalName = name.toLowerCase();\n            return this;\n        }\n\n        final boolean isSelfClosing() {\n            return selfClosing;\n        }\n\n        @SuppressWarnings({\"TypeMayBeWeakened\"})\n        final Attributes getAttributes() {\n            return attributes;\n        }\n\n        \n        final void appendTagName(String append) {\n            tagName = tagName == null ? append : tagName.concat(append);\n            normalName = tagName.toLowerCase();\n        }\n\n        final void appendTagName(char append) {\n            appendTagName(String.valueOf(append));\n        }\n\n        final void appendAttributeName(String append) {\n            pendingAttributeName = pendingAttributeName == null ? append : pendingAttributeName.concat(append);\n        }\n\n        final void appendAttributeName(char append) {\n            appendAttributeName(String.valueOf(append));\n        }\n\n        final void appendAttributeValue(String append) {\n            ensureAttributeValue();\n            if (pendingAttributeValue.length() == 0) {\n                pendingAttributeValueS = append;\n            } else {\n                pendingAttributeValue.append(append);\n            }\n        }\n\n        final void appendAttributeValue(char append) {\n            ensureAttributeValue();\n            pendingAttributeValue.append(append);\n        }\n\n        final void appendAttributeValue(char[] append) {\n            ensureAttributeValue();\n            pendingAttributeValue.append(append);\n        }\n\n        final void appendAttributeValue(int[] appendCodepoints) {\n            ensureAttributeValue();\n            for (int codepoint : appendCodepoints) {\n                pendingAttributeValue.appendCodePoint(codepoint);\n            }\n        }\n        \n        final void setEmptyAttributeValue() {\n            hasEmptyAttributeValue = true;\n        }\n\n        private void ensureAttributeValue() {\n            hasPendingAttributeValue = true;\n            \n            if (pendingAttributeValueS != null) {\n                pendingAttributeValue.append(pendingAttributeValueS);\n                pendingAttributeValueS = null;\n            }\n        }\n    }\n\n    final static class StartTag extends Tag { StartTag() {\n            super();\n            attributes = new Attributes();\n            type = TokenType.StartTag;\n        }\n\n        @Override\n        Tag reset() {\n            super.reset();\n            attributes = new Attributes();\n            \n            return this;\n        }\n\n        StartTag nameAttr(String name, Attributes attributes) {\n            this.tagName = name;\n            this.attributes = attributes;\n            normalName = tagName.toLowerCase();\n            return this;\n        }\n\n        @Override\n        public String toString() {\n            if (attributes != null && attributes.size() > 0)\n                return \"<\" + name() + \" \" + attributes.toString() + \">\";\n            else\n                return \"<\" + name() + \">\";\n        }\n    }\n\n    final static class EndTag extends Tag{ EndTag() {\n            super();\n            type = TokenType.EndTag;\n        }\n\n        @Override\n        public String toString() {\n            return \"</\" + name() + \">\";\n        }\n    }\n\n    final static class Comment extends Token { final StringBuilder data = new StringBuilder(); boolean bogus = false; @Override Token reset() {\n            reset(data);\n            bogus = false;\n            return this;\n        }\n\n        Comment() {\n            type = TokenType.Comment;\n        }\n\n        String getData() {\n            return data.toString();\n        }\n\n        @Override\n        public String toString() {\n            return \"<!--\" + getData() + \"-->\";\n        }\n    }\n\n    final static class Character extends Token { private String data; Character() {\n            super();\n            type = TokenType.Character;\n        }\n\n        @Override\n        Token reset() {\n            data = null;\n            return this;\n        }\n\n        Character data(String data) {\n            this.data = data;\n            return this;\n        }\n\n        String getData() {\n            return data;\n        }\n\n        @Override\n        public String toString() {\n            return getData();\n        }\n    }\n\n    final static class EOF extends Token { EOF() {\n            type = Token.TokenType.EOF;\n        }\n\n        @Override\n        Token reset() {\n            return this;\n        }\n    }\n\n    final boolean isDoctype() {\n        return type == TokenType.Doctype;\n    }\n\n    final Doctype asDoctype() {\n        return (Doctype) this;\n    }\n\n    final boolean isStartTag() {\n        return type == TokenType.StartTag;\n    }\n\n    final StartTag asStartTag() {\n        return (StartTag) this;\n    }\n\n    final boolean isEndTag() {\n        return type == TokenType.EndTag;\n    }\n\n    final EndTag asEndTag() {\n        return (EndTag) this;\n    }\n\n    final boolean isComment() {\n        return type == TokenType.Comment;\n    }\n\n    final Comment asComment() {\n        return (Comment) this;\n    }\n\n    final boolean isCharacter() {\n        return type == TokenType.Character;\n    }\n\n    final Character asCharacter() {\n        return (Character) this;\n    }\n\n    final boolean isEOF() {\n        return type == TokenType.EOF;\n    }\n\n    enum TokenType {\n        Doctype,\n        StartTag,\n        EndTag,\n        Comment,\n        Character,\n        EOF\n    }\n}\n",
      "fixed_full_code": "package org.jsoup.parser;\n\nimport org.jsoup.helper.Validate;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.BooleanAttribute;\n\n\nabstract class Token { TokenType type; private Token() {\n    }\n    \n    String tokenType() {\n        return this.getClass().getSimpleName();\n    }\n\n    \n    abstract Token reset(); static void reset(StringBuilder sb) {\n        if (sb != null) {\n            sb.delete(0, sb.length());\n        }\n    }\n\n    static final class Doctype extends Token { final StringBuilder name = new StringBuilder(); String pubSysKey = null; final StringBuilder publicIdentifier = new StringBuilder(); final StringBuilder systemIdentifier = new StringBuilder(); boolean forceQuirks = false; Doctype() {\n            type = TokenType.Doctype;\n        }\n\n        @Override\n        Token reset() {\n            reset(name);\n            pubSysKey = null;\n            reset(publicIdentifier);\n            reset(systemIdentifier);\n            forceQuirks = false;\n            return this;\n        }\n\n        String getName() {\n            return name.toString();\n        }\n\n        String getPubSysKey() {\n            return pubSysKey;\n        }\n\n        String getPublicIdentifier() {\n            return publicIdentifier.toString();\n        }\n\n        public String getSystemIdentifier() {\n            return systemIdentifier.toString();\n        }\n\n        public boolean isForceQuirks() {\n            return forceQuirks;\n        }\n    }\n\n    static abstract class Tag extends Token { protected String tagName; protected String normalName; private String pendingAttributeName; private StringBuilder pendingAttributeValue = new StringBuilder(); private String pendingAttributeValueS; private boolean hasEmptyAttributeValue = false; private boolean hasPendingAttributeValue = false; boolean selfClosing = false; Attributes attributes; @Override Tag reset() {\n            tagName = null;\n            normalName = null;\n            pendingAttributeName = null;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS = null;\n            hasEmptyAttributeValue = false;\n            hasPendingAttributeValue = false;\n            selfClosing = false;\n            attributes = null;\n            return this;\n        }\n\n        final void newAttribute() {\n            if (attributes == null)\n                attributes = new Attributes();\n\n            if (pendingAttributeName != null) {\n                \n                pendingAttributeName = pendingAttributeName.trim();\n                if (pendingAttributeName.length() > 0) {\n                    Attribute attribute;\n                    if (hasPendingAttributeValue)\n                        attribute = new Attribute(pendingAttributeName,\n                            pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n                    else if (hasEmptyAttributeValue)\n                        attribute = new Attribute(pendingAttributeName, \"\");\n                    else\n                        attribute = new BooleanAttribute(pendingAttributeName);\n                    attributes.put(attribute);\n                }\n            }\n            pendingAttributeName = null;\n            hasEmptyAttributeValue = false;\n            hasPendingAttributeValue = false;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS = null;\n        }\n\n        final void finaliseTag() {\n            \n            if (pendingAttributeName != null) {\n                \n                newAttribute();\n            }\n        }\n\n        final String name() { \n            Validate.isFalse(tagName == null || tagName.length() == 0);\n            return tagName;\n        }\n\n        final String normalName() { \n            return normalName;\n        }\n\n        final Tag name(String name) {\n            tagName = name;\n            normalName = name.toLowerCase();\n            return this;\n        }\n\n        final boolean isSelfClosing() {\n            return selfClosing;\n        }\n\n        @SuppressWarnings({\"TypeMayBeWeakened\"})\n        final Attributes getAttributes() {\n            return attributes;\n        }\n\n        \n        final void appendTagName(String append) {\n            tagName = tagName == null ? append : tagName.concat(append);\n            normalName = tagName.toLowerCase();\n        }\n\n        final void appendTagName(char append) {\n            appendTagName(String.valueOf(append));\n        }\n\n        final void appendAttributeName(String append) {\n            pendingAttributeName = pendingAttributeName == null ? append : pendingAttributeName.concat(append);\n        }\n\n        final void appendAttributeName(char append) {\n            appendAttributeName(String.valueOf(append));\n        }\n\n        final void appendAttributeValue(String append) {\n            ensureAttributeValue();\n            if (pendingAttributeValue.length() == 0) {\n                pendingAttributeValueS = append;\n            } else {\n                pendingAttributeValue.append(append);\n            }\n        }\n\n        final void appendAttributeValue(char append) {\n            ensureAttributeValue();\n            pendingAttributeValue.append(append);\n        }\n\n        final void appendAttributeValue(char[] append) {\n            ensureAttributeValue();\n            pendingAttributeValue.append(append);\n        }\n\n        final void appendAttributeValue(int[] appendCodepoints) {\n            ensureAttributeValue();\n            for (int codepoint : appendCodepoints) {\n                pendingAttributeValue.appendCodePoint(codepoint);\n            }\n        }\n        \n        final void setEmptyAttributeValue() {\n            hasEmptyAttributeValue = true;\n        }\n\n        private void ensureAttributeValue() {\n            hasPendingAttributeValue = true;\n            \n            if (pendingAttributeValueS != null) {\n                pendingAttributeValue.append(pendingAttributeValueS);\n                pendingAttributeValueS = null;\n            }\n        }\n    }\n\n    final static class StartTag extends Tag { StartTag() {\n            super();\n            attributes = new Attributes();\n            type = TokenType.StartTag;\n        }\n\n        @Override\n        Tag reset() {\n            super.reset();\n            attributes = new Attributes();\n            \n            return this;\n        }\n\n        StartTag nameAttr(String name, Attributes attributes) {\n            this.tagName = name;\n            this.attributes = attributes;\n            normalName = tagName.toLowerCase();\n            return this;\n        }\n\n        @Override\n        public String toString() {\n            if (attributes != null && attributes.size() > 0)\n                return \"<\" + name() + \" \" + attributes.toString() + \">\";\n            else\n                return \"<\" + name() + \">\";\n        }\n    }\n\n    final static class EndTag extends Tag{ EndTag() {\n            super();\n            type = TokenType.EndTag;\n        }\n\n        @Override\n        public String toString() {\n            return \"</\" + name() + \">\";\n        }\n    }\n\n    final static class Comment extends Token { final StringBuilder data = new StringBuilder(); boolean bogus = false; @Override Token reset() {\n            reset(data);\n            bogus = false;\n            return this;\n        }\n\n        Comment() {\n            type = TokenType.Comment;\n        }\n\n        String getData() {\n            return data.toString();\n        }\n\n        @Override\n        public String toString() {\n            return \"<!--\" + getData() + \"-->\";\n        }\n    }\n\n    final static class Character extends Token { private String data; Character() {\n            super();\n            type = TokenType.Character;\n        }\n\n        @Override\n        Token reset() {\n            data = null;\n            return this;\n        }\n\n        Character data(String data) {\n            this.data = data;\n            return this;\n        }\n\n        String getData() {\n            return data;\n        }\n\n        @Override\n        public String toString() {\n            return getData();\n        }\n    }\n\n    final static class EOF extends Token { EOF() {\n            type = Token.TokenType.EOF;\n        }\n\n        @Override\n        Token reset() {\n            return this;\n        }\n    }\n\n    final boolean isDoctype() {\n        return type == TokenType.Doctype;\n    }\n\n    final Doctype asDoctype() {\n        return (Doctype) this;\n    }\n\n    final boolean isStartTag() {\n        return type == TokenType.StartTag;\n    }\n\n    final StartTag asStartTag() {\n        return (StartTag) this;\n    }\n\n    final boolean isEndTag() {\n        return type == TokenType.EndTag;\n    }\n\n    final EndTag asEndTag() {\n        return (EndTag) this;\n    }\n\n    final boolean isComment() {\n        return type == TokenType.Comment;\n    }\n\n    final Comment asComment() {\n        return (Comment) this;\n    }\n\n    final boolean isCharacter() {\n        return type == TokenType.Character;\n    }\n\n    final Character asCharacter() {\n        return (Character) this;\n    }\n\n    final boolean isEOF() {\n        return type == TokenType.EOF;\n    }\n\n    enum TokenType {\n        Doctype,\n        StartTag,\n        EndTag,\n        Comment,\n        Character,\n        EOF\n    }\n}\n",
      "buggy_signatures": [
        "abstract class Token { TokenType type; private Token()",
        "abstract Token reset(); static void reset(StringBuilder sb)",
        "public String getSystemIdentifier()",
        "public boolean isForceQuirks()",
        "private void ensureAttributeValue()",
        "static class StartTag extends Tag { StartTag()",
        "public String toString()",
        "static class EndTag extends Tag{ EndTag()",
        "public String toString()",
        "public String toString()",
        "static class Character extends Token { private String data; Character()",
        "public String toString()",
        "static class EOF extends Token { EOF()"
      ],
      "fixed_signatures": [
        "abstract class Token { TokenType type; private Token()",
        "abstract Token reset(); static void reset(StringBuilder sb)",
        "public String getSystemIdentifier()",
        "public boolean isForceQuirks()",
        "private void ensureAttributeValue()",
        "static class StartTag extends Tag { StartTag()",
        "public String toString()",
        "static class EndTag extends Tag{ EndTag()",
        "public String toString()",
        "public String toString()",
        "static class Character extends Token { private String data; Character()",
        "public String toString()",
        "static class EOF extends Token { EOF()"
      ],
      "methods": [
        {
          "buggy_method": "  private StringBuilder pendingAttributeValue = new StringBuilder(); private String pendingAttributeValueS; private boolean hasEmptyAttributeValue = false; private boolean hasPendingAttributeValue = false; boolean selfClosing = false; Attributes attributes; @Override Tag reset() {\n  tagName = null;\n  normalName = null;\n  pendingAttributeName = null;\n  reset(pendingAttributeValue);\n  pendingAttributeValueS = null;\n  hasEmptyAttributeValue = false;\n  hasPendingAttributeValue = false;\n  selfClosing = false;\n  attributes = null;\n  return this;\n  }",
          "fixed_method": "  private StringBuilder pendingAttributeValue = new StringBuilder(); private String pendingAttributeValueS; private boolean hasEmptyAttributeValue = false; private boolean hasPendingAttributeValue = false; boolean selfClosing = false; Attributes attributes; @Override Tag reset() {\n  tagName = null;\n  normalName = null;\n  pendingAttributeName = null;\n  reset(pendingAttributeValue);\n  pendingAttributeValueS = null;\n  hasEmptyAttributeValue = false;\n  hasPendingAttributeValue = false;\n  selfClosing = false;\n  attributes = null;\n  return this;\n  }",
          "diff": [
            "@@ -104,6 +104,7 @@",
            "             if (pendingAttributeName != null) {\n",
            "                 // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n",
            "                 pendingAttributeName = pendingAttributeName.trim();\n",
            "+                if (pendingAttributeName.length() > 0) {\n",
            "                     Attribute attribute;\n",
            "                     if (hasPendingAttributeValue)\n",
            "                         attribute = new Attribute(pendingAttributeName,\n",
            "@@ -113,6 +114,7 @@",
            "                     else\n",
            "                         attribute = new BooleanAttribute(pendingAttributeName);\n",
            "                     attributes.put(attribute);\n",
            "+                }\n",
            "             }\n",
            "             pendingAttributeName = null;\n",
            "             hasEmptyAttributeValue = false;\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
