{
  "bug_id": "20",
  "failed_tests": {
    "com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd": [
      {
        "methodName": "testNamingWithObjectNode",
        "error": "com.fasterxml.jackson.databind.JsonMappingException",
        "message": "Conflicting setter definitions for property \"all\": com.fasterxml.jackson.databind.node.ObjectNode#setAll(1 params) vs com.fasterxml.jackson.databind.node.ObjectNode#setAll(1 params)",
        "fail_line": "            m.readValue(",
        "test_source": "  public void testNamingWithObjectNode() throws Exception {\n  ObjectMapper m = new ObjectMapper();\n  m.setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE);\n  ClassWithObjectNodeField result =\n  m.readValue(\n  \"{ \\\"id\\\": \\\"1\\\", \\\"json\\\": { \\\"foo\\\": \\\"bar\\\", \\\"baz\\\": \\\"bing\\\" } }\",\n  ClassWithObjectNodeField.class);\n  assertNotNull(result);\n  assertEquals(\"1\", result.id);\n  assertNotNull(result.json);\n  assertEquals(2, result.json.size());\n  assertEquals(\"bing\", result.json.path(\"baz\").asText());\n  }",
        "stack": [
          "DeserializerCache._createAndCache2 line 270, DeserializerCache._createAndCacheValueDeserializer line 245, DeserializerCache.findValueDeserializer line 143, DeserializationContext.findContextualValueDeserializer line 406, StdDeserializer.findDeserializer line 882, BeanDeserializerBase.resolve line 436, DeserializerCache._createAndCache2 line 297, DeserializerCache._createAndCacheValueDeserializer line 245, DeserializerCache.findValueDeserializer line 143, DeserializationContext.findRootValueDeserializer line 439, ObjectMapper._findRootDeserializer line 3668, ObjectMapper._readMapAndClose line 3560, ObjectMapper.readValue line 2580, TestNamingStrategyStd.testNamingWithObjectNode line 310, POJOPropertyBuilder.getSetter line 294, POJOPropertiesCollector._renameUsing line 808, POJOPropertiesCollector.collect line 256, BasicClassIntrospector.collectProperties line 197, BasicClassIntrospector.forDeserialization line 110, BasicClassIntrospector.forDeserialization line 15, DeserializationConfig.introspect line 703, DeserializerCache._createDeserializer line 330, DeserializerCache._createAndCache2 line 265"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/node/ObjectNode.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.node;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\n\npublic class ObjectNode extends ContainerNode<ObjectNode> { protected final Map<String, JsonNode> _children; public ObjectNode(JsonNodeFactory nc) {\n        super(nc);\n        _children = new LinkedHashMap<String, JsonNode>();\n    }\n\n    \n    public ObjectNode(JsonNodeFactory nc, Map<String, JsonNode> kids) {\n        super(nc);\n        _children = kids;\n    }\n    \n    @Override\n    protected JsonNode _at(JsonPointer ptr) {\n        return get(ptr.getMatchingProperty());\n    }\n\n    \n    \n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public ObjectNode deepCopy() {\n        ObjectNode ret = new ObjectNode(_nodeFactory);\n\n        for (Map.Entry<String, JsonNode> entry: _children.entrySet())\n            ret._children.put(entry.getKey(), entry.getValue().deepCopy());\n\n        return ret;\n    }\n\n    \n\n    @Override\n    public JsonNodeType getNodeType() {\n        return JsonNodeType.OBJECT;\n    }\n\n    @Override public JsonToken asToken() { return JsonToken.START_OBJECT; }\n\n    @Override\n    public int size() {\n        return _children.size();\n    }\n\n    @Override\n    public Iterator<JsonNode> elements() {\n        return _children.values().iterator();\n    }\n\n    @Override\n    public JsonNode get(int index) { return null; }\n\n    @Override\n    public JsonNode get(String fieldName) {\n        return _children.get(fieldName);\n    }\n\n    @Override\n    public Iterator<String> fieldNames() {\n        return _children.keySet().iterator();\n    }\n\n    @Override\n    public JsonNode path(int index) {\n        return MissingNode.getInstance();\n    }\n\n    @Override\n    public JsonNode path(String fieldName) {\n        JsonNode n = _children.get(fieldName);\n        if (n != null) {\n            return n;\n        }\n        return MissingNode.getInstance();\n    }\n\n    \n    @Override\n    public Iterator<Map.Entry<String, JsonNode>> fields() {\n        return _children.entrySet().iterator();\n    }\n\n    @Override\n    public ObjectNode with(String propertyName) {\n        JsonNode n = _children.get(propertyName);\n        if (n != null) {\n            if (n instanceof ObjectNode) {\n                return (ObjectNode) n;\n            }\n            throw new UnsupportedOperationException(\"Property '\" + propertyName\n                + \"' has value that is not of type ObjectNode (but \" + n\n                .getClass().getName() + \")\");\n        }\n        ObjectNode result = objectNode();\n        _children.put(propertyName, result);\n        return result;\n    }\n\n    @Override\n    public ArrayNode withArray(String propertyName) {\n        JsonNode n = _children.get(propertyName);\n        if (n != null) {\n            if (n instanceof ArrayNode) {\n                return (ArrayNode) n;\n            }\n            throw new UnsupportedOperationException(\"Property '\" + propertyName\n                + \"' has value that is not of type ArrayNode (but \" + n\n                .getClass().getName() + \")\");\n        }\n        ArrayNode result = arrayNode();\n        _children.put(propertyName, result);\n        return result;\n    }\n    \n    \n    \n    @Override\n    public JsonNode findValue(String fieldName) {\n        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n            if (fieldName.equals(entry.getKey())) {\n                return entry.getValue();\n            }\n            JsonNode value = entry.getValue().findValue(fieldName);\n            if (value != null) {\n                return value;\n            }\n        }\n        return null;\n    }\n    \n    @Override\n    public List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar) {\n        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n            if (fieldName.equals(entry.getKey())) {\n                if (foundSoFar == null) {\n                    foundSoFar = new ArrayList<JsonNode>();\n                }\n                foundSoFar.add(entry.getValue());\n            } else { \n                foundSoFar = entry.getValue().findValues(fieldName, foundSoFar);\n            }\n        }\n        return foundSoFar;\n    }\n\n    @Override\n    public List<String> findValuesAsText(String fieldName, List<String> foundSoFar) {\n        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n            if (fieldName.equals(entry.getKey())) {\n                if (foundSoFar == null) {\n                    foundSoFar = new ArrayList<String>();\n                }\n                foundSoFar.add(entry.getValue().asText());\n            } else { \n                foundSoFar = entry.getValue().findValuesAsText(fieldName,\n                    foundSoFar);\n            }\n        }\n        return foundSoFar;\n    }\n    \n    @Override\n    public ObjectNode findParent(String fieldName) {\n        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n            if (fieldName.equals(entry.getKey())) {\n                return this;\n            }\n            JsonNode value = entry.getValue().findParent(fieldName);\n            if (value != null) {\n                return (ObjectNode) value;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar) {\n        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n            if (fieldName.equals(entry.getKey())) {\n                if (foundSoFar == null) {\n                    foundSoFar = new ArrayList<JsonNode>();\n                }\n                foundSoFar.add(this);\n            } else { \n                foundSoFar = entry.getValue()\n                    .findParents(fieldName, foundSoFar);\n            }\n        }\n        return foundSoFar;\n    }\n    \n    \n\n    \n    @Override\n    public void serialize(JsonGenerator jg, SerializerProvider provider) throws IOException, JsonProcessingException {\n        jg.writeStartObject();\n        for (Map.Entry<String, JsonNode> en : _children.entrySet()) {\n            jg.writeFieldName(en.getKey());\n                \n            ((BaseJsonNode) en.getValue()).serialize(jg, provider);\n        }\n        jg.writeEndObject();\n    }\n\n    @Override\n    public void serializeWithType(JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonProcessingException {\n        typeSer.writeTypePrefixForObject(this, jg);\n        for (Map.Entry<String, JsonNode> en : _children.entrySet()) {\n            jg.writeFieldName(en.getKey());\n            ((BaseJsonNode) en.getValue()).serialize(jg, provider);\n        }\n        typeSer.writeTypeSuffixForObject(this, jg);\n    }\n\n    \n\n    \n    public JsonNode set(String fieldName, JsonNode value) {\n        if (value == null) {\n            value = nullNode();\n        }\n        _children.put(fieldName, value);\n        return this;\n    }\n\n    \n    public JsonNode setAll(Map<String,? extends JsonNode> properties) {\n        for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) {\n            JsonNode n = en.getValue();\n            if (n == null) {\n                n = nullNode();\n            }\n            _children.put(en.getKey(), n);\n        }\n        return this;\n    }\n\n    \n    public JsonNode setAll(ObjectNode other) {\n        _children.putAll(other._children);\n        return this;\n    }\n    \n    \n    public JsonNode replace(String fieldName, JsonNode value) {\n        if (value == null) { \n            value = nullNode();\n        }\n        return _children.put(fieldName, value);\n    }\n\n    \n    public JsonNode without(String fieldName) {\n        _children.remove(fieldName);\n        return this;\n    }\n\n    \n    public ObjectNode without(Collection<String> fieldNames) {\n        _children.keySet().removeAll(fieldNames);\n        return this;\n    }\n    \n    \n    \n    \n    @Deprecated\n    public JsonNode put(String fieldName, JsonNode value) {\n        if (value == null) { \n            value = nullNode();\n        }\n        return _children.put(fieldName, value);\n    }\n    \n    \n    public JsonNode remove(String fieldName) {\n        return _children.remove(fieldName);\n    }\n\n    \n    public ObjectNode remove(Collection<String> fieldNames) {\n        _children.keySet().removeAll(fieldNames);\n        return this;\n    }\n    \n    \n    @Override\n    public ObjectNode removeAll() {\n        _children.clear();\n        return this;\n    }\n\n    \n    @Deprecated\n    public JsonNode putAll(Map<String,? extends JsonNode> properties) {\n        return setAll(properties);\n    }\n\n    \n    @Deprecated\n    public JsonNode putAll(ObjectNode other) {\n        return setAll(other);\n    }\n\n    \n    public ObjectNode retain(Collection<String> fieldNames) {\n        _children.keySet().retainAll(fieldNames);\n        return this;\n    }\n\n    \n    public ObjectNode retain(String... fieldNames) {\n        return retain(Arrays.asList(fieldNames));\n    }\n    \n    \n\n    \n    public ArrayNode putArray(String fieldName) {\n        ArrayNode n  = arrayNode();\n        _put(fieldName, n);\n        return n;\n    }\n\n    \n    public ObjectNode putObject(String fieldName) {\n        ObjectNode n = objectNode();\n        _put(fieldName, n);\n        return n;\n    }\n\n    \n    public ObjectNode putPOJO(String fieldName, Object pojo) {\n        return _put(fieldName, pojoNode(pojo));\n    }\n\n    \n    public ObjectNode putNull(String fieldName) {\n        _children.put(fieldName, nullNode());\n        return this;\n    }\n\n    \n    public ObjectNode put(String fieldName, short v) {\n        return _put(fieldName, numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Short v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v.shortValue()));\n    }\n\n    \n    public ObjectNode put(String fieldName, int v) {\n        return _put(fieldName, numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Integer v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v.intValue()));\n    }\n    \n    \n    public ObjectNode put(String fieldName, long v) {\n        return _put(fieldName, numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Long v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v.longValue()));\n    }\n    \n    \n    public ObjectNode put(String fieldName, float v) {\n        return _put(fieldName, numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Float v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v.floatValue()));\n    }\n    \n    \n    public ObjectNode put(String fieldName, double v) {\n        return _put(fieldName, numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Double v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v.doubleValue()));\n    }\n    \n    \n    public ObjectNode put(String fieldName, BigDecimal v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, String v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : textNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, boolean v) {\n        return _put(fieldName, booleanNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Boolean v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : booleanNode(v.booleanValue()));\n    }\n    \n    \n    public ObjectNode put(String fieldName, byte[] v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : binaryNode(v));\n    }\n    \n    \n\n    @Override\n    public boolean equals(Object o) {\n        if (o == this) return true;\n        if (o == null) return false;\n        if (o instanceof ObjectNode) {\n            return _childrenEqual((ObjectNode) o);\n        }\n        return false;\n    }\n\n    \n    protected boolean _childrenEqual(ObjectNode other) {\n        return _children.equals(other._children);\n    }\n    \n    @Override\n    public int hashCode() {\n        return _children.hashCode();\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder(32 + (size() << 4));\n        sb.append(\"{\");\n        int count = 0;\n        for (Map.Entry<String, JsonNode> en : _children.entrySet()) {\n            if (count > 0) {\n                sb.append(\",\");\n            }\n            ++count;\n            TextNode.appendQuoted(sb, en.getKey());\n            sb.append(':');\n            sb.append(en.getValue().toString());\n        }\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    \n\n    protected ObjectNode _put(String fieldName, JsonNode value) {\n        _children.put(fieldName, value);\n        return this;\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.node;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\n\npublic class ObjectNode extends ContainerNode<ObjectNode> { protected final Map<String, JsonNode> _children; public ObjectNode(JsonNodeFactory nc) {\n        super(nc);\n        _children = new LinkedHashMap<String, JsonNode>();\n    }\n\n    \n    public ObjectNode(JsonNodeFactory nc, Map<String, JsonNode> kids) {\n        super(nc);\n        _children = kids;\n    }\n    \n    @Override\n    protected JsonNode _at(JsonPointer ptr) {\n        return get(ptr.getMatchingProperty());\n    }\n\n    \n    \n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public ObjectNode deepCopy() {\n        ObjectNode ret = new ObjectNode(_nodeFactory);\n\n        for (Map.Entry<String, JsonNode> entry: _children.entrySet())\n            ret._children.put(entry.getKey(), entry.getValue().deepCopy());\n\n        return ret;\n    }\n\n    \n\n    @Override\n    public JsonNodeType getNodeType() {\n        return JsonNodeType.OBJECT;\n    }\n\n    @Override public JsonToken asToken() { return JsonToken.START_OBJECT; }\n\n    @Override\n    public int size() {\n        return _children.size();\n    }\n\n    @Override\n    public Iterator<JsonNode> elements() {\n        return _children.values().iterator();\n    }\n\n    @Override\n    public JsonNode get(int index) { return null; }\n\n    @Override\n    public JsonNode get(String fieldName) {\n        return _children.get(fieldName);\n    }\n\n    @Override\n    public Iterator<String> fieldNames() {\n        return _children.keySet().iterator();\n    }\n\n    @Override\n    public JsonNode path(int index) {\n        return MissingNode.getInstance();\n    }\n\n    @Override\n    public JsonNode path(String fieldName) {\n        JsonNode n = _children.get(fieldName);\n        if (n != null) {\n            return n;\n        }\n        return MissingNode.getInstance();\n    }\n\n    \n    @Override\n    public Iterator<Map.Entry<String, JsonNode>> fields() {\n        return _children.entrySet().iterator();\n    }\n\n    @Override\n    public ObjectNode with(String propertyName) {\n        JsonNode n = _children.get(propertyName);\n        if (n != null) {\n            if (n instanceof ObjectNode) {\n                return (ObjectNode) n;\n            }\n            throw new UnsupportedOperationException(\"Property '\" + propertyName\n                + \"' has value that is not of type ObjectNode (but \" + n\n                .getClass().getName() + \")\");\n        }\n        ObjectNode result = objectNode();\n        _children.put(propertyName, result);\n        return result;\n    }\n\n    @Override\n    public ArrayNode withArray(String propertyName) {\n        JsonNode n = _children.get(propertyName);\n        if (n != null) {\n            if (n instanceof ArrayNode) {\n                return (ArrayNode) n;\n            }\n            throw new UnsupportedOperationException(\"Property '\" + propertyName\n                + \"' has value that is not of type ArrayNode (but \" + n\n                .getClass().getName() + \")\");\n        }\n        ArrayNode result = arrayNode();\n        _children.put(propertyName, result);\n        return result;\n    }\n    \n    \n    \n    @Override\n    public JsonNode findValue(String fieldName) {\n        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n            if (fieldName.equals(entry.getKey())) {\n                return entry.getValue();\n            }\n            JsonNode value = entry.getValue().findValue(fieldName);\n            if (value != null) {\n                return value;\n            }\n        }\n        return null;\n    }\n    \n    @Override\n    public List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar) {\n        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n            if (fieldName.equals(entry.getKey())) {\n                if (foundSoFar == null) {\n                    foundSoFar = new ArrayList<JsonNode>();\n                }\n                foundSoFar.add(entry.getValue());\n            } else { \n                foundSoFar = entry.getValue().findValues(fieldName, foundSoFar);\n            }\n        }\n        return foundSoFar;\n    }\n\n    @Override\n    public List<String> findValuesAsText(String fieldName, List<String> foundSoFar) {\n        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n            if (fieldName.equals(entry.getKey())) {\n                if (foundSoFar == null) {\n                    foundSoFar = new ArrayList<String>();\n                }\n                foundSoFar.add(entry.getValue().asText());\n            } else { \n                foundSoFar = entry.getValue().findValuesAsText(fieldName,\n                    foundSoFar);\n            }\n        }\n        return foundSoFar;\n    }\n    \n    @Override\n    public ObjectNode findParent(String fieldName) {\n        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n            if (fieldName.equals(entry.getKey())) {\n                return this;\n            }\n            JsonNode value = entry.getValue().findParent(fieldName);\n            if (value != null) {\n                return (ObjectNode) value;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar) {\n        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n            if (fieldName.equals(entry.getKey())) {\n                if (foundSoFar == null) {\n                    foundSoFar = new ArrayList<JsonNode>();\n                }\n                foundSoFar.add(this);\n            } else { \n                foundSoFar = entry.getValue()\n                    .findParents(fieldName, foundSoFar);\n            }\n        }\n        return foundSoFar;\n    }\n    \n    \n\n    \n    @Override\n    public void serialize(JsonGenerator jg, SerializerProvider provider) throws IOException, JsonProcessingException {\n        jg.writeStartObject();\n        for (Map.Entry<String, JsonNode> en : _children.entrySet()) {\n            jg.writeFieldName(en.getKey());\n                \n            ((BaseJsonNode) en.getValue()).serialize(jg, provider);\n        }\n        jg.writeEndObject();\n    }\n\n    @Override\n    public void serializeWithType(JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonProcessingException {\n        typeSer.writeTypePrefixForObject(this, jg);\n        for (Map.Entry<String, JsonNode> en : _children.entrySet()) {\n            jg.writeFieldName(en.getKey());\n            ((BaseJsonNode) en.getValue()).serialize(jg, provider);\n        }\n        typeSer.writeTypeSuffixForObject(this, jg);\n    }\n\n    \n\n    \n    public JsonNode set(String fieldName, JsonNode value) {\n        if (value == null) {\n            value = nullNode();\n        }\n        _children.put(fieldName, value);\n        return this;\n    }\n\n    \n    @JsonIgnore \n    public JsonNode setAll(Map<String,? extends JsonNode> properties) {\n        for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) {\n            JsonNode n = en.getValue();\n            if (n == null) {\n                n = nullNode();\n            }\n            _children.put(en.getKey(), n);\n        }\n        return this;\n    }\n\n    \n    public JsonNode setAll(ObjectNode other) {\n        _children.putAll(other._children);\n        return this;\n    }\n    \n    \n    public JsonNode replace(String fieldName, JsonNode value) {\n        if (value == null) { \n            value = nullNode();\n        }\n        return _children.put(fieldName, value);\n    }\n\n    \n    public JsonNode without(String fieldName) {\n        _children.remove(fieldName);\n        return this;\n    }\n\n    \n    public ObjectNode without(Collection<String> fieldNames) {\n        _children.keySet().removeAll(fieldNames);\n        return this;\n    }\n    \n    \n    \n    \n    @Deprecated\n    public JsonNode put(String fieldName, JsonNode value) {\n        if (value == null) { \n            value = nullNode();\n        }\n        return _children.put(fieldName, value);\n    }\n    \n    \n    public JsonNode remove(String fieldName) {\n        return _children.remove(fieldName);\n    }\n\n    \n    public ObjectNode remove(Collection<String> fieldNames) {\n        _children.keySet().removeAll(fieldNames);\n        return this;\n    }\n    \n    \n    @Override\n    public ObjectNode removeAll() {\n        _children.clear();\n        return this;\n    }\n\n    \n    @Deprecated\n    public JsonNode putAll(Map<String,? extends JsonNode> properties) {\n        return setAll(properties);\n    }\n\n    \n    @Deprecated\n    public JsonNode putAll(ObjectNode other) {\n        return setAll(other);\n    }\n\n    \n    public ObjectNode retain(Collection<String> fieldNames) {\n        _children.keySet().retainAll(fieldNames);\n        return this;\n    }\n\n    \n    public ObjectNode retain(String... fieldNames) {\n        return retain(Arrays.asList(fieldNames));\n    }\n    \n    \n\n    \n    public ArrayNode putArray(String fieldName) {\n        ArrayNode n  = arrayNode();\n        _put(fieldName, n);\n        return n;\n    }\n\n    \n    public ObjectNode putObject(String fieldName) {\n        ObjectNode n = objectNode();\n        _put(fieldName, n);\n        return n;\n    }\n\n    \n    public ObjectNode putPOJO(String fieldName, Object pojo) {\n        return _put(fieldName, pojoNode(pojo));\n    }\n\n    \n    public ObjectNode putNull(String fieldName) {\n        _children.put(fieldName, nullNode());\n        return this;\n    }\n\n    \n    public ObjectNode put(String fieldName, short v) {\n        return _put(fieldName, numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Short v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v.shortValue()));\n    }\n\n    \n    public ObjectNode put(String fieldName, int v) {\n        return _put(fieldName, numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Integer v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v.intValue()));\n    }\n    \n    \n    public ObjectNode put(String fieldName, long v) {\n        return _put(fieldName, numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Long v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v.longValue()));\n    }\n    \n    \n    public ObjectNode put(String fieldName, float v) {\n        return _put(fieldName, numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Float v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v.floatValue()));\n    }\n    \n    \n    public ObjectNode put(String fieldName, double v) {\n        return _put(fieldName, numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Double v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v.doubleValue()));\n    }\n    \n    \n    public ObjectNode put(String fieldName, BigDecimal v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : numberNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, String v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : textNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, boolean v) {\n        return _put(fieldName, booleanNode(v));\n    }\n\n    \n    public ObjectNode put(String fieldName, Boolean v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : booleanNode(v.booleanValue()));\n    }\n    \n    \n    public ObjectNode put(String fieldName, byte[] v) {\n        return _put(fieldName, (v == null) ? nullNode()\n                : binaryNode(v));\n    }\n    \n    \n\n    @Override\n    public boolean equals(Object o) {\n        if (o == this) return true;\n        if (o == null) return false;\n        if (o instanceof ObjectNode) {\n            return _childrenEqual((ObjectNode) o);\n        }\n        return false;\n    }\n\n    \n    protected boolean _childrenEqual(ObjectNode other) {\n        return _children.equals(other._children);\n    }\n    \n    @Override\n    public int hashCode() {\n        return _children.hashCode();\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder(32 + (size() << 4));\n        sb.append(\"{\");\n        int count = 0;\n        for (Map.Entry<String, JsonNode> en : _children.entrySet()) {\n            if (count > 0) {\n                sb.append(\",\");\n            }\n            ++count;\n            TextNode.appendQuoted(sb, en.getKey());\n            sb.append(':');\n            sb.append(en.getValue().toString());\n        }\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    \n\n    protected ObjectNode _put(String fieldName, JsonNode value) {\n        _children.put(fieldName, value);\n        return this;\n    }\n}\n",
      "buggy_signatures": [
        "public class ObjectNode extends ContainerNode<ObjectNode> { protected final Map<String, JsonNode> _children; public ObjectNode(JsonNodeFactory nc)",
        "public ObjectNode(JsonNodeFactory nc, Map<String, JsonNode> kids)",
        "protected JsonNode _at(JsonPointer ptr)",
        "public ObjectNode deepCopy()",
        "public JsonNodeType getNodeType()",
        "public JsonToken asToken()",
        "public int size()",
        "public Iterator<JsonNode> elements()",
        "public JsonNode get(int index)",
        "public JsonNode get(String fieldName)",
        "public Iterator<String> fieldNames()",
        "public JsonNode path(int index)",
        "public JsonNode path(String fieldName)",
        "public Iterator<Map.Entry<String, JsonNode>> fields()",
        "public ObjectNode with(String propertyName)",
        "public ArrayNode withArray(String propertyName)",
        "public JsonNode findValue(String fieldName)",
        "public List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar)",
        "public List<String> findValuesAsText(String fieldName, List<String> foundSoFar)",
        "public ObjectNode findParent(String fieldName)",
        "public List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar)",
        "public void serialize(JsonGenerator jg, SerializerProvider provider) throws IOException, JsonProcessingException",
        "public void serializeWithType(JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonProcessingException",
        "public JsonNode set(String fieldName, JsonNode value)",
        "public JsonNode setAll(Map<String,? extends JsonNode> properties)",
        "public JsonNode setAll(ObjectNode other)",
        "public JsonNode replace(String fieldName, JsonNode value)",
        "public JsonNode without(String fieldName)",
        "public ObjectNode without(Collection<String> fieldNames)",
        "public JsonNode put(String fieldName, JsonNode value)",
        "public JsonNode remove(String fieldName)",
        "public ObjectNode remove(Collection<String> fieldNames)",
        "public ObjectNode removeAll()",
        "public JsonNode putAll(Map<String,? extends JsonNode> properties)",
        "public JsonNode putAll(ObjectNode other)",
        "public ObjectNode retain(Collection<String> fieldNames)",
        "public ObjectNode retain(String... fieldNames)",
        "public ArrayNode putArray(String fieldName)",
        "public ObjectNode putObject(String fieldName)",
        "public ObjectNode putPOJO(String fieldName, Object pojo)",
        "public ObjectNode putNull(String fieldName)",
        "public ObjectNode put(String fieldName, short v)",
        "public ObjectNode put(String fieldName, Short v)",
        "public ObjectNode put(String fieldName, int v)",
        "public ObjectNode put(String fieldName, Integer v)",
        "public ObjectNode put(String fieldName, long v)",
        "public ObjectNode put(String fieldName, Long v)",
        "public ObjectNode put(String fieldName, float v)",
        "public ObjectNode put(String fieldName, Float v)",
        "public ObjectNode put(String fieldName, double v)",
        "public ObjectNode put(String fieldName, Double v)",
        "public ObjectNode put(String fieldName, BigDecimal v)",
        "public ObjectNode put(String fieldName, String v)",
        "public ObjectNode put(String fieldName, boolean v)",
        "public ObjectNode put(String fieldName, Boolean v)",
        "public ObjectNode put(String fieldName, byte[] v)",
        "public boolean equals(Object o)",
        "protected boolean _childrenEqual(ObjectNode other)",
        "public int hashCode()",
        "public String toString()",
        "protected ObjectNode _put(String fieldName, JsonNode value)"
      ],
      "fixed_signatures": [
        "public class ObjectNode extends ContainerNode<ObjectNode> { protected final Map<String, JsonNode> _children; public ObjectNode(JsonNodeFactory nc)",
        "public ObjectNode(JsonNodeFactory nc, Map<String, JsonNode> kids)",
        "protected JsonNode _at(JsonPointer ptr)",
        "public ObjectNode deepCopy()",
        "public JsonNodeType getNodeType()",
        "public JsonToken asToken()",
        "public int size()",
        "public Iterator<JsonNode> elements()",
        "public JsonNode get(int index)",
        "public JsonNode get(String fieldName)",
        "public Iterator<String> fieldNames()",
        "public JsonNode path(int index)",
        "public JsonNode path(String fieldName)",
        "public Iterator<Map.Entry<String, JsonNode>> fields()",
        "public ObjectNode with(String propertyName)",
        "public ArrayNode withArray(String propertyName)",
        "public JsonNode findValue(String fieldName)",
        "public List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar)",
        "public List<String> findValuesAsText(String fieldName, List<String> foundSoFar)",
        "public ObjectNode findParent(String fieldName)",
        "public List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar)",
        "public void serialize(JsonGenerator jg, SerializerProvider provider) throws IOException, JsonProcessingException",
        "public void serializeWithType(JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonProcessingException",
        "public JsonNode set(String fieldName, JsonNode value)",
        "public JsonNode setAll(Map<String,? extends JsonNode> properties)",
        "public JsonNode setAll(ObjectNode other)",
        "public JsonNode replace(String fieldName, JsonNode value)",
        "public JsonNode without(String fieldName)",
        "public ObjectNode without(Collection<String> fieldNames)",
        "public JsonNode put(String fieldName, JsonNode value)",
        "public JsonNode remove(String fieldName)",
        "public ObjectNode remove(Collection<String> fieldNames)",
        "public ObjectNode removeAll()",
        "public JsonNode putAll(Map<String,? extends JsonNode> properties)",
        "public JsonNode putAll(ObjectNode other)",
        "public ObjectNode retain(Collection<String> fieldNames)",
        "public ObjectNode retain(String... fieldNames)",
        "public ArrayNode putArray(String fieldName)",
        "public ObjectNode putObject(String fieldName)",
        "public ObjectNode putPOJO(String fieldName, Object pojo)",
        "public ObjectNode putNull(String fieldName)",
        "public ObjectNode put(String fieldName, short v)",
        "public ObjectNode put(String fieldName, Short v)",
        "public ObjectNode put(String fieldName, int v)",
        "public ObjectNode put(String fieldName, Integer v)",
        "public ObjectNode put(String fieldName, long v)",
        "public ObjectNode put(String fieldName, Long v)",
        "public ObjectNode put(String fieldName, float v)",
        "public ObjectNode put(String fieldName, Float v)",
        "public ObjectNode put(String fieldName, double v)",
        "public ObjectNode put(String fieldName, Double v)",
        "public ObjectNode put(String fieldName, BigDecimal v)",
        "public ObjectNode put(String fieldName, String v)",
        "public ObjectNode put(String fieldName, boolean v)",
        "public ObjectNode put(String fieldName, Boolean v)",
        "public ObjectNode put(String fieldName, byte[] v)",
        "public boolean equals(Object o)",
        "protected boolean _childrenEqual(ObjectNode other)",
        "public int hashCode()",
        "public String toString()",
        "protected ObjectNode _put(String fieldName, JsonNode value)"
      ],
      "methods": [
        {
          "buggy_method": "",
          "fixed_method": "",
          "diff": [
            "@@ -1,6 +1,7 @@",
            " package com.fasterxml.jackson.databind.node;\n",
            " \n",
            " import com.fasterxml.jackson.annotation.JsonAutoDetect;\n",
            "+import com.fasterxml.jackson.annotation.JsonIgnore;\n",
            " import com.fasterxml.jackson.core.*;\n",
            " import com.fasterxml.jackson.databind.JsonNode;\n",
            " import com.fasterxml.jackson.databind.SerializerProvider;\n"
          ],
          "changed_lines": 1
        },
        {
          "buggy_method": "  public JsonNode setAll(Map<String,? extends JsonNode> properties) {\n  for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) {\n  JsonNode n = en.getValue();\n  if (n == null) {\n  n = nullNode();\n  }\n  _children.put(en.getKey(), n);\n  }\n  return this;\n  }",
          "fixed_method": "  public JsonNode setAll(Map<String,? extends JsonNode> properties) {\n  for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) {\n  JsonNode n = en.getValue();\n  if (n == null) {\n  n = nullNode();\n  }\n  _children.put(en.getKey(), n);\n  }\n  return this;\n  }",
          "diff": [
            "@@ -321,6 +322,7 @@",
            "      *\n",
            "      * @since 2.1\n",
            "      */\n",
            "+    @JsonIgnore // work-around for [databind#815]\n",
            "     public JsonNode setAll(Map<String,? extends JsonNode> properties)\n",
            "     {\n",
            "         for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) {\n"
          ],
          "changed_lines": 1
        }
      ]
    }
  ]
}
