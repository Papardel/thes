{
  "bug_id": "85",
  "failed_tests": {
    "org.apache.commons.math.distribution.NormalDistributionTest": [
      {
        "methodName": "testMath280",
        "error": "org.apache.commons.math.MathException",
        "message": "org.apache.commons.math.ConvergenceException: number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0",
        "fail_line": "        double result = normal.inverseCumulativeProbability(0.9772498680518209);",
        "test_source": "  public void testMath280() throws MathException {\n  NormalDistribution normal = new NormalDistributionImpl(0,1);\n  double result = normal.inverseCumulativeProbability(0.9772498680518209);\n  assertEquals(2.0, result, 1.0e-12);\n  }",
        "stack": [
          "AbstractContinuousDistribution.inverseCumulativeProbability line 104, NormalDistributionImpl.inverseCumulativeProbability line 162, NormalDistributionTest.testMath280 line 169, UnivariateRealSolverUtils.bracket line 204, UnivariateRealSolverUtils.bracket line 127, AbstractContinuousDistribution.inverseCumulativeProbability line 85"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java",
      "buggy_full_code": "\npackage org.apache.commons.math.analysis.solvers;\n\nimport org.apache.commons.math.FunctionEvaluationException;\nimport org.apache.commons.math.ConvergenceException;\nimport org.apache.commons.math.MathRuntimeException;\nimport org.apache.commons.math.analysis.UnivariateRealFunction;\n\n\npublic class UnivariateRealSolverUtils { private UnivariateRealSolverUtils() {\n        super();\n    }\n    \n    \n    public static double solve(UnivariateRealFunction f, double x0, double x1) throws ConvergenceException, FunctionEvaluationException {\n        setup(f);\n        return LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);\n    }\n\n    \n    public static double solve(UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy) throws ConvergenceException, FunctionEvaluationException {    \n       \n        setup(f);\n        UnivariateRealSolver solver = LazyHolder.FACTORY.newDefaultSolver();\n        solver.setAbsoluteAccuracy(absoluteAccuracy);\n        return solver.solve(f, x0, x1);\n    }\n\n    \n    public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound) throws ConvergenceException, FunctionEvaluationException {\n        return bracket( function, initial, lowerBound, upperBound,\n            Integer.MAX_VALUE ) ;\n    }\n\n     \n    public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n        \n        if (function == null) {\n            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n        }\n        if (maximumIterations <= 0)  {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                  lowerBound, initial, upperBound);\n        }\n        double a = initial;\n        double b = initial;\n        double fa;\n        double fb;\n        int numIterations = 0 ;\n    \n        do {\n            a = Math.max(a - 1.0, lowerBound);\n            b = Math.min(b + 1.0, upperBound);\n            fa = function.value(a);\n            \n            fb = function.value(b);\n            numIterations++ ;\n        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                ((a > lowerBound) || (b < upperBound)));\n   \n        if (fa * fb >= 0.0 ) {\n            throw new ConvergenceException(\n                      \"number of iterations={0}, maximum iterations={1}, \" +\n                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n                      numIterations, maximumIterations, initial,\n                      lowerBound, upperBound, a, b, fa, fb);\n        }\n        \n        return new double[]{a, b};\n    }\n\n    \n    public static double midpoint(double a, double b) {\n        return (a + b) * .5;\n    }\n    \n    \n    private static void setup(UnivariateRealFunction f) {\n        if (f == null) {\n            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n        }\n    }\n\n    \n    private static class LazyHolder {\n        \n        private static final UnivariateRealSolverFactory FACTORY =\n            UnivariateRealSolverFactory.newInstance();\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.math.analysis.solvers;\n\nimport org.apache.commons.math.FunctionEvaluationException;\nimport org.apache.commons.math.ConvergenceException;\nimport org.apache.commons.math.MathRuntimeException;\nimport org.apache.commons.math.analysis.UnivariateRealFunction;\n\n\npublic class UnivariateRealSolverUtils { private UnivariateRealSolverUtils() {\n        super();\n    }\n    \n    \n    public static double solve(UnivariateRealFunction f, double x0, double x1) throws ConvergenceException, FunctionEvaluationException {\n        setup(f);\n        return LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);\n    }\n\n    \n    public static double solve(UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy) throws ConvergenceException, FunctionEvaluationException {    \n       \n        setup(f);\n        UnivariateRealSolver solver = LazyHolder.FACTORY.newDefaultSolver();\n        solver.setAbsoluteAccuracy(absoluteAccuracy);\n        return solver.solve(f, x0, x1);\n    }\n\n    \n    public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound) throws ConvergenceException, FunctionEvaluationException {\n        return bracket( function, initial, lowerBound, upperBound,\n            Integer.MAX_VALUE ) ;\n    }\n\n     \n    public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n        \n        if (function == null) {\n            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n        }\n        if (maximumIterations <= 0)  {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                  lowerBound, initial, upperBound);\n        }\n        double a = initial;\n        double b = initial;\n        double fa;\n        double fb;\n        int numIterations = 0 ;\n    \n        do {\n            a = Math.max(a - 1.0, lowerBound);\n            b = Math.min(b + 1.0, upperBound);\n            fa = function.value(a);\n            \n            fb = function.value(b);\n            numIterations++ ;\n        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                ((a > lowerBound) || (b < upperBound)));\n   \n        if (fa * fb > 0.0 ) {\n            throw new ConvergenceException(\n                      \"number of iterations={0}, maximum iterations={1}, \" +\n                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n                      numIterations, maximumIterations, initial,\n                      lowerBound, upperBound, a, b, fa, fb);\n        }\n        \n        return new double[]{a, b};\n    }\n\n    \n    public static double midpoint(double a, double b) {\n        return (a + b) * .5;\n    }\n    \n    \n    private static void setup(UnivariateRealFunction f) {\n        if (f == null) {\n            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n        }\n    }\n\n    \n    private static class LazyHolder {\n        \n        private static final UnivariateRealSolverFactory FACTORY =\n            UnivariateRealSolverFactory.newInstance();\n    }\n\n}\n",
      "buggy_signatures": [
        "public class UnivariateRealSolverUtils { private UnivariateRealSolverUtils()",
        "public static double solve(UnivariateRealFunction f, double x0, double x1) throws ConvergenceException, FunctionEvaluationException",
        "public static double solve(UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy) throws ConvergenceException, FunctionEvaluationException",
        "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound) throws ConvergenceException, FunctionEvaluationException",
        "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException",
        "public static double midpoint(double a, double b)",
        "private static void setup(UnivariateRealFunction f)"
      ],
      "fixed_signatures": [
        "public class UnivariateRealSolverUtils { private UnivariateRealSolverUtils()",
        "public static double solve(UnivariateRealFunction f, double x0, double x1) throws ConvergenceException, FunctionEvaluationException",
        "public static double solve(UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy) throws ConvergenceException, FunctionEvaluationException",
        "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound) throws ConvergenceException, FunctionEvaluationException",
        "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException",
        "public static double midpoint(double a, double b)",
        "private static void setup(UnivariateRealFunction f)"
      ],
      "methods": [
        {
          "buggy_method": "  public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n  \n  if (function == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n  }\n  if (maximumIterations <= 0)  {\n  throw MathRuntimeException.createIllegalArgumentException(\n  \"bad value for maximum iterations number: {0}\", maximumIterations);\n  }\n  if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw MathRuntimeException.createIllegalArgumentException(\n  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n  lowerBound, initial, upperBound);\n  }\n  double a = initial;\n  double b = initial;\n  double fa;\n  double fb;\n  int numIterations = 0 ;\n  \n  do {\n  a = Math.max(a - 1.0, lowerBound);\n  b = Math.min(b + 1.0, upperBound);\n  fa = function.value(a);\n  \n  fb = function.value(b);\n  numIterations++ ;\n  } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n  ((a > lowerBound) || (b < upperBound)));\n  \n  if (fa * fb >= 0.0 ) {\n  throw new ConvergenceException(\n  \"number of iterations={0}, maximum iterations={1}, \" +\n  \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n  \"final b value={6}, f(a)={7}, f(b)={8}\",\n  numIterations, maximumIterations, initial,\n  lowerBound, upperBound, a, b, fa, fb);\n  }\n  \n  return new double[]{a, b};\n  }",
          "fixed_method": "  public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n  \n  if (function == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n  }\n  if (maximumIterations <= 0)  {\n  throw MathRuntimeException.createIllegalArgumentException(\n  \"bad value for maximum iterations number: {0}\", maximumIterations);\n  }\n  if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n  throw MathRuntimeException.createIllegalArgumentException(\n  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n  lowerBound, initial, upperBound);\n  }\n  double a = initial;\n  double b = initial;\n  double fa;\n  double fb;\n  int numIterations = 0 ;\n  \n  do {\n  a = Math.max(a - 1.0, lowerBound);\n  b = Math.min(b + 1.0, upperBound);\n  fa = function.value(a);\n  \n  fb = function.value(b);\n  numIterations++ ;\n  } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n  ((a > lowerBound) || (b < upperBound)));\n  \n  if (fa * fb > 0.0 ) {\n  throw new ConvergenceException(\n  \"number of iterations={0}, maximum iterations={1}, \" +\n  \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n  \"final b value={6}, f(a)={7}, f(b)={8}\",\n  numIterations, maximumIterations, initial,\n  lowerBound, upperBound, a, b, fa, fb);\n  }\n  \n  return new double[]{a, b};\n  }",
          "diff": [
            "@@ -195,7 +195,7 @@",
            "         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n",
            "                 ((a > lowerBound) || (b < upperBound)));\n",
            "    \n",
            "-        if (fa * fb >= 0.0 ) {\n",
            "+        if (fa * fb > 0.0 ) {\n",
            "             throw new ConvergenceException(\n",
            "                       \"number of iterations={0}, maximum iterations={1}, \" +\n",
            "                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
