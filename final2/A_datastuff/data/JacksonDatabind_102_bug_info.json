{
  "bug_id": "102",
  "failed_tests": {
    "com.fasterxml.jackson.databind.ser.jdk.SqlDateSerializationTest": [
      {
        "methodName": "testSqlDateConfigOverride",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<[\"1980+04+14\"]> but was:<[324547200000]>",
        "fail_line": "        assertEquals(\"\\\"1980+04+14\\\"\",",
        "test_source": "  public void testSqlDateConfigOverride() throws Exception {\n  ObjectMapper mapper = newObjectMapper();\n  mapper.configOverride(java.sql.Date.class)\n  .setFormat(JsonFormat.Value.forPattern(\"yyyy+MM+dd\"));  \n  assertEquals(\"\\\"1980+04+14\\\"\",\n  mapper.writeValueAsString(java.sql.Date.valueOf(\"1980-04-14\")));\n  }",
        "stack": [
          "SqlDateSerializationTest.testSqlDateConfigOverride line 104"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.ser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.*;\nimport com.fasterxml.jackson.databind.ser.ContextualSerializer;\nimport com.fasterxml.jackson.databind.util.StdDateFormat;\n\n@SuppressWarnings(\"serial\")\npublic abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected final AtomicReference<DateFormat> _reusedCustomFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat) {\n        super(type);\n        _useTimestamp = useTimestamp;\n        _customFormat = customFormat;\n        _reusedCustomFormat = (customFormat == null) ? null : new AtomicReference<DateFormat>();\n    }\n\n    public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n        \n        \n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        \n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        \n        \n        if (format.hasPattern()) {\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                    : serializers.getTimeZone();\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        \n        final boolean hasLocale = format.hasLocale();\n        final boolean hasTZ = format.hasTimeZone();\n        final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n        if (!hasLocale && !hasTZ && !asString) {\n            return this;\n        }\n\n        DateFormat df0 = serializers.getConfig().getDateFormat();\n        \n        if (df0 instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df0;\n            if (format.hasLocale()) {\n                std = std.withLocale(format.getLocale());\n            }\n            if (format.hasTimeZone()) {\n                std = std.withTimeZone(format.getTimeZone());\n            }\n            return withFormat(Boolean.FALSE, std);\n        }\n\n        \n        \n        \n        if (!(df0 instanceof SimpleDateFormat)) {\n            serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n        }\n        SimpleDateFormat df = (SimpleDateFormat) df0;\n        if (hasLocale) {\n            \n            df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n        } else {\n            df = (SimpleDateFormat) df.clone();\n        }\n        TimeZone newTz = format.getTimeZone();\n        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n        if (changeTZ) {\n            df.setTimeZone(newTz);\n        }\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    \n\n    @Override\n    public boolean isEmpty(SerializerProvider serializers, T value) {\n        \n        \n\n        return false;\n    }\n\n    protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint) {\n        \n        return createSchemaNode(_asTimestamp(serializers) ? \"number\" : \"string\", true);\n    }\n\n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        _acceptJsonFormatVisitor(visitor, typeHint, _asTimestamp(visitor.getProvider()));\n    }\n\n    \n\n    @Override\n    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers) {\n        if (_useTimestamp != null) {\n            return _useTimestamp.booleanValue();\n        }\n        if (_customFormat == null) {\n            if (serializers != null) {\n                return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n            }\n            \n            throw new IllegalArgumentException(\"Null SerializerProvider passed for \"+handledType().getName());\n        }\n        return false;\n    }\n\n    protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException {\n        if (asNumber) {\n            visitIntFormat(visitor, typeHint,\n                    JsonParser.NumberType.LONG, JsonValueFormat.UTC_MILLISEC);\n        } else {\n            visitStringFormat(visitor, typeHint, JsonValueFormat.DATE_TIME);\n        }\n    }\n\n    \n    protected void _serializeAsString(Date value, JsonGenerator g, SerializerProvider provider) throws IOException {\n        if (_customFormat == null) {\n            provider.defaultSerializeDateValue(value, g);\n            return;\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        DateFormat f = _reusedCustomFormat.getAndSet(null);\n        if (f == null) {\n            f = (DateFormat) _customFormat.clone();\n        }\n        g.writeString(f.format(value));\n        _reusedCustomFormat.compareAndSet(null, f);\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.ser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.*;\nimport com.fasterxml.jackson.databind.ser.ContextualSerializer;\nimport com.fasterxml.jackson.databind.util.StdDateFormat;\n\n@SuppressWarnings(\"serial\")\npublic abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected final AtomicReference<DateFormat> _reusedCustomFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat) {\n        super(type);\n        _useTimestamp = useTimestamp;\n        _customFormat = customFormat;\n        _reusedCustomFormat = (customFormat == null) ? null : new AtomicReference<DateFormat>();\n    }\n\n    public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n        \n        \n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        \n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        \n        \n        if (format.hasPattern()) {\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                    : serializers.getTimeZone();\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        \n        final boolean hasLocale = format.hasLocale();\n        final boolean hasTZ = format.hasTimeZone();\n        final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n        if (!hasLocale && !hasTZ && !asString) {\n            return this;\n        }\n\n        DateFormat df0 = serializers.getConfig().getDateFormat();\n        \n        if (df0 instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df0;\n            if (format.hasLocale()) {\n                std = std.withLocale(format.getLocale());\n            }\n            if (format.hasTimeZone()) {\n                std = std.withTimeZone(format.getTimeZone());\n            }\n            return withFormat(Boolean.FALSE, std);\n        }\n\n        \n        \n        \n        if (!(df0 instanceof SimpleDateFormat)) {\n            serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n        }\n        SimpleDateFormat df = (SimpleDateFormat) df0;\n        if (hasLocale) {\n            \n            df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n        } else {\n            df = (SimpleDateFormat) df.clone();\n        }\n        TimeZone newTz = format.getTimeZone();\n        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n        if (changeTZ) {\n            df.setTimeZone(newTz);\n        }\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    \n\n    @Override\n    public boolean isEmpty(SerializerProvider serializers, T value) {\n        \n        \n\n        return false;\n    }\n\n    protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint) {\n        \n        return createSchemaNode(_asTimestamp(serializers) ? \"number\" : \"string\", true);\n    }\n\n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        _acceptJsonFormatVisitor(visitor, typeHint, _asTimestamp(visitor.getProvider()));\n    }\n\n    \n\n    @Override\n    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers) {\n        if (_useTimestamp != null) {\n            return _useTimestamp.booleanValue();\n        }\n        if (_customFormat == null) {\n            if (serializers != null) {\n                return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n            }\n            \n            throw new IllegalArgumentException(\"Null SerializerProvider passed for \"+handledType().getName());\n        }\n        return false;\n    }\n\n    protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException {\n        if (asNumber) {\n            visitIntFormat(visitor, typeHint,\n                    JsonParser.NumberType.LONG, JsonValueFormat.UTC_MILLISEC);\n        } else {\n            visitStringFormat(visitor, typeHint, JsonValueFormat.DATE_TIME);\n        }\n    }\n\n    \n    protected void _serializeAsString(Date value, JsonGenerator g, SerializerProvider provider) throws IOException {\n        if (_customFormat == null) {\n            provider.defaultSerializeDateValue(value, g);\n            return;\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        DateFormat f = _reusedCustomFormat.getAndSet(null);\n        if (f == null) {\n            f = (DateFormat) _customFormat.clone();\n        }\n        g.writeString(f.format(value));\n        _reusedCustomFormat.compareAndSet(null, f);\n    }\n}\n",
      "buggy_signatures": [
        "public abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected final AtomicReference<DateFormat> _reusedCustomFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat)",
        "public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException",
        "public boolean isEmpty(SerializerProvider serializers, T value)",
        "protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint)",
        "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
        "public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers)",
        "protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException",
        "protected void _serializeAsString(Date value, JsonGenerator g, SerializerProvider provider) throws IOException"
      ],
      "fixed_signatures": [
        "public abstract class DateTimeSerializerBase<T> extends StdScalarSerializer<T> implements ContextualSerializer { protected final Boolean _useTimestamp; protected final DateFormat _customFormat; protected final AtomicReference<DateFormat> _reusedCustomFormat; protected DateTimeSerializerBase(Class<T> type, Boolean useTimestamp, DateFormat customFormat)",
        "public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat); @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException",
        "public boolean isEmpty(SerializerProvider serializers, T value)",
        "protected abstract long _timestamp(T value); @Override public JsonNode getSchema(SerializerProvider serializers, Type typeHint)",
        "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
        "public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers) throws IOException; protected boolean _asTimestamp(SerializerProvider serializers)",
        "protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint, boolean asNumber) throws JsonMappingException",
        "protected void _serializeAsString(Date value, JsonGenerator g, SerializerProvider provider) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n  \n  \n  if (property == null) {\n  return this;\n  }\n  JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n  if (format == null) {\n  return this;\n  }\n  \n  JsonFormat.Shape shape = format.getShape();\n  if (shape.isNumeric()) {\n  return withFormat(Boolean.TRUE, null);\n  }\n\n  \n  \n  if (format.hasPattern()) {\n  final Locale loc = format.hasLocale()\n  ? format.getLocale()\n  : serializers.getLocale();\n  SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n  TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n  : serializers.getTimeZone();\n  df.setTimeZone(tz);\n  return withFormat(Boolean.FALSE, df);\n  }\n\n  \n  final boolean hasLocale = format.hasLocale();\n  final boolean hasTZ = format.hasTimeZone();\n  final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n  if (!hasLocale && !hasTZ && !asString) {\n  return this;\n  }\n\n  DateFormat df0 = serializers.getConfig().getDateFormat();\n  \n  if (df0 instanceof StdDateFormat) {\n  StdDateFormat std = (StdDateFormat) df0;\n  if (format.hasLocale()) {\n  std = std.withLocale(format.getLocale());\n  }\n  if (format.hasTimeZone()) {\n  std = std.withTimeZone(format.getTimeZone());\n  }\n  return withFormat(Boolean.FALSE, std);\n  }\n\n  \n  \n  \n  if (!(df0 instanceof SimpleDateFormat)) {\n  serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n  }\n  SimpleDateFormat df = (SimpleDateFormat) df0;\n  if (hasLocale) {\n  \n  df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n  } else {\n  df = (SimpleDateFormat) df.clone();\n  }\n  TimeZone newTz = format.getTimeZone();\n  boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n  if (changeTZ) {\n  df.setTimeZone(newTz);\n  }\n  return withFormat(Boolean.FALSE, df);\n  }",
          "fixed_method": "  public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n  \n  \n  JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n  if (format == null) {\n  return this;\n  }\n  \n  JsonFormat.Shape shape = format.getShape();\n  if (shape.isNumeric()) {\n  return withFormat(Boolean.TRUE, null);\n  }\n\n  \n  \n  if (format.hasPattern()) {\n  final Locale loc = format.hasLocale()\n  ? format.getLocale()\n  : serializers.getLocale();\n  SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n  TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n  : serializers.getTimeZone();\n  df.setTimeZone(tz);\n  return withFormat(Boolean.FALSE, df);\n  }\n\n  \n  final boolean hasLocale = format.hasLocale();\n  final boolean hasTZ = format.hasTimeZone();\n  final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n  if (!hasLocale && !hasTZ && !asString) {\n  return this;\n  }\n\n  DateFormat df0 = serializers.getConfig().getDateFormat();\n  \n  if (df0 instanceof StdDateFormat) {\n  StdDateFormat std = (StdDateFormat) df0;\n  if (format.hasLocale()) {\n  std = std.withLocale(format.getLocale());\n  }\n  if (format.hasTimeZone()) {\n  std = std.withTimeZone(format.getTimeZone());\n  }\n  return withFormat(Boolean.FALSE, std);\n  }\n\n  \n  \n  \n  if (!(df0 instanceof SimpleDateFormat)) {\n  serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n  }\n  SimpleDateFormat df = (SimpleDateFormat) df0;\n  if (hasLocale) {\n  \n  df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n  } else {\n  df = (SimpleDateFormat) df.clone();\n  }\n  TimeZone newTz = format.getTimeZone();\n  boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n  if (changeTZ) {\n  df.setTimeZone(newTz);\n  }\n  return withFormat(Boolean.FALSE, df);\n  }",
          "diff": [
            "@@ -64,9 +64,6 @@",
            "     {\n",
            "         // Note! Should not skip if `property` null since that'd skip check\n",
            "         // for config overrides, in case of root value\n",
            "-        if (property == null) {\n",
            "-            return this;\n",
            "-        }\n",
            "         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n",
            "         if (format == null) {\n",
            "             return this;\n"
          ],
          "changed_lines": 3
        }
      ]
    }
  ]
}
