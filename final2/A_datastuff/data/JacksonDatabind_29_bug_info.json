{
  "bug_id": "29",
  "failed_tests": {
    "com.fasterxml.jackson.databind.jsontype.TestExternalId": [
      {
        "methodName": "testExternalTypeIdWithNull",
        "error": "com.fasterxml.jackson.databind.JsonMappingException",
        "message": "Can not deserialize instance of com.fasterxml.jackson.databind.jsontype.TestExternalId$ValueBean out of VALUE_STRING token",
        "fail_line": "        b = mapper.readValue(aposToQuotes(\"{'bean':null,'extType':'vbean'}\"),",
        "test_source": "  public void testExternalTypeIdWithNull() throws Exception {\n  ObjectMapper mapper = new ObjectMapper();\n  mapper.registerSubtypes(ValueBean.class);\n  ExternalBean b;\n  b = mapper.readValue(aposToQuotes(\"{'bean':null,'extType':'vbean'}\"),\n  ExternalBean.class);\n  assertNotNull(b);\n  b = mapper.readValue(aposToQuotes(\"{'extType':'vbean','bean':null}\"),\n  ExternalBean.class);\n  assertNotNull(b);\n  }",
        "stack": [
          "JsonMappingException.from line 148, DeserializationContext.mappingException line 854, DeserializationContext.mappingException line 850, BeanDeserializer._deserializeOther line 168, BeanDeserializer.deserialize line 136, AsArrayTypeDeserializer._deserialize line 110, AsArrayTypeDeserializer.deserializeTypedFromAny line 68, UntypedObjectDeserializer$Vanilla.deserializeWithType line 550, SettableBeanProperty.deserialize line 518, FieldProperty.deserializeAndSet line 101, ExternalTypeHandler._deserializeAndSet line 260, ExternalTypeHandler.handlePropertyValue line 119, BeanDeserializer.deserializeWithExternalTypeId line 756, BeanDeserializer.deserializeWithExternalTypeId line 720, BeanDeserializer.deserializeFromObject line 294, BeanDeserializer.deserialize line 133, ObjectMapper._readMapAndClose line 3730, ObjectMapper.readValue line 2723, TestExternalId.testExternalTypeIdWithNull line 288"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens) {\n        _properties = properties;        \n        _nameToPropertyIndex = nameToPropertyIndex;\n        _typeIds = typeIds;\n        _tokens = tokens;\n    }\n\n    protected ExternalTypeHandler(ExternalTypeHandler h) {\n        _properties = h._properties;\n        _nameToPropertyIndex = h._nameToPropertyIndex;\n        int len = _properties.length;\n        _typeIds = new String[len];\n        _tokens = new TokenBuffer[len];\n    }\n    \n    public ExternalTypeHandler start() {\n        return new ExternalTypeHandler(this);\n    }\n\n    \n    public boolean handleTypePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Integer I = _nameToPropertyIndex.get(propName);\n        if (I == null) {\n            return false;\n        }\n        int index = I.intValue();\n        ExtTypedProperty prop = _properties[index];\n        if (!prop.hasTypePropertyName(propName)) {\n            return false;\n        }\n        String typeId = jp.getText();\n        \n        boolean canDeserialize = (bean != null) && (_tokens[index] != null);\n        \n        if (canDeserialize) {\n            _deserializeAndSet(jp, ctxt, bean, index, typeId);\n            \n            _tokens[index] = null;\n        } else {\n            _typeIds[index] = typeId;\n        }\n        return true;\n    }\n    \n    \n    public boolean handlePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Integer I = _nameToPropertyIndex.get(propName);\n        if (I == null) {\n            return false;\n        }\n        int index = I.intValue();\n        ExtTypedProperty prop = _properties[index];\n        boolean canDeserialize;\n        if (prop.hasTypePropertyName(propName)) {\n            _typeIds[index] = jp.getText();\n            jp.skipChildren();\n            canDeserialize = (bean != null) && (_tokens[index] != null);\n        } else {\n            @SuppressWarnings(\"resource\")\n            TokenBuffer tokens = new TokenBuffer(jp);\n            tokens.copyCurrentStructure(jp);\n            _tokens[index] = tokens;\n            canDeserialize = (bean != null) && (_typeIds[index] != null);\n        }\n        \n        if (canDeserialize) {\n            String typeId = _typeIds[index];\n            \n            _typeIds[index] = null;\n            _deserializeAndSet(jp, ctxt, bean, index, typeId);\n            _tokens[index] = null;\n        }\n        return true;\n    }\n\n    \n    @SuppressWarnings(\"resource\")\n    public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        for (int i = 0, len = _properties.length; i < len; ++i) {\n            String typeId = _typeIds[i];\n            if (typeId == null) {\n                TokenBuffer tokens = _tokens[i];\n                \n                \n                if (tokens == null) {\n                    continue;\n                }\n                \n                \n                JsonToken t = tokens.firstToken();\n                if (t != null && t.isScalarValue()) {\n                    JsonParser buffered = tokens.asParser(p);\n                    buffered.nextToken();\n                    SettableBeanProperty extProp = _properties[i].getProperty();\n                    Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType());\n                    if (result != null) {\n                        extProp.set(bean, result);\n                        continue;\n                    }\n                    \n                    if (!_properties[i].hasDefaultType()) {\n                        throw ctxt.mappingException(\"Missing external type id property '%s'\",\n                                _properties[i].getTypePropertyName());                                \n                    }\n                    typeId = _properties[i].getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = _properties[i].getProperty();\n                throw ctxt.mappingException(\"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            _deserializeAndSet(p, ctxt, bean, i, typeId);\n        }\n        return bean;\n    }\n\n    \n    public Object complete(JsonParser jp, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException {\n        \n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            if (typeId == null) {\n                \n                if (_tokens[i] == null) {\n                    continue;\n                }\n                \n                \n                if (!_properties[i].hasDefaultType()) {\n                    throw ctxt.mappingException(\"Missing external type id property '%s'\",\n                            _properties[i].getTypePropertyName());\n                }\n                typeId = _properties[i].getDefaultTypeId();\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = _properties[i].getProperty();\n                throw ctxt.mappingException(\"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            values[i] = _deserialize(jp, ctxt, i, typeId);\n        }\n        \n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (creator.findCreatorProperty(prop.getName()) != null) {\n                buffer.assignParameter(prop, values[i]);\n            }\n        }\n        Object bean = creator.build(ctxt, buffer);\n        \n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (creator.findCreatorProperty(prop.getName()) == null) {\n                prop.set(bean, values[i]);\n            }\n        }\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException {\n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n\n        TokenBuffer merged = new TokenBuffer(p);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        return _properties[index].getProperty().deserialize(mp, ctxt);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException {\n        \n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        TokenBuffer merged = new TokenBuffer(p);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n        \n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean);\n    }\n    \n    \n    \n    public static class Builder { private final ArrayList<ExtTypedProperty> _properties = new ArrayList<ExtTypedProperty>(); private final HashMap<String, Integer> _nameToPropertyIndex = new HashMap<String, Integer>(); public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            Integer index = _properties.size();\n            _properties.add(new ExtTypedProperty(property, typeDeser));\n            _nameToPropertyIndex.put(property.getName(), index);\n            _nameToPropertyIndex.put(typeDeser.getPropertyName(), index);\n        }\n        \n        public ExternalTypeHandler build() {\n            return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]),\n                    _nameToPropertyIndex, null, null);\n        }\n    }\n\n    private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            _property = property;\n            _typeDeserializer = typeDeser;\n            _typePropertyName = typeDeser.getPropertyName();\n        }\n\n        public boolean hasTypePropertyName(String n) {\n            return n.equals(_typePropertyName);\n        }\n\n        public boolean hasDefaultType() {\n            return _typeDeserializer.getDefaultImpl() != null;\n        }\n\n        public String getDefaultTypeId() {\n            Class<?> defaultType = _typeDeserializer.getDefaultImpl();\n            if (defaultType == null) {\n                return null;\n            }\n            return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType);\n        }\n        \n        public String getTypePropertyName() { return _typePropertyName; }\n        \n        public SettableBeanProperty getProperty() {\n            return _property;\n        }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens) {\n        _properties = properties;        \n        _nameToPropertyIndex = nameToPropertyIndex;\n        _typeIds = typeIds;\n        _tokens = tokens;\n    }\n\n    protected ExternalTypeHandler(ExternalTypeHandler h) {\n        _properties = h._properties;\n        _nameToPropertyIndex = h._nameToPropertyIndex;\n        int len = _properties.length;\n        _typeIds = new String[len];\n        _tokens = new TokenBuffer[len];\n    }\n    \n    public ExternalTypeHandler start() {\n        return new ExternalTypeHandler(this);\n    }\n\n    \n    public boolean handleTypePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Integer I = _nameToPropertyIndex.get(propName);\n        if (I == null) {\n            return false;\n        }\n        int index = I.intValue();\n        ExtTypedProperty prop = _properties[index];\n        if (!prop.hasTypePropertyName(propName)) {\n            return false;\n        }\n        String typeId = jp.getText();\n        \n        boolean canDeserialize = (bean != null) && (_tokens[index] != null);\n        \n        if (canDeserialize) {\n            _deserializeAndSet(jp, ctxt, bean, index, typeId);\n            \n            _tokens[index] = null;\n        } else {\n            _typeIds[index] = typeId;\n        }\n        return true;\n    }\n    \n    \n    public boolean handlePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException {\n        Integer I = _nameToPropertyIndex.get(propName);\n        if (I == null) {\n            return false;\n        }\n        int index = I.intValue();\n        ExtTypedProperty prop = _properties[index];\n        boolean canDeserialize;\n        if (prop.hasTypePropertyName(propName)) {\n            _typeIds[index] = jp.getText();\n            jp.skipChildren();\n            canDeserialize = (bean != null) && (_tokens[index] != null);\n        } else {\n            @SuppressWarnings(\"resource\")\n            TokenBuffer tokens = new TokenBuffer(jp);\n            tokens.copyCurrentStructure(jp);\n            _tokens[index] = tokens;\n            canDeserialize = (bean != null) && (_typeIds[index] != null);\n        }\n        \n        if (canDeserialize) {\n            String typeId = _typeIds[index];\n            \n            _typeIds[index] = null;\n            _deserializeAndSet(jp, ctxt, bean, index, typeId);\n            _tokens[index] = null;\n        }\n        return true;\n    }\n\n    \n    @SuppressWarnings(\"resource\")\n    public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        for (int i = 0, len = _properties.length; i < len; ++i) {\n            String typeId = _typeIds[i];\n            if (typeId == null) {\n                TokenBuffer tokens = _tokens[i];\n                \n                \n                if (tokens == null) {\n                    continue;\n                }\n                \n                \n                JsonToken t = tokens.firstToken();\n                if (t != null && t.isScalarValue()) {\n                    JsonParser buffered = tokens.asParser(p);\n                    buffered.nextToken();\n                    SettableBeanProperty extProp = _properties[i].getProperty();\n                    Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType());\n                    if (result != null) {\n                        extProp.set(bean, result);\n                        continue;\n                    }\n                    \n                    if (!_properties[i].hasDefaultType()) {\n                        throw ctxt.mappingException(\"Missing external type id property '%s'\",\n                                _properties[i].getTypePropertyName());                                \n                    }\n                    typeId = _properties[i].getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = _properties[i].getProperty();\n                throw ctxt.mappingException(\"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            _deserializeAndSet(p, ctxt, bean, i, typeId);\n        }\n        return bean;\n    }\n\n    \n    public Object complete(JsonParser jp, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException {\n        \n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            if (typeId == null) {\n                \n                if (_tokens[i] == null) {\n                    continue;\n                }\n                \n                \n                if (!_properties[i].hasDefaultType()) {\n                    throw ctxt.mappingException(\"Missing external type id property '%s'\",\n                            _properties[i].getTypePropertyName());\n                }\n                typeId = _properties[i].getDefaultTypeId();\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = _properties[i].getProperty();\n                throw ctxt.mappingException(\"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            values[i] = _deserialize(jp, ctxt, i, typeId);\n        }\n        \n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (creator.findCreatorProperty(prop.getName()) != null) {\n                buffer.assignParameter(prop, values[i]);\n            }\n        }\n        Object bean = creator.build(ctxt, buffer);\n        \n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (creator.findCreatorProperty(prop.getName()) == null) {\n                prop.set(bean, values[i]);\n            }\n        }\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException {\n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        if (t == JsonToken.VALUE_NULL) {\n            return null;\n        }\n\n        TokenBuffer merged = new TokenBuffer(p);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        return _properties[index].getProperty().deserialize(mp, ctxt);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException {\n        \n        JsonParser p2 = _tokens[index].asParser(p);\n        JsonToken t = p2.nextToken();\n        \n        if (t == JsonToken.VALUE_NULL) {\n            _properties[index].getProperty().set(bean, null);\n            return;\n        }\n        TokenBuffer merged = new TokenBuffer(p);\n        merged.writeStartArray();\n        merged.writeString(typeId);\n        \n        merged.copyCurrentStructure(p2);\n        merged.writeEndArray();\n        \n        JsonParser mp = merged.asParser(p);\n        mp.nextToken();\n        _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean);\n    }\n    \n    \n    \n    public static class Builder { private final ArrayList<ExtTypedProperty> _properties = new ArrayList<ExtTypedProperty>(); private final HashMap<String, Integer> _nameToPropertyIndex = new HashMap<String, Integer>(); public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            Integer index = _properties.size();\n            _properties.add(new ExtTypedProperty(property, typeDeser));\n            _nameToPropertyIndex.put(property.getName(), index);\n            _nameToPropertyIndex.put(typeDeser.getPropertyName(), index);\n        }\n        \n        public ExternalTypeHandler build() {\n            return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]),\n                    _nameToPropertyIndex, null, null);\n        }\n    }\n\n    private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) {\n            _property = property;\n            _typeDeserializer = typeDeser;\n            _typePropertyName = typeDeser.getPropertyName();\n        }\n\n        public boolean hasTypePropertyName(String n) {\n            return n.equals(_typePropertyName);\n        }\n\n        public boolean hasDefaultType() {\n            return _typeDeserializer.getDefaultImpl() != null;\n        }\n\n        public String getDefaultTypeId() {\n            Class<?> defaultType = _typeDeserializer.getDefaultImpl();\n            if (defaultType == null) {\n                return null;\n            }\n            return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType);\n        }\n        \n        public String getTypePropertyName() { return _typePropertyName; }\n        \n        public SettableBeanProperty getProperty() {\n            return _property;\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens)",
        "protected ExternalTypeHandler(ExternalTypeHandler h)",
        "public ExternalTypeHandler start()",
        "public boolean handleTypePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "public boolean handlePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "public Object complete(JsonParser jp, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException",
        "protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException",
        "protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException",
        "public ExternalTypeHandler build()",
        "private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser)",
        "public boolean hasTypePropertyName(String n)",
        "public boolean hasDefaultType()",
        "public String getDefaultTypeId()",
        "public String getTypePropertyName()",
        "public SettableBeanProperty getProperty()"
      ],
      "fixed_signatures": [
        "public class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens)",
        "protected ExternalTypeHandler(ExternalTypeHandler h)",
        "public ExternalTypeHandler start()",
        "public boolean handleTypePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "public boolean handlePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "public Object complete(JsonParser jp, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException",
        "protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException",
        "protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException",
        "public ExternalTypeHandler build()",
        "private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser)",
        "public boolean hasTypePropertyName(String n)",
        "public boolean hasDefaultType()",
        "public String getDefaultTypeId()",
        "public String getTypePropertyName()",
        "public SettableBeanProperty getProperty()"
      ],
      "methods": [
        {
          "buggy_method": "  protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException {\n  JsonParser p2 = _tokens[index].asParser(p);\n  JsonToken t = p2.nextToken();\n  \n\n  TokenBuffer merged = new TokenBuffer(p);\n  merged.writeStartArray();\n  merged.writeString(typeId);\n  merged.copyCurrentStructure(p2);\n  merged.writeEndArray();\n\n  \n  JsonParser mp = merged.asParser(p);\n  mp.nextToken();\n  return _properties[index].getProperty().deserialize(mp, ctxt);\n  }",
          "fixed_method": "  protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException {\n  JsonParser p2 = _tokens[index].asParser(p);\n  JsonToken t = p2.nextToken();\n  \n  if (t == JsonToken.VALUE_NULL) {\n  return null;\n  }\n\n  TokenBuffer merged = new TokenBuffer(p);\n  merged.writeStartArray();\n  merged.writeString(typeId);\n  merged.copyCurrentStructure(p2);\n  merged.writeEndArray();\n\n  \n  JsonParser mp = merged.asParser(p);\n  mp.nextToken();\n  return _properties[index].getProperty().deserialize(mp, ctxt);\n  }",
          "diff": [
            "@@ -225,6 +225,9 @@",
            "         JsonParser p2 = _tokens[index].asParser(p);\n",
            "         JsonToken t = p2.nextToken();\n",
            "         // 29-Sep-2015, tatu: As per [databind#942], nulls need special support\n",
            "+        if (t == JsonToken.VALUE_NULL) {\n",
            "+            return null;\n",
            "+        }\n",
            " \n",
            "         TokenBuffer merged = new TokenBuffer(p);\n",
            "         merged.writeStartArray();\n"
          ],
          "changed_lines": 3
        },
        {
          "buggy_method": "  protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException {\n  \n  JsonParser p2 = _tokens[index].asParser(p);\n  JsonToken t = p2.nextToken();\n  \n  TokenBuffer merged = new TokenBuffer(p);\n  merged.writeStartArray();\n  merged.writeString(typeId);\n  \n  merged.copyCurrentStructure(p2);\n  merged.writeEndArray();\n  \n  JsonParser mp = merged.asParser(p);\n  mp.nextToken();\n  _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean);\n  }",
          "fixed_method": "  protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException {\n  \n  JsonParser p2 = _tokens[index].asParser(p);\n  JsonToken t = p2.nextToken();\n  \n  if (t == JsonToken.VALUE_NULL) {\n  _properties[index].getProperty().set(bean, null);\n  return;\n  }\n  TokenBuffer merged = new TokenBuffer(p);\n  merged.writeStartArray();\n  merged.writeString(typeId);\n  \n  merged.copyCurrentStructure(p2);\n  merged.writeEndArray();\n  \n  JsonParser mp = merged.asParser(p);\n  mp.nextToken();\n  _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean);\n  }",
          "diff": [
            "@@ -248,6 +251,10 @@",
            "         JsonParser p2 = _tokens[index].asParser(p);\n",
            "         JsonToken t = p2.nextToken();\n",
            "         // 29-Sep-2015, tatu: As per [databind#942], nulls need special support\n",
            "+        if (t == JsonToken.VALUE_NULL) {\n",
            "+            _properties[index].getProperty().set(bean, null);\n",
            "+            return;\n",
            "+        }\n",
            "         TokenBuffer merged = new TokenBuffer(p);\n",
            "         merged.writeStartArray();\n",
            "         merged.writeString(typeId);\n"
          ],
          "changed_lines": 4
        }
      ]
    }
  ]
}
