{
  "bug_id": "11",
  "failed_tests": {
    "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest": [
      {
        "methodName": "testUnivariateDistribution",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<0.3978987634740723> but was:<0.9973842909648224>",
        "fail_line": "            Assert.assertEquals(uni.density(v), multi.density(new double[] { v }), tol);",
        "test_source": "  public void testUnivariateDistribution() {\n  final double[] mu = { -1.5 };\n  final double[][] sigma = { { 1 } };\n \n  final MultivariateNormalDistribution multi = new MultivariateNormalDistribution(mu, sigma);\n\n  final NormalDistribution uni = new NormalDistribution(mu[0], sigma[0][0]);\n  final Random rng = new Random();\n  final int numCases = 100;\n  final double tol = Math.ulp(1d);\n  for (int i = 0; i < numCases; i++) {\n  final double v = rng.nextDouble() * 10 - 5;\n  Assert.assertEquals(uni.density(v), multi.density(new double[] { v }), tol);\n  }\n  }",
        "stack": [
          "MultivariateNormalDistributionTest.testUnivariateDistribution line 151"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
      "buggy_full_code": "\npackage org.apache.commons.math3.distribution;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SingularMatrixException;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.random.Well19937c;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n\npublic class MultivariateNormalDistribution extends AbstractMultivariateRealDistribution { private final double[] means; private final RealMatrix covarianceMatrix; private final RealMatrix covarianceMatrixInverse; private final double covarianceMatrixDeterminant; private final RealMatrix samplingMatrix; public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException {\n        this(new Well19937c(), means, covariances);\n    }\n\n    \n    public MultivariateNormalDistribution(RandomGenerator rng, final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException {\n        super(rng, means.length);\n\n        final int dim = means.length;\n\n        if (covariances.length != dim) {\n            throw new DimensionMismatchException(covariances.length, dim);\n        }\n\n        for (int i = 0; i < dim; i++) {\n            if (dim != covariances[i].length) {\n                throw new DimensionMismatchException(covariances[i].length, dim);\n            }\n        }\n\n        this.means = MathArrays.copyOf(means);\n\n        covarianceMatrix = new Array2DRowRealMatrix(covariances);\n\n        \n        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);\n\n        \n        covarianceMatrixInverse = covMatDec.getSolver().getInverse();\n        \n        covarianceMatrixDeterminant = covMatDec.getDeterminant();\n\n        \n        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();\n\n        for (int i = 0; i < covMatEigenvalues.length; i++) {\n            if (covMatEigenvalues[i] < 0) {\n                throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);\n            }\n        }\n\n        \n        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);\n        for (int v = 0; v < dim; v++) {\n            final double[] evec = covMatDec.getEigenvector(v).toArray();\n            covMatEigenvectors.setColumn(v, evec);\n        }\n\n        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();\n\n        \n        for (int row = 0; row < dim; row++) {\n            final double factor = FastMath.sqrt(covMatEigenvalues[row]);\n            for (int col = 0; col < dim; col++) {\n                tmpMatrix.multiplyEntry(row, col, factor);\n            }\n        }\n\n        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);\n    }\n\n    \n    public double[] getMeans() {\n        return MathArrays.copyOf(means);\n    }\n\n    \n    public RealMatrix getCovariances() {\n        return covarianceMatrix.copy();\n    }\n\n    \n    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n            getExponentTerm(vals);\n    }\n\n    \n    public double[] getStandardDeviations() {\n        final int dim = getDimension();\n        final double[] std = new double[dim];\n        final double[][] s = covarianceMatrix.getData();\n        for (int i = 0; i < dim; i++) {\n            std[i] = FastMath.sqrt(s[i][i]);\n        }\n        return std;\n    }\n\n    \n    public double[] sample() {\n        final int dim = getDimension();\n        final double[] normalVals = new double[dim];\n\n        for (int i = 0; i < dim; i++) {\n            normalVals[i] = random.nextGaussian();\n        }\n\n        final double[] vals = samplingMatrix.operate(normalVals);\n\n        for (int i = 0; i < dim; i++) {\n            vals[i] += means[i];\n        }\n\n        return vals;\n    }\n\n    \n    private double getExponentTerm(final double[] values) {\n        final double[] centered = new double[values.length];\n        for (int i = 0; i < centered.length; i++) {\n            centered[i] = values[i] - getMeans()[i];\n        }\n        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);\n        double sum = 0;\n        for (int i = 0; i < preMultiplied.length; i++) {\n            sum += preMultiplied[i] * centered[i];\n        }\n        return FastMath.exp(-0.5 * sum);\n    }\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.math3.distribution;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SingularMatrixException;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.random.Well19937c;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n\npublic class MultivariateNormalDistribution extends AbstractMultivariateRealDistribution { private final double[] means; private final RealMatrix covarianceMatrix; private final RealMatrix covarianceMatrixInverse; private final double covarianceMatrixDeterminant; private final RealMatrix samplingMatrix; public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException {\n        this(new Well19937c(), means, covariances);\n    }\n\n    \n    public MultivariateNormalDistribution(RandomGenerator rng, final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException {\n        super(rng, means.length);\n\n        final int dim = means.length;\n\n        if (covariances.length != dim) {\n            throw new DimensionMismatchException(covariances.length, dim);\n        }\n\n        for (int i = 0; i < dim; i++) {\n            if (dim != covariances[i].length) {\n                throw new DimensionMismatchException(covariances[i].length, dim);\n            }\n        }\n\n        this.means = MathArrays.copyOf(means);\n\n        covarianceMatrix = new Array2DRowRealMatrix(covariances);\n\n        \n        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);\n\n        \n        covarianceMatrixInverse = covMatDec.getSolver().getInverse();\n        \n        covarianceMatrixDeterminant = covMatDec.getDeterminant();\n\n        \n        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();\n\n        for (int i = 0; i < covMatEigenvalues.length; i++) {\n            if (covMatEigenvalues[i] < 0) {\n                throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);\n            }\n        }\n\n        \n        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);\n        for (int v = 0; v < dim; v++) {\n            final double[] evec = covMatDec.getEigenvector(v).toArray();\n            covMatEigenvectors.setColumn(v, evec);\n        }\n\n        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();\n\n        \n        for (int row = 0; row < dim; row++) {\n            final double factor = FastMath.sqrt(covMatEigenvalues[row]);\n            for (int col = 0; col < dim; col++) {\n                tmpMatrix.multiplyEntry(row, col, factor);\n            }\n        }\n\n        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);\n    }\n\n    \n    public double[] getMeans() {\n        return MathArrays.copyOf(means);\n    }\n\n    \n    public RealMatrix getCovariances() {\n        return covarianceMatrix.copy();\n    }\n\n    \n    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *\n            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n            getExponentTerm(vals);\n    }\n\n    \n    public double[] getStandardDeviations() {\n        final int dim = getDimension();\n        final double[] std = new double[dim];\n        final double[][] s = covarianceMatrix.getData();\n        for (int i = 0; i < dim; i++) {\n            std[i] = FastMath.sqrt(s[i][i]);\n        }\n        return std;\n    }\n\n    \n    public double[] sample() {\n        final int dim = getDimension();\n        final double[] normalVals = new double[dim];\n\n        for (int i = 0; i < dim; i++) {\n            normalVals[i] = random.nextGaussian();\n        }\n\n        final double[] vals = samplingMatrix.operate(normalVals);\n\n        for (int i = 0; i < dim; i++) {\n            vals[i] += means[i];\n        }\n\n        return vals;\n    }\n\n    \n    private double getExponentTerm(final double[] values) {\n        final double[] centered = new double[values.length];\n        for (int i = 0; i < centered.length; i++) {\n            centered[i] = values[i] - getMeans()[i];\n        }\n        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);\n        double sum = 0;\n        for (int i = 0; i < preMultiplied.length; i++) {\n            sum += preMultiplied[i] * centered[i];\n        }\n        return FastMath.exp(-0.5 * sum);\n    }\n}\n",
      "buggy_signatures": [
        "public class MultivariateNormalDistribution extends AbstractMultivariateRealDistribution { private final double[] means; private final RealMatrix covarianceMatrix; private final RealMatrix covarianceMatrixInverse; private final double covarianceMatrixDeterminant; private final RealMatrix samplingMatrix; public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException",
        "public MultivariateNormalDistribution(RandomGenerator rng, final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException",
        "public double[] getMeans()",
        "public RealMatrix getCovariances()",
        "public double density(final double[] vals) throws DimensionMismatchException",
        "public double[] getStandardDeviations()",
        "public double[] sample()",
        "private double getExponentTerm(final double[] values)"
      ],
      "fixed_signatures": [
        "public class MultivariateNormalDistribution extends AbstractMultivariateRealDistribution { private final double[] means; private final RealMatrix covarianceMatrix; private final RealMatrix covarianceMatrixInverse; private final double covarianceMatrixDeterminant; private final RealMatrix samplingMatrix; public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException",
        "public MultivariateNormalDistribution(RandomGenerator rng, final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException",
        "public double[] getMeans()",
        "public RealMatrix getCovariances()",
        "public double density(final double[] vals) throws DimensionMismatchException",
        "public double[] getStandardDeviations()",
        "public double[] sample()",
        "private double getExponentTerm(final double[] values)"
      ],
      "methods": [
        {
          "buggy_method": "  public double density(final double[] vals) throws DimensionMismatchException {\n  final int dim = getDimension();\n  if (vals.length != dim) {\n  throw new DimensionMismatchException(vals.length, dim);\n  }\n\n  return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n  FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n  getExponentTerm(vals);\n  }",
          "fixed_method": "  public double density(final double[] vals) throws DimensionMismatchException {\n  final int dim = getDimension();\n  if (vals.length != dim) {\n  throw new DimensionMismatchException(vals.length, dim);\n  }\n\n  return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *\n  FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n  getExponentTerm(vals);\n  }",
          "diff": [
            "@@ -180,7 +180,7 @@",
            "             throw new DimensionMismatchException(vals.length, dim);\n",
            "         }\n",
            " \n",
            "-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n",
            "+        return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *\n",
            "             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n",
            "             getExponentTerm(vals);\n",
            "     }\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
