{
  "bug_id": "22",
  "failed_tests": {
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest": [
      {
        "methodName": "testSingleMatchFilteringWithPath",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<1> but was:<0>",
        "fail_line": "        assertEquals(1, p.getMatchCount());",
        "test_source": "  public void testSingleMatchFilteringWithPath() throws Exception {\n  String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n  JsonParser p0 = JSON_F.createParser(jsonString);\n  FilteringParserDelegate p = new FilteringParserDelegate(p0,\n  new NameMatchFilter(\"a\"),\n  true, // includePath\n  false // multipleMatches\n  );\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"{'a':123}\"), result);\n  assertEquals(1, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testSingleMatchFilteringWithPath line 105"
        ]
      },
      {
        "methodName": "testAllowMultipleMatchesWithPath1",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<3> but was:<0>",
        "fail_line": "        assertEquals(3, p.getMatchCount());",
        "test_source": "  public void testAllowMultipleMatchesWithPath1() throws Exception {\n  String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n  JsonParser p0 = JSON_F.createParser(jsonString);\n  FilteringParserDelegate p = new FilteringParserDelegate(p0,\n  new NameMatchFilter(\"value\"),\n  true, // includePath\n  true // multipleMatches - true\n  );\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"{\\\"ob\\\":{\\\"value\\\":3,\\\"value\\\":{\\\"value0\\\":2}},\\\"value\\\":\\\"val\\\"}\"), result);\n  assertEquals(3, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testAllowMultipleMatchesWithPath1 line 166"
        ]
      },
      {
        "methodName": "testAllowMultipleMatchesWithPath2",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<2> but was:<0>",
        "fail_line": "        assertEquals(2, p.getMatchCount());",
        "test_source": "  public void testAllowMultipleMatchesWithPath2() throws Exception {\n  String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'array':[3,4],'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n  JsonParser p0 = JSON_F.createParser(jsonString);\n  FilteringParserDelegate p = new FilteringParserDelegate(p0,\n  new IndexMatchFilter(1),\n  true, // includePath\n  true // multipleMatches - true\n  );\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"{\\\"array\\\":[2],\\\"ob\\\":{\\\"array\\\":[4]}}\"), result);\n  assertEquals(2, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testAllowMultipleMatchesWithPath2 line 182"
        ]
      },
      {
        "methodName": "testMultipleMatchFilteringWithPath1",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<2> but was:<0>",
        "fail_line": "        assertEquals(2, p.getMatchCount());",
        "test_source": "  public void testMultipleMatchFilteringWithPath1() throws Exception {\n  JsonParser p0 = JSON_F.createParser(SIMPLE);\n  FilteringParserDelegate p = new FilteringParserDelegate(p0,\n  new NameMatchFilter(\"value0\", \"value2\"),\n  true, /* includePath */ true /* multipleMatches */ );\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"{'ob':{'value0':2,'value2':4}}\"), result);\n  assertEquals(2, p.getMatchCount());\n\n  }",
        "stack": [
          "BasicParserFilteringTest.testMultipleMatchFilteringWithPath1 line 194"
        ]
      },
      {
        "methodName": "testMultipleMatchFilteringWithPath2",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<2> but was:<0>",
        "fail_line": "        assertEquals(2, p.getMatchCount());",
        "test_source": "  public void testMultipleMatchFilteringWithPath2() throws Exception {\n  String INPUT = aposToQuotes(\"{'a':123,'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n  JsonParser p0 = JSON_F.createParser(INPUT);\n  FilteringParserDelegate p = new FilteringParserDelegate(p0,\n  new NameMatchFilter(\"b\", \"value\"),\n  true, true);\n\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"{'ob':{'value':3},'b':true}\"), result);\n  assertEquals(2, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testMultipleMatchFilteringWithPath2 line 209"
        ]
      },
      {
        "methodName": "testMultipleMatchFilteringWithPath3",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<2> but was:<0>",
        "fail_line": "        assertEquals(2, p.getMatchCount());",
        "test_source": "  public void testMultipleMatchFilteringWithPath3() throws Exception {\n  final String JSON = aposToQuotes(\"{'root':{'a0':true,'a':{'value':3},'b':{'value':\\\"foo\\\"}},'b0':false}\");\n  JsonParser p0 = JSON_F.createParser(JSON);\n  FilteringParserDelegate p = new FilteringParserDelegate(p0,\n  new NameMatchFilter(\"value\"),\n  true, true);\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"{'root':{'a':{'value':3},'b':{'value':\\\"foo\\\"}}}\"), result);\n  assertEquals(2, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testMultipleMatchFilteringWithPath3 line 222"
        ]
      },
      {
        "methodName": "testSingleMatchFilteringWithoutPath",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<1> but was:<0>",
        "fail_line": "        assertEquals(1, p.getMatchCount());",
        "test_source": "  public void testSingleMatchFilteringWithoutPath() throws Exception {\n  JsonParser p0 = JSON_F.createParser(SIMPLE);\n  FilteringParserDelegate p = new FilteringParserDelegate(p0,\n  new NameMatchFilter(\"value\"),\n  false, // includePath\n  false // multipleMatches\n  );\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"3\"), result);\n  assertEquals(1, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testSingleMatchFilteringWithoutPath line 91"
        ]
      },
      {
        "methodName": "testNotAllowMultipleMatchesWithoutPath1",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<1> but was:<0>",
        "fail_line": "        assertEquals(1, p.getMatchCount());",
        "test_source": "  public void testNotAllowMultipleMatchesWithoutPath1() throws Exception {\n  String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'b':true}\");\n  JsonParser p0 = JSON_F.createParser(jsonString);\n  FilteringParserDelegate p = new FilteringParserDelegate(p0,\n  new NameMatchFilter(\"value\"),\n  false, // includePath\n  false // multipleMatches -false\n  );\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"3\"), result);\n  assertEquals(1, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testNotAllowMultipleMatchesWithoutPath1 line 120"
        ]
      },
      {
        "methodName": "testNotAllowMultipleMatchesWithoutPath2",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<2[]> but was:<2[ 4]>",
        "fail_line": "        assertEquals(aposToQuotes(\"2\"), result);",
        "test_source": "  public void testNotAllowMultipleMatchesWithoutPath2() throws Exception {\n  String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'array':[3,4],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n  JsonParser p0 = JSON_F.createParser(jsonString);\n  FilteringParserDelegate p = new FilteringParserDelegate(p0,\n  new IndexMatchFilter(1),\n  false, // includePath\n  false // multipleMatches -false\n  );\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"2\"), result);\n  assertEquals(1, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testNotAllowMultipleMatchesWithoutPath2 line 134"
        ]
      },
      {
        "methodName": "testIndexMatchWithPath1",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<1> but was:<0>",
        "fail_line": "        assertEquals(1, p.getMatchCount());",
        "test_source": "  public void testIndexMatchWithPath1() throws Exception {\n  FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n  new IndexMatchFilter(1), true, true);\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"{'array':[2]}\"), result);\n  assertEquals(1, p.getMatchCount());\n\n  p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n  new IndexMatchFilter(0), true, true);\n  result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"{'array':[1]}\"), result);\n  assertEquals(1, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testIndexMatchWithPath1 line 232"
        ]
      },
      {
        "methodName": "testIndexMatchWithPath2",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<2> but was:<0>",
        "fail_line": "        assertEquals(2, p.getMatchCount());",
        "test_source": "  public void testIndexMatchWithPath2() throws Exception {\n  FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n  new IndexMatchFilter(0, 1), true, true);\n  assertEquals(aposToQuotes(\"{'array':[1,2]}\"), readAndWrite(JSON_F, p));\n  assertEquals(2, p.getMatchCount());\n  \n  String JSON = aposToQuotes(\"{'a':123,'array':[1,2,3,4,5],'b':[1,2,3]}\");\n  p = new FilteringParserDelegate(JSON_F.createParser(JSON),\n  new IndexMatchFilter(1, 3), true, true);\n  assertEquals(aposToQuotes(\"{'array':[2,4],'b':[2]}\"), readAndWrite(JSON_F, p));\n  assertEquals(3, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testIndexMatchWithPath2 line 247"
        ]
      },
      {
        "methodName": "testAllowMultipleMatchesWithoutPath",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<3> but was:<0>",
        "fail_line": "        assertEquals(3, p.getMatchCount());",
        "test_source": "  public void testAllowMultipleMatchesWithoutPath() throws Exception {\n  String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n  JsonParser p0 = JSON_F.createParser(jsonString);\n  FilteringParserDelegate p = new FilteringParserDelegate(p0,\n  new NameMatchFilter(\"value\"),\n  false, // includePath\n  true // multipleMatches - true\n  );\n  String result = readAndWrite(JSON_F, p);\n  assertEquals(aposToQuotes(\"3 {\\\"value0\\\":2} \\\"val\\\"\"), result);\n  assertEquals(3, p.getMatchCount());\n  }",
        "stack": [
          "BasicParserFilteringTest.testAllowMultipleMatchesWithoutPath line 150"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
      "buggy_full_code": "package com.fasterxml.jackson.core.filter;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.JsonParserDelegate;\n\nimport static com.fasterxml.jackson.core.JsonTokenId.*; public class FilteringParserDelegate extends JsonParserDelegate { protected TokenFilter rootFilter; protected boolean _allowMultipleMatches; protected boolean _includePath; @Deprecated protected boolean _includeImmediateParent; protected JsonToken _currToken; protected JsonToken _lastClearedToken; protected TokenFilterContext _headContext; protected TokenFilterContext _exposedContext; protected TokenFilter _itemFilter; protected int _matchCount; public FilteringParserDelegate(JsonParser p, TokenFilter f, boolean includePath, boolean allowMultipleMatches) {\n        super(p);\n        rootFilter = f;\n        \n        _itemFilter = f;\n        _headContext = TokenFilterContext.createRootContext(f);\n        _includePath = includePath;\n        _allowMultipleMatches = allowMultipleMatches;\n    }\n\n    \n\n    public TokenFilter getFilter() { return rootFilter; }\n\n    \n    public int getMatchCount() {\n        return _matchCount;\n    }\n\n    \n\n    @Override public JsonToken getCurrentToken() { return _currToken; }\n    @Override public JsonToken currentToken() { return _currToken; }\n\n    @Override public final int getCurrentTokenId() {\n        final JsonToken t = _currToken;\n        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();\n    }\n    @Override public final int currentTokenId() {\n        final JsonToken t = _currToken;\n        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();\n    }\n\n    @Override public boolean hasCurrentToken() { return _currToken != null; }\n    @Override public boolean hasTokenId(int id) {\n        final JsonToken t = _currToken;\n        if (t == null) {\n            return (JsonTokenId.ID_NO_TOKEN == id);\n        }\n        return t.id() == id;\n    }\n\n    @Override public final boolean hasToken(JsonToken t) {\n        return (_currToken == t);\n    }\n    \n    @Override public boolean isExpectedStartArrayToken() { return _currToken == JsonToken.START_ARRAY; }\n    @Override public boolean isExpectedStartObjectToken() { return _currToken == JsonToken.START_OBJECT; }\n\n    @Override public JsonLocation getCurrentLocation() { return delegate.getCurrentLocation(); }\n\n    @Override\n    public JsonStreamContext getParsingContext() {\n        return _filterContext();\n    }\n    \n    \n    @Override\n    public String getCurrentName() throws IOException {\n        JsonStreamContext ctxt = _filterContext();\n        if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n            JsonStreamContext parent = ctxt.getParent();\n            return (parent == null) ? null : parent.getCurrentName();\n        }\n        return ctxt.getCurrentName();\n    }\n\n    \n\n    @Override\n    public void clearCurrentToken() {\n        if (_currToken != null) {\n            _lastClearedToken = _currToken;\n            _currToken = null;\n        }\n    }\n\n    @Override\n    public JsonToken getLastClearedToken() { return _lastClearedToken; }\n\n    @Override\n    public void overrideCurrentName(String name) {\n        \n        throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");\n    }\n\n    \n\n    @Override\n    public JsonToken nextToken() throws IOException {\n        \n        \n        \n        \n        \n        \n        \n\n        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n            \n            \n            if (_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath\n                    && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                return (_currToken = null);\n            }\n        }\n        \n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                \n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n\n\n                        _currToken = t;\n                        return t;\n                    }\n\n                    \n                    \n                    \n                    break;\n                }\n                \n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { \n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        \n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            \n            _currToken = t;\n            return t;\n        }\n\n        \n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { \n                delegate.skipChildren();\n                break;\n            }\n            \n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            \n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { \n                delegate.skipChildren();\n                break;\n            }\n            \n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            \n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            \n            \n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                \n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        \n                        \n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); \n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: \n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                }\n            }\n            \n            break;\n        }\n\n        \n        return _nextToken2();\n    }\n\n    \n    protected final JsonToken _nextToken2() throws IOException {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { \n                _currToken = t;\n                return t;\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { \n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                \n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                \n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { \n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                \n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { \n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { \n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: \n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                            return (_currToken = t);\n                    }\n                }\n                \n                break;\n            }\n        }\n    }\n\n    \n    protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { \n                return t;\n            }\n            TokenFilter f;\n\n            \n            \n            \n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { \n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                \n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    \n                    \n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    \n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { \n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { \n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: \n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                            return _nextBuffered(buffRoot);\n                    }\n                }\n                \n                continue main_loop;\n            }\n        }\n    }\n\n    private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException {\n        _exposedContext = buffRoot;\n        TokenFilterContext ctxt = buffRoot;\n        JsonToken t = ctxt.nextTokenToRead();\n        if (t != null) {\n            return t;\n        }\n        while (true) {\n            \n            if (ctxt == _headContext) {\n                throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n                \n            }\n            \n            ctxt = _exposedContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { \n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n            t = _exposedContext.nextTokenToRead();\n            if (t != null) {\n                return t;\n            }\n        }\n    }\n\n\n    @Override\n    public JsonToken nextValue() throws IOException {\n        \n        JsonToken t = nextToken();\n        if (t == JsonToken.FIELD_NAME) {\n            t = nextToken();\n        }\n        return t;\n    }\n\n    \n    @Override\n    public JsonParser skipChildren() throws IOException {\n        if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY)) {\n            return this;\n        }\n        int open = 1;\n\n        \n        \n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) { \n                return this;\n            }\n            if (t.isStructStart()) {\n                ++open;\n            } else if (t.isStructEnd()) {\n                if (--open == 0) {\n                    return this;\n                }\n            }\n        }\n    }\n    \n    \n\n    @Override public String getText() throws IOException { return delegate.getText();  }\n    @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n    @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n    @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n    @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n    \n    \n    @Override\n    public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n    @Override\n    public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n    \n    @Override\n    public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n    @Override\n    public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n    @Override\n    public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n    @Override\n    public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n    @Override\n    public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n    @Override\n    public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n    @Override\n    public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n    @Override\n    public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n    @Override\n    public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n    \n    \n    @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n    @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n    @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n    @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n    @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n    @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n    @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n    @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n    @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n    @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n    \n    \n\n    @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n    @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n    @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n    @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n    \n\n    protected JsonStreamContext _filterContext() {\n        if (_exposedContext != null) {\n            return _exposedContext;\n        }\n        return _headContext;\n    }\n  \n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.core.filter;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.JsonParserDelegate;\n\nimport static com.fasterxml.jackson.core.JsonTokenId.*; public class FilteringParserDelegate extends JsonParserDelegate { protected TokenFilter rootFilter; protected boolean _allowMultipleMatches; protected boolean _includePath; @Deprecated protected boolean _includeImmediateParent; protected JsonToken _currToken; protected JsonToken _lastClearedToken; protected TokenFilterContext _headContext; protected TokenFilterContext _exposedContext; protected TokenFilter _itemFilter; protected int _matchCount; public FilteringParserDelegate(JsonParser p, TokenFilter f, boolean includePath, boolean allowMultipleMatches) {\n        super(p);\n        rootFilter = f;\n        \n        _itemFilter = f;\n        _headContext = TokenFilterContext.createRootContext(f);\n        _includePath = includePath;\n        _allowMultipleMatches = allowMultipleMatches;\n    }\n\n    \n\n    public TokenFilter getFilter() { return rootFilter; }\n\n    \n    public int getMatchCount() {\n        return _matchCount;\n    }\n\n    \n\n    @Override public JsonToken getCurrentToken() { return _currToken; }\n    @Override public JsonToken currentToken() { return _currToken; }\n\n    @Override public final int getCurrentTokenId() {\n        final JsonToken t = _currToken;\n        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();\n    }\n    @Override public final int currentTokenId() {\n        final JsonToken t = _currToken;\n        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();\n    }\n\n    @Override public boolean hasCurrentToken() { return _currToken != null; }\n    @Override public boolean hasTokenId(int id) {\n        final JsonToken t = _currToken;\n        if (t == null) {\n            return (JsonTokenId.ID_NO_TOKEN == id);\n        }\n        return t.id() == id;\n    }\n\n    @Override public final boolean hasToken(JsonToken t) {\n        return (_currToken == t);\n    }\n    \n    @Override public boolean isExpectedStartArrayToken() { return _currToken == JsonToken.START_ARRAY; }\n    @Override public boolean isExpectedStartObjectToken() { return _currToken == JsonToken.START_OBJECT; }\n\n    @Override public JsonLocation getCurrentLocation() { return delegate.getCurrentLocation(); }\n\n    @Override\n    public JsonStreamContext getParsingContext() {\n        return _filterContext();\n    }\n    \n    \n    @Override\n    public String getCurrentName() throws IOException {\n        JsonStreamContext ctxt = _filterContext();\n        if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n            JsonStreamContext parent = ctxt.getParent();\n            return (parent == null) ? null : parent.getCurrentName();\n        }\n        return ctxt.getCurrentName();\n    }\n\n    \n\n    @Override\n    public void clearCurrentToken() {\n        if (_currToken != null) {\n            _lastClearedToken = _currToken;\n            _currToken = null;\n        }\n    }\n\n    @Override\n    public JsonToken getLastClearedToken() { return _lastClearedToken; }\n\n    @Override\n    public void overrideCurrentName(String name) {\n        \n        throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");\n    }\n\n    \n\n    @Override\n    public JsonToken nextToken() throws IOException {\n        \n        \n        \n        \n        \n        \n        \n\n        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n            \n            \n            if (_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath\n                    && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                return (_currToken = null);\n            }\n        }\n        \n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                \n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n\n\n                        _currToken = t;\n                        return t;\n                    }\n\n                    \n                    \n                    \n                    break;\n                }\n                \n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { \n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        \n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            \n            _currToken = t;\n            return t;\n        }\n\n        \n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { \n                delegate.skipChildren();\n                break;\n            }\n            \n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            \n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { \n                delegate.skipChildren();\n                break;\n            }\n            \n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            \n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            \n            \n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                \n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        \n                        \n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); \n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_verifyAllowedMatches() && _includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: \n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    if (_verifyAllowedMatches()) {\n                        return (_currToken = t);\n                    }\n                }\n            }\n            \n            break;\n        }\n\n        \n        return _nextToken2();\n    }\n\n    \n    protected final JsonToken _nextToken2() throws IOException {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { \n                _currToken = t;\n                return t;\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { \n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                \n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                \n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { \n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                \n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { \n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { \n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_verifyAllowedMatches() && _includePath) {\n                            return (_currToken = t);\n                        }\n\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: \n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        if (_verifyAllowedMatches()) {\n                            return (_currToken = t);\n                        }\n                    }\n                }\n                \n                break;\n            }\n        }\n    }\n\n    \n    protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { \n                return t;\n            }\n            TokenFilter f;\n\n            \n            \n            \n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { \n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                \n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    \n                    \n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    \n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { \n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { \n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL && _verifyAllowedMatches()) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: \n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        if (_verifyAllowedMatches()) {\n                            return _nextBuffered(buffRoot);\n                        }\n                    }\n                }\n                \n                continue main_loop;\n            }\n        }\n    }\n\n    private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException {\n        _exposedContext = buffRoot;\n        TokenFilterContext ctxt = buffRoot;\n        JsonToken t = ctxt.nextTokenToRead();\n        if (t != null) {\n            return t;\n        }\n        while (true) {\n            \n            if (ctxt == _headContext) {\n                throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n                \n            }\n            \n            ctxt = _exposedContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { \n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n            t = _exposedContext.nextTokenToRead();\n            if (t != null) {\n                return t;\n            }\n        }\n    }\n\n    private final boolean _verifyAllowedMatches() throws IOException {\n        if (_matchCount == 0 || _allowMultipleMatches) {\n            ++_matchCount;\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public JsonToken nextValue() throws IOException {\n        \n        JsonToken t = nextToken();\n        if (t == JsonToken.FIELD_NAME) {\n            t = nextToken();\n        }\n        return t;\n    }\n\n    \n    @Override\n    public JsonParser skipChildren() throws IOException {\n        if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY)) {\n            return this;\n        }\n        int open = 1;\n\n        \n        \n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) { \n                return this;\n            }\n            if (t.isStructStart()) {\n                ++open;\n            } else if (t.isStructEnd()) {\n                if (--open == 0) {\n                    return this;\n                }\n            }\n        }\n    }\n    \n    \n\n    @Override public String getText() throws IOException { return delegate.getText();  }\n    @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n    @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n    @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n    @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n    \n    \n    @Override\n    public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n    @Override\n    public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n    \n    @Override\n    public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n    @Override\n    public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n    @Override\n    public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n    @Override\n    public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n    @Override\n    public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n    @Override\n    public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n    @Override\n    public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n    @Override\n    public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n    @Override\n    public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n    \n    \n    @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n    @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n    @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n    @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n    @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n    @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n    @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n    @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n    @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n    @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n    \n    \n\n    @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n    @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n    @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n    @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n    \n\n    protected JsonStreamContext _filterContext() {\n        if (_exposedContext != null) {\n            return _exposedContext;\n        }\n        return _headContext;\n    }\n  \n}\n",
      "buggy_signatures": [
        "static com.fasterxml.jackson.core.JsonTokenId.*; public class FilteringParserDelegate extends JsonParserDelegate { protected TokenFilter rootFilter; protected boolean _allowMultipleMatches; protected boolean _includePath; @Deprecated protected boolean _includeImmediateParent; protected JsonToken _currToken; protected JsonToken _lastClearedToken; protected TokenFilterContext _headContext; protected TokenFilterContext _exposedContext; protected TokenFilter _itemFilter; protected int _matchCount; public FilteringParserDelegate(JsonParser p, TokenFilter f, boolean includePath, boolean allowMultipleMatches)",
        "public TokenFilter getFilter()",
        "public int getMatchCount()",
        "public JsonToken getCurrentToken()",
        "public JsonToken currentToken()",
        "public final int getCurrentTokenId()",
        "public final int currentTokenId()",
        "public boolean hasCurrentToken()",
        "public boolean hasTokenId(int id)",
        "public final boolean hasToken(JsonToken t)",
        "public boolean isExpectedStartArrayToken()",
        "public boolean isExpectedStartObjectToken()",
        "public JsonLocation getCurrentLocation()",
        "public JsonStreamContext getParsingContext()",
        "public String getCurrentName() throws IOException",
        "public void clearCurrentToken()",
        "public JsonToken getLastClearedToken()",
        "public void overrideCurrentName(String name)",
        "public JsonToken nextToken() throws IOException",
        "protected final JsonToken _nextToken2() throws IOException",
        "protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException",
        "private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException",
        "public JsonToken nextValue() throws IOException",
        "public JsonParser skipChildren() throws IOException",
        "public String getText() throws IOException",
        "public boolean hasTextCharacters()",
        "public char[] getTextCharacters() throws IOException",
        "public int getTextLength() throws IOException",
        "public int getTextOffset() throws IOException",
        "public BigInteger getBigIntegerValue() throws IOException",
        "public boolean getBooleanValue() throws IOException",
        "public byte getByteValue() throws IOException",
        "public short getShortValue() throws IOException",
        "public BigDecimal getDecimalValue() throws IOException",
        "public double getDoubleValue() throws IOException",
        "public float getFloatValue() throws IOException",
        "public int getIntValue() throws IOException",
        "public long getLongValue() throws IOException",
        "public NumberType getNumberType() throws IOException",
        "public Number getNumberValue() throws IOException",
        "public int getValueAsInt() throws IOException",
        "public int getValueAsInt(int defaultValue) throws IOException",
        "public long getValueAsLong() throws IOException",
        "public long getValueAsLong(long defaultValue) throws IOException",
        "public double getValueAsDouble() throws IOException",
        "public double getValueAsDouble(double defaultValue) throws IOException",
        "public boolean getValueAsBoolean() throws IOException",
        "public boolean getValueAsBoolean(boolean defaultValue) throws IOException",
        "public String getValueAsString() throws IOException",
        "public String getValueAsString(String defaultValue) throws IOException",
        "public Object getEmbeddedObject() throws IOException",
        "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
        "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
        "public JsonLocation getTokenLocation()",
        "protected JsonStreamContext _filterContext()"
      ],
      "fixed_signatures": [
        "static com.fasterxml.jackson.core.JsonTokenId.*; public class FilteringParserDelegate extends JsonParserDelegate { protected TokenFilter rootFilter; protected boolean _allowMultipleMatches; protected boolean _includePath; @Deprecated protected boolean _includeImmediateParent; protected JsonToken _currToken; protected JsonToken _lastClearedToken; protected TokenFilterContext _headContext; protected TokenFilterContext _exposedContext; protected TokenFilter _itemFilter; protected int _matchCount; public FilteringParserDelegate(JsonParser p, TokenFilter f, boolean includePath, boolean allowMultipleMatches)",
        "public TokenFilter getFilter()",
        "public int getMatchCount()",
        "public JsonToken getCurrentToken()",
        "public JsonToken currentToken()",
        "public final int getCurrentTokenId()",
        "public final int currentTokenId()",
        "public boolean hasCurrentToken()",
        "public boolean hasTokenId(int id)",
        "public final boolean hasToken(JsonToken t)",
        "public boolean isExpectedStartArrayToken()",
        "public boolean isExpectedStartObjectToken()",
        "public JsonLocation getCurrentLocation()",
        "public JsonStreamContext getParsingContext()",
        "public String getCurrentName() throws IOException",
        "public void clearCurrentToken()",
        "public JsonToken getLastClearedToken()",
        "public void overrideCurrentName(String name)",
        "public JsonToken nextToken() throws IOException",
        "protected final JsonToken _nextToken2() throws IOException",
        "protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException",
        "private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException",
        "private final boolean _verifyAllowedMatches() throws IOException",
        "public JsonToken nextValue() throws IOException",
        "public JsonParser skipChildren() throws IOException",
        "public String getText() throws IOException",
        "public boolean hasTextCharacters()",
        "public char[] getTextCharacters() throws IOException",
        "public int getTextLength() throws IOException",
        "public int getTextOffset() throws IOException",
        "public BigInteger getBigIntegerValue() throws IOException",
        "public boolean getBooleanValue() throws IOException",
        "public byte getByteValue() throws IOException",
        "public short getShortValue() throws IOException",
        "public BigDecimal getDecimalValue() throws IOException",
        "public double getDoubleValue() throws IOException",
        "public float getFloatValue() throws IOException",
        "public int getIntValue() throws IOException",
        "public long getLongValue() throws IOException",
        "public NumberType getNumberType() throws IOException",
        "public Number getNumberValue() throws IOException",
        "public int getValueAsInt() throws IOException",
        "public int getValueAsInt(int defaultValue) throws IOException",
        "public long getValueAsLong() throws IOException",
        "public long getValueAsLong(long defaultValue) throws IOException",
        "public double getValueAsDouble() throws IOException",
        "public double getValueAsDouble(double defaultValue) throws IOException",
        "public boolean getValueAsBoolean() throws IOException",
        "public boolean getValueAsBoolean(boolean defaultValue) throws IOException",
        "public String getValueAsString() throws IOException",
        "public String getValueAsString(String defaultValue) throws IOException",
        "public Object getEmbeddedObject() throws IOException",
        "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
        "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
        "public JsonLocation getTokenLocation()",
        "protected JsonStreamContext _filterContext()"
      ],
      "methods": [
        {
          "buggy_method": "  public JsonToken nextToken() throws IOException {\n  \n  \n  \n  \n  \n  \n  \n\n  if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n  \n  \n  if (_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath\n  && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n  return (_currToken = null);\n  }\n  }\n  \n  TokenFilterContext ctxt = _exposedContext;\n\n  if (ctxt != null) {\n  while (true) {\n  JsonToken t = ctxt.nextTokenToRead();\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  \n  if (ctxt == _headContext) {\n  _exposedContext = null;\n  if (ctxt.inArray()) {\n  t = delegate.getCurrentToken();\n\n\n  _currToken = t;\n  return t;\n  }\n\n  \n  \n  \n  break;\n  }\n  \n  ctxt = _headContext.findChildOf(ctxt);\n  _exposedContext = ctxt;\n  if (ctxt == null) { \n  throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n  }\n  }\n  }\n\n  \n  JsonToken t = delegate.nextToken();\n  if (t == null) {\n  \n  _currToken = t;\n  return t;\n  }\n\n  \n  TokenFilter f;\n  \n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  break;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  break;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  \n  \n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  break;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  break;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  break;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  \n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  \n  \n  break;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  boolean returnEnd = _headContext.isStartHandled();\n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n  if (returnEnd) {\n  return (_currToken = t);\n  }\n  }\n  break;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  \n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  if (!_includePath) {\n  \n  \n  if (_includeImmediateParent && !_headContext.isStartHandled()) {\n  t = _headContext.nextTokenToRead(); \n  _exposedContext = _headContext;\n  }\n  }\n  return (_currToken = t);\n  }\n  if (f == null) {\n  delegate.nextToken();\n  delegate.skipChildren();\n  break;\n  }\n  f = f.includeProperty(name);\n  if (f == null) {\n  delegate.nextToken();\n  delegate.skipChildren();\n  break;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  if (_includePath) {\n  return (_currToken = t);\n  }\n  }\n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  break;\n  }\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return (_currToken = t);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  return (_currToken = t);\n  }\n  }\n  \n  break;\n  }\n\n  \n  return _nextToken2();\n  }\n\n  \n  protected final JsonToken _nextToken2() throws IOException {\n  main_loop:\n  while (true) {\n  JsonToken t = delegate.nextToken();\n  if (t == null) { \n  _currToken = t;\n  return t;\n  }\n  TokenFilter f;\n\n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  \n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  continue main_loop;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  continue main_loop;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  boolean returnEnd = _headContext.isStartHandled();\n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n  if (returnEnd) {\n  return (_currToken = t);\n  }\n  }\n  continue main_loop;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  f = f.includeProperty(name);\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  if (_includePath) {\n  return (_currToken = t);\n  }\n\n  continue main_loop;\n  }\n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  }\n  continue main_loop;\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return (_currToken = t);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  return (_currToken = t);\n  }\n  }\n  \n  break;\n  }\n  }\n  }\n\n  \n  protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {\n  main_loop:\n  while (true) {\n  JsonToken t = delegate.nextToken();\n  if (t == null) { \n  return t;\n  }\n  TokenFilter f;\n\n  \n  \n  \n\n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _headContext.checkValue(_itemFilter);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  continue main_loop;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return t;\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  continue main_loop;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  \n  \n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  boolean gotEnd = (_headContext == buffRoot);\n  boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n\n  if (returnEnd) {\n  return t;\n  }\n  \n  if (gotEnd || (_headContext == buffRoot)) {\n  return null;\n  }\n  }\n  continue main_loop;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  return _nextBuffered(buffRoot);\n  }\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  f = f.includeProperty(name);\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  continue main_loop;\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return _nextBuffered(buffRoot);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  \n  continue main_loop;\n  }\n  }\n  }\n\n  private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException {\n  _exposedContext = buffRoot;\n  TokenFilterContext ctxt = buffRoot;\n  JsonToken t = ctxt.nextTokenToRead();\n  if (t != null) {\n  return t;\n  }\n  while (true) {\n  \n  if (ctxt == _headContext) {\n  throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n  \n  }\n  \n  ctxt = _exposedContext.findChildOf(ctxt);\n  _exposedContext = ctxt;\n  if (ctxt == null) { \n  throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n  }\n  t = _exposedContext.nextTokenToRead();\n  if (t != null) {\n  return t;\n  }\n  }\n  }\n\n\n  @Override\n  public JsonToken nextValue() throws IOException {\n  \n  JsonToken t = nextToken();\n  if (t == JsonToken.FIELD_NAME) {\n  t = nextToken();\n  }\n  return t;\n  }\n\n  \n  @Override\n  public JsonParser skipChildren() throws IOException {\n  if ((_currToken != JsonToken.START_OBJECT)\n  && (_currToken != JsonToken.START_ARRAY)) {\n  return this;\n  }\n  int open = 1;\n\n  \n  \n  while (true) {\n  JsonToken t = nextToken();\n  if (t == null) { \n  return this;\n  }\n  if (t.isStructStart()) {\n  ++open;\n  } else if (t.isStructEnd()) {\n  if (--open == 0) {\n  return this;\n  }\n  }\n  }\n  }\n  \n  \n\n  @Override public String getText() throws IOException { return delegate.getText();  }\n  @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n  @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n  @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n  @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n  \n  \n  @Override\n  public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n  @Override\n  public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n  \n  @Override\n  public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n  @Override\n  public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n  @Override\n  public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n  @Override\n  public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n  @Override\n  public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n  @Override\n  public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n  @Override\n  public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n  @Override\n  public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n  @Override\n  public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n  \n  \n  @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n  @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n  @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n  @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n  @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n  @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n  @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n  @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n  @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n  @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n  \n  \n\n  @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n  @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n  @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n  @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n  \n\n  protected JsonStreamContext _filterContext() {\n  if (_exposedContext != null) {\n  return _exposedContext;\n  }\n  return _headContext;\n  }\n  \n}",
          "fixed_method": "  public JsonToken nextToken() throws IOException {\n  \n  \n  \n  \n  \n  \n  \n\n  if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n  \n  \n  if (_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath\n  && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n  return (_currToken = null);\n  }\n  }\n  \n  TokenFilterContext ctxt = _exposedContext;\n\n  if (ctxt != null) {\n  while (true) {\n  JsonToken t = ctxt.nextTokenToRead();\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  \n  if (ctxt == _headContext) {\n  _exposedContext = null;\n  if (ctxt.inArray()) {\n  t = delegate.getCurrentToken();\n\n\n  _currToken = t;\n  return t;\n  }\n\n  \n  \n  \n  break;\n  }\n  \n  ctxt = _headContext.findChildOf(ctxt);\n  _exposedContext = ctxt;\n  if (ctxt == null) { \n  throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n  }\n  }\n  }\n\n  \n  JsonToken t = delegate.nextToken();\n  if (t == null) {\n  \n  _currToken = t;\n  return t;\n  }\n\n  \n  TokenFilter f;\n  \n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  break;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  break;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  \n  \n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  break;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  break;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  break;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  \n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  \n  \n  break;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  boolean returnEnd = _headContext.isStartHandled();\n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n  if (returnEnd) {\n  return (_currToken = t);\n  }\n  }\n  break;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  \n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  if (!_includePath) {\n  \n  \n  if (_includeImmediateParent && !_headContext.isStartHandled()) {\n  t = _headContext.nextTokenToRead(); \n  _exposedContext = _headContext;\n  }\n  }\n  return (_currToken = t);\n  }\n  if (f == null) {\n  delegate.nextToken();\n  delegate.skipChildren();\n  break;\n  }\n  f = f.includeProperty(name);\n  if (f == null) {\n  delegate.nextToken();\n  delegate.skipChildren();\n  break;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  if (_verifyAllowedMatches() && _includePath) {\n  return (_currToken = t);\n  }\n  }\n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  break;\n  }\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return (_currToken = t);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  if (_verifyAllowedMatches()) {\n  return (_currToken = t);\n  }\n  }\n  }\n  \n  break;\n  }\n\n  \n  return _nextToken2();\n  }\n\n  \n  protected final JsonToken _nextToken2() throws IOException {\n  main_loop:\n  while (true) {\n  JsonToken t = delegate.nextToken();\n  if (t == null) { \n  _currToken = t;\n  return t;\n  }\n  TokenFilter f;\n\n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  \n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  continue main_loop;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  continue main_loop;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  boolean returnEnd = _headContext.isStartHandled();\n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n  if (returnEnd) {\n  return (_currToken = t);\n  }\n  }\n  continue main_loop;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  f = f.includeProperty(name);\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  if (_verifyAllowedMatches() && _includePath) {\n  return (_currToken = t);\n  }\n\n  continue main_loop;\n  }\n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  }\n  continue main_loop;\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return (_currToken = t);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  if (_verifyAllowedMatches()) {\n  return (_currToken = t);\n  }\n  }\n  }\n  \n  break;\n  }\n  }\n  }\n\n  \n  protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {\n  main_loop:\n  while (true) {\n  JsonToken t = delegate.nextToken();\n  if (t == null) { \n  return t;\n  }\n  TokenFilter f;\n\n  \n  \n  \n\n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _headContext.checkValue(_itemFilter);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  continue main_loop;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return t;\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  continue main_loop;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  \n  \n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  boolean gotEnd = (_headContext == buffRoot);\n  boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n\n  if (returnEnd) {\n  return t;\n  }\n  \n  if (gotEnd || (_headContext == buffRoot)) {\n  return null;\n  }\n  }\n  continue main_loop;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  return _nextBuffered(buffRoot);\n  }\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  f = f.includeProperty(name);\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL && _verifyAllowedMatches()) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  continue main_loop;\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return _nextBuffered(buffRoot);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  if (_verifyAllowedMatches()) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  }\n  \n  continue main_loop;\n  }\n  }\n  }\n\n  private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException {\n  _exposedContext = buffRoot;\n  TokenFilterContext ctxt = buffRoot;\n  JsonToken t = ctxt.nextTokenToRead();\n  if (t != null) {\n  return t;\n  }\n  while (true) {\n  \n  if (ctxt == _headContext) {\n  throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n  \n  }\n  \n  ctxt = _exposedContext.findChildOf(ctxt);\n  _exposedContext = ctxt;\n  if (ctxt == null) { \n  throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n  }\n  t = _exposedContext.nextTokenToRead();\n  if (t != null) {\n  return t;\n  }\n  }\n  }\n\n  private final boolean _verifyAllowedMatches() throws IOException {\n  if (_matchCount == 0 || _allowMultipleMatches) {\n  ++_matchCount;\n  return true;\n  }\n  return false;\n  }\n\n  @Override\n  public JsonToken nextValue() throws IOException {\n  \n  JsonToken t = nextToken();\n  if (t == JsonToken.FIELD_NAME) {\n  t = nextToken();\n  }\n  return t;\n  }\n\n  \n  @Override\n  public JsonParser skipChildren() throws IOException {\n  if ((_currToken != JsonToken.START_OBJECT)\n  && (_currToken != JsonToken.START_ARRAY)) {\n  return this;\n  }\n  int open = 1;\n\n  \n  \n  while (true) {\n  JsonToken t = nextToken();\n  if (t == null) { \n  return this;\n  }\n  if (t.isStructStart()) {\n  ++open;\n  } else if (t.isStructEnd()) {\n  if (--open == 0) {\n  return this;\n  }\n  }\n  }\n  }\n  \n  \n\n  @Override public String getText() throws IOException { return delegate.getText();  }\n  @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n  @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n  @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n  @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n  \n  \n  @Override\n  public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n  @Override\n  public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n  \n  @Override\n  public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n  @Override\n  public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n  @Override\n  public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n  @Override\n  public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n  @Override\n  public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n  @Override\n  public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n  @Override\n  public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n  @Override\n  public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n  @Override\n  public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n  \n  \n  @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n  @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n  @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n  @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n  @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n  @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n  @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n  @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n  @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n  @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n  \n  \n\n  @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n  @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n  @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n  @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n  \n\n  protected JsonStreamContext _filterContext() {\n  if (_exposedContext != null) {\n  return _exposedContext;\n  }\n  return _headContext;\n  }\n  \n}",
          "diff": [
            "@@ -414,7 +414,7 @@",
            "                 }\n",
            "                 _itemFilter = f;\n",
            "                 if (f == TokenFilter.INCLUDE_ALL) {\n",
            "-                    if (_includePath) {\n",
            "+                    if (_verifyAllowedMatches() && _includePath) {\n",
            "                         return (_currToken = t);\n",
            "                     }\n",
            "                 }\n",
            "@@ -437,7 +437,9 @@",
            "                 f = _headContext.checkValue(f);\n",
            "                 if ((f == TokenFilter.INCLUDE_ALL)\n",
            "                         || ((f != null) && f.includeValue(delegate))) {\n",
            "+                    if (_verifyAllowedMatches()) {\n",
            "                         return (_currToken = t);\n",
            "+                    }\n",
            "                 }\n",
            "             }\n",
            "             // Otherwise not included (leaves must be explicitly included)\n"
          ],
          "changed_lines": 4
        },
        {
          "buggy_method": "  protected final JsonToken _nextToken2() throws IOException {\n  main_loop:\n  while (true) {\n  JsonToken t = delegate.nextToken();\n  if (t == null) { \n  _currToken = t;\n  return t;\n  }\n  TokenFilter f;\n\n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  \n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  continue main_loop;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  continue main_loop;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  boolean returnEnd = _headContext.isStartHandled();\n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n  if (returnEnd) {\n  return (_currToken = t);\n  }\n  }\n  continue main_loop;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  f = f.includeProperty(name);\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  if (_includePath) {\n  return (_currToken = t);\n  }\n\n  continue main_loop;\n  }\n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  }\n  continue main_loop;\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return (_currToken = t);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  return (_currToken = t);\n  }\n  }\n  \n  break;\n  }\n  }\n  }\n\n  \n  protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {\n  main_loop:\n  while (true) {\n  JsonToken t = delegate.nextToken();\n  if (t == null) { \n  return t;\n  }\n  TokenFilter f;\n\n  \n  \n  \n\n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _headContext.checkValue(_itemFilter);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  continue main_loop;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return t;\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  continue main_loop;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  \n  \n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  boolean gotEnd = (_headContext == buffRoot);\n  boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n\n  if (returnEnd) {\n  return t;\n  }\n  \n  if (gotEnd || (_headContext == buffRoot)) {\n  return null;\n  }\n  }\n  continue main_loop;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  return _nextBuffered(buffRoot);\n  }\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  f = f.includeProperty(name);\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  continue main_loop;\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return _nextBuffered(buffRoot);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  \n  continue main_loop;\n  }\n  }\n  }\n\n  private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException {\n  _exposedContext = buffRoot;\n  TokenFilterContext ctxt = buffRoot;\n  JsonToken t = ctxt.nextTokenToRead();\n  if (t != null) {\n  return t;\n  }\n  while (true) {\n  \n  if (ctxt == _headContext) {\n  throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n  \n  }\n  \n  ctxt = _exposedContext.findChildOf(ctxt);\n  _exposedContext = ctxt;\n  if (ctxt == null) { \n  throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n  }\n  t = _exposedContext.nextTokenToRead();\n  if (t != null) {\n  return t;\n  }\n  }\n  }\n\n\n  @Override\n  public JsonToken nextValue() throws IOException {\n  \n  JsonToken t = nextToken();\n  if (t == JsonToken.FIELD_NAME) {\n  t = nextToken();\n  }\n  return t;\n  }\n\n  \n  @Override\n  public JsonParser skipChildren() throws IOException {\n  if ((_currToken != JsonToken.START_OBJECT)\n  && (_currToken != JsonToken.START_ARRAY)) {\n  return this;\n  }\n  int open = 1;\n\n  \n  \n  while (true) {\n  JsonToken t = nextToken();\n  if (t == null) { \n  return this;\n  }\n  if (t.isStructStart()) {\n  ++open;\n  } else if (t.isStructEnd()) {\n  if (--open == 0) {\n  return this;\n  }\n  }\n  }\n  }\n  \n  \n\n  @Override public String getText() throws IOException { return delegate.getText();  }\n  @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n  @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n  @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n  @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n  \n  \n  @Override\n  public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n  @Override\n  public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n  \n  @Override\n  public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n  @Override\n  public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n  @Override\n  public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n  @Override\n  public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n  @Override\n  public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n  @Override\n  public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n  @Override\n  public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n  @Override\n  public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n  @Override\n  public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n  \n  \n  @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n  @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n  @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n  @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n  @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n  @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n  @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n  @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n  @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n  @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n  \n  \n\n  @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n  @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n  @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n  @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n  \n\n  protected JsonStreamContext _filterContext() {\n  if (_exposedContext != null) {\n  return _exposedContext;\n  }\n  return _headContext;\n  }\n  \n}",
          "fixed_method": "  protected final JsonToken _nextToken2() throws IOException {\n  main_loop:\n  while (true) {\n  JsonToken t = delegate.nextToken();\n  if (t == null) { \n  _currToken = t;\n  return t;\n  }\n  TokenFilter f;\n\n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  \n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  continue main_loop;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return (_currToken = t);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  continue main_loop;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  boolean returnEnd = _headContext.isStartHandled();\n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n  if (returnEnd) {\n  return (_currToken = t);\n  }\n  }\n  continue main_loop;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  return (_currToken = t);\n  }\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  f = f.includeProperty(name);\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  if (_verifyAllowedMatches() && _includePath) {\n  return (_currToken = t);\n  }\n\n  continue main_loop;\n  }\n  if (_includePath) {\n  t = _nextTokenWithBuffering(_headContext);\n  if (t != null) {\n  _currToken = t;\n  return t;\n  }\n  }\n  }\n  continue main_loop;\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return (_currToken = t);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  if (_verifyAllowedMatches()) {\n  return (_currToken = t);\n  }\n  }\n  }\n  \n  break;\n  }\n  }\n  }\n\n  \n  protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {\n  main_loop:\n  while (true) {\n  JsonToken t = delegate.nextToken();\n  if (t == null) { \n  return t;\n  }\n  TokenFilter f;\n\n  \n  \n  \n\n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _headContext.checkValue(_itemFilter);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  continue main_loop;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return t;\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  continue main_loop;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  \n  \n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  boolean gotEnd = (_headContext == buffRoot);\n  boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n\n  if (returnEnd) {\n  return t;\n  }\n  \n  if (gotEnd || (_headContext == buffRoot)) {\n  return null;\n  }\n  }\n  continue main_loop;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  return _nextBuffered(buffRoot);\n  }\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  f = f.includeProperty(name);\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL && _verifyAllowedMatches()) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  continue main_loop;\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return _nextBuffered(buffRoot);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  if (_verifyAllowedMatches()) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  }\n  \n  continue main_loop;\n  }\n  }\n  }\n\n  private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException {\n  _exposedContext = buffRoot;\n  TokenFilterContext ctxt = buffRoot;\n  JsonToken t = ctxt.nextTokenToRead();\n  if (t != null) {\n  return t;\n  }\n  while (true) {\n  \n  if (ctxt == _headContext) {\n  throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n  \n  }\n  \n  ctxt = _exposedContext.findChildOf(ctxt);\n  _exposedContext = ctxt;\n  if (ctxt == null) { \n  throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n  }\n  t = _exposedContext.nextTokenToRead();\n  if (t != null) {\n  return t;\n  }\n  }\n  }\n\n  private final boolean _verifyAllowedMatches() throws IOException {\n  if (_matchCount == 0 || _allowMultipleMatches) {\n  ++_matchCount;\n  return true;\n  }\n  return false;\n  }\n\n  @Override\n  public JsonToken nextValue() throws IOException {\n  \n  JsonToken t = nextToken();\n  if (t == JsonToken.FIELD_NAME) {\n  t = nextToken();\n  }\n  return t;\n  }\n\n  \n  @Override\n  public JsonParser skipChildren() throws IOException {\n  if ((_currToken != JsonToken.START_OBJECT)\n  && (_currToken != JsonToken.START_ARRAY)) {\n  return this;\n  }\n  int open = 1;\n\n  \n  \n  while (true) {\n  JsonToken t = nextToken();\n  if (t == null) { \n  return this;\n  }\n  if (t.isStructStart()) {\n  ++open;\n  } else if (t.isStructEnd()) {\n  if (--open == 0) {\n  return this;\n  }\n  }\n  }\n  }\n  \n  \n\n  @Override public String getText() throws IOException { return delegate.getText();  }\n  @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n  @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n  @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n  @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n  \n  \n  @Override\n  public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n  @Override\n  public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n  \n  @Override\n  public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n  @Override\n  public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n  @Override\n  public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n  @Override\n  public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n  @Override\n  public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n  @Override\n  public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n  @Override\n  public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n  @Override\n  public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n  @Override\n  public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n  \n  \n  @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n  @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n  @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n  @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n  @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n  @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n  @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n  @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n  @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n  @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n  \n  \n\n  @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n  @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n  @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n  @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n  \n\n  protected JsonStreamContext _filterContext() {\n  if (_exposedContext != null) {\n  return _exposedContext;\n  }\n  return _headContext;\n  }\n  \n}",
          "diff": [
            "@@ -572,7 +574,7 @@",
            "                     }\n",
            "                     _itemFilter = f;\n",
            "                     if (f == TokenFilter.INCLUDE_ALL) {\n",
            "-                        if (_includePath) {\n",
            "+                        if (_verifyAllowedMatches() && _includePath) {\n",
            "                             return (_currToken = t);\n",
            "                         }\n",
            " //                        if (_includeImmediateParent) { ...\n",
            "@@ -597,7 +599,9 @@",
            "                     f = _headContext.checkValue(f);\n",
            "                     if ((f == TokenFilter.INCLUDE_ALL)\n",
            "                             || ((f != null) && f.includeValue(delegate))) {\n",
            "+                        if (_verifyAllowedMatches()) {\n",
            "                             return (_currToken = t);\n",
            "+                        }\n",
            "                     }\n",
            "                 }\n",
            "                 // Otherwise not included (leaves must be explicitly included)\n"
          ],
          "changed_lines": 4
        },
        {
          "buggy_method": "  protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {\n  main_loop:\n  while (true) {\n  JsonToken t = delegate.nextToken();\n  if (t == null) { \n  return t;\n  }\n  TokenFilter f;\n\n  \n  \n  \n\n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _headContext.checkValue(_itemFilter);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  continue main_loop;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return t;\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  continue main_loop;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  \n  \n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  boolean gotEnd = (_headContext == buffRoot);\n  boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n\n  if (returnEnd) {\n  return t;\n  }\n  \n  if (gotEnd || (_headContext == buffRoot)) {\n  return null;\n  }\n  }\n  continue main_loop;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  return _nextBuffered(buffRoot);\n  }\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  f = f.includeProperty(name);\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  continue main_loop;\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return _nextBuffered(buffRoot);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  \n  continue main_loop;\n  }\n  }\n  }",
          "fixed_method": "  protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {\n  main_loop:\n  while (true) {\n  JsonToken t = delegate.nextToken();\n  if (t == null) { \n  return t;\n  }\n  TokenFilter f;\n\n  \n  \n  \n\n  switch (t.id()) {\n  case ID_START_ARRAY:\n  f = _headContext.checkValue(_itemFilter);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartArray();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildArrayContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildArrayContext(f, false);\n  continue main_loop;\n\n  case ID_START_OBJECT:\n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return t;\n  }\n  if (f == null) { \n  delegate.skipChildren();\n  continue main_loop;\n  }\n  \n  f = _headContext.checkValue(f);\n  if (f == null) {\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  if (f != TokenFilter.INCLUDE_ALL) {\n  f = f.filterStartObject();\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _headContext = _headContext.createChildObjectContext(f, true);\n  return _nextBuffered(buffRoot);\n  }\n  _headContext = _headContext.createChildObjectContext(f, false);\n  continue main_loop;\n\n  case ID_END_ARRAY:\n  case ID_END_OBJECT:\n  {\n  \n  \n  f = _headContext.getFilter();\n  if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n  f.filterFinishArray();\n  }\n  boolean gotEnd = (_headContext == buffRoot);\n  boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n  _headContext = _headContext.getParent();\n  _itemFilter = _headContext.getFilter();\n\n  if (returnEnd) {\n  return t;\n  }\n  \n  if (gotEnd || (_headContext == buffRoot)) {\n  return null;\n  }\n  }\n  continue main_loop;\n\n  case ID_FIELD_NAME:\n  {\n  final String name = delegate.getCurrentName();\n  f = _headContext.setFieldName(name);\n  if (f == TokenFilter.INCLUDE_ALL) {\n  _itemFilter = f;\n  return _nextBuffered(buffRoot);\n  }\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  f = f.includeProperty(name);\n  if (f == null) { \n  delegate.nextToken();\n  delegate.skipChildren();\n  continue main_loop;\n  }\n  _itemFilter = f;\n  if (f == TokenFilter.INCLUDE_ALL && _verifyAllowedMatches()) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  continue main_loop;\n\n  default: \n  f = _itemFilter;\n  if (f == TokenFilter.INCLUDE_ALL) {\n  return _nextBuffered(buffRoot);\n  }\n  if (f != null) {\n  f = _headContext.checkValue(f);\n  if ((f == TokenFilter.INCLUDE_ALL)\n  || ((f != null) && f.includeValue(delegate))) {\n  if (_verifyAllowedMatches()) {\n  return _nextBuffered(buffRoot);\n  }\n  }\n  }\n  \n  continue main_loop;\n  }\n  }\n  }",
          "diff": [
            "@@ -714,7 +718,7 @@",
            "                         continue main_loop;\n",
            "                     }\n",
            "                     _itemFilter = f;\n",
            "-                    if (f == TokenFilter.INCLUDE_ALL) {\n",
            "+                    if (f == TokenFilter.INCLUDE_ALL && _verifyAllowedMatches()) {\n",
            "                         return _nextBuffered(buffRoot);\n",
            "                     }\n",
            "                 }\n",
            "@@ -729,7 +733,9 @@",
            "                     f = _headContext.checkValue(f);\n",
            "                     if ((f == TokenFilter.INCLUDE_ALL)\n",
            "                             || ((f != null) && f.includeValue(delegate))) {\n",
            "+                        if (_verifyAllowedMatches()) {\n",
            "                             return _nextBuffered(buffRoot);\n",
            "+                        }\n",
            "                     }\n",
            "                 }\n",
            "                 // Otherwise not included (leaves must be explicitly included)\n"
          ],
          "changed_lines": 4
        },
        {
          "buggy_method": "  public JsonToken nextValue() throws IOException {\n  \n  JsonToken t = nextToken();\n  if (t == JsonToken.FIELD_NAME) {\n  t = nextToken();\n  }\n  return t;\n  }",
          "fixed_method": "  private final boolean _verifyAllowedMatches() throws IOException {\n  if (_matchCount == 0 || _allowMultipleMatches) {\n  ++_matchCount;\n  return true;\n  }\n  return false;\n  }",
          "diff": [
            "@@ -768,6 +774,13 @@",
            "         }\n",
            "     }\n",
            " \n",
            "+    private final boolean _verifyAllowedMatches() throws IOException {\n",
            "+        if (_matchCount == 0 || _allowMultipleMatches) {\n",
            "+            ++_matchCount;\n",
            "+            return true;\n",
            "+        }\n",
            "+        return false;\n",
            "+    }\n",
            " \n",
            "     @Override\n",
            "     public JsonToken nextValue() throws IOException {\n"
          ],
          "changed_lines": 7
        }
      ]
    }
  ]
}
