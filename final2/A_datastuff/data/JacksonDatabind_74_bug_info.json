{
  "bug_id": "74",
  "failed_tests": {
    "com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl": [
      {
        "methodName": "testWithEmptyStringAsNullObject1533",
        "error": "com.fasterxml.jackson.databind.JsonMappingException",
        "message": "Unexpected token (VALUE_STRING), expected FIELD_NAME: missing property 'type' that is to contain type id  (for class com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl$AsProperty)",
        "fail_line": "        AsPropertyWrapper wrapper = mapper.readValue(\"{ \\\"value\\\": \\\"\\\" }\", AsPropertyWrapper.class);",
        "test_source": "  public void testWithEmptyStringAsNullObject1533() throws Exception {\n  ObjectMapper mapper = new ObjectMapper().enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n  AsPropertyWrapper wrapper = mapper.readValue(\"{ \\\"value\\\": \\\"\\\" }\", AsPropertyWrapper.class);\n  assertNull(wrapper.value);\n  }",
        "stack": [
          "JsonMappingException.from line 270, DeserializationContext.wrongTokenException line 1376, DeserializationContext.reportWrongTokenException line 1197, AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl line 157, AsPropertyTypeDeserializer.deserializeTypedFromObject line 88, BeanDeserializerBase.deserializeWithType line 1089, SettableBeanProperty.deserialize line 502, FieldProperty.deserializeAndSet line 108, BeanDeserializer.vanillaDeserialize line 276, BeanDeserializer.deserialize line 140, ObjectMapper._readMapAndClose line 3798, ObjectMapper.readValue line 2842, TestPolymorphicWithDefaultImpl.testWithEmptyStringAsNullObject1533 line 274"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.jsontype.impl;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.As;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.JsonParserSequence;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer { private static final long serialVersionUID = 1L; protected final As _inclusion; public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl) {\n        this(bt, idRes, typePropertyName, typeIdVisible, defaultImpl, As.PROPERTY);\n    }\n    \n    \n    public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl, As inclusion) {\n        super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);\n        _inclusion = inclusion;\n    }\n\n    public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property) {\n        super(src, property);\n        _inclusion = src._inclusion;\n    }\n    \n    @Override\n    public TypeDeserializer forProperty(BeanProperty prop) {\n        return (prop == _property) ? this : new AsPropertyTypeDeserializer(this, prop);\n    }\n    \n    @Override\n    public As getTypeInclusion() { return _inclusion; }\n\n    \n    @Override\n    @SuppressWarnings(\"resource\")\n    public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        \n        \n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        } else if ( t != JsonToken.FIELD_NAME) {\n            \n            return _deserializeTypedUsingDefaultImpl(p, ctxt, null);\n        }\n        \n        TokenBuffer tb = null;\n\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String name = p.getCurrentName();\n            p.nextToken(); \n            if (name.equals(_typePropertyName)) { \n                return _deserializeTypedForId(p, ctxt, tb);\n            }\n            if (tb == null) {\n                tb = new TokenBuffer(p, ctxt);\n            }\n            tb.writeFieldName(name);\n            tb.copyCurrentStructure(p);\n        }\n        return _deserializeTypedUsingDefaultImpl(p, ctxt, tb);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedForId(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException {\n        String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        if (_typeIdVisible) { \n            if (tb == null) {\n                tb = new TokenBuffer(p, ctxt);\n            }\n            tb.writeFieldName(p.getCurrentName());\n            tb.writeString(typeId);\n        }\n        if (tb != null) { \n            \n            \n            p.clearCurrentToken();\n            p = JsonParserSequence.createFlattened(false, tb.asParser(p), p);\n        }\n        \n        p.nextToken(); \n        \n        return deser.deserialize(p, ctxt);\n    }\n    \n    \n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException {\n        \n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                \n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n        \n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n        \n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null;\n    }\n\n    \n    @Override\n    public Object deserializeTypedFromAny(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromArray(p, ctxt);\n        }\n        return deserializeTypedFromObject(p, ctxt);\n    }    \n    \n    \n    \n    \n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.jsontype.impl;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.As;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.JsonParserSequence;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer { private static final long serialVersionUID = 1L; protected final As _inclusion; public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl) {\n        this(bt, idRes, typePropertyName, typeIdVisible, defaultImpl, As.PROPERTY);\n    }\n    \n    \n    public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl, As inclusion) {\n        super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);\n        _inclusion = inclusion;\n    }\n\n    public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property) {\n        super(src, property);\n        _inclusion = src._inclusion;\n    }\n    \n    @Override\n    public TypeDeserializer forProperty(BeanProperty prop) {\n        return (prop == _property) ? this : new AsPropertyTypeDeserializer(this, prop);\n    }\n    \n    @Override\n    public As getTypeInclusion() { return _inclusion; }\n\n    \n    @Override\n    @SuppressWarnings(\"resource\")\n    public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        \n        \n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        } else if ( t != JsonToken.FIELD_NAME) {\n            \n            return _deserializeTypedUsingDefaultImpl(p, ctxt, null);\n        }\n        \n        TokenBuffer tb = null;\n\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String name = p.getCurrentName();\n            p.nextToken(); \n            if (name.equals(_typePropertyName)) { \n                return _deserializeTypedForId(p, ctxt, tb);\n            }\n            if (tb == null) {\n                tb = new TokenBuffer(p, ctxt);\n            }\n            tb.writeFieldName(name);\n            tb.copyCurrentStructure(p);\n        }\n        return _deserializeTypedUsingDefaultImpl(p, ctxt, tb);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedForId(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException {\n        String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        if (_typeIdVisible) { \n            if (tb == null) {\n                tb = new TokenBuffer(p, ctxt);\n            }\n            tb.writeFieldName(p.getCurrentName());\n            tb.writeString(typeId);\n        }\n        if (tb != null) { \n            \n            \n            p.clearCurrentToken();\n            p = JsonParserSequence.createFlattened(false, tb.asParser(p), p);\n        }\n        \n        p.nextToken(); \n        \n        return deser.deserialize(p, ctxt);\n    }\n    \n    \n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException {\n        \n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                \n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n        \n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n        \n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        } else if (p.getCurrentToken() == JsonToken.VALUE_STRING) {\n            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                String str = p.getText().trim();\n                if (str.isEmpty()) {\n                    return null;\n                }\n            }\n        }\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null;\n    }\n\n    \n    @Override\n    public Object deserializeTypedFromAny(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromArray(p, ctxt);\n        }\n        return deserializeTypedFromObject(p, ctxt);\n    }    \n    \n    \n    \n    \n}\n",
      "buggy_signatures": [
        "public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl, As inclusion)",
        "public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property)",
        "public TypeDeserializer forProperty(BeanProperty prop)",
        "public As getTypeInclusion()",
        "public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object _deserializeTypedForId(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException",
        "protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException",
        "public Object deserializeTypedFromAny(JsonParser p, DeserializationContext ctxt) throws IOException"
      ],
      "fixed_signatures": [
        "public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl, As inclusion)",
        "public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property)",
        "public TypeDeserializer forProperty(BeanProperty prop)",
        "public As getTypeInclusion()",
        "public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object _deserializeTypedForId(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException",
        "protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException",
        "public Object deserializeTypedFromAny(JsonParser p, DeserializationContext ctxt) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException {\n  \n  JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n  if (deser != null) {\n  if (tb != null) {\n  tb.writeEndObject();\n  p = tb.asParser(p);\n  \n  p.nextToken();\n  }\n  return deser.deserialize(p, ctxt);\n  }\n  \n  Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n  if (result != null) {\n  return result;\n  }\n  \n  if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n  return super.deserializeTypedFromAny(p, ctxt);\n  }\n  ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n  \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n  return null;\n  }",
          "fixed_method": "  protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException {\n  \n  JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n  if (deser != null) {\n  if (tb != null) {\n  tb.writeEndObject();\n  p = tb.asParser(p);\n  \n  p.nextToken();\n  }\n  return deser.deserialize(p, ctxt);\n  }\n  \n  Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n  if (result != null) {\n  return result;\n  }\n  \n  if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n  return super.deserializeTypedFromAny(p, ctxt);\n  } else if (p.getCurrentToken() == JsonToken.VALUE_STRING) {\n  if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n  String str = p.getText().trim();\n  if (str.isEmpty()) {\n  return null;\n  }\n  }\n  }\n  ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n  \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n  return null;\n  }",
          "diff": [
            "@@ -153,6 +153,13 @@",
            "         // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n",
            "         if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n",
            "             return super.deserializeTypedFromAny(p, ctxt);\n",
            "+        } else if (p.getCurrentToken() == JsonToken.VALUE_STRING) {\n",
            "+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n",
            "+                String str = p.getText().trim();\n",
            "+                if (str.isEmpty()) {\n",
            "+                    return null;\n",
            "+                }\n",
            "+            }\n",
            "         }\n",
            "         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n",
            "                 \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n"
          ],
          "changed_lines": 7
        }
      ]
    }
  ]
}
