{
  "bug_id": "111",
  "failed_tests": {
    "com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesDeserTest": [
      {
        "methodName": "testNullWithinNested",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "        assertNotNull(nullRef.refRef.get());",
        "test_source": "  public void testNullWithinNested() throws Exception {\n  final ObjectReader r = MAPPER.readerFor(MyBean2303.class);\n  MyBean2303 intRef = r.readValue(\" {\\\"refRef\\\": 2 } \");\n  assertNotNull(intRef.refRef);\n  assertNotNull(intRef.refRef.get());\n  assertEquals(intRef.refRef.get().get(), new Integer(2));\n\n  MyBean2303 nullRef = r.readValue(\" {\\\"refRef\\\": null } \");\n  assertNotNull(nullRef.refRef);\n  assertNotNull(nullRef.refRef.get());\n  assertNull(nullRef.refRef.get().get());\n  }",
        "stack": [
          "JDKAtomicTypesDeserTest.testNullWithinNested line 298"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/CreatorProperty.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\n\nimport com.fasterxml.jackson.core.JsonParser;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.exc.InvalidDefinitionException;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.Annotations;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\n\n\npublic class CreatorProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final AnnotatedParameter _annotated; protected final Object _injectableValueId; protected SettableBeanProperty _fallbackSetter; protected final int _creatorIndex; protected boolean _ignorable; public CreatorProperty(PropertyName name, JavaType type, PropertyName wrapperName, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedParameter param, int index, Object injectableValueId, PropertyMetadata metadata) {\n        super(name, type, wrapperName, typeDeser, contextAnnotations, metadata);\n        _annotated = param;\n        _creatorIndex = index;\n        _injectableValueId = injectableValueId;\n        _fallbackSetter = null;\n    }\n\n    \n    protected CreatorProperty(CreatorProperty src, PropertyName newName) {\n        super(src, newName);\n        _annotated = src._annotated;\n        _injectableValueId = src._injectableValueId;\n        _fallbackSetter = src._fallbackSetter;\n        _creatorIndex = src._creatorIndex;\n        _ignorable = src._ignorable;\n    }\n\n    protected CreatorProperty(CreatorProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _annotated = src._annotated;\n        _injectableValueId = src._injectableValueId;\n        _fallbackSetter = src._fallbackSetter;\n        _creatorIndex = src._creatorIndex;\n        _ignorable = src._ignorable;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new CreatorProperty(this, newName);\n    }\n    \n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        return new CreatorProperty(this, deser, _nullProvider);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new CreatorProperty(this, _valueDeserializer, nva);\n    }\n    \n    @Override\n    public void fixAccess(DeserializationConfig config) {\n        if (_fallbackSetter != null) {\n            _fallbackSetter.fixAccess(config);\n        }\n    }\n\n    \n    public void setFallbackSetter(SettableBeanProperty fallbackSetter) {\n        _fallbackSetter = fallbackSetter;\n    }\n\n    @Override\n    public void markAsIgnorable() {\n        _ignorable = true;\n    }\n\n    @Override\n    public boolean isIgnorable() {\n        return _ignorable;\n    }\n\n    \n\n    \n    public Object findInjectableValue(DeserializationContext context, Object beanInstance) throws JsonMappingException {\n        if (_injectableValueId == null) {\n            context.reportBadDefinition(ClassUtil.classOf(beanInstance),\n                    String.format(\"Property '%s' (type %s) has no injectable value id configured\",\n                    getName(), getClass().getName()));\n        }\n        return context.findInjectableValue(_injectableValueId, this, beanInstance);\n    }\n\n    \n    public void inject(DeserializationContext context, Object beanInstance) throws IOException {\n        set(beanInstance, findInjectableValue(context, beanInstance));\n    }\n\n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        if (_annotated == null) {\n            return null;\n        }\n        return _annotated.getAnnotation(acls);\n    }\n\n    @Override public AnnotatedMember getMember() {  return _annotated; }\n\n    @Override public int getCreatorIndex() {\n        return _creatorIndex;\n    }\n    \n    \n\n    @Override\n    public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        _verifySetter();\n        _fallbackSetter.set(instance, deserialize(p, ctxt));\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        _verifySetter();\n        return _fallbackSetter.setAndReturn(instance, deserialize(p, ctxt));\n    }\n    \n    @Override\n    public void set(Object instance, Object value) throws IOException {\n        _verifySetter();\n        _fallbackSetter.set(instance, value);\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        _verifySetter();\n        return _fallbackSetter.setAndReturn(instance, value);\n    }\n    \n    @Override\n    public Object getInjectableValueId() {\n        return _injectableValueId;\n    }\n\n    @Override\n    public String toString() { return \"[creator property, name '\"+getName()+\"'; inject id '\"+_injectableValueId+\"']\"; }\n\n    \n    private final void _verifySetter() throws IOException {\n        if (_fallbackSetter == null) {\n            _reportMissingSetter(null, null);\n        }\n    }\n\n    \n    private void _reportMissingSetter(JsonParser p, DeserializationContext ctxt) throws IOException {\n        final String msg = \"No fallback setter/field defined for creator property '\"+getName()+\"'\";\n        \n        \n        if (ctxt != null ) {\n            ctxt.reportBadDefinition(getType(), msg);\n        } else {\n            throw InvalidDefinitionException.from(p, msg, getType());\n        }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\n\nimport com.fasterxml.jackson.core.JsonParser;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.exc.InvalidDefinitionException;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.Annotations;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\n\n\npublic class CreatorProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final AnnotatedParameter _annotated; protected final Object _injectableValueId; protected SettableBeanProperty _fallbackSetter; protected final int _creatorIndex; protected boolean _ignorable; public CreatorProperty(PropertyName name, JavaType type, PropertyName wrapperName, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedParameter param, int index, Object injectableValueId, PropertyMetadata metadata) {\n        super(name, type, wrapperName, typeDeser, contextAnnotations, metadata);\n        _annotated = param;\n        _creatorIndex = index;\n        _injectableValueId = injectableValueId;\n        _fallbackSetter = null;\n    }\n\n    \n    protected CreatorProperty(CreatorProperty src, PropertyName newName) {\n        super(src, newName);\n        _annotated = src._annotated;\n        _injectableValueId = src._injectableValueId;\n        _fallbackSetter = src._fallbackSetter;\n        _creatorIndex = src._creatorIndex;\n        _ignorable = src._ignorable;\n    }\n\n    protected CreatorProperty(CreatorProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _annotated = src._annotated;\n        _injectableValueId = src._injectableValueId;\n        _fallbackSetter = src._fallbackSetter;\n        _creatorIndex = src._creatorIndex;\n        _ignorable = src._ignorable;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new CreatorProperty(this, newName);\n    }\n    \n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n        return new CreatorProperty(this, deser, nvp);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new CreatorProperty(this, _valueDeserializer, nva);\n    }\n    \n    @Override\n    public void fixAccess(DeserializationConfig config) {\n        if (_fallbackSetter != null) {\n            _fallbackSetter.fixAccess(config);\n        }\n    }\n\n    \n    public void setFallbackSetter(SettableBeanProperty fallbackSetter) {\n        _fallbackSetter = fallbackSetter;\n    }\n\n    @Override\n    public void markAsIgnorable() {\n        _ignorable = true;\n    }\n\n    @Override\n    public boolean isIgnorable() {\n        return _ignorable;\n    }\n\n    \n\n    \n    public Object findInjectableValue(DeserializationContext context, Object beanInstance) throws JsonMappingException {\n        if (_injectableValueId == null) {\n            context.reportBadDefinition(ClassUtil.classOf(beanInstance),\n                    String.format(\"Property '%s' (type %s) has no injectable value id configured\",\n                    getName(), getClass().getName()));\n        }\n        return context.findInjectableValue(_injectableValueId, this, beanInstance);\n    }\n\n    \n    public void inject(DeserializationContext context, Object beanInstance) throws IOException {\n        set(beanInstance, findInjectableValue(context, beanInstance));\n    }\n\n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        if (_annotated == null) {\n            return null;\n        }\n        return _annotated.getAnnotation(acls);\n    }\n\n    @Override public AnnotatedMember getMember() {  return _annotated; }\n\n    @Override public int getCreatorIndex() {\n        return _creatorIndex;\n    }\n    \n    \n\n    @Override\n    public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        _verifySetter();\n        _fallbackSetter.set(instance, deserialize(p, ctxt));\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        _verifySetter();\n        return _fallbackSetter.setAndReturn(instance, deserialize(p, ctxt));\n    }\n    \n    @Override\n    public void set(Object instance, Object value) throws IOException {\n        _verifySetter();\n        _fallbackSetter.set(instance, value);\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        _verifySetter();\n        return _fallbackSetter.setAndReturn(instance, value);\n    }\n    \n    @Override\n    public Object getInjectableValueId() {\n        return _injectableValueId;\n    }\n\n    @Override\n    public String toString() { return \"[creator property, name '\"+getName()+\"'; inject id '\"+_injectableValueId+\"']\"; }\n\n    \n    private final void _verifySetter() throws IOException {\n        if (_fallbackSetter == null) {\n            _reportMissingSetter(null, null);\n        }\n    }\n\n    \n    private void _reportMissingSetter(JsonParser p, DeserializationContext ctxt) throws IOException {\n        final String msg = \"No fallback setter/field defined for creator property '\"+getName()+\"'\";\n        \n        \n        if (ctxt != null ) {\n            ctxt.reportBadDefinition(getType(), msg);\n        } else {\n            throw InvalidDefinitionException.from(p, msg, getType());\n        }\n    }\n}\n",
      "buggy_signatures": [
        "protected CreatorProperty(CreatorProperty src, PropertyName newName)",
        "protected CreatorProperty(CreatorProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public void fixAccess(DeserializationConfig config)",
        "public void setFallbackSetter(SettableBeanProperty fallbackSetter)",
        "public void markAsIgnorable()",
        "public boolean isIgnorable()",
        "public Object findInjectableValue(DeserializationContext context, Object beanInstance) throws JsonMappingException",
        "public void inject(DeserializationContext context, Object beanInstance) throws IOException",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public int getCreatorIndex()",
        "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException",
        "public Object getInjectableValueId()",
        "public String toString()",
        "private final void _verifySetter() throws IOException",
        "private void _reportMissingSetter(JsonParser p, DeserializationContext ctxt) throws IOException"
      ],
      "fixed_signatures": [
        "protected CreatorProperty(CreatorProperty src, PropertyName newName)",
        "protected CreatorProperty(CreatorProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public void fixAccess(DeserializationConfig config)",
        "public void setFallbackSetter(SettableBeanProperty fallbackSetter)",
        "public void markAsIgnorable()",
        "public boolean isIgnorable()",
        "public Object findInjectableValue(DeserializationContext context, Object beanInstance) throws JsonMappingException",
        "public void inject(DeserializationContext context, Object beanInstance) throws IOException",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public int getCreatorIndex()",
        "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException",
        "public Object getInjectableValueId()",
        "public String toString()",
        "private final void _verifySetter() throws IOException",
        "private void _reportMissingSetter(JsonParser p, DeserializationContext ctxt) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  return new CreatorProperty(this, deser, _nullProvider);\n  }",
          "fixed_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n  return new CreatorProperty(this, deser, nvp);\n  }",
          "diff": [
            "@@ -132,7 +132,8 @@",
            "             return this;\n",
            "         }\n",
            "         // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\n",
            "-        return new CreatorProperty(this, deser, _nullProvider);\n",
            "+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n",
            "+        return new CreatorProperty(this, deser, nvp);\n",
            "     }\n",
            " \n",
            "     @Override\n"
          ],
          "changed_lines": 3
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.NullValueProvider;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedField;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.Annotations;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\n\n\npublic final class FieldProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; final protected AnnotatedField _annotated; final protected transient Field _field; final protected boolean _skipNulls; public FieldProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedField field) {\n        super(propDef, type, typeDeser, contextAnnotations);\n        _annotated = field;\n        _field = field.getAnnotated();\n        _skipNulls = NullsConstantProvider.isSkipper(_nullProvider);\n    }\n\n    protected FieldProperty(FieldProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _annotated = src._annotated;\n        _field = src._field;\n        _skipNulls = NullsConstantProvider.isSkipper(nva);\n    }\n\n    protected FieldProperty(FieldProperty src, PropertyName newName) {\n        super(src, newName);\n        _annotated = src._annotated;\n        _field = src._field;\n        _skipNulls = src._skipNulls;\n    }\n\n    \n    protected FieldProperty(FieldProperty src) {\n        super(src);\n        _annotated = src._annotated;\n        Field f = _annotated.getAnnotated();\n        if (f == null) {\n            throw new IllegalArgumentException(\"Missing field (broken JDK (de)serialization?)\");\n        }\n        _field = f;\n        _skipNulls = src._skipNulls;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new FieldProperty(this, newName);\n    }\n\n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        return new FieldProperty(this, deser, _nullProvider);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new FieldProperty(this, _valueDeserializer, nva);\n    }\n\n    @Override\n    public void fixAccess(DeserializationConfig config) {\n        ClassUtil.checkAndFixAccess(_field,\n                config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n\n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return (_annotated == null) ? null : _annotated.getAnnotation(acls);\n    }\n\n    @Override public AnnotatedMember getMember() {  return _annotated; }\n\n    \n\n    @Override\n    public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        Object value;\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\n            if (_skipNulls) {\n                return;\n            }\n            value = _nullProvider.getNullValue(ctxt);\n        } else if (_valueTypeDeserializer == null) {\n            value = _valueDeserializer.deserialize(p, ctxt);\n            \n            if (value == null) {\n                if (_skipNulls) {\n                    return;\n                }\n                value = _nullProvider.getNullValue(ctxt);\n            }\n        } else {\n            value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n        }\n        try {\n            _field.set(instance, value);\n        } catch (Exception e) {\n            _throwAsIOE(p, e, value);\n        }\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        Object value;\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\n            if (_skipNulls) {\n                return instance;\n            }\n            value = _nullProvider.getNullValue(ctxt);\n        } else if (_valueTypeDeserializer == null) {\n            value = _valueDeserializer.deserialize(p, ctxt);\n            \n            if (value == null) {\n                if (_skipNulls) {\n                    return instance;\n                }\n                value = _nullProvider.getNullValue(ctxt);\n            }\n        } else {\n            value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n        }\n        try {\n            _field.set(instance, value);\n        } catch (Exception e) {\n            _throwAsIOE(p, e, value);\n        }\n        return instance;\n    }\n\n    @Override\n    public void set(Object instance, Object value) throws IOException {\n        try {\n            _field.set(instance, value);\n        } catch (Exception e) {\n            \n            _throwAsIOE(e, value);\n        }\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        try {\n            _field.set(instance, value);\n        } catch (Exception e) {\n            \n            _throwAsIOE(e, value);\n        }\n        return instance;\n    }\n\n    \n\n    Object readResolve() {\n        return new FieldProperty(this);\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.NullValueProvider;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedField;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.Annotations;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\n\n\npublic final class FieldProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; final protected AnnotatedField _annotated; final protected transient Field _field; final protected boolean _skipNulls; public FieldProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedField field) {\n        super(propDef, type, typeDeser, contextAnnotations);\n        _annotated = field;\n        _field = field.getAnnotated();\n        _skipNulls = NullsConstantProvider.isSkipper(_nullProvider);\n    }\n\n    protected FieldProperty(FieldProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _annotated = src._annotated;\n        _field = src._field;\n        _skipNulls = NullsConstantProvider.isSkipper(nva);\n    }\n\n    protected FieldProperty(FieldProperty src, PropertyName newName) {\n        super(src, newName);\n        _annotated = src._annotated;\n        _field = src._field;\n        _skipNulls = src._skipNulls;\n    }\n\n    \n    protected FieldProperty(FieldProperty src) {\n        super(src);\n        _annotated = src._annotated;\n        Field f = _annotated.getAnnotated();\n        if (f == null) {\n            throw new IllegalArgumentException(\"Missing field (broken JDK (de)serialization?)\");\n        }\n        _field = f;\n        _skipNulls = src._skipNulls;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new FieldProperty(this, newName);\n    }\n\n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n        return new FieldProperty(this, deser, nvp);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new FieldProperty(this, _valueDeserializer, nva);\n    }\n\n    @Override\n    public void fixAccess(DeserializationConfig config) {\n        ClassUtil.checkAndFixAccess(_field,\n                config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n\n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return (_annotated == null) ? null : _annotated.getAnnotation(acls);\n    }\n\n    @Override public AnnotatedMember getMember() {  return _annotated; }\n\n    \n\n    @Override\n    public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        Object value;\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\n            if (_skipNulls) {\n                return;\n            }\n            value = _nullProvider.getNullValue(ctxt);\n        } else if (_valueTypeDeserializer == null) {\n            value = _valueDeserializer.deserialize(p, ctxt);\n            \n            if (value == null) {\n                if (_skipNulls) {\n                    return;\n                }\n                value = _nullProvider.getNullValue(ctxt);\n            }\n        } else {\n            value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n        }\n        try {\n            _field.set(instance, value);\n        } catch (Exception e) {\n            _throwAsIOE(p, e, value);\n        }\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        Object value;\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\n            if (_skipNulls) {\n                return instance;\n            }\n            value = _nullProvider.getNullValue(ctxt);\n        } else if (_valueTypeDeserializer == null) {\n            value = _valueDeserializer.deserialize(p, ctxt);\n            \n            if (value == null) {\n                if (_skipNulls) {\n                    return instance;\n                }\n                value = _nullProvider.getNullValue(ctxt);\n            }\n        } else {\n            value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n        }\n        try {\n            _field.set(instance, value);\n        } catch (Exception e) {\n            _throwAsIOE(p, e, value);\n        }\n        return instance;\n    }\n\n    @Override\n    public void set(Object instance, Object value) throws IOException {\n        try {\n            _field.set(instance, value);\n        } catch (Exception e) {\n            \n            _throwAsIOE(e, value);\n        }\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        try {\n            _field.set(instance, value);\n        } catch (Exception e) {\n            \n            _throwAsIOE(e, value);\n        }\n        return instance;\n    }\n\n    \n\n    Object readResolve() {\n        return new FieldProperty(this);\n    }\n}",
      "buggy_signatures": [
        "protected FieldProperty(FieldProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "protected FieldProperty(FieldProperty src, PropertyName newName)",
        "protected FieldProperty(FieldProperty src)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public void fixAccess(DeserializationConfig config)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException"
      ],
      "fixed_signatures": [
        "protected FieldProperty(FieldProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "protected FieldProperty(FieldProperty src, PropertyName newName)",
        "protected FieldProperty(FieldProperty src)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public void fixAccess(DeserializationConfig config)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  return new FieldProperty(this, deser, _nullProvider);\n  }",
          "fixed_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n  return new FieldProperty(this, deser, nvp);\n  }",
          "diff": [
            "@@ -90,7 +90,8 @@",
            "             return this;\n",
            "         }\n",
            "         // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\n",
            "-        return new FieldProperty(this, deser, _nullProvider);\n",
            "+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n",
            "+        return new FieldProperty(this, deser, nvp);\n",
            "     }\n",
            " \n",
            "     @Override\n"
          ],
          "changed_lines": 3
        },
        {
          "buggy_method": "  public Object setAndReturn(Object instance, Object value) throws IOException {\n  try {\n  _field.set(instance, value);\n  } catch (Exception e) {\n  \n  _throwAsIOE(e, value);\n  }\n  return instance;\n  }",
          "fixed_method": "  public Object setAndReturn(Object instance, Object value) throws IOException {\n  try {\n  _field.set(instance, value);\n  } catch (Exception e) {\n  \n  _throwAsIOE(e, value);\n  }\n  return instance;\n  }",
          "diff": [
            "@@ -214,4 +215,4 @@",
            "     Object readResolve() {\n",
            "         return new FieldProperty(this);\n",
            "     }\n",
            "-}\n",
            "+}"
          ],
          "changed_lines": 2
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.NullValueProvider;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.introspect.*;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.Annotations;\n\n\npublic final class MethodProperty extends SettableBeanProperty { private static final long serialVersionUID = 1; protected final AnnotatedMethod _annotated; protected final transient Method _setter; final protected boolean _skipNulls; public MethodProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) {\n        super(propDef, type, typeDeser, contextAnnotations);\n        _annotated = method;\n        _setter = method.getAnnotated();\n        _skipNulls = NullsConstantProvider.isSkipper(_nullProvider);\n    }\n\n    protected MethodProperty(MethodProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _annotated = src._annotated;\n        _setter = src._setter;\n        _skipNulls = NullsConstantProvider.isSkipper(nva);\n    }\n\n    protected MethodProperty(MethodProperty src, PropertyName newName) {\n        super(src, newName);\n        _annotated = src._annotated;\n        _setter = src._setter;\n        _skipNulls = src._skipNulls;\n    }\n\n    \n    protected MethodProperty(MethodProperty src, Method m) {\n        super(src);\n        _annotated = src._annotated;\n        _setter = m;\n        _skipNulls = src._skipNulls;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new MethodProperty(this, newName);\n    }\n    \n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        return new MethodProperty(this, deser, _nullProvider);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new MethodProperty(this, _valueDeserializer, nva);\n    }\n\n    @Override\n    public void fixAccess(DeserializationConfig config) {\n        _annotated.fixAccess(\n                config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n\n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return (_annotated == null) ? null : _annotated.getAnnotation(acls);\n    }\n\n    @Override public AnnotatedMember getMember() {  return _annotated; }\n\n    \n\n    @Override\n    public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        Object value;\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\n            if (_skipNulls) {\n                return;\n            }\n            value = _nullProvider.getNullValue(ctxt);\n        } else if (_valueTypeDeserializer == null) {\n            value = _valueDeserializer.deserialize(p, ctxt);\n            \n            if (value == null) {\n                if (_skipNulls) {\n                    return;\n                }\n                value = _nullProvider.getNullValue(ctxt);\n            }\n        } else {\n            value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n        }\n        try {\n            _setter.invoke(instance, value);\n        } catch (Exception e) {\n            _throwAsIOE(p, e, value);\n        }\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        Object value;\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\n            if (_skipNulls) {\n                return instance;\n            }\n            value = _nullProvider.getNullValue(ctxt);\n        } else if (_valueTypeDeserializer == null) {\n            value = _valueDeserializer.deserialize(p, ctxt);\n            \n            if (value == null) {\n                if (_skipNulls) {\n                    return instance;\n                }\n                value = _nullProvider.getNullValue(ctxt);\n            }\n        } else {\n            value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n        }\n        try {\n            Object result = _setter.invoke(instance, value);\n            return (result == null) ? instance : result;\n        } catch (Exception e) {\n            _throwAsIOE(p, e, value);\n            return null;\n        }\n    }\n\n    @Override\n    public final void set(Object instance, Object value) throws IOException {\n        try {\n            _setter.invoke(instance, value);\n        } catch (Exception e) {\n            \n            _throwAsIOE(e, value);\n        }\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        try {\n            Object result = _setter.invoke(instance, value);\n            return (result == null) ? instance : result;\n        } catch (Exception e) {\n            \n            _throwAsIOE(e, value);\n            return null;\n        }\n    }\n\n    \n\n    Object readResolve() {\n        return new MethodProperty(this, _annotated.getAnnotated());\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.NullValueProvider;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.introspect.*;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.Annotations;\n\n\npublic final class MethodProperty extends SettableBeanProperty { private static final long serialVersionUID = 1; protected final AnnotatedMethod _annotated; protected final transient Method _setter; final protected boolean _skipNulls; public MethodProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) {\n        super(propDef, type, typeDeser, contextAnnotations);\n        _annotated = method;\n        _setter = method.getAnnotated();\n        _skipNulls = NullsConstantProvider.isSkipper(_nullProvider);\n    }\n\n    protected MethodProperty(MethodProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _annotated = src._annotated;\n        _setter = src._setter;\n        _skipNulls = NullsConstantProvider.isSkipper(nva);\n    }\n\n    protected MethodProperty(MethodProperty src, PropertyName newName) {\n        super(src, newName);\n        _annotated = src._annotated;\n        _setter = src._setter;\n        _skipNulls = src._skipNulls;\n    }\n\n    \n    protected MethodProperty(MethodProperty src, Method m) {\n        super(src);\n        _annotated = src._annotated;\n        _setter = m;\n        _skipNulls = src._skipNulls;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new MethodProperty(this, newName);\n    }\n    \n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n        return new MethodProperty(this, deser, nvp);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new MethodProperty(this, _valueDeserializer, nva);\n    }\n\n    @Override\n    public void fixAccess(DeserializationConfig config) {\n        _annotated.fixAccess(\n                config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n\n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return (_annotated == null) ? null : _annotated.getAnnotation(acls);\n    }\n\n    @Override public AnnotatedMember getMember() {  return _annotated; }\n\n    \n\n    @Override\n    public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        Object value;\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\n            if (_skipNulls) {\n                return;\n            }\n            value = _nullProvider.getNullValue(ctxt);\n        } else if (_valueTypeDeserializer == null) {\n            value = _valueDeserializer.deserialize(p, ctxt);\n            \n            if (value == null) {\n                if (_skipNulls) {\n                    return;\n                }\n                value = _nullProvider.getNullValue(ctxt);\n            }\n        } else {\n            value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n        }\n        try {\n            _setter.invoke(instance, value);\n        } catch (Exception e) {\n            _throwAsIOE(p, e, value);\n        }\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        Object value;\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\n            if (_skipNulls) {\n                return instance;\n            }\n            value = _nullProvider.getNullValue(ctxt);\n        } else if (_valueTypeDeserializer == null) {\n            value = _valueDeserializer.deserialize(p, ctxt);\n            \n            if (value == null) {\n                if (_skipNulls) {\n                    return instance;\n                }\n                value = _nullProvider.getNullValue(ctxt);\n            }\n        } else {\n            value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n        }\n        try {\n            Object result = _setter.invoke(instance, value);\n            return (result == null) ? instance : result;\n        } catch (Exception e) {\n            _throwAsIOE(p, e, value);\n            return null;\n        }\n    }\n\n    @Override\n    public final void set(Object instance, Object value) throws IOException {\n        try {\n            _setter.invoke(instance, value);\n        } catch (Exception e) {\n            \n            _throwAsIOE(e, value);\n        }\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        try {\n            Object result = _setter.invoke(instance, value);\n            return (result == null) ? instance : result;\n        } catch (Exception e) {\n            \n            _throwAsIOE(e, value);\n            return null;\n        }\n    }\n\n    \n\n    Object readResolve() {\n        return new MethodProperty(this, _annotated.getAnnotated());\n    }\n}\n",
      "buggy_signatures": [
        "protected MethodProperty(MethodProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "protected MethodProperty(MethodProperty src, PropertyName newName)",
        "protected MethodProperty(MethodProperty src, Method m)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public void fixAccess(DeserializationConfig config)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public final void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException"
      ],
      "fixed_signatures": [
        "protected MethodProperty(MethodProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "protected MethodProperty(MethodProperty src, PropertyName newName)",
        "protected MethodProperty(MethodProperty src, Method m)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public void fixAccess(DeserializationConfig config)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public final void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  return new MethodProperty(this, deser, _nullProvider);\n  }",
          "fixed_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n  return new MethodProperty(this, deser, nvp);\n  }",
          "diff": [
            "@@ -81,7 +81,8 @@",
            "             return this;\n",
            "         }\n",
            "         // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\n",
            "-        return new MethodProperty(this, deser, _nullProvider);\n",
            "+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n",
            "+        return new MethodProperty(this, deser, nvp);\n",
            "     }\n",
            " \n",
            "     @Override\n"
          ],
          "changed_lines": 3
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.NullValueProvider;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;\nimport com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n\npublic class ObjectIdReferenceProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; private final SettableBeanProperty _forward; public ObjectIdReferenceProperty(SettableBeanProperty forward, ObjectIdInfo objectIdInfo) {\n        super(forward);\n        _forward = forward;\n        _objectIdInfo = objectIdInfo;\n    }\n\n    public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _forward = src._forward;\n        _objectIdInfo = src._objectIdInfo;\n    }\n\n    public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, PropertyName newName) {\n        super(src, newName);\n        _forward = src._forward;\n        _objectIdInfo = src._objectIdInfo;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new ObjectIdReferenceProperty(this, newName);\n    }\n\n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        return new ObjectIdReferenceProperty(this, deser, _nullProvider);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new ObjectIdReferenceProperty(this, _valueDeserializer, nva);\n    }\n    \n    @Override\n    public void fixAccess(DeserializationConfig config) {\n        if (_forward != null) {\n            _forward.fixAccess(config);\n        }\n    }\n\n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return _forward.getAnnotation(acls);\n    }\n\n    @Override\n    public AnnotatedMember getMember() {\n        return _forward.getMember();\n    }\n\n    @Override\n    public int getCreatorIndex() {\n        return _forward.getCreatorIndex();\n    }\n\n    @Override\n    public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        deserializeSetAndReturn(p, ctxt, instance);\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        try {\n            return setAndReturn(instance, deserialize(p, ctxt));\n        } catch (UnresolvedForwardReference reference) {\n            boolean usingIdentityInfo = (_objectIdInfo != null) || (_valueDeserializer.getObjectIdReader() != null);\n            if (!usingIdentityInfo) {\n                throw JsonMappingException.from(p, \"Unresolved forward reference but no identity info\", reference);\n            }\n            reference.getRoid().appendReferring(new PropertyReferring(this, reference, _type.getRawClass(), instance));\n            return null;\n        }\n    }\n\n    @Override\n    public void set(Object instance, Object value) throws IOException {\n        _forward.set(instance, value);\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        return _forward.setAndReturn(instance, value);\n    }\n\n    public final static class PropertyReferring extends Referring { private final ObjectIdReferenceProperty _parent; public final Object _pojo; public PropertyReferring(ObjectIdReferenceProperty parent, UnresolvedForwardReference ref, Class<?> type, Object ob) {\n            super(ref, type);\n            _parent = parent;\n            _pojo = ob;\n        }\n\n        @Override\n        public void handleResolvedForwardReference(Object id, Object value) throws IOException {\n            if (!hasId(id)) {\n                throw new IllegalArgumentException(\"Trying to resolve a forward reference with id [\" + id\n                        + \"] that wasn't previously seen as unresolved.\");\n            }\n            _parent.set(_pojo, value);\n        }\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.NullValueProvider;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;\nimport com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n\npublic class ObjectIdReferenceProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; private final SettableBeanProperty _forward; public ObjectIdReferenceProperty(SettableBeanProperty forward, ObjectIdInfo objectIdInfo) {\n        super(forward);\n        _forward = forward;\n        _objectIdInfo = objectIdInfo;\n    }\n\n    public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _forward = src._forward;\n        _objectIdInfo = src._objectIdInfo;\n    }\n\n    public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, PropertyName newName) {\n        super(src, newName);\n        _forward = src._forward;\n        _objectIdInfo = src._objectIdInfo;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new ObjectIdReferenceProperty(this, newName);\n    }\n\n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n        return new ObjectIdReferenceProperty(this, deser, nvp);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new ObjectIdReferenceProperty(this, _valueDeserializer, nva);\n    }\n    \n    @Override\n    public void fixAccess(DeserializationConfig config) {\n        if (_forward != null) {\n            _forward.fixAccess(config);\n        }\n    }\n\n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return _forward.getAnnotation(acls);\n    }\n\n    @Override\n    public AnnotatedMember getMember() {\n        return _forward.getMember();\n    }\n\n    @Override\n    public int getCreatorIndex() {\n        return _forward.getCreatorIndex();\n    }\n\n    @Override\n    public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        deserializeSetAndReturn(p, ctxt, instance);\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        try {\n            return setAndReturn(instance, deserialize(p, ctxt));\n        } catch (UnresolvedForwardReference reference) {\n            boolean usingIdentityInfo = (_objectIdInfo != null) || (_valueDeserializer.getObjectIdReader() != null);\n            if (!usingIdentityInfo) {\n                throw JsonMappingException.from(p, \"Unresolved forward reference but no identity info\", reference);\n            }\n            reference.getRoid().appendReferring(new PropertyReferring(this, reference, _type.getRawClass(), instance));\n            return null;\n        }\n    }\n\n    @Override\n    public void set(Object instance, Object value) throws IOException {\n        _forward.set(instance, value);\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        return _forward.setAndReturn(instance, value);\n    }\n\n    public final static class PropertyReferring extends Referring { private final ObjectIdReferenceProperty _parent; public final Object _pojo; public PropertyReferring(ObjectIdReferenceProperty parent, UnresolvedForwardReference ref, Class<?> type, Object ob) {\n            super(ref, type);\n            _parent = parent;\n            _pojo = ob;\n        }\n\n        @Override\n        public void handleResolvedForwardReference(Object id, Object value) throws IOException {\n            if (!hasId(id)) {\n                throw new IllegalArgumentException(\"Trying to resolve a forward reference with id [\" + id\n                        + \"] that wasn't previously seen as unresolved.\");\n            }\n            _parent.set(_pojo, value);\n        }\n    }\n}\n",
      "buggy_signatures": [
        "public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, PropertyName newName)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public void fixAccess(DeserializationConfig config)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public int getCreatorIndex()",
        "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException",
        "public final static class PropertyReferring extends Referring { private final ObjectIdReferenceProperty _parent; public final Object _pojo; public PropertyReferring(ObjectIdReferenceProperty parent, UnresolvedForwardReference ref, Class<?> type, Object ob)",
        "public void handleResolvedForwardReference(Object id, Object value) throws IOException"
      ],
      "fixed_signatures": [
        "public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, PropertyName newName)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public void fixAccess(DeserializationConfig config)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public int getCreatorIndex()",
        "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException",
        "public final static class PropertyReferring extends Referring { private final ObjectIdReferenceProperty _parent; public final Object _pojo; public PropertyReferring(ObjectIdReferenceProperty parent, UnresolvedForwardReference ref, Class<?> type, Object ob)",
        "public void handleResolvedForwardReference(Object id, Object value) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  return new ObjectIdReferenceProperty(this, deser, _nullProvider);\n  }",
          "fixed_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n  return new ObjectIdReferenceProperty(this, deser, nvp);\n  }",
          "diff": [
            "@@ -51,7 +51,8 @@",
            "             return this;\n",
            "         }\n",
            "         // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\n",
            "-        return new ObjectIdReferenceProperty(this, deser, _nullProvider);\n",
            "+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n",
            "+        return new ObjectIdReferenceProperty(this, deser, nvp);\n",
            "     }\n",
            " \n",
            "     @Override\n"
          ],
          "changed_lines": 3
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n\n\npublic final class ObjectIdValueProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final ObjectIdReader _objectIdReader; public ObjectIdValueProperty(ObjectIdReader objectIdReader, PropertyMetadata metadata) {\n        super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata,\n                objectIdReader.getDeserializer());\n        _objectIdReader = objectIdReader;\n    }\n\n    protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _objectIdReader = src._objectIdReader;\n    }\n\n    protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) {\n        super(src, newName);\n        _objectIdReader = src._objectIdReader;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new ObjectIdValueProperty(this, newName);\n    }\n\n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        return new ObjectIdValueProperty(this, deser, _nullProvider);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new ObjectIdValueProperty(this, _valueDeserializer, nva);\n    }\n\n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return null;\n    }\n\n    @Override public AnnotatedMember getMember() {  return null; }\n\n    \n\n    @Override\n    public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        deserializeSetAndReturn(p, ctxt, instance);\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        \n        \n        if (p.hasToken(JsonToken.VALUE_NULL)) {\n            return null;\n        }\n        Object id = _valueDeserializer.deserialize(p, ctxt);\n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        roid.bindItem(instance);\n        \n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp != null) {\n            return idProp.setAndReturn(instance, id);\n        }\n        return instance;\n    }\n\n    @Override\n    public void set(Object instance, Object value) throws IOException {\n        setAndReturn(instance, value);\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp == null) {\n            throw new UnsupportedOperationException(\n                    \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\");\n        }\n        return idProp.setAndReturn(instance, value);\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n\n\npublic final class ObjectIdValueProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final ObjectIdReader _objectIdReader; public ObjectIdValueProperty(ObjectIdReader objectIdReader, PropertyMetadata metadata) {\n        super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata,\n                objectIdReader.getDeserializer());\n        _objectIdReader = objectIdReader;\n    }\n\n    protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _objectIdReader = src._objectIdReader;\n    }\n\n    protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) {\n        super(src, newName);\n        _objectIdReader = src._objectIdReader;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new ObjectIdValueProperty(this, newName);\n    }\n\n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n        return new ObjectIdValueProperty(this, deser, nvp);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new ObjectIdValueProperty(this, _valueDeserializer, nva);\n    }\n\n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return null;\n    }\n\n    @Override public AnnotatedMember getMember() {  return null; }\n\n    \n\n    @Override\n    public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        deserializeSetAndReturn(p, ctxt, instance);\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        \n        \n        if (p.hasToken(JsonToken.VALUE_NULL)) {\n            return null;\n        }\n        Object id = _valueDeserializer.deserialize(p, ctxt);\n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        roid.bindItem(instance);\n        \n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp != null) {\n            return idProp.setAndReturn(instance, id);\n        }\n        return instance;\n    }\n\n    @Override\n    public void set(Object instance, Object value) throws IOException {\n        setAndReturn(instance, value);\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp == null) {\n            throw new UnsupportedOperationException(\n                    \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\");\n        }\n        return idProp.setAndReturn(instance, value);\n    }\n}\n",
      "buggy_signatures": [
        "protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException"
      ],
      "fixed_signatures": [
        "protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  return new ObjectIdValueProperty(this, deser, _nullProvider);\n  }",
          "fixed_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n  return new ObjectIdValueProperty(this, deser, nvp);\n  }",
          "diff": [
            "@@ -52,7 +52,8 @@",
            "             return this;\n",
            "         }\n",
            "         // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\n",
            "-        return new ObjectIdValueProperty(this, deser, _nullProvider);\n",
            "+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n",
            "+        return new ObjectIdValueProperty(this, deser, nvp);\n",
            "     }\n",
            " \n",
            "     @Override\n"
          ],
          "changed_lines": 3
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.NullValueProvider;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\nimport com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.Annotations;\n\n\npublic final class SetterlessProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final AnnotatedMethod _annotated; protected final Method _getter; public SetterlessProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) {\n        super(propDef, type, typeDeser, contextAnnotations);\n        _annotated = method;\n        _getter = method.getAnnotated();\n    }\n\n    protected SetterlessProperty(SetterlessProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _annotated = src._annotated;\n        _getter = src._getter;\n    }\n\n    protected SetterlessProperty(SetterlessProperty src, PropertyName newName) {\n        super(src, newName);\n        _annotated = src._annotated;\n        _getter = src._getter;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new SetterlessProperty(this, newName);\n    }\n\n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        return new SetterlessProperty(this, deser, _nullProvider);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new SetterlessProperty(this, _valueDeserializer, nva);\n    }\n\n    @Override\n    public void fixAccess(DeserializationConfig config) {\n        _annotated.fixAccess(\n                config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n\n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return _annotated.getAnnotation(acls);\n    }\n\n    @Override public AnnotatedMember getMember() {  return _annotated; }\n\n    \n    \n    @Override\n    public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.VALUE_NULL) {\n            \n            \n            return;\n        }\n        \n        if (_valueTypeDeserializer != null) {\n            ctxt.reportBadDefinition(getType(), String.format(\n                    \"Problem deserializing 'setterless' property (\\\"%s\\\"): no way to handle typed deser with setterless yet\",\n                    getName()));\n\n        }\n        \n        Object toModify;\n        try {\n            toModify = _getter.invoke(instance, (Object[]) null);\n        } catch (Exception e) {\n            _throwAsIOE(p, e);\n            return; \n        }\n        \n        \n        \n        if (toModify == null) {\n            ctxt.reportBadDefinition(getType(), String.format(\n                    \"Problem deserializing 'setterless' property '%s': get method returned null\",\n                    getName()));\n        }\n        _valueDeserializer.deserialize(p, ctxt, toModify);\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        deserializeAndSet(p, ctxt, instance);\n        return instance;\n    }\n\n    @Override\n    public final void set(Object instance, Object value) throws IOException {\n        throw new UnsupportedOperationException(\"Should never call `set()` on setterless property ('\"+getName()+\"')\");\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        set(instance, value);\n        return instance;\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.NullValueProvider;\nimport com.fasterxml.jackson.databind.deser.SettableBeanProperty;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\nimport com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.Annotations;\n\n\npublic final class SetterlessProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final AnnotatedMethod _annotated; protected final Method _getter; public SetterlessProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) {\n        super(propDef, type, typeDeser, contextAnnotations);\n        _annotated = method;\n        _getter = method.getAnnotated();\n    }\n\n    protected SetterlessProperty(SetterlessProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {\n        super(src, deser, nva);\n        _annotated = src._annotated;\n        _getter = src._getter;\n    }\n\n    protected SetterlessProperty(SetterlessProperty src, PropertyName newName) {\n        super(src, newName);\n        _annotated = src._annotated;\n        _getter = src._getter;\n    }\n\n    @Override\n    public SettableBeanProperty withName(PropertyName newName) {\n        return new SetterlessProperty(this, newName);\n    }\n\n    @Override\n    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        if (_valueDeserializer == deser) {\n            return this;\n        }\n        \n        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n        return new SetterlessProperty(this, deser, nvp);\n    }\n\n    @Override\n    public SettableBeanProperty withNullProvider(NullValueProvider nva) {\n        return new SetterlessProperty(this, _valueDeserializer, nva);\n    }\n\n    @Override\n    public void fixAccess(DeserializationConfig config) {\n        _annotated.fixAccess(\n                config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n\n    \n    \n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return _annotated.getAnnotation(acls);\n    }\n\n    @Override public AnnotatedMember getMember() {  return _annotated; }\n\n    \n    \n    @Override\n    public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.VALUE_NULL) {\n            \n            \n            return;\n        }\n        \n        if (_valueTypeDeserializer != null) {\n            ctxt.reportBadDefinition(getType(), String.format(\n                    \"Problem deserializing 'setterless' property (\\\"%s\\\"): no way to handle typed deser with setterless yet\",\n                    getName()));\n\n        }\n        \n        Object toModify;\n        try {\n            toModify = _getter.invoke(instance, (Object[]) null);\n        } catch (Exception e) {\n            _throwAsIOE(p, e);\n            return; \n        }\n        \n        \n        \n        if (toModify == null) {\n            ctxt.reportBadDefinition(getType(), String.format(\n                    \"Problem deserializing 'setterless' property '%s': get method returned null\",\n                    getName()));\n        }\n        _valueDeserializer.deserialize(p, ctxt, toModify);\n    }\n\n    @Override\n    public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {\n        deserializeAndSet(p, ctxt, instance);\n        return instance;\n    }\n\n    @Override\n    public final void set(Object instance, Object value) throws IOException {\n        throw new UnsupportedOperationException(\"Should never call `set()` on setterless property ('\"+getName()+\"')\");\n    }\n\n    @Override\n    public Object setAndReturn(Object instance, Object value) throws IOException {\n        set(instance, value);\n        return instance;\n    }\n}",
      "buggy_signatures": [
        "protected SetterlessProperty(SetterlessProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "protected SetterlessProperty(SetterlessProperty src, PropertyName newName)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public void fixAccess(DeserializationConfig config)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public final void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException"
      ],
      "fixed_signatures": [
        "protected SetterlessProperty(SetterlessProperty src, JsonDeserializer<?> deser, NullValueProvider nva)",
        "protected SetterlessProperty(SetterlessProperty src, PropertyName newName)",
        "public SettableBeanProperty withName(PropertyName newName)",
        "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)",
        "public SettableBeanProperty withNullProvider(NullValueProvider nva)",
        "public void fixAccess(DeserializationConfig config)",
        "public <A extends Annotation> A getAnnotation(Class<A> acls)",
        "public AnnotatedMember getMember()",
        "public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException",
        "public final void set(Object instance, Object value) throws IOException",
        "public Object setAndReturn(Object instance, Object value) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  return new SetterlessProperty(this, deser, _nullProvider);\n  }",
          "fixed_method": "  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {\n  if (_valueDeserializer == deser) {\n  return this;\n  }\n  \n  NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n  return new SetterlessProperty(this, deser, nvp);\n  }",
          "diff": [
            "@@ -65,7 +65,8 @@",
            "             return this;\n",
            "         }\n",
            "         // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\n",
            "-        return new SetterlessProperty(this, deser, _nullProvider);\n",
            "+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;\n",
            "+        return new SetterlessProperty(this, deser, nvp);\n",
            "     }\n",
            " \n",
            "     @Override\n"
          ],
          "changed_lines": 3
        },
        {
          "buggy_method": "  public Object setAndReturn(Object instance, Object value) throws IOException {\n  set(instance, value);\n  return instance;\n  }",
          "fixed_method": "  public Object setAndReturn(Object instance, Object value) throws IOException {\n  set(instance, value);\n  return instance;\n  }",
          "diff": [
            "@@ -153,4 +154,4 @@",
            "         set(instance, value);\n",
            "         return instance;\n",
            "     }\n",
            "-}\n",
            "+}"
          ],
          "changed_lines": 2
        }
      ]
    },
    {
      "name": "com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.std;\n\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.ValueInstantiator;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n\npublic class AtomicReferenceDeserializer extends ReferenceTypeDeserializer<AtomicReference<Object>> { private static final long serialVersionUID = 1L; public AtomicReferenceDeserializer(JavaType fullType, ValueInstantiator inst, TypeDeserializer typeDeser, JsonDeserializer<?> deser) {\n        super(fullType, inst, typeDeser, deser);\n    }\n\n    \n\n    @Override\n    public AtomicReferenceDeserializer withResolved(TypeDeserializer typeDeser, JsonDeserializer<?> valueDeser) {\n        return new AtomicReferenceDeserializer(_fullType, _valueInstantiator,\n                typeDeser, valueDeser);\n    }\n\n    @Override\n    public AtomicReference<Object> getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n        return new AtomicReference<Object>();\n    }\n\n    @Override\n    public Object getEmptyValue(DeserializationContext ctxt) {\n        return new AtomicReference<Object>();\n    }\n    \n    @Override\n    public AtomicReference<Object> referenceValue(Object contents) {\n        return new AtomicReference<Object>(contents);\n    }\n\n    @Override\n    public Object getReferenced(AtomicReference<Object> reference) {\n        return reference.get();\n    }\n\n    @Override \n    public AtomicReference<Object> updateReference(AtomicReference<Object> reference, Object contents) {\n        reference.set(contents);\n        return reference;\n    }\n\n    @Override \n    public Boolean supportsUpdate(DeserializationConfig config) {\n        \n        return Boolean.TRUE;\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.std;\n\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.ValueInstantiator;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n\npublic class AtomicReferenceDeserializer extends ReferenceTypeDeserializer<AtomicReference<Object>> { private static final long serialVersionUID = 1L; public AtomicReferenceDeserializer(JavaType fullType, ValueInstantiator inst, TypeDeserializer typeDeser, JsonDeserializer<?> deser) {\n        super(fullType, inst, typeDeser, deser);\n    }\n\n    \n\n    @Override\n    public AtomicReferenceDeserializer withResolved(TypeDeserializer typeDeser, JsonDeserializer<?> valueDeser) {\n        return new AtomicReferenceDeserializer(_fullType, _valueInstantiator,\n                typeDeser, valueDeser);\n    }\n\n    @Override\n    public AtomicReference<Object> getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n        return new AtomicReference<Object>(_valueDeserializer.getNullValue(ctxt));\n    }\n\n    @Override\n    public Object getEmptyValue(DeserializationContext ctxt) {\n        return new AtomicReference<Object>();\n    }\n    \n    @Override\n    public AtomicReference<Object> referenceValue(Object contents) {\n        return new AtomicReference<Object>(contents);\n    }\n\n    @Override\n    public Object getReferenced(AtomicReference<Object> reference) {\n        return reference.get();\n    }\n\n    @Override \n    public AtomicReference<Object> updateReference(AtomicReference<Object> reference, Object contents) {\n        reference.set(contents);\n        return reference;\n    }\n\n    @Override \n    public Boolean supportsUpdate(DeserializationConfig config) {\n        \n        return Boolean.TRUE;\n    }\n}\n",
      "buggy_signatures": [
        "public AtomicReferenceDeserializer withResolved(TypeDeserializer typeDeser, JsonDeserializer<?> valueDeser)",
        "public AtomicReference<Object> getNullValue(DeserializationContext ctxt) throws JsonMappingException",
        "public Object getEmptyValue(DeserializationContext ctxt)",
        "public AtomicReference<Object> referenceValue(Object contents)",
        "public Object getReferenced(AtomicReference<Object> reference)",
        "public AtomicReference<Object> updateReference(AtomicReference<Object> reference, Object contents)",
        "public Boolean supportsUpdate(DeserializationConfig config)"
      ],
      "fixed_signatures": [
        "public AtomicReferenceDeserializer withResolved(TypeDeserializer typeDeser, JsonDeserializer<?> valueDeser)",
        "public AtomicReference<Object> getNullValue(DeserializationContext ctxt) throws JsonMappingException",
        "public Object getEmptyValue(DeserializationContext ctxt)",
        "public AtomicReference<Object> referenceValue(Object contents)",
        "public Object getReferenced(AtomicReference<Object> reference)",
        "public AtomicReference<Object> updateReference(AtomicReference<Object> reference, Object contents)",
        "public Boolean supportsUpdate(DeserializationConfig config)"
      ],
      "methods": [
        {
          "buggy_method": "  public AtomicReference<Object> getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n  return new AtomicReference<Object>();\n  }",
          "fixed_method": "  public AtomicReference<Object> getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n  return new AtomicReference<Object>(_valueDeserializer.getNullValue(ctxt));\n  }",
          "diff": [
            "@@ -40,7 +40,7 @@",
            " \n",
            "     @Override\n",
            "     public AtomicReference<Object> getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n",
            "-        return new AtomicReference<Object>();\n",
            "+        return new AtomicReference<Object>(_valueDeserializer.getNullValue(ctxt));\n",
            "     }\n",
            " \n",
            "     @Override\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
