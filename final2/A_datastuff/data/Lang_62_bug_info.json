{
  "bug_id": "62",
  "failed_tests": {
    "org.apache.commons.lang.EntitiesTest": [
      {
        "methodName": "testNumberOverflow",
        "error": "junit.framework.ComparisonFailure",
        "message": "expected:<[&#12345678;]> but was:<[æ…Ž]>",
        "fail_line": "        doTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");",
        "test_source": "  public void testNumberOverflow() throws Exception {\n  doTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");\n  doTestUnescapeEntity(\"x&#12345678;y\", \"x&#12345678;y\");\n  doTestUnescapeEntity(\"&#x12345678;\", \"&#x12345678;\");\n  doTestUnescapeEntity(\"x&#x12345678;y\", \"x&#x12345678;y\");\n  }",
        "stack": [
          "EntitiesTest.doTestUnescapeEntity line 101, EntitiesTest.testNumberOverflow line 201"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/lang/Entities.java",
      "buggy_full_code": "\npackage org.apache.commons.lang;\n\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\n\n\nclass Entities {\n\n    private static final String[][] BASIC_ARRAY = { {\"quot\", \"34\"}, {\"amp\", \"38\"}, {\"lt\", \"60\"}, {\"gt\", \"62\"}, }; private static final String[][] APOS_ARRAY = { {\"apos\", \"39\"}, }; static final String[][] ISO8859_1_ARRAY = { {\"nbsp\", \"160\"}, {\"iexcl\", \"161\"}, {\"cent\", \"162\"}, {\"pound\", \"163\"}, {\"curren\", \"164\"}, {\"yen\", \"165\"}, {\"brvbar\", \"166\"}, {\"sect\", \"167\"}, {\"uml\", \"168\"}, {\"copy\", \"169\"}, {\"ordf\", \"170\"}, {\"laquo\", \"171\"}, {\"not\", \"172\"}, {\"shy\", \"173\"}, {\"reg\", \"174\"}, {\"macr\", \"175\"}, {\"deg\", \"176\"}, {\"plusmn\", \"177\"}, {\"sup2\", \"178\"}, {\"sup3\", \"179\"}, {\"acute\", \"180\"}, {\"micro\", \"181\"}, {\"para\", \"182\"}, {\"middot\", \"183\"}, {\"cedil\", \"184\"}, {\"sup1\", \"185\"}, {\"ordm\", \"186\"}, {\"raquo\", \"187\"}, {\"frac14\", \"188\"}, {\"frac12\", \"189\"}, {\"frac34\", \"190\"}, {\"iquest\", \"191\"}, {\"Agrave\", \"192\"}, {\"Aacute\", \"193\"}, {\"Acirc\", \"194\"}, {\"Atilde\", \"195\"}, {\"Auml\", \"196\"}, {\"Aring\", \"197\"}, {\"AElig\", \"198\"}, {\"Ccedil\", \"199\"}, {\"Egrave\", \"200\"}, {\"Eacute\", \"201\"}, {\"Ecirc\", \"202\"}, {\"Euml\", \"203\"}, {\"Igrave\", \"204\"}, {\"Iacute\", \"205\"}, {\"Icirc\", \"206\"}, {\"Iuml\", \"207\"}, {\"ETH\", \"208\"}, {\"Ntilde\", \"209\"}, {\"Ograve\", \"210\"}, {\"Oacute\", \"211\"}, {\"Ocirc\", \"212\"}, {\"Otilde\", \"213\"}, {\"Ouml\", \"214\"}, {\"times\", \"215\"}, {\"Oslash\", \"216\"}, {\"Ugrave\", \"217\"}, {\"Uacute\", \"218\"}, {\"Ucirc\", \"219\"}, {\"Uuml\", \"220\"}, {\"Yacute\", \"221\"}, {\"THORN\", \"222\"}, {\"szlig\", \"223\"}, {\"agrave\", \"224\"}, {\"aacute\", \"225\"}, {\"acirc\", \"226\"}, {\"atilde\", \"227\"}, {\"auml\", \"228\"}, {\"aring\", \"229\"}, {\"aelig\", \"230\"}, {\"ccedil\", \"231\"}, {\"egrave\", \"232\"}, {\"eacute\", \"233\"}, {\"ecirc\", \"234\"}, {\"euml\", \"235\"}, {\"igrave\", \"236\"}, {\"iacute\", \"237\"}, {\"icirc\", \"238\"}, {\"iuml\", \"239\"}, {\"eth\", \"240\"}, {\"ntilde\", \"241\"}, {\"ograve\", \"242\"}, {\"oacute\", \"243\"}, {\"ocirc\", \"244\"}, {\"otilde\", \"245\"}, {\"ouml\", \"246\"}, {\"divide\", \"247\"}, {\"oslash\", \"248\"}, {\"ugrave\", \"249\"}, {\"uacute\", \"250\"}, {\"ucirc\", \"251\"}, {\"uuml\", \"252\"}, {\"yacute\", \"253\"}, {\"thorn\", \"254\"}, {\"yuml\", \"255\"}, }; static final String[][] HTML40_ARRAY = { {\"fnof\", \"402\"}, {\"Alpha\", \"913\"}, {\"Beta\", \"914\"}, {\"Gamma\", \"915\"}, {\"Delta\", \"916\"}, {\"Epsilon\", \"917\"}, {\"Zeta\", \"918\"}, {\"Eta\", \"919\"}, {\"Theta\", \"920\"}, {\"Iota\", \"921\"}, {\"Kappa\", \"922\"}, {\"Lambda\", \"923\"}, {\"Mu\", \"924\"}, {\"Nu\", \"925\"}, {\"Xi\", \"926\"}, {\"Omicron\", \"927\"}, {\"Pi\", \"928\"}, {\"Rho\", \"929\"}, {\"Sigma\", \"931\"}, {\"Tau\", \"932\"}, {\"Upsilon\", \"933\"}, {\"Phi\", \"934\"}, {\"Chi\", \"935\"}, {\"Psi\", \"936\"}, {\"Omega\", \"937\"}, {\"alpha\", \"945\"}, {\"beta\", \"946\"}, {\"gamma\", \"947\"}, {\"delta\", \"948\"}, {\"epsilon\", \"949\"}, {\"zeta\", \"950\"}, {\"eta\", \"951\"}, {\"theta\", \"952\"}, {\"iota\", \"953\"}, {\"kappa\", \"954\"}, {\"lambda\", \"955\"}, {\"mu\", \"956\"}, {\"nu\", \"957\"}, {\"xi\", \"958\"}, {\"omicron\", \"959\"}, {\"pi\", \"960\"}, {\"rho\", \"961\"}, {\"sigmaf\", \"962\"}, {\"sigma\", \"963\"}, {\"tau\", \"964\"}, {\"upsilon\", \"965\"}, {\"phi\", \"966\"}, {\"chi\", \"967\"}, {\"psi\", \"968\"}, {\"omega\", \"969\"}, {\"thetasym\", \"977\"}, {\"upsih\", \"978\"}, {\"piv\", \"982\"}, {\"bull\", \"8226\"}, {\"hellip\", \"8230\"}, {\"prime\", \"8242\"}, {\"Prime\", \"8243\"}, {\"oline\", \"8254\"}, {\"frasl\", \"8260\"}, {\"weierp\", \"8472\"}, {\"image\", \"8465\"}, {\"real\", \"8476\"}, {\"trade\", \"8482\"}, {\"alefsym\", \"8501\"}, {\"larr\", \"8592\"}, {\"uarr\", \"8593\"}, {\"rarr\", \"8594\"}, {\"darr\", \"8595\"}, {\"harr\", \"8596\"}, {\"crarr\", \"8629\"}, {\"lArr\", \"8656\"}, {\"uArr\", \"8657\"}, {\"rArr\", \"8658\"}, {\"dArr\", \"8659\"}, {\"hArr\", \"8660\"}, {\"forall\", \"8704\"}, {\"part\", \"8706\"}, {\"exist\", \"8707\"}, {\"empty\", \"8709\"}, {\"nabla\", \"8711\"}, {\"isin\", \"8712\"}, {\"notin\", \"8713\"}, {\"ni\", \"8715\"}, {\"prod\", \"8719\"}, {\"sum\", \"8721\"}, {\"minus\", \"8722\"}, {\"lowast\", \"8727\"}, {\"radic\", \"8730\"}, {\"prop\", \"8733\"}, {\"infin\", \"8734\"}, {\"ang\", \"8736\"}, {\"and\", \"8743\"}, {\"or\", \"8744\"}, {\"cap\", \"8745\"}, {\"cup\", \"8746\"}, {\"int\", \"8747\"}, {\"there4\", \"8756\"}, {\"sim\", \"8764\"}, {\"cong\", \"8773\"}, {\"asymp\", \"8776\"}, {\"ne\", \"8800\"}, {\"equiv\", \"8801\"}, {\"le\", \"8804\"}, {\"ge\", \"8805\"}, {\"sub\", \"8834\"}, {\"sup\", \"8835\"}, {\"sube\", \"8838\"}, {\"supe\", \"8839\"}, {\"oplus\", \"8853\"}, {\"otimes\", \"8855\"}, {\"perp\", \"8869\"}, {\"sdot\", \"8901\"}, {\"lceil\", \"8968\"}, {\"rceil\", \"8969\"}, {\"lfloor\", \"8970\"}, {\"rfloor\", \"8971\"}, {\"lang\", \"9001\"}, {\"rang\", \"9002\"}, {\"loz\", \"9674\"}, {\"spades\", \"9824\"}, {\"clubs\", \"9827\"}, {\"hearts\", \"9829\"}, {\"diams\", \"9830\"}, {\"OElig\", \"338\"}, {\"oelig\", \"339\"}, {\"Scaron\", \"352\"}, {\"scaron\", \"353\"}, {\"Yuml\", \"376\"}, {\"circ\", \"710\"}, {\"tilde\", \"732\"}, {\"ensp\", \"8194\"}, {\"emsp\", \"8195\"}, {\"thinsp\", \"8201\"}, {\"zwnj\", \"8204\"}, {\"zwj\", \"8205\"}, {\"lrm\", \"8206\"}, {\"rlm\", \"8207\"}, {\"ndash\", \"8211\"}, {\"mdash\", \"8212\"}, {\"lsquo\", \"8216\"}, {\"rsquo\", \"8217\"}, {\"sbquo\", \"8218\"}, {\"ldquo\", \"8220\"}, {\"rdquo\", \"8221\"}, {\"bdquo\", \"8222\"}, {\"dagger\", \"8224\"}, {\"Dagger\", \"8225\"}, {\"permil\", \"8240\"}, {\"lsaquo\", \"8249\"}, {\"rsaquo\", \"8250\"}, {\"euro\", \"8364\"}, }; public static final Entities XML; public static final Entities HTML32; public static final Entities HTML40; static { XML = new Entities(); XML.addEntities(BASIC_ARRAY); XML.addEntities(APOS_ARRAY); } static {\n        HTML32 = new Entities();\n        HTML32.addEntities(BASIC_ARRAY);\n        HTML32.addEntities(ISO8859_1_ARRAY);\n    }\n\n    static { HTML40 = new Entities(); fillWithHtml40Entities(HTML40); } static void fillWithHtml40Entities(Entities entities) {\n        entities.addEntities(BASIC_ARRAY);\n        entities.addEntities(ISO8859_1_ARRAY);\n        entities.addEntities(HTML40_ARRAY);\n    }\n\n    static interface EntityMap { void add(String name, int value); String name(int value); int value(String name); } static class PrimitiveEntityMap implements EntityMap {\n        private Map mapNameToValue = new HashMap(); private IntHashMap mapValueToName = new IntHashMap(); public void add(String name, int value) {\n            mapNameToValue.put(name, new Integer(value));\n            mapValueToName.put(value, name);\n        }\n\n        \n        public String name(int value) {\n            return (String) mapValueToName.get(value);\n        }\n\n        \n        public int value(String name) {\n            Object value = mapNameToValue.get(name);\n            if (value == null) {\n                return -1;\n            }\n            return ((Integer) value).intValue();\n        }\n    }\n\n\n    static abstract class MapIntMap implements Entities.EntityMap { protected Map mapNameToValue; protected Map mapValueToName; public void add(String name, int value) {\n            mapNameToValue.put(name, new Integer(value));\n            mapValueToName.put(new Integer(value), name);\n        }\n\n        \n        public String name(int value) {\n            return (String) mapValueToName.get(new Integer(value));\n        }\n\n        \n        public int value(String name) {\n            Object value = mapNameToValue.get(name);\n            if (value == null) {\n                return -1;\n            }\n            return ((Integer) value).intValue();\n        }\n    }\n\n    static class HashEntityMap extends MapIntMap { public HashEntityMap() {\n            mapNameToValue = new HashMap();\n            mapValueToName = new HashMap();\n        }\n    }\n\n    static class TreeEntityMap extends MapIntMap { public TreeEntityMap() {\n            mapNameToValue = new TreeMap();\n            mapValueToName = new TreeMap();\n        }\n    }\n\n    static class LookupEntityMap extends PrimitiveEntityMap { private String[] lookupTable; private int LOOKUP_TABLE_SIZE = 256; public String name(int value) {\n            if (value < LOOKUP_TABLE_SIZE) {\n                return lookupTable()[value];\n            }\n            return super.name(value);\n        }\n\n        \n        private String[] lookupTable() {\n            if (lookupTable == null) {\n                createLookupTable();\n            }\n            return lookupTable;\n        }\n\n        \n        private void createLookupTable() {\n            lookupTable = new String[LOOKUP_TABLE_SIZE];\n            for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) {\n                lookupTable[i] = super.name(i);\n            }\n        }\n    }\n\n    static class ArrayEntityMap implements EntityMap { protected int growBy = 100; protected int size = 0; protected String[] names; protected int[] values; public ArrayEntityMap() {\n            names = new String[growBy];\n            values = new int[growBy];\n        }\n\n        \n        public ArrayEntityMap(int growBy) {\n            this.growBy = growBy;\n            names = new String[growBy];\n            values = new int[growBy];\n        }\n\n        \n        public void add(String name, int value) {\n            ensureCapacity(size + 1);\n            names[size] = name;\n            values[size] = value;\n            size++;\n        }\n\n        \n        protected void ensureCapacity(int capacity) {\n            if (capacity > names.length) {\n                int newSize = Math.max(capacity, size + growBy);\n                String[] newNames = new String[newSize];\n                System.arraycopy(names, 0, newNames, 0, size);\n                names = newNames;\n                int[] newValues = new int[newSize];\n                System.arraycopy(values, 0, newValues, 0, size);\n                values = newValues;\n            }\n        }\n\n        \n        public String name(int value) {\n            for (int i = 0; i < size; ++i) {\n                if (values[i] == value) {\n                    return names[i];\n                }\n            }\n            return null;\n        }\n\n        \n        public int value(String name) {\n            for (int i = 0; i < size; ++i) {\n                if (names[i].equals(name)) {\n                    return values[i];\n                }\n            }\n            return -1;\n        }\n    }\n\n    static class BinaryEntityMap extends ArrayEntityMap { public BinaryEntityMap() {\n          super();\n        }\n\n        \n        public BinaryEntityMap(int growBy) {\n            super(growBy);\n        }\n\n        \n        private int binarySearch(int key) {\n            int low = 0;\n            int high = size - 1;\n\n            while (low <= high) {\n                int mid = (low + high) >> 1;\n                int midVal = values[mid];\n\n                if (midVal < key) {\n                    low = mid + 1;\n                } else if (midVal > key) {\n                    high = mid - 1;\n                } else {\n                    return mid; \n                }\n            }\n            return -(low + 1);  \n        }\n\n        \n        public void add(String name, int value) {\n            ensureCapacity(size + 1);\n            int insertAt = binarySearch(value);\n            if (insertAt > 0) {\n                return;    \n            }\n            insertAt = -(insertAt + 1);  \n            System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt);\n            values[insertAt] = value;\n            System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt);\n            names[insertAt] = name;\n            size++;\n        }\n\n        \n        public String name(int value) {\n            int index = binarySearch(value);\n            if (index < 0) {\n                return null;\n            }\n            return names[index];\n        }\n    }\n\n    \n    EntityMap map = new Entities.LookupEntityMap();\n\n    \n    public void addEntities(String[][] entityArray) {\n        for (int i = 0; i < entityArray.length; ++i) {\n            addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));\n        }\n    }\n\n    \n    public void addEntity(String name, int value) {\n        map.add(name, value);\n    }\n\n    \n    public String entityName(int value) {\n        return map.name(value);\n    }\n\n    \n    public int entityValue(String name) {\n        return map.value(name);\n    }\n\n    \n    public String escape(String str) {\n        \n        StringBuffer buf = new StringBuffer(str.length() * 2);\n        int i;\n        for (i = 0; i < str.length(); ++i) {\n            char ch = str.charAt(i);\n            String entityName = this.entityName(ch);\n            if (entityName == null) {\n                if (ch > 0x7F) {\n                    int intValue = ch;\n                    buf.append(\"&#\");\n                    buf.append(intValue);\n                    buf.append(';');\n                } else {\n                    buf.append(ch);\n                }\n            } else {\n                buf.append('&');\n                buf.append(entityName);\n                buf.append(';');\n            }\n        }\n        return buf.toString();\n    }\n\n    \n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            String entityName = this.entityName(c);\n            if (entityName == null) {\n                if (c > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else {\n                    writer.write(c);\n                }\n            } else {\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }\n    \n    \n    public String unescape(String str) {\n        int firstAmp = str.indexOf('&');\n        if (firstAmp < 0) {\n            return str;\n        }\n\n        StringBuffer buf = new StringBuffer(str.length());\n        buf.append(str.substring(0, firstAmp));\n        for (int i = firstAmp; i < str.length(); ++i) {\n            char ch = str.charAt(i);\n            if (ch == '&') {\n                int semi = str.indexOf(';', i + 1);\n                if (semi == -1) {\n                    buf.append(ch);\n                    continue;\n                }\n                int amph = str.indexOf('&', i + 1);\n                if( amph != -1 && amph < semi ) {\n                    \n                    buf.append(ch);\n                    continue;\n                }\n                String entityName = str.substring(i + 1, semi);\n                int entityValue;\n                if (entityName.length() == 0) {\n                    entityValue = -1;\n                } else if (entityName.charAt(0) == '#') {\n                    if (entityName.length() == 1) {\n                        entityValue = -1;\n                    } else {\n                        char charAt1 = entityName.charAt(1);\n                        try {\n                            if (charAt1 == 'x' || charAt1=='X') {\n                                entityValue = Integer.valueOf(entityName.substring(2), 16).intValue();\n                            } else {\n                                entityValue = Integer.parseInt(entityName.substring(1));\n                            }\n                        } catch (NumberFormatException ex) {\n                            entityValue = -1;\n                        }\n                    }\n                } else {\n                    entityValue = this.entityValue(entityName);\n                }\n                if (entityValue == -1) {\n                    buf.append('&');\n                    buf.append(entityName);\n                    buf.append(';');\n                } else {\n                    buf.append((char) (entityValue));\n                }\n                i = semi;\n            } else {\n                buf.append(ch);\n            }\n        }\n        return buf.toString();\n    }\n\n    \n    public void unescape(Writer writer, String string) throws IOException {\n        int firstAmp = string.indexOf('&');\n        if (firstAmp < 0) {\n            writer.write(string);\n            return;\n        }\n\n        writer.write(string, 0, firstAmp);\n        int len = string.length();\n        for (int i = firstAmp; i < len; i++) {\n            char c = string.charAt(i);\n            if (c == '&') {\n                int nextIdx = i+1;\n                int semiColonIdx = string.indexOf(';', nextIdx);\n                if (semiColonIdx == -1) {\n                    writer.write(c);\n                    continue;\n                }\n                int amphersandIdx = string.indexOf('&', i + 1);\n                if( amphersandIdx != -1 && amphersandIdx < semiColonIdx ) {\n                    \n                    writer.write(c);\n                    continue;\n                }\n                String entityContent = string.substring(nextIdx, semiColonIdx);\n                int entityValue = -1;\n                int entityContentLen = entityContent.length();\n                if (entityContentLen > 0) {\n                    if (entityContent.charAt(0) == '#') { \n                        if (entityContentLen > 1) {  \n                            char isHexChar = entityContent.charAt(1);\n                            try {\n                                switch (isHexChar) {\n                                    case 'X' :\n                                    case 'x' : {\n                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                    }\n                                    default : {\n                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                    }\n                                }\n                            } catch (NumberFormatException e) {\n                            }\n                        }\n                    } else { \n                        entityValue = this.entityValue(entityContent);\n                    }\n                }\n                \n                if (entityValue == -1) {\n                    writer.write('&');\n                    writer.write(entityContent);\n                    writer.write(';');\n                } else {\n                    writer.write(entityValue);\n                }\n                i = semiColonIdx; \n            } else {\n                writer.write(c);\n            }\n        }\n    }\n    \n}\n",
      "fixed_full_code": "\npackage org.apache.commons.lang;\n\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\n\n\nclass Entities {\n\n    private static final String[][] BASIC_ARRAY = { {\"quot\", \"34\"}, {\"amp\", \"38\"}, {\"lt\", \"60\"}, {\"gt\", \"62\"}, }; private static final String[][] APOS_ARRAY = { {\"apos\", \"39\"}, }; static final String[][] ISO8859_1_ARRAY = { {\"nbsp\", \"160\"}, {\"iexcl\", \"161\"}, {\"cent\", \"162\"}, {\"pound\", \"163\"}, {\"curren\", \"164\"}, {\"yen\", \"165\"}, {\"brvbar\", \"166\"}, {\"sect\", \"167\"}, {\"uml\", \"168\"}, {\"copy\", \"169\"}, {\"ordf\", \"170\"}, {\"laquo\", \"171\"}, {\"not\", \"172\"}, {\"shy\", \"173\"}, {\"reg\", \"174\"}, {\"macr\", \"175\"}, {\"deg\", \"176\"}, {\"plusmn\", \"177\"}, {\"sup2\", \"178\"}, {\"sup3\", \"179\"}, {\"acute\", \"180\"}, {\"micro\", \"181\"}, {\"para\", \"182\"}, {\"middot\", \"183\"}, {\"cedil\", \"184\"}, {\"sup1\", \"185\"}, {\"ordm\", \"186\"}, {\"raquo\", \"187\"}, {\"frac14\", \"188\"}, {\"frac12\", \"189\"}, {\"frac34\", \"190\"}, {\"iquest\", \"191\"}, {\"Agrave\", \"192\"}, {\"Aacute\", \"193\"}, {\"Acirc\", \"194\"}, {\"Atilde\", \"195\"}, {\"Auml\", \"196\"}, {\"Aring\", \"197\"}, {\"AElig\", \"198\"}, {\"Ccedil\", \"199\"}, {\"Egrave\", \"200\"}, {\"Eacute\", \"201\"}, {\"Ecirc\", \"202\"}, {\"Euml\", \"203\"}, {\"Igrave\", \"204\"}, {\"Iacute\", \"205\"}, {\"Icirc\", \"206\"}, {\"Iuml\", \"207\"}, {\"ETH\", \"208\"}, {\"Ntilde\", \"209\"}, {\"Ograve\", \"210\"}, {\"Oacute\", \"211\"}, {\"Ocirc\", \"212\"}, {\"Otilde\", \"213\"}, {\"Ouml\", \"214\"}, {\"times\", \"215\"}, {\"Oslash\", \"216\"}, {\"Ugrave\", \"217\"}, {\"Uacute\", \"218\"}, {\"Ucirc\", \"219\"}, {\"Uuml\", \"220\"}, {\"Yacute\", \"221\"}, {\"THORN\", \"222\"}, {\"szlig\", \"223\"}, {\"agrave\", \"224\"}, {\"aacute\", \"225\"}, {\"acirc\", \"226\"}, {\"atilde\", \"227\"}, {\"auml\", \"228\"}, {\"aring\", \"229\"}, {\"aelig\", \"230\"}, {\"ccedil\", \"231\"}, {\"egrave\", \"232\"}, {\"eacute\", \"233\"}, {\"ecirc\", \"234\"}, {\"euml\", \"235\"}, {\"igrave\", \"236\"}, {\"iacute\", \"237\"}, {\"icirc\", \"238\"}, {\"iuml\", \"239\"}, {\"eth\", \"240\"}, {\"ntilde\", \"241\"}, {\"ograve\", \"242\"}, {\"oacute\", \"243\"}, {\"ocirc\", \"244\"}, {\"otilde\", \"245\"}, {\"ouml\", \"246\"}, {\"divide\", \"247\"}, {\"oslash\", \"248\"}, {\"ugrave\", \"249\"}, {\"uacute\", \"250\"}, {\"ucirc\", \"251\"}, {\"uuml\", \"252\"}, {\"yacute\", \"253\"}, {\"thorn\", \"254\"}, {\"yuml\", \"255\"}, }; static final String[][] HTML40_ARRAY = { {\"fnof\", \"402\"}, {\"Alpha\", \"913\"}, {\"Beta\", \"914\"}, {\"Gamma\", \"915\"}, {\"Delta\", \"916\"}, {\"Epsilon\", \"917\"}, {\"Zeta\", \"918\"}, {\"Eta\", \"919\"}, {\"Theta\", \"920\"}, {\"Iota\", \"921\"}, {\"Kappa\", \"922\"}, {\"Lambda\", \"923\"}, {\"Mu\", \"924\"}, {\"Nu\", \"925\"}, {\"Xi\", \"926\"}, {\"Omicron\", \"927\"}, {\"Pi\", \"928\"}, {\"Rho\", \"929\"}, {\"Sigma\", \"931\"}, {\"Tau\", \"932\"}, {\"Upsilon\", \"933\"}, {\"Phi\", \"934\"}, {\"Chi\", \"935\"}, {\"Psi\", \"936\"}, {\"Omega\", \"937\"}, {\"alpha\", \"945\"}, {\"beta\", \"946\"}, {\"gamma\", \"947\"}, {\"delta\", \"948\"}, {\"epsilon\", \"949\"}, {\"zeta\", \"950\"}, {\"eta\", \"951\"}, {\"theta\", \"952\"}, {\"iota\", \"953\"}, {\"kappa\", \"954\"}, {\"lambda\", \"955\"}, {\"mu\", \"956\"}, {\"nu\", \"957\"}, {\"xi\", \"958\"}, {\"omicron\", \"959\"}, {\"pi\", \"960\"}, {\"rho\", \"961\"}, {\"sigmaf\", \"962\"}, {\"sigma\", \"963\"}, {\"tau\", \"964\"}, {\"upsilon\", \"965\"}, {\"phi\", \"966\"}, {\"chi\", \"967\"}, {\"psi\", \"968\"}, {\"omega\", \"969\"}, {\"thetasym\", \"977\"}, {\"upsih\", \"978\"}, {\"piv\", \"982\"}, {\"bull\", \"8226\"}, {\"hellip\", \"8230\"}, {\"prime\", \"8242\"}, {\"Prime\", \"8243\"}, {\"oline\", \"8254\"}, {\"frasl\", \"8260\"}, {\"weierp\", \"8472\"}, {\"image\", \"8465\"}, {\"real\", \"8476\"}, {\"trade\", \"8482\"}, {\"alefsym\", \"8501\"}, {\"larr\", \"8592\"}, {\"uarr\", \"8593\"}, {\"rarr\", \"8594\"}, {\"darr\", \"8595\"}, {\"harr\", \"8596\"}, {\"crarr\", \"8629\"}, {\"lArr\", \"8656\"}, {\"uArr\", \"8657\"}, {\"rArr\", \"8658\"}, {\"dArr\", \"8659\"}, {\"hArr\", \"8660\"}, {\"forall\", \"8704\"}, {\"part\", \"8706\"}, {\"exist\", \"8707\"}, {\"empty\", \"8709\"}, {\"nabla\", \"8711\"}, {\"isin\", \"8712\"}, {\"notin\", \"8713\"}, {\"ni\", \"8715\"}, {\"prod\", \"8719\"}, {\"sum\", \"8721\"}, {\"minus\", \"8722\"}, {\"lowast\", \"8727\"}, {\"radic\", \"8730\"}, {\"prop\", \"8733\"}, {\"infin\", \"8734\"}, {\"ang\", \"8736\"}, {\"and\", \"8743\"}, {\"or\", \"8744\"}, {\"cap\", \"8745\"}, {\"cup\", \"8746\"}, {\"int\", \"8747\"}, {\"there4\", \"8756\"}, {\"sim\", \"8764\"}, {\"cong\", \"8773\"}, {\"asymp\", \"8776\"}, {\"ne\", \"8800\"}, {\"equiv\", \"8801\"}, {\"le\", \"8804\"}, {\"ge\", \"8805\"}, {\"sub\", \"8834\"}, {\"sup\", \"8835\"}, {\"sube\", \"8838\"}, {\"supe\", \"8839\"}, {\"oplus\", \"8853\"}, {\"otimes\", \"8855\"}, {\"perp\", \"8869\"}, {\"sdot\", \"8901\"}, {\"lceil\", \"8968\"}, {\"rceil\", \"8969\"}, {\"lfloor\", \"8970\"}, {\"rfloor\", \"8971\"}, {\"lang\", \"9001\"}, {\"rang\", \"9002\"}, {\"loz\", \"9674\"}, {\"spades\", \"9824\"}, {\"clubs\", \"9827\"}, {\"hearts\", \"9829\"}, {\"diams\", \"9830\"}, {\"OElig\", \"338\"}, {\"oelig\", \"339\"}, {\"Scaron\", \"352\"}, {\"scaron\", \"353\"}, {\"Yuml\", \"376\"}, {\"circ\", \"710\"}, {\"tilde\", \"732\"}, {\"ensp\", \"8194\"}, {\"emsp\", \"8195\"}, {\"thinsp\", \"8201\"}, {\"zwnj\", \"8204\"}, {\"zwj\", \"8205\"}, {\"lrm\", \"8206\"}, {\"rlm\", \"8207\"}, {\"ndash\", \"8211\"}, {\"mdash\", \"8212\"}, {\"lsquo\", \"8216\"}, {\"rsquo\", \"8217\"}, {\"sbquo\", \"8218\"}, {\"ldquo\", \"8220\"}, {\"rdquo\", \"8221\"}, {\"bdquo\", \"8222\"}, {\"dagger\", \"8224\"}, {\"Dagger\", \"8225\"}, {\"permil\", \"8240\"}, {\"lsaquo\", \"8249\"}, {\"rsaquo\", \"8250\"}, {\"euro\", \"8364\"}, }; public static final Entities XML; public static final Entities HTML32; public static final Entities HTML40; static { XML = new Entities(); XML.addEntities(BASIC_ARRAY); XML.addEntities(APOS_ARRAY); } static {\n        HTML32 = new Entities();\n        HTML32.addEntities(BASIC_ARRAY);\n        HTML32.addEntities(ISO8859_1_ARRAY);\n    }\n\n    static { HTML40 = new Entities(); fillWithHtml40Entities(HTML40); } static void fillWithHtml40Entities(Entities entities) {\n        entities.addEntities(BASIC_ARRAY);\n        entities.addEntities(ISO8859_1_ARRAY);\n        entities.addEntities(HTML40_ARRAY);\n    }\n\n    static interface EntityMap { void add(String name, int value); String name(int value); int value(String name); } static class PrimitiveEntityMap implements EntityMap {\n        private Map mapNameToValue = new HashMap(); private IntHashMap mapValueToName = new IntHashMap(); public void add(String name, int value) {\n            mapNameToValue.put(name, new Integer(value));\n            mapValueToName.put(value, name);\n        }\n\n        \n        public String name(int value) {\n            return (String) mapValueToName.get(value);\n        }\n\n        \n        public int value(String name) {\n            Object value = mapNameToValue.get(name);\n            if (value == null) {\n                return -1;\n            }\n            return ((Integer) value).intValue();\n        }\n    }\n\n\n    static abstract class MapIntMap implements Entities.EntityMap { protected Map mapNameToValue; protected Map mapValueToName; public void add(String name, int value) {\n            mapNameToValue.put(name, new Integer(value));\n            mapValueToName.put(new Integer(value), name);\n        }\n\n        \n        public String name(int value) {\n            return (String) mapValueToName.get(new Integer(value));\n        }\n\n        \n        public int value(String name) {\n            Object value = mapNameToValue.get(name);\n            if (value == null) {\n                return -1;\n            }\n            return ((Integer) value).intValue();\n        }\n    }\n\n    static class HashEntityMap extends MapIntMap { public HashEntityMap() {\n            mapNameToValue = new HashMap();\n            mapValueToName = new HashMap();\n        }\n    }\n\n    static class TreeEntityMap extends MapIntMap { public TreeEntityMap() {\n            mapNameToValue = new TreeMap();\n            mapValueToName = new TreeMap();\n        }\n    }\n\n    static class LookupEntityMap extends PrimitiveEntityMap { private String[] lookupTable; private int LOOKUP_TABLE_SIZE = 256; public String name(int value) {\n            if (value < LOOKUP_TABLE_SIZE) {\n                return lookupTable()[value];\n            }\n            return super.name(value);\n        }\n\n        \n        private String[] lookupTable() {\n            if (lookupTable == null) {\n                createLookupTable();\n            }\n            return lookupTable;\n        }\n\n        \n        private void createLookupTable() {\n            lookupTable = new String[LOOKUP_TABLE_SIZE];\n            for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) {\n                lookupTable[i] = super.name(i);\n            }\n        }\n    }\n\n    static class ArrayEntityMap implements EntityMap { protected int growBy = 100; protected int size = 0; protected String[] names; protected int[] values; public ArrayEntityMap() {\n            names = new String[growBy];\n            values = new int[growBy];\n        }\n\n        \n        public ArrayEntityMap(int growBy) {\n            this.growBy = growBy;\n            names = new String[growBy];\n            values = new int[growBy];\n        }\n\n        \n        public void add(String name, int value) {\n            ensureCapacity(size + 1);\n            names[size] = name;\n            values[size] = value;\n            size++;\n        }\n\n        \n        protected void ensureCapacity(int capacity) {\n            if (capacity > names.length) {\n                int newSize = Math.max(capacity, size + growBy);\n                String[] newNames = new String[newSize];\n                System.arraycopy(names, 0, newNames, 0, size);\n                names = newNames;\n                int[] newValues = new int[newSize];\n                System.arraycopy(values, 0, newValues, 0, size);\n                values = newValues;\n            }\n        }\n\n        \n        public String name(int value) {\n            for (int i = 0; i < size; ++i) {\n                if (values[i] == value) {\n                    return names[i];\n                }\n            }\n            return null;\n        }\n\n        \n        public int value(String name) {\n            for (int i = 0; i < size; ++i) {\n                if (names[i].equals(name)) {\n                    return values[i];\n                }\n            }\n            return -1;\n        }\n    }\n\n    static class BinaryEntityMap extends ArrayEntityMap { public BinaryEntityMap() {\n          super();\n        }\n\n        \n        public BinaryEntityMap(int growBy) {\n            super(growBy);\n        }\n\n        \n        private int binarySearch(int key) {\n            int low = 0;\n            int high = size - 1;\n\n            while (low <= high) {\n                int mid = (low + high) >> 1;\n                int midVal = values[mid];\n\n                if (midVal < key) {\n                    low = mid + 1;\n                } else if (midVal > key) {\n                    high = mid - 1;\n                } else {\n                    return mid; \n                }\n            }\n            return -(low + 1);  \n        }\n\n        \n        public void add(String name, int value) {\n            ensureCapacity(size + 1);\n            int insertAt = binarySearch(value);\n            if (insertAt > 0) {\n                return;    \n            }\n            insertAt = -(insertAt + 1);  \n            System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt);\n            values[insertAt] = value;\n            System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt);\n            names[insertAt] = name;\n            size++;\n        }\n\n        \n        public String name(int value) {\n            int index = binarySearch(value);\n            if (index < 0) {\n                return null;\n            }\n            return names[index];\n        }\n    }\n\n    \n    EntityMap map = new Entities.LookupEntityMap();\n\n    \n    public void addEntities(String[][] entityArray) {\n        for (int i = 0; i < entityArray.length; ++i) {\n            addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));\n        }\n    }\n\n    \n    public void addEntity(String name, int value) {\n        map.add(name, value);\n    }\n\n    \n    public String entityName(int value) {\n        return map.name(value);\n    }\n\n    \n    public int entityValue(String name) {\n        return map.value(name);\n    }\n\n    \n    public String escape(String str) {\n        \n        StringBuffer buf = new StringBuffer(str.length() * 2);\n        int i;\n        for (i = 0; i < str.length(); ++i) {\n            char ch = str.charAt(i);\n            String entityName = this.entityName(ch);\n            if (entityName == null) {\n                if (ch > 0x7F) {\n                    int intValue = ch;\n                    buf.append(\"&#\");\n                    buf.append(intValue);\n                    buf.append(';');\n                } else {\n                    buf.append(ch);\n                }\n            } else {\n                buf.append('&');\n                buf.append(entityName);\n                buf.append(';');\n            }\n        }\n        return buf.toString();\n    }\n\n    \n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            String entityName = this.entityName(c);\n            if (entityName == null) {\n                if (c > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else {\n                    writer.write(c);\n                }\n            } else {\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }\n    \n    \n    public String unescape(String str) {\n        int firstAmp = str.indexOf('&');\n        if (firstAmp < 0) {\n            return str;\n        }\n\n        StringBuffer buf = new StringBuffer(str.length());\n        buf.append(str.substring(0, firstAmp));\n        for (int i = firstAmp; i < str.length(); ++i) {\n            char ch = str.charAt(i);\n            if (ch == '&') {\n                int semi = str.indexOf(';', i + 1);\n                if (semi == -1) {\n                    buf.append(ch);\n                    continue;\n                }\n                int amph = str.indexOf('&', i + 1);\n                if( amph != -1 && amph < semi ) {\n                    \n                    buf.append(ch);\n                    continue;\n                }\n                String entityName = str.substring(i + 1, semi);\n                int entityValue;\n                if (entityName.length() == 0) {\n                    entityValue = -1;\n                } else if (entityName.charAt(0) == '#') {\n                    if (entityName.length() == 1) {\n                        entityValue = -1;\n                    } else {\n                        char charAt1 = entityName.charAt(1);\n                        try {\n                            if (charAt1 == 'x' || charAt1=='X') {\n                                entityValue = Integer.valueOf(entityName.substring(2), 16).intValue();\n                            } else {\n                                entityValue = Integer.parseInt(entityName.substring(1));\n                            }\n                            if (entityValue > 0xFFFF) {\n                                entityValue = -1;\n                            }\n                        } catch (NumberFormatException ex) {\n                            entityValue = -1;\n                        }\n                    }\n                } else {\n                    entityValue = this.entityValue(entityName);\n                }\n                if (entityValue == -1) {\n                    buf.append('&');\n                    buf.append(entityName);\n                    buf.append(';');\n                } else {\n                    buf.append((char) (entityValue));\n                }\n                i = semi;\n            } else {\n                buf.append(ch);\n            }\n        }\n        return buf.toString();\n    }\n\n    \n    public void unescape(Writer writer, String string) throws IOException {\n        int firstAmp = string.indexOf('&');\n        if (firstAmp < 0) {\n            writer.write(string);\n            return;\n        }\n\n        writer.write(string, 0, firstAmp);\n        int len = string.length();\n        for (int i = firstAmp; i < len; i++) {\n            char c = string.charAt(i);\n            if (c == '&') {\n                int nextIdx = i+1;\n                int semiColonIdx = string.indexOf(';', nextIdx);\n                if (semiColonIdx == -1) {\n                    writer.write(c);\n                    continue;\n                }\n                int amphersandIdx = string.indexOf('&', i + 1);\n                if( amphersandIdx != -1 && amphersandIdx < semiColonIdx ) {\n                    \n                    writer.write(c);\n                    continue;\n                }\n                String entityContent = string.substring(nextIdx, semiColonIdx);\n                int entityValue = -1;\n                int entityContentLen = entityContent.length();\n                if (entityContentLen > 0) {\n                    if (entityContent.charAt(0) == '#') { \n                        if (entityContentLen > 1) {  \n                            char isHexChar = entityContent.charAt(1);\n                            try {\n                                switch (isHexChar) {\n                                    case 'X' :\n                                    case 'x' : {\n                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                        break;\n                                    }\n                                    default : {\n                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                    }\n                                }\n                                if (entityValue > 0xFFFF) {\n                                    entityValue = -1;\n                                }\n                            } catch (NumberFormatException e) {\n                                entityValue = -1;\n                            }\n                        }\n                    } else { \n                        entityValue = this.entityValue(entityContent);\n                    }\n                }\n                \n                if (entityValue == -1) {\n                    writer.write('&');\n                    writer.write(entityContent);\n                    writer.write(';');\n                } else {\n                    writer.write(entityValue);\n                }\n                i = semiColonIdx; \n            } else {\n                writer.write(c);\n            }\n        }\n    }\n    \n}\n",
      "buggy_signatures": [
        "static interface EntityMap { void add(String name, int value); String name(int value); int value(String name); } static class PrimitiveEntityMap implements EntityMap",
        "public String name(int value)",
        "public int value(String name)",
        "static abstract class MapIntMap implements Entities.EntityMap { protected Map mapNameToValue; protected Map mapValueToName; public void add(String name, int value)",
        "public String name(int value)",
        "public int value(String name)",
        "static class HashEntityMap extends MapIntMap { public HashEntityMap()",
        "static class TreeEntityMap extends MapIntMap { public TreeEntityMap()",
        "private String[] lookupTable()",
        "private void createLookupTable()",
        "public ArrayEntityMap(int growBy)",
        "public void add(String name, int value)",
        "protected void ensureCapacity(int capacity)",
        "public String name(int value)",
        "public int value(String name)",
        "static class BinaryEntityMap extends ArrayEntityMap { public BinaryEntityMap()",
        "public BinaryEntityMap(int growBy)",
        "private int binarySearch(int key)",
        "public void add(String name, int value)",
        "public String name(int value)",
        "public void addEntities(String[][] entityArray)",
        "public void addEntity(String name, int value)",
        "public String entityName(int value)",
        "public int entityValue(String name)",
        "public String escape(String str)",
        "public void escape(Writer writer, String str) throws IOException",
        "public String unescape(String str)",
        "public void unescape(Writer writer, String string) throws IOException"
      ],
      "fixed_signatures": [
        "static interface EntityMap { void add(String name, int value); String name(int value); int value(String name); } static class PrimitiveEntityMap implements EntityMap",
        "public String name(int value)",
        "public int value(String name)",
        "static abstract class MapIntMap implements Entities.EntityMap { protected Map mapNameToValue; protected Map mapValueToName; public void add(String name, int value)",
        "public String name(int value)",
        "public int value(String name)",
        "static class HashEntityMap extends MapIntMap { public HashEntityMap()",
        "static class TreeEntityMap extends MapIntMap { public TreeEntityMap()",
        "private String[] lookupTable()",
        "private void createLookupTable()",
        "public ArrayEntityMap(int growBy)",
        "public void add(String name, int value)",
        "protected void ensureCapacity(int capacity)",
        "public String name(int value)",
        "public int value(String name)",
        "static class BinaryEntityMap extends ArrayEntityMap { public BinaryEntityMap()",
        "public BinaryEntityMap(int growBy)",
        "private int binarySearch(int key)",
        "public void add(String name, int value)",
        "public String name(int value)",
        "public void addEntities(String[][] entityArray)",
        "public void addEntity(String name, int value)",
        "public String entityName(int value)",
        "public int entityValue(String name)",
        "public String escape(String str)",
        "public void escape(Writer writer, String str) throws IOException",
        "public String unescape(String str)",
        "public void unescape(Writer writer, String string) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public String unescape(String str) {\n  int firstAmp = str.indexOf('&');\n  if (firstAmp < 0) {\n  return str;\n  }\n\n  StringBuffer buf = new StringBuffer(str.length());\n  buf.append(str.substring(0, firstAmp));\n  for (int i = firstAmp; i < str.length(); ++i) {\n  char ch = str.charAt(i);\n  if (ch == '&') {\n  int semi = str.indexOf(';', i + 1);\n  if (semi == -1) {\n  buf.append(ch);\n  continue;\n  }\n  int amph = str.indexOf('&', i + 1);\n  if( amph != -1 && amph < semi ) {\n  \n  buf.append(ch);\n  continue;\n  }\n  String entityName = str.substring(i + 1, semi);\n  int entityValue;\n  if (entityName.length() == 0) {\n  entityValue = -1;\n  } else if (entityName.charAt(0) == '#') {\n  if (entityName.length() == 1) {\n  entityValue = -1;\n  } else {\n  char charAt1 = entityName.charAt(1);\n  try {\n  if (charAt1 == 'x' || charAt1=='X') {\n  entityValue = Integer.valueOf(entityName.substring(2), 16).intValue();\n  } else {\n  entityValue = Integer.parseInt(entityName.substring(1));\n  }\n  } catch (NumberFormatException ex) {\n  entityValue = -1;\n  }\n  }\n  } else {\n  entityValue = this.entityValue(entityName);\n  }\n  if (entityValue == -1) {\n  buf.append('&');\n  buf.append(entityName);\n  buf.append(';');\n  } else {\n  buf.append((char) (entityValue));\n  }\n  i = semi;\n  } else {\n  buf.append(ch);\n  }\n  }\n  return buf.toString();\n  }",
          "fixed_method": "  public String unescape(String str) {\n  int firstAmp = str.indexOf('&');\n  if (firstAmp < 0) {\n  return str;\n  }\n\n  StringBuffer buf = new StringBuffer(str.length());\n  buf.append(str.substring(0, firstAmp));\n  for (int i = firstAmp; i < str.length(); ++i) {\n  char ch = str.charAt(i);\n  if (ch == '&') {\n  int semi = str.indexOf(';', i + 1);\n  if (semi == -1) {\n  buf.append(ch);\n  continue;\n  }\n  int amph = str.indexOf('&', i + 1);\n  if( amph != -1 && amph < semi ) {\n  \n  buf.append(ch);\n  continue;\n  }\n  String entityName = str.substring(i + 1, semi);\n  int entityValue;\n  if (entityName.length() == 0) {\n  entityValue = -1;\n  } else if (entityName.charAt(0) == '#') {\n  if (entityName.length() == 1) {\n  entityValue = -1;\n  } else {\n  char charAt1 = entityName.charAt(1);\n  try {\n  if (charAt1 == 'x' || charAt1=='X') {\n  entityValue = Integer.valueOf(entityName.substring(2), 16).intValue();\n  } else {\n  entityValue = Integer.parseInt(entityName.substring(1));\n  }\n  if (entityValue > 0xFFFF) {\n  entityValue = -1;\n  }\n  } catch (NumberFormatException ex) {\n  entityValue = -1;\n  }\n  }\n  } else {\n  entityValue = this.entityValue(entityName);\n  }\n  if (entityValue == -1) {\n  buf.append('&');\n  buf.append(entityName);\n  buf.append(';');\n  } else {\n  buf.append((char) (entityValue));\n  }\n  i = semi;\n  } else {\n  buf.append(ch);\n  }\n  }\n  return buf.toString();\n  }",
          "diff": [
            "@@ -847,6 +847,9 @@",
            "                             } else {\n",
            "                                 entityValue = Integer.parseInt(entityName.substring(1));\n",
            "                             }\n",
            "+                            if (entityValue > 0xFFFF) {\n",
            "+                                entityValue = -1;\n",
            "+                            }\n",
            "                         } catch (NumberFormatException ex) {\n",
            "                             entityValue = -1;\n",
            "                         }\n"
          ],
          "changed_lines": 3
        },
        {
          "buggy_method": "  public void unescape(Writer writer, String string) throws IOException {\n  int firstAmp = string.indexOf('&');\n  if (firstAmp < 0) {\n  writer.write(string);\n  return;\n  }\n\n  writer.write(string, 0, firstAmp);\n  int len = string.length();\n  for (int i = firstAmp; i < len; i++) {\n  char c = string.charAt(i);\n  if (c == '&') {\n  int nextIdx = i+1;\n  int semiColonIdx = string.indexOf(';', nextIdx);\n  if (semiColonIdx == -1) {\n  writer.write(c);\n  continue;\n  }\n  int amphersandIdx = string.indexOf('&', i + 1);\n  if( amphersandIdx != -1 && amphersandIdx < semiColonIdx ) {\n  \n  writer.write(c);\n  continue;\n  }\n  String entityContent = string.substring(nextIdx, semiColonIdx);\n  int entityValue = -1;\n  int entityContentLen = entityContent.length();\n  if (entityContentLen > 0) {\n  if (entityContent.charAt(0) == '#') { \n  if (entityContentLen > 1) {  \n  char isHexChar = entityContent.charAt(1);\n  try {\n  switch (isHexChar) {\n  case 'X' :\n  case 'x' : {\n  entityValue = Integer.parseInt(entityContent.substring(2), 16);\n  }\n  default : {\n  entityValue = Integer.parseInt(entityContent.substring(1), 10);\n  }\n  }\n  } catch (NumberFormatException e) {\n  }\n  }\n  } else { \n  entityValue = this.entityValue(entityContent);\n  }\n  }\n  \n  if (entityValue == -1) {\n  writer.write('&');\n  writer.write(entityContent);\n  writer.write(';');\n  } else {\n  writer.write(entityValue);\n  }\n  i = semiColonIdx; \n  } else {\n  writer.write(c);\n  }\n  }\n  }",
          "fixed_method": "  public void unescape(Writer writer, String string) throws IOException {\n  int firstAmp = string.indexOf('&');\n  if (firstAmp < 0) {\n  writer.write(string);\n  return;\n  }\n\n  writer.write(string, 0, firstAmp);\n  int len = string.length();\n  for (int i = firstAmp; i < len; i++) {\n  char c = string.charAt(i);\n  if (c == '&') {\n  int nextIdx = i+1;\n  int semiColonIdx = string.indexOf(';', nextIdx);\n  if (semiColonIdx == -1) {\n  writer.write(c);\n  continue;\n  }\n  int amphersandIdx = string.indexOf('&', i + 1);\n  if( amphersandIdx != -1 && amphersandIdx < semiColonIdx ) {\n  \n  writer.write(c);\n  continue;\n  }\n  String entityContent = string.substring(nextIdx, semiColonIdx);\n  int entityValue = -1;\n  int entityContentLen = entityContent.length();\n  if (entityContentLen > 0) {\n  if (entityContent.charAt(0) == '#') { \n  if (entityContentLen > 1) {  \n  char isHexChar = entityContent.charAt(1);\n  try {\n  switch (isHexChar) {\n  case 'X' :\n  case 'x' : {\n  entityValue = Integer.parseInt(entityContent.substring(2), 16);\n  break;\n  }\n  default : {\n  entityValue = Integer.parseInt(entityContent.substring(1), 10);\n  }\n  }\n  if (entityValue > 0xFFFF) {\n  entityValue = -1;\n  }\n  } catch (NumberFormatException e) {\n  entityValue = -1;\n  }\n  }\n  } else { \n  entityValue = this.entityValue(entityContent);\n  }\n  }\n  \n  if (entityValue == -1) {\n  writer.write('&');\n  writer.write(entityContent);\n  writer.write(';');\n  } else {\n  writer.write(entityValue);\n  }\n  i = semiColonIdx; \n  } else {\n  writer.write(c);\n  }\n  }\n  }",
          "diff": [
            "@@ -917,12 +920,17 @@",
            "                                     case 'X' :\n",
            "                                     case 'x' : {\n",
            "                                         entityValue = Integer.parseInt(entityContent.substring(2), 16);\n",
            "+                                        break;\n",
            "                                     }\n",
            "                                     default : {\n",
            "                                         entityValue = Integer.parseInt(entityContent.substring(1), 10);\n",
            "                                     }\n",
            "                                 }\n",
            "+                                if (entityValue > 0xFFFF) {\n",
            "+                                    entityValue = -1;\n",
            "+                                }\n",
            "                             } catch (NumberFormatException e) {\n",
            "+                                entityValue = -1;\n",
            "                             }\n",
            "                         }\n",
            "                     } else { //escaped value content is an entity name\n"
          ],
          "changed_lines": 5
        }
      ]
    }
  ]
}
