{
  "bug_id": "50",
  "failed_tests": {
    "com.fasterxml.jackson.databind.objectid.ObjectWithCreator1261Test": [
      {
        "methodName": "testObjectIds1261",
        "error": "com.fasterxml.jackson.databind.JsonMappingException",
        "message": "Can not deserialize instance of com.fasterxml.jackson.databind.objectid.ObjectWithCreator1261Test$Child out of START_ARRAY token",
        "fail_line": "         Answer deserializedAnswer = mapper.readValue(initialAnswerString,",
        "test_source": "  public void testObjectIds1261() throws Exception {\n  ObjectMapper mapper = new ObjectMapper();\n  mapper.enable(SerializationFeature.INDENT_OUTPUT);\n  mapper.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);\n\n  Answer initialAnswer = createInitialAnswer();\n  String initialAnswerString = mapper.writeValueAsString(initialAnswer);\n// System.out.println(\"Initial answer:\\n\"+initialAnswerString);\n  JsonNode tree = mapper.readTree(initialAnswerString);\n  Answer deserializedAnswer = mapper.readValue(initialAnswerString,\n  Answer.class);\n  String reserializedAnswerString = mapper\n  .writeValueAsString(deserializedAnswer);\n  JsonNode newTree = mapper.readTree(reserializedAnswerString);\n  if (!tree.equals(newTree)) {\n  fail(\"Original and recovered Json are different. Recovered = \\n\"\n  + reserializedAnswerString + \"\\n\");\n  }\n  }",
        "stack": [
          "JsonMappingException.from line 261, DeserializationContext.reportMappingException line 1233, DeserializationContext.handleUnexpectedToken line 1121, DeserializationContext.handleUnexpectedToken line 1074, BeanDeserializerBase.deserializeFromArray line 1362, BeanDeserializer._deserializeOther line 173, BeanDeserializer.deserialize line 149, MapDeserializer._readAndBindStringKeyMap line 507, MapDeserializer.deserialize line 352, MapDeserializer.deserialize line 27, SettableBeanProperty.deserialize line 490, FieldProperty.deserializeAndSet line 101, BeanDeserializer.deserializeFromObject line 356, BeanDeserializerBase.deserializeWithObjectId line 1156, BeanDeserializer.deserialize line 145, MapDeserializer._readAndBindStringKeyMap line 507, MapDeserializer.deserialize line 352, MapDeserializer.deserialize line 27, SettableBeanProperty.deserialize line 490, FieldProperty.deserializeAndSet line 101, BeanDeserializer.vanillaDeserialize line 275, BeanDeserializer.deserialize line 139, ObjectMapper._readMapAndClose line 3789, ObjectMapper.readValue line 2833, ObjectWithCreator1261Test.testObjectIds1261 line 76"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.impl.*;\nimport com.fasterxml.jackson.databind.util.NameTransformer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class BeanDeserializer extends BeanDeserializerBase implements java.io.Serializable { private static final long serialVersionUID = 1L; protected transient Exception _nullFromCreator; public BeanDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, HashSet<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) {\n        super(builder, beanDesc, properties, backRefs,\n                ignorableProps, ignoreAllUnknown, hasViews);\n    }\n\n    \n    protected BeanDeserializer(BeanDeserializerBase src) {\n        super(src, src._ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(BeanDeserializerBase src, boolean ignoreAllUnknown) {\n        super(src, ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(BeanDeserializerBase src, NameTransformer unwrapper) {\n        super(src, unwrapper);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, ObjectIdReader oir) {\n        super(src, oir);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, Set<String> ignorableProps) {\n        super(src, ignorableProps);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, BeanPropertyMap props) {\n        super(src, props);\n    }\n\n    @Override\n    public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper) {\n        \n        if (getClass() != BeanDeserializer.class) {\n            return this;\n        }\n        \n        return new BeanDeserializer(this, unwrapper);\n    }\n\n    @Override\n    public BeanDeserializer withObjectIdReader(ObjectIdReader oir) {\n        return new BeanDeserializer(this, oir);\n    }\n\n    @Override\n    public BeanDeserializer withIgnorableProperties(Set<String> ignorableProps) {\n        return new BeanDeserializer(this, ignorableProps);\n    }\n\n    @Override\n    public BeanDeserializerBase withBeanProperties(BeanPropertyMap props) {\n        return new BeanDeserializer(this, props);\n    }\n\n    @Override\n    protected BeanDeserializerBase asArrayDeserializer() {\n        SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n        return new BeanAsArrayDeserializer(this, props);\n    }\n\n    \n\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (p.isExpectedStartObjectToken()) {\n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, p.nextToken());\n            }\n            \n            \n            p.nextToken();\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        }\n        return _deserializeOther(p, ctxt, p.getCurrentToken());\n    }\n\n    protected final Object _deserializeOther(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException {\n        \n        switch (t) {\n        case VALUE_STRING:\n            return deserializeFromString(p, ctxt);\n        case VALUE_NUMBER_INT:\n            return deserializeFromNumber(p, ctxt);\n        case VALUE_NUMBER_FLOAT:\n\t    return deserializeFromDouble(p, ctxt);\n        case VALUE_EMBEDDED_OBJECT:\n            return deserializeFromEmbedded(p, ctxt);\n        case VALUE_TRUE:\n        case VALUE_FALSE:\n            return deserializeFromBoolean(p, ctxt);\n\n        case VALUE_NULL:\n            return deserializeFromNull(p, ctxt);\n        case START_ARRAY:\n            \n            return deserializeFromArray(p, ctxt);\n        case FIELD_NAME:\n        case END_OBJECT: \n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, t);\n            }\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        default:\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    @Deprecated \n    protected Object _missingToken(JsonParser p, DeserializationContext ctxt) throws IOException {\n        throw ctxt.endOfInputException(handledType());\n    }\n\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        \n        p.setCurrentValue(bean);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_unwrappedPropertyHandler != null) {\n            return deserializeWithUnwrapped(p, ctxt, bean);\n        }\n        if (_externalTypeIdHandler != null) {\n            return deserializeWithExternalTypeId(p, ctxt, bean);\n        }\n        String propName;\n\n        \n        if (p.isExpectedStartObjectToken()) {\n            propName = p.nextFieldName();\n            if (propName == null) {\n                return bean;\n            }\n        } else {\n            if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n                propName = p.getCurrentName();\n            } else {\n                return bean;\n            }\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        do {\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n\n            if (prop != null) { \n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        } while ((propName = p.nextFieldName()) != null);\n        return bean;\n    }\n\n    \n\n    \n    private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException {\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        \n        p.setCurrentValue(bean);\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                SettableBeanProperty prop = _beanProperties.find(propName);\n\n                if (prop != null) { \n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (_objectIdReader != null && _objectIdReader.maySerializeAsObject()) {\n            if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)\n                    && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {\n                return deserializeFromObjectId(p, ctxt);\n            }\n        }\n        if (_nonStandardCreation) {\n            if (_unwrappedPropertyHandler != null) {\n                return deserializeWithUnwrapped(p, ctxt);\n            }\n            if (_externalTypeIdHandler != null) {\n                return deserializeWithExternalTypeId(p, ctxt);\n            }\n            Object bean = deserializeFromObjectUsingNonDefault(p, ctxt);\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            \n            \n            return bean;\n        }\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        \n        p.setCurrentValue(bean);\n        if (p.canReadObjectId()) {\n            Object id = p.getObjectId();\n            if (id != null) {\n                _handleTypedObjectId(p, ctxt, bean, id);\n            }\n        }\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) { \n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer unknown = null;\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                if (buffer.assignParameter(creatorProp,\n                        _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    if (bean == null) {\n                        return ctxt.handleInstantiationProblem(handledType(), null,\n                                _creatorReturnedNullException());\n                    }\n                    \n                    p.setCurrentValue(bean);\n\n                    \n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        return handlePolymorphic(p, ctxt, bean, unknown);\n                    }\n                    if (unknown != null) { \n                        bean = handleUnknownProperties(ctxt, bean, unknown);\n                    }\n                    \n                    return deserialize(p, ctxt, bean);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                    buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                    \n                    \n                    \n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (unknown == null) {\n                unknown = new TokenBuffer(p, ctxt);\n            }\n            unknown.writeFieldName(propName);\n            unknown.copyCurrentStructure(p);\n        }\n\n        \n        Object bean;\n        try {\n            bean =  creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            bean = null; \n        }\n        if (unknown != null) {\n            \n            if (bean.getClass() != _beanType.getRawClass()) {\n                return handlePolymorphic(null, ctxt, bean, unknown);\n            }\n            \n            return handleUnknownProperties(ctxt, bean, unknown);\n        }\n        return bean;\n    }\n\n    \n\n    protected final Object _deserializeWithErrorWrapping(JsonParser p, DeserializationContext ctxt, SettableBeanProperty prop) throws IOException {\n        try {\n            return prop.deserialize(p, ctxt);\n        } catch (Exception e) {\n            wrapAndThrow(e, _beanType.getRawClass(), prop.getName(), ctxt);\n            \n            return null;\n        }\n    }\n\n    \n    protected Object deserializeFromNull(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        \n        \n        if (p.requiresCustomCodec()) { \n            @SuppressWarnings(\"resource\")\n            TokenBuffer tb = new TokenBuffer(p, ctxt);\n            tb.writeEndObject();\n            JsonParser p2 = tb.asParser(p);\n            p2.nextToken(); \n            \n            Object ob = _vanillaProcessing ? vanillaDeserialize(p2, ctxt, JsonToken.END_OBJECT)\n                    : deserializeFromObject(p2, ctxt);\n            p2.close();\n            return ob;\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    \n\n    protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException {\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                \n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    if (!prop.visibleInView(activeView)) {\n                        p.skipChildren();\n                        continue;\n                    }\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n    \n    \n\n    \n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\n        }\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n\n        \n        p.setCurrentValue(bean);\n\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        String propName = p.hasTokenId(JsonTokenId.ID_FIELD_NAME) ? p.getCurrentName() : null;\n\n        for (; propName != null; propName = p.nextFieldName()) {\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            p.nextToken();\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    \n                    p.setCurrentValue(bean);\n                    \n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken(); \n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        \n                        \n                        tokens.close();\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n            }\n        }\n\n        \n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null; \n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    \n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\n        }\n        if (_delegateDeserializer != null) {\n            \n            return _valueInstantiator.createUsingDelegate(ctxt,\n                    _delegateDeserializer.deserialize(p, ctxt));\n        }\n\n        return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\n    }\n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n\n        for (JsonToken t = p.getCurrentToken(); t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            t = p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                \n                if (t.isScalarValue()) {\n                    ext.handleTypePropertyValue(p, ctxt, propName, bean);\n                }\n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            if (ext.handlePropertyValue(p, ctxt, propName, bean)) {\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            handleUnknownProperty(p, ctxt, bean, propName);\n        }\n        \n        return ext.complete(p, ctxt, bean);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                \n                \n                if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                    ;\n                } else {\n                    \n                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                        t = p.nextToken(); \n                        Object bean;\n                        try {\n                            bean = creator.build(ctxt, buffer);\n                        } catch (Exception e) {\n                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                            continue; \n                        }\n                        \n                        while (t == JsonToken.FIELD_NAME) {\n                            p.nextToken(); \n                            tokens.copyCurrentStructure(p);\n                            t = p.nextToken();\n                        }\n                        if (bean.getClass() != _beanType.getRawClass()) {\n                            \n                            \n                            ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                            return null;\n                        }\n                        return ext.complete(p, ctxt, bean);\n                    }\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            \n            if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n\n        \n        try {\n            return ext.complete(p, ctxt, buffer, creator);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n\n    \n    protected Exception _creatorReturnedNullException() {\n        if (_nullFromCreator == null) {\n            _nullFromCreator = new NullPointerException(\"JSON Creator returned null\");\n        }\n        return _nullFromCreator;\n    }\n\n    \n\n\n\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.impl.*;\nimport com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\nimport com.fasterxml.jackson.databind.util.NameTransformer;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\n\n\npublic class BeanDeserializer extends BeanDeserializerBase implements java.io.Serializable { private static final long serialVersionUID = 1L; protected transient Exception _nullFromCreator; public BeanDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, HashSet<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) {\n        super(builder, beanDesc, properties, backRefs,\n                ignorableProps, ignoreAllUnknown, hasViews);\n    }\n\n    \n    protected BeanDeserializer(BeanDeserializerBase src) {\n        super(src, src._ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(BeanDeserializerBase src, boolean ignoreAllUnknown) {\n        super(src, ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(BeanDeserializerBase src, NameTransformer unwrapper) {\n        super(src, unwrapper);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, ObjectIdReader oir) {\n        super(src, oir);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, Set<String> ignorableProps) {\n        super(src, ignorableProps);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, BeanPropertyMap props) {\n        super(src, props);\n    }\n\n    @Override\n    public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper) {\n        \n        if (getClass() != BeanDeserializer.class) {\n            return this;\n        }\n        \n        return new BeanDeserializer(this, unwrapper);\n    }\n\n    @Override\n    public BeanDeserializer withObjectIdReader(ObjectIdReader oir) {\n        return new BeanDeserializer(this, oir);\n    }\n\n    @Override\n    public BeanDeserializer withIgnorableProperties(Set<String> ignorableProps) {\n        return new BeanDeserializer(this, ignorableProps);\n    }\n\n    @Override\n    public BeanDeserializerBase withBeanProperties(BeanPropertyMap props) {\n        return new BeanDeserializer(this, props);\n    }\n\n    @Override\n    protected BeanDeserializerBase asArrayDeserializer() {\n        SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n        return new BeanAsArrayDeserializer(this, props);\n    }\n\n    \n\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (p.isExpectedStartObjectToken()) {\n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, p.nextToken());\n            }\n            \n            \n            p.nextToken();\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        }\n        return _deserializeOther(p, ctxt, p.getCurrentToken());\n    }\n\n    protected final Object _deserializeOther(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException {\n        \n        switch (t) {\n        case VALUE_STRING:\n            return deserializeFromString(p, ctxt);\n        case VALUE_NUMBER_INT:\n            return deserializeFromNumber(p, ctxt);\n        case VALUE_NUMBER_FLOAT:\n\t    return deserializeFromDouble(p, ctxt);\n        case VALUE_EMBEDDED_OBJECT:\n            return deserializeFromEmbedded(p, ctxt);\n        case VALUE_TRUE:\n        case VALUE_FALSE:\n            return deserializeFromBoolean(p, ctxt);\n\n        case VALUE_NULL:\n            return deserializeFromNull(p, ctxt);\n        case START_ARRAY:\n            \n            return deserializeFromArray(p, ctxt);\n        case FIELD_NAME:\n        case END_OBJECT: \n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, t);\n            }\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        default:\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    @Deprecated \n    protected Object _missingToken(JsonParser p, DeserializationContext ctxt) throws IOException {\n        throw ctxt.endOfInputException(handledType());\n    }\n\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        \n        p.setCurrentValue(bean);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_unwrappedPropertyHandler != null) {\n            return deserializeWithUnwrapped(p, ctxt, bean);\n        }\n        if (_externalTypeIdHandler != null) {\n            return deserializeWithExternalTypeId(p, ctxt, bean);\n        }\n        String propName;\n\n        \n        if (p.isExpectedStartObjectToken()) {\n            propName = p.nextFieldName();\n            if (propName == null) {\n                return bean;\n            }\n        } else {\n            if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n                propName = p.getCurrentName();\n            } else {\n                return bean;\n            }\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        do {\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n\n            if (prop != null) { \n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        } while ((propName = p.nextFieldName()) != null);\n        return bean;\n    }\n\n    \n\n    \n    private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException {\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        \n        p.setCurrentValue(bean);\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                SettableBeanProperty prop = _beanProperties.find(propName);\n\n                if (prop != null) { \n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        if (_objectIdReader != null && _objectIdReader.maySerializeAsObject()) {\n            if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)\n                    && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {\n                return deserializeFromObjectId(p, ctxt);\n            }\n        }\n        if (_nonStandardCreation) {\n            if (_unwrappedPropertyHandler != null) {\n                return deserializeWithUnwrapped(p, ctxt);\n            }\n            if (_externalTypeIdHandler != null) {\n                return deserializeWithExternalTypeId(p, ctxt);\n            }\n            Object bean = deserializeFromObjectUsingNonDefault(p, ctxt);\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            \n            \n            return bean;\n        }\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        \n        p.setCurrentValue(bean);\n        if (p.canReadObjectId()) {\n            Object id = p.getObjectId();\n            if (id != null) {\n                _handleTypedObjectId(p, ctxt, bean, id);\n            }\n        }\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) { \n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer unknown = null;\n\n        JsonToken t = p.getCurrentToken();\n        List<BeanReferring> referrings = null;\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                if (buffer.assignParameter(creatorProp,\n                        _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    if (bean == null) {\n                        return ctxt.handleInstantiationProblem(handledType(), null,\n                                _creatorReturnedNullException());\n                    }\n                    \n                    p.setCurrentValue(bean);\n\n                    \n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        return handlePolymorphic(p, ctxt, bean, unknown);\n                    }\n                    if (unknown != null) { \n                        bean = handleUnknownProperties(ctxt, bean, unknown);\n                    }\n                    \n                    return deserialize(p, ctxt, bean);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                try {\n                    buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                } catch (UnresolvedForwardReference reference) {\n                    \n                    \n                    \n                    BeanReferring referring = handleUnresolvedReference(p, prop, buffer, reference);\n                    if (referrings == null) {\n                        referrings = new ArrayList<BeanReferring>();\n                    }\n                    referrings.add(referring);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (unknown == null) {\n                unknown = new TokenBuffer(p, ctxt);\n            }\n            unknown.writeFieldName(propName);\n            unknown.copyCurrentStructure(p);\n        }\n\n        \n        Object bean;\n        try {\n            bean =  creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            bean = null; \n        }\n        if (referrings != null) {\n            for (BeanReferring referring : referrings) {\n               referring.setBean(bean);\n            }\n        }\n        if (unknown != null) {\n            \n            if (bean.getClass() != _beanType.getRawClass()) {\n                return handlePolymorphic(null, ctxt, bean, unknown);\n            }\n            \n            return handleUnknownProperties(ctxt, bean, unknown);\n        }\n        return bean;\n    }\n\n    \n    private BeanReferring handleUnresolvedReference(JsonParser p, SettableBeanProperty prop, PropertyValueBuffer buffer, UnresolvedForwardReference reference) throws JsonMappingException {\n        BeanReferring referring = new BeanReferring(reference, prop.getType().getRawClass(),\n                buffer, prop);\n        reference.getRoid().appendReferring(referring);\n        return referring;\n    }\n\n    protected final Object _deserializeWithErrorWrapping(JsonParser p, DeserializationContext ctxt, SettableBeanProperty prop) throws IOException {\n        try {\n            return prop.deserialize(p, ctxt);\n        } catch (Exception e) {\n            wrapAndThrow(e, _beanType.getRawClass(), prop.getName(), ctxt);\n            \n            return null;\n        }\n    }\n\n    \n    protected Object deserializeFromNull(JsonParser p, DeserializationContext ctxt) throws IOException {\n        \n        \n        \n        if (p.requiresCustomCodec()) { \n            @SuppressWarnings(\"resource\")\n            TokenBuffer tb = new TokenBuffer(p, ctxt);\n            tb.writeEndObject();\n            JsonParser p2 = tb.asParser(p);\n            p2.nextToken(); \n            \n            Object ob = _vanillaProcessing ? vanillaDeserialize(p2, ctxt, JsonToken.END_OBJECT)\n                    : deserializeFromObject(p2, ctxt);\n            p2.close();\n            return ob;\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    \n\n    protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException {\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                \n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    if (!prop.visibleInView(activeView)) {\n                        p.skipChildren();\n                        continue;\n                    }\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n    \n    \n\n    \n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\n        }\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n\n        \n        p.setCurrentValue(bean);\n\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        String propName = p.hasTokenId(JsonTokenId.ID_FIELD_NAME) ? p.getCurrentName() : null;\n\n        for (; propName != null; propName = p.nextFieldName()) {\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            p.nextToken();\n            if (prop != null) { \n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    \n                    p.setCurrentValue(bean);\n                    \n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken(); \n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        \n                        \n                        tokens.close();\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            \n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n            }\n        }\n\n        \n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null; \n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    \n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\n        }\n        if (_delegateDeserializer != null) {\n            \n            return _valueInstantiator.createUsingDelegate(ctxt,\n                    _delegateDeserializer.deserialize(p, ctxt));\n        }\n\n        return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\n    }\n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n\n        for (JsonToken t = p.getCurrentToken(); t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            t = p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { \n                \n                if (t.isScalarValue()) {\n                    ext.handleTypePropertyValue(p, ctxt, propName, bean);\n                }\n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            \n            if (ext.handlePropertyValue(p, ctxt, propName, bean)) {\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            \n            handleUnknownProperty(p, ctxt, bean, propName);\n        }\n        \n        return ext.complete(p, ctxt, bean);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException {\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); \n            \n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                \n                \n                \n                if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                    ;\n                } else {\n                    \n                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                        t = p.nextToken(); \n                        Object bean;\n                        try {\n                            bean = creator.build(ctxt, buffer);\n                        } catch (Exception e) {\n                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                            continue; \n                        }\n                        \n                        while (t == JsonToken.FIELD_NAME) {\n                            p.nextToken(); \n                            tokens.copyCurrentStructure(p);\n                            t = p.nextToken();\n                        }\n                        if (bean.getClass() != _beanType.getRawClass()) {\n                            \n                            \n                            ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                            return null;\n                        }\n                        return ext.complete(p, ctxt, bean);\n                    }\n                }\n                continue;\n            }\n            \n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            \n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            \n            if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                continue;\n            }\n            \n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n\n        \n        try {\n            return ext.complete(p, ctxt, buffer, creator);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n\n    \n    protected Exception _creatorReturnedNullException() {\n        if (_nullFromCreator == null) {\n            _nullFromCreator = new NullPointerException(\"JSON Creator returned null\");\n        }\n        return _nullFromCreator;\n    }\n\n    \n    static class BeanReferring extends Referring { private final SettableBeanProperty _prop; private Object _bean; public void setBean(Object bean) {\n            _bean = bean;\n        }\n\n        BeanReferring(UnresolvedForwardReference ref,\n                Class<?> valueType, PropertyValueBuffer buffer, SettableBeanProperty prop)\n        {\n            super(ref, valueType);\n            _prop = prop;\n        }\n\n        @Override\n        public void handleResolvedForwardReference(Object id, Object value) throws IOException {\n            _prop.set(_bean, value);\n        }\n    }\n}\n",
      "buggy_signatures": [
        "protected BeanDeserializer(BeanDeserializerBase src)",
        "protected BeanDeserializer(BeanDeserializerBase src, boolean ignoreAllUnknown)",
        "protected BeanDeserializer(BeanDeserializerBase src, NameTransformer unwrapper)",
        "public BeanDeserializer(BeanDeserializerBase src, ObjectIdReader oir)",
        "public BeanDeserializer(BeanDeserializerBase src, Set<String> ignorableProps)",
        "public BeanDeserializer(BeanDeserializerBase src, BeanPropertyMap props)",
        "public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)",
        "public BeanDeserializer withObjectIdReader(ObjectIdReader oir)",
        "public BeanDeserializer withIgnorableProperties(Set<String> ignorableProps)",
        "public BeanDeserializerBase withBeanProperties(BeanPropertyMap props)",
        "protected BeanDeserializerBase asArrayDeserializer()",
        "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected final Object _deserializeOther(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException",
        "protected Object _missingToken(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException",
        "public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException",
        "protected final Object _deserializeWithErrorWrapping(JsonParser p, DeserializationContext ctxt, SettableBeanProperty prop) throws IOException",
        "protected Object deserializeFromNull(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Exception _creatorReturnedNullException()"
      ],
      "fixed_signatures": [
        "protected BeanDeserializer(BeanDeserializerBase src)",
        "protected BeanDeserializer(BeanDeserializerBase src, boolean ignoreAllUnknown)",
        "protected BeanDeserializer(BeanDeserializerBase src, NameTransformer unwrapper)",
        "public BeanDeserializer(BeanDeserializerBase src, ObjectIdReader oir)",
        "public BeanDeserializer(BeanDeserializerBase src, Set<String> ignorableProps)",
        "public BeanDeserializer(BeanDeserializerBase src, BeanPropertyMap props)",
        "public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)",
        "public BeanDeserializer withObjectIdReader(ObjectIdReader oir)",
        "public BeanDeserializer withIgnorableProperties(Set<String> ignorableProps)",
        "public BeanDeserializerBase withBeanProperties(BeanPropertyMap props)",
        "protected BeanDeserializerBase asArrayDeserializer()",
        "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected final Object _deserializeOther(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException",
        "protected Object _missingToken(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "private final Object vanillaDeserialize(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException",
        "public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException",
        "private BeanReferring handleUnresolvedReference(JsonParser p, SettableBeanProperty prop, PropertyValueBuffer buffer, UnresolvedForwardReference reference) throws JsonMappingException",
        "protected final Object _deserializeWithErrorWrapping(JsonParser p, DeserializationContext ctxt, SettableBeanProperty prop) throws IOException",
        "protected Object deserializeFromNull(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException",
        "protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt) throws IOException",
        "protected Exception _creatorReturnedNullException()",
        "static class BeanReferring extends Referring { private final SettableBeanProperty _prop; private Object _bean; public void setBean(Object bean)",
        "public void handleResolvedForwardReference(Object id, Object value) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "",
          "fixed_method": "",
          "diff": [
            "@@ -6,6 +6,7 @@",
            " import com.fasterxml.jackson.core.*;\n",
            " import com.fasterxml.jackson.databind.*;\n",
            " import com.fasterxml.jackson.databind.deser.impl.*;\n",
            "+import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\n",
            " import com.fasterxml.jackson.databind.util.NameTransformer;\n",
            " import com.fasterxml.jackson.databind.util.TokenBuffer;\n",
            " \n"
          ],
          "changed_lines": 1
        },
        {
          "buggy_method": "  protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n  final PropertyBasedCreator creator = _propertyBasedCreator;\n  PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n  TokenBuffer unknown = null;\n\n  JsonToken t = p.getCurrentToken();\n  for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n  String propName = p.getCurrentName();\n  p.nextToken(); \n  \n  SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n  if (creatorProp != null) {\n  \n  if (buffer.assignParameter(creatorProp,\n  _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n  p.nextToken(); \n  Object bean;\n  try {\n  bean = creator.build(ctxt, buffer);\n  } catch (Exception e) {\n  bean = wrapInstantiationProblem(e, ctxt);\n  }\n  if (bean == null) {\n  return ctxt.handleInstantiationProblem(handledType(), null,\n  _creatorReturnedNullException());\n  }\n  \n  p.setCurrentValue(bean);\n\n  \n  if (bean.getClass() != _beanType.getRawClass()) {\n  return handlePolymorphic(p, ctxt, bean, unknown);\n  }\n  if (unknown != null) { \n  bean = handleUnknownProperties(ctxt, bean, unknown);\n  }\n  \n  return deserialize(p, ctxt, bean);\n  }\n  continue;\n  }\n  \n  if (buffer.readIdProperty(propName)) {\n  continue;\n  }\n  \n  SettableBeanProperty prop = _beanProperties.find(propName);\n  if (prop != null) {\n  buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n  \n  \n  \n  continue;\n  }\n  \n  if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n  handleIgnoredProperty(p, ctxt, handledType(), propName);\n  continue;\n  }\n  \n  if (_anySetter != null) {\n  try {\n  buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n  } catch (Exception e) {\n  wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n  }\n  continue;\n  }\n  \n  if (unknown == null) {\n  unknown = new TokenBuffer(p, ctxt);\n  }\n  unknown.writeFieldName(propName);\n  unknown.copyCurrentStructure(p);\n  }\n\n  \n  Object bean;\n  try {\n  bean =  creator.build(ctxt, buffer);\n  } catch (Exception e) {\n  wrapInstantiationProblem(e, ctxt);\n  bean = null; \n  }\n  if (unknown != null) {\n  \n  if (bean.getClass() != _beanType.getRawClass()) {\n  return handlePolymorphic(null, ctxt, bean, unknown);\n  }\n  \n  return handleUnknownProperties(ctxt, bean, unknown);\n  }\n  return bean;\n  }",
          "fixed_method": "  protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n  final PropertyBasedCreator creator = _propertyBasedCreator;\n  PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n  TokenBuffer unknown = null;\n\n  JsonToken t = p.getCurrentToken();\n  List<BeanReferring> referrings = null;\n  for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n  String propName = p.getCurrentName();\n  p.nextToken(); \n  \n  SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n  if (creatorProp != null) {\n  \n  if (buffer.assignParameter(creatorProp,\n  _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n  p.nextToken(); \n  Object bean;\n  try {\n  bean = creator.build(ctxt, buffer);\n  } catch (Exception e) {\n  bean = wrapInstantiationProblem(e, ctxt);\n  }\n  if (bean == null) {\n  return ctxt.handleInstantiationProblem(handledType(), null,\n  _creatorReturnedNullException());\n  }\n  \n  p.setCurrentValue(bean);\n\n  \n  if (bean.getClass() != _beanType.getRawClass()) {\n  return handlePolymorphic(p, ctxt, bean, unknown);\n  }\n  if (unknown != null) { \n  bean = handleUnknownProperties(ctxt, bean, unknown);\n  }\n  \n  return deserialize(p, ctxt, bean);\n  }\n  continue;\n  }\n  \n  if (buffer.readIdProperty(propName)) {\n  continue;\n  }\n  \n  SettableBeanProperty prop = _beanProperties.find(propName);\n  if (prop != null) {\n  try {\n  buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n  } catch (UnresolvedForwardReference reference) {\n  \n  \n  \n  BeanReferring referring = handleUnresolvedReference(p, prop, buffer, reference);\n  if (referrings == null) {\n  referrings = new ArrayList<BeanReferring>();\n  }\n  referrings.add(referring);\n  }\n  continue;\n  }\n  \n  if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n  handleIgnoredProperty(p, ctxt, handledType(), propName);\n  continue;\n  }\n  \n  if (_anySetter != null) {\n  try {\n  buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n  } catch (Exception e) {\n  wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n  }\n  continue;\n  }\n  \n  if (unknown == null) {\n  unknown = new TokenBuffer(p, ctxt);\n  }\n  unknown.writeFieldName(propName);\n  unknown.copyCurrentStructure(p);\n  }\n\n  \n  Object bean;\n  try {\n  bean =  creator.build(ctxt, buffer);\n  } catch (Exception e) {\n  wrapInstantiationProblem(e, ctxt);\n  bean = null; \n  }\n  if (referrings != null) {\n  for (BeanReferring referring : referrings) {\n  referring.setBean(bean);\n  }\n  }\n  if (unknown != null) {\n  \n  if (bean.getClass() != _beanType.getRawClass()) {\n  return handlePolymorphic(null, ctxt, bean, unknown);\n  }\n  \n  return handleUnknownProperties(ctxt, bean, unknown);\n  }\n  return bean;\n  }",
          "diff": [
            "@@ -384,6 +385,7 @@",
            "         TokenBuffer unknown = null;\n",
            " \n",
            "         JsonToken t = p.getCurrentToken();\n",
            "+        List<BeanReferring> referrings = null;\n",
            "         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n",
            "             String propName = p.getCurrentName();\n",
            "             p.nextToken(); // to point to value\n",
            "@@ -426,10 +428,18 @@",
            "             // regular property? needs buffering\n",
            "             SettableBeanProperty prop = _beanProperties.find(propName);\n",
            "             if (prop != null) {\n",
            "+                try {\n",
            "                     buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n",
            "+                } catch (UnresolvedForwardReference reference) {\n",
            "                     // 14-Jun-2016, tatu: As per [databind#1261], looks like we need additional\n",
            "                     //    handling of forward references here. Not exactly sure why existing\n",
            "                     //    facilities did not cover, but this does appear to solve the problem\n",
            "+                    BeanReferring referring = handleUnresolvedReference(p, prop, buffer, reference);\n",
            "+                    if (referrings == null) {\n",
            "+                        referrings = new ArrayList<BeanReferring>();\n",
            "+                    }\n",
            "+                    referrings.add(referring);\n",
            "+                }\n",
            "                 continue;\n",
            "             }\n",
            "             // Things marked as ignorable should not be passed to any setter\n",
            "@@ -462,6 +472,11 @@",
            "             wrapInstantiationProblem(e, ctxt);\n",
            "             bean = null; // never gets here\n",
            "         }\n",
            "+        if (referrings != null) {\n",
            "+            for (BeanReferring referring : referrings) {\n",
            "+               referring.setBean(bean);\n",
            "+            }\n",
            "+        }\n",
            "         if (unknown != null) {\n",
            "             // polymorphic?\n",
            "             if (bean.getClass() != _beanType.getRawClass()) {\n"
          ],
          "changed_lines": 14
        },
        {
          "buggy_method": "  protected final Object _deserializeWithErrorWrapping(JsonParser p, DeserializationContext ctxt, SettableBeanProperty prop) throws IOException {\n  try {\n  return prop.deserialize(p, ctxt);\n  } catch (Exception e) {\n  wrapAndThrow(e, _beanType.getRawClass(), prop.getName(), ctxt);\n  \n  return null;\n  }\n  }",
          "fixed_method": "  private BeanReferring handleUnresolvedReference(JsonParser p, SettableBeanProperty prop, PropertyValueBuffer buffer, UnresolvedForwardReference reference) throws JsonMappingException {\n  BeanReferring referring = new BeanReferring(reference, prop.getType().getRawClass(),\n  buffer, prop);\n  reference.getRoid().appendReferring(referring);\n  return referring;\n  }",
          "diff": [
            "@@ -476,6 +491,16 @@",
            "     /**\n",
            "      * @since 2.8\n",
            "      */\n",
            "+    private BeanReferring handleUnresolvedReference(JsonParser p,\n",
            "+            SettableBeanProperty prop, PropertyValueBuffer buffer,\n",
            "+            UnresolvedForwardReference reference)\n",
            "+        throws JsonMappingException\n",
            "+    {\n",
            "+        BeanReferring referring = new BeanReferring(reference, prop.getType().getRawClass(),\n",
            "+                buffer, prop);\n",
            "+        reference.getRoid().appendReferring(referring);\n",
            "+        return referring;\n",
            "+    }\n",
            " \n",
            "     protected final Object _deserializeWithErrorWrapping(JsonParser p,\n",
            "             DeserializationContext ctxt, SettableBeanProperty prop)\n"
          ],
          "changed_lines": 10
        },
        {
          "buggy_method": "  protected Exception _creatorReturnedNullException() {\n  if (_nullFromCreator == null) {\n  _nullFromCreator = new NullPointerException(\"JSON Creator returned null\");\n  }\n  return _nullFromCreator;\n  }",
          "fixed_method": "  protected Exception _creatorReturnedNullException() {\n  if (_nullFromCreator == null) {\n  _nullFromCreator = new NullPointerException(\"JSON Creator returned null\");\n  }\n  return _nullFromCreator;\n  }",
          "diff": [
            "@@ -930,7 +955,24 @@",
            "     /**\n",
            "      * @since 2.8\n",
            "      */\n",
            "-\n",
            "-\n",
            "-\n",
            "+    static class BeanReferring extends Referring {\n",
            "+        private final SettableBeanProperty _prop;\n",
            "+        private Object _bean;\n",
            "+\n",
            "+        public void setBean(Object bean) {\n",
            "+            _bean = bean;\n",
            "+        }\n",
            "+\n",
            "+        BeanReferring(UnresolvedForwardReference ref,\n",
            "+                Class<?> valueType, PropertyValueBuffer buffer, SettableBeanProperty prop)\n",
            "+        {\n",
            "+            super(ref, valueType);\n",
            "+            _prop = prop;\n",
            "+        }\n",
            "+\n",
            "+        @Override\n",
            "+        public void handleResolvedForwardReference(Object id, Object value) throws IOException {\n",
            "+            _prop.set(_bean, value);\n",
            "+        }\n",
            "+    }\n",
            " }\n"
          ],
          "changed_lines": 23
        }
      ]
    }
  ]
}
