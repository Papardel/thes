{
  "bug_id": "112",
  "failed_tests": {
    "com.fasterxml.jackson.databind.deser.creators.DelegatingArrayCreator2324Test": [
      {
        "methodName": "testDeserializeBagOfStrings",
        "error": "com.fasterxml.jackson.databind.exc.MismatchedInputException",
        "message": "Cannot construct instance of `com.fasterxml.jackson.databind.deser.creators.DelegatingArrayCreator2324Test$ImmutableBag` (although at least one Creator exists): no default no-arguments constructor found",
        "fail_line": "                .readValue(\"{\\\"strings\\\": [ \\\"a\\\", \\\"b\\\", \\\"c\\\"]}\");",
        "test_source": "  public void testDeserializeBagOfStrings() throws Exception {\n  WithBagOfStrings result = MAPPER.readerFor(WithBagOfStrings.class)\n  .readValue(\"{\\\"strings\\\": [ \\\"a\\\", \\\"b\\\", \\\"c\\\"]}\");\n  assertEquals(3, result.getStrings().size());\n  }",
        "stack": [
          "MismatchedInputException.from line 63, DeserializationContext.reportInputMismatch line 1343, DeserializationContext.handleMissingInstantiator line 1032, ValueInstantiator.createUsingDefault line 189, StdValueInstantiator.createUsingDefault line 267, StringCollectionDeserializer.deserialize line 169, StringCollectionDeserializer.deserialize line 21, MethodProperty.deserializeAndSet line 129, BeanDeserializer.vanillaDeserialize line 288, BeanDeserializer.deserialize line 151, ObjectReader._bindAndClose line 1611, ObjectReader.readValue line 1219, DelegatingArrayCreator2324Test.testDeserializeBagOfStrings line 60"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java",
      "buggy_full_code": "package com.fasterxml.jackson.databind.deser.std;\n\nimport java.io.IOException;\nimport java.util.Collection;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\nimport com.fasterxml.jackson.databind.deser.ContextualDeserializer;\nimport com.fasterxml.jackson.databind.deser.NullValueProvider;\nimport com.fasterxml.jackson.databind.deser.ValueInstantiator;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n\n\n@JacksonStdImpl\npublic final class StringCollectionDeserializer extends ContainerDeserializerBase<Collection<String>> implements ContextualDeserializer { private static final long serialVersionUID = 1L; protected final JsonDeserializer<String> _valueDeserializer; protected final ValueInstantiator _valueInstantiator; protected final JsonDeserializer<Object> _delegateDeserializer; public StringCollectionDeserializer(JavaType collectionType, JsonDeserializer<?> valueDeser, ValueInstantiator valueInstantiator) {\n        this(collectionType, valueInstantiator, null, valueDeser, valueDeser, null);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected StringCollectionDeserializer(JavaType collectionType, ValueInstantiator valueInstantiator, JsonDeserializer<?> delegateDeser, JsonDeserializer<?> valueDeser, NullValueProvider nuller, Boolean unwrapSingle) {\n        super(collectionType, nuller, unwrapSingle);\n        _valueDeserializer = (JsonDeserializer<String>) valueDeser;\n        _valueInstantiator = valueInstantiator;\n        _delegateDeserializer = (JsonDeserializer<Object>) delegateDeser;\n    }\n\n    protected StringCollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser, JsonDeserializer<?> valueDeser, NullValueProvider nuller, Boolean unwrapSingle) {\n        if ((_unwrapSingle == unwrapSingle) && (_nullProvider == nuller)\n                && (_valueDeserializer == valueDeser) && (_delegateDeserializer == delegateDeser)) {\n            return this;\n        }\n        return new StringCollectionDeserializer(_containerType, _valueInstantiator,\n                delegateDeser, valueDeser, nuller, unwrapSingle);\n    }\n\n    @Override \n    public boolean isCachable() {\n        \n        \n        return (_valueDeserializer == null) && (_delegateDeserializer == null);\n    }\n    \n    \n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n        \n        JsonDeserializer<Object> delegate = null;\n        if (_valueInstantiator != null) {\n            \n            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n            if (delegateCreator != null) {\n                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                delegate = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        final JavaType valueType = _containerType.getContentType();\n        if (valueDeser == null) {\n            \n            valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n            if (valueDeser == null) {\n            \n                valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n            }\n        } else { \n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n        }\n        \n        \n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n        if (isDefaultDeserializer(valueDeser)) {\n            valueDeser = null;\n        }\n        return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n    }\n    \n    \n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public JsonDeserializer<Object> getContentDeserializer() {\n        JsonDeserializer<?> deser = _valueDeserializer;\n        return (JsonDeserializer<Object>) deser;\n    }\n\n    @Override\n    public ValueInstantiator getValueInstantiator() {\n        return _valueInstantiator;\n    }\n\n    \n    \n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Collection<String> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_delegateDeserializer != null) {\n            return (Collection<String>) _valueInstantiator.createUsingDelegate(ctxt,\n                    _delegateDeserializer.deserialize(p, ctxt));\n        }\n        final Collection<String> result = (Collection<String>) _valueInstantiator.createUsingDefault(ctxt);\n        return deserialize(p, ctxt, result);\n    }\n\n    @Override\n    public Collection<String> deserialize(JsonParser p, DeserializationContext ctxt, Collection<String> result) throws IOException {\n        \n        if (!p.isExpectedStartArrayToken()) {\n            return handleNonArray(p, ctxt, result);\n        }\n\n        if (_valueDeserializer != null) {\n            return deserializeUsingCustom(p, ctxt, result, _valueDeserializer);\n        }\n        try {\n            while (true) {\n                \n                String value = p.nextTextValue();\n                if (value != null) {\n                    result.add(value);\n                    continue;\n                }\n                JsonToken t = p.getCurrentToken();\n                if (t == JsonToken.END_ARRAY) {\n                    break;\n                }\n                if (t == JsonToken.VALUE_NULL) {\n                    if (_skipNullValues) {\n                        continue;\n                    }\n                    value = (String) _nullProvider.getNullValue(ctxt);\n                } else {\n                    value = _parseString(p, ctxt);\n                }\n                result.add(value);\n            }\n        } catch (Exception e) {\n            throw JsonMappingException.wrapWithPath(e, result, result.size());\n        }\n        return result;\n    }\n    \n    private Collection<String> deserializeUsingCustom(JsonParser p, DeserializationContext ctxt, Collection<String> result, final JsonDeserializer<String> deser) throws IOException {\n        while (true) {\n            \n            String value;\n            if (p.nextTextValue() == null) {\n                JsonToken t = p.getCurrentToken();\n                if (t == JsonToken.END_ARRAY) {\n                    break;\n                }\n                \n                if (t == JsonToken.VALUE_NULL) {\n                    if (_skipNullValues) {\n                        continue;\n                    }\n                    value = (String) _nullProvider.getNullValue(ctxt);\n                } else {\n                    value = deser.deserialize(p, ctxt);\n                }\n            } else {\n                value = deser.deserialize(p, ctxt);\n            }\n            result.add(value);\n        }\n        return result;\n    }\n    \n    @Override\n    public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n        \n        return typeDeserializer.deserializeTypedFromArray(p, ctxt);\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    private final Collection<String> handleNonArray(JsonParser p, DeserializationContext ctxt, Collection<String> result) throws IOException {\n        \n        boolean canWrap = (_unwrapSingle == Boolean.TRUE) ||\n                ((_unwrapSingle == null) &&\n                        ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\n        if (!canWrap) {\n            return (Collection<String>) ctxt.handleUnexpectedToken(_containerType.getRawClass(), p);\n        }\n        \n        JsonDeserializer<String> valueDes = _valueDeserializer;\n        JsonToken t = p.getCurrentToken();\n\n        String value;\n        \n        if (t == JsonToken.VALUE_NULL) {\n            \n            if (_skipNullValues) {\n                return result;\n            }\n            value = (String) _nullProvider.getNullValue(ctxt);\n        } else {\n            value = (valueDes == null) ? _parseString(p, ctxt) : valueDes.deserialize(p, ctxt);\n        }\n        result.add(value);\n        return result;\n    }\n}\n",
      "fixed_full_code": "package com.fasterxml.jackson.databind.deser.std;\n\nimport java.io.IOException;\nimport java.util.Collection;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\nimport com.fasterxml.jackson.databind.deser.ContextualDeserializer;\nimport com.fasterxml.jackson.databind.deser.NullValueProvider;\nimport com.fasterxml.jackson.databind.deser.ValueInstantiator;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n\n\n@JacksonStdImpl\npublic final class StringCollectionDeserializer extends ContainerDeserializerBase<Collection<String>> implements ContextualDeserializer { private static final long serialVersionUID = 1L; protected final JsonDeserializer<String> _valueDeserializer; protected final ValueInstantiator _valueInstantiator; protected final JsonDeserializer<Object> _delegateDeserializer; public StringCollectionDeserializer(JavaType collectionType, JsonDeserializer<?> valueDeser, ValueInstantiator valueInstantiator) {\n        this(collectionType, valueInstantiator, null, valueDeser, valueDeser, null);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected StringCollectionDeserializer(JavaType collectionType, ValueInstantiator valueInstantiator, JsonDeserializer<?> delegateDeser, JsonDeserializer<?> valueDeser, NullValueProvider nuller, Boolean unwrapSingle) {\n        super(collectionType, nuller, unwrapSingle);\n        _valueDeserializer = (JsonDeserializer<String>) valueDeser;\n        _valueInstantiator = valueInstantiator;\n        _delegateDeserializer = (JsonDeserializer<Object>) delegateDeser;\n    }\n\n    protected StringCollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser, JsonDeserializer<?> valueDeser, NullValueProvider nuller, Boolean unwrapSingle) {\n        if ((_unwrapSingle == unwrapSingle) && (_nullProvider == nuller)\n                && (_valueDeserializer == valueDeser) && (_delegateDeserializer == delegateDeser)) {\n            return this;\n        }\n        return new StringCollectionDeserializer(_containerType, _valueInstantiator,\n                delegateDeser, valueDeser, nuller, unwrapSingle);\n    }\n\n    @Override \n    public boolean isCachable() {\n        \n        \n        return (_valueDeserializer == null) && (_delegateDeserializer == null);\n    }\n    \n    \n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n        \n        JsonDeserializer<Object> delegate = null;\n        if (_valueInstantiator != null) {\n            \n            AnnotatedWithParams delegateCreator = _valueInstantiator.getArrayDelegateCreator();\n            if (delegateCreator != null) {\n                JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n                delegate = findDeserializer(ctxt, delegateType, property);\n            } else if ((delegateCreator = _valueInstantiator.getDelegateCreator()) != null) {\n                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                delegate = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        final JavaType valueType = _containerType.getContentType();\n        if (valueDeser == null) {\n            \n            valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n            if (valueDeser == null) {\n            \n                valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n            }\n        } else { \n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n        }\n        \n        \n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n        if (isDefaultDeserializer(valueDeser)) {\n            valueDeser = null;\n        }\n        return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n    }\n    \n    \n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public JsonDeserializer<Object> getContentDeserializer() {\n        JsonDeserializer<?> deser = _valueDeserializer;\n        return (JsonDeserializer<Object>) deser;\n    }\n\n    @Override\n    public ValueInstantiator getValueInstantiator() {\n        return _valueInstantiator;\n    }\n\n    \n    \n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Collection<String> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (_delegateDeserializer != null) {\n            return (Collection<String>) _valueInstantiator.createUsingDelegate(ctxt,\n                    _delegateDeserializer.deserialize(p, ctxt));\n        }\n        final Collection<String> result = (Collection<String>) _valueInstantiator.createUsingDefault(ctxt);\n        return deserialize(p, ctxt, result);\n    }\n\n    @Override\n    public Collection<String> deserialize(JsonParser p, DeserializationContext ctxt, Collection<String> result) throws IOException {\n        \n        if (!p.isExpectedStartArrayToken()) {\n            return handleNonArray(p, ctxt, result);\n        }\n\n        if (_valueDeserializer != null) {\n            return deserializeUsingCustom(p, ctxt, result, _valueDeserializer);\n        }\n        try {\n            while (true) {\n                \n                String value = p.nextTextValue();\n                if (value != null) {\n                    result.add(value);\n                    continue;\n                }\n                JsonToken t = p.getCurrentToken();\n                if (t == JsonToken.END_ARRAY) {\n                    break;\n                }\n                if (t == JsonToken.VALUE_NULL) {\n                    if (_skipNullValues) {\n                        continue;\n                    }\n                    value = (String) _nullProvider.getNullValue(ctxt);\n                } else {\n                    value = _parseString(p, ctxt);\n                }\n                result.add(value);\n            }\n        } catch (Exception e) {\n            throw JsonMappingException.wrapWithPath(e, result, result.size());\n        }\n        return result;\n    }\n    \n    private Collection<String> deserializeUsingCustom(JsonParser p, DeserializationContext ctxt, Collection<String> result, final JsonDeserializer<String> deser) throws IOException {\n        while (true) {\n            \n            String value;\n            if (p.nextTextValue() == null) {\n                JsonToken t = p.getCurrentToken();\n                if (t == JsonToken.END_ARRAY) {\n                    break;\n                }\n                \n                if (t == JsonToken.VALUE_NULL) {\n                    if (_skipNullValues) {\n                        continue;\n                    }\n                    value = (String) _nullProvider.getNullValue(ctxt);\n                } else {\n                    value = deser.deserialize(p, ctxt);\n                }\n            } else {\n                value = deser.deserialize(p, ctxt);\n            }\n            result.add(value);\n        }\n        return result;\n    }\n    \n    @Override\n    public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n        \n        return typeDeserializer.deserializeTypedFromArray(p, ctxt);\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    private final Collection<String> handleNonArray(JsonParser p, DeserializationContext ctxt, Collection<String> result) throws IOException {\n        \n        boolean canWrap = (_unwrapSingle == Boolean.TRUE) ||\n                ((_unwrapSingle == null) &&\n                        ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\n        if (!canWrap) {\n            return (Collection<String>) ctxt.handleUnexpectedToken(_containerType.getRawClass(), p);\n        }\n        \n        JsonDeserializer<String> valueDes = _valueDeserializer;\n        JsonToken t = p.getCurrentToken();\n\n        String value;\n        \n        if (t == JsonToken.VALUE_NULL) {\n            \n            if (_skipNullValues) {\n                return result;\n            }\n            value = (String) _nullProvider.getNullValue(ctxt);\n        } else {\n            value = (valueDes == null) ? _parseString(p, ctxt) : valueDes.deserialize(p, ctxt);\n        }\n        result.add(value);\n        return result;\n    }\n}\n",
      "buggy_signatures": [
        "protected StringCollectionDeserializer(JavaType collectionType, ValueInstantiator valueInstantiator, JsonDeserializer<?> delegateDeser, JsonDeserializer<?> valueDeser, NullValueProvider nuller, Boolean unwrapSingle)",
        "protected StringCollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser, JsonDeserializer<?> valueDeser, NullValueProvider nuller, Boolean unwrapSingle)",
        "public boolean isCachable()",
        "public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException",
        "public JsonDeserializer<Object> getContentDeserializer()",
        "public ValueInstantiator getValueInstantiator()",
        "public Collection<String> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Collection<String> deserialize(JsonParser p, DeserializationContext ctxt, Collection<String> result) throws IOException",
        "private Collection<String> deserializeUsingCustom(JsonParser p, DeserializationContext ctxt, Collection<String> result, final JsonDeserializer<String> deser) throws IOException",
        "public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException",
        "private final Collection<String> handleNonArray(JsonParser p, DeserializationContext ctxt, Collection<String> result) throws IOException"
      ],
      "fixed_signatures": [
        "protected StringCollectionDeserializer(JavaType collectionType, ValueInstantiator valueInstantiator, JsonDeserializer<?> delegateDeser, JsonDeserializer<?> valueDeser, NullValueProvider nuller, Boolean unwrapSingle)",
        "protected StringCollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser, JsonDeserializer<?> valueDeser, NullValueProvider nuller, Boolean unwrapSingle)",
        "public boolean isCachable()",
        "public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException",
        "public JsonDeserializer<Object> getContentDeserializer()",
        "public ValueInstantiator getValueInstantiator()",
        "public Collection<String> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
        "public Collection<String> deserialize(JsonParser p, DeserializationContext ctxt, Collection<String> result) throws IOException",
        "private Collection<String> deserializeUsingCustom(JsonParser p, DeserializationContext ctxt, Collection<String> result, final JsonDeserializer<String> deser) throws IOException",
        "public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException",
        "private final Collection<String> handleNonArray(JsonParser p, DeserializationContext ctxt, Collection<String> result) throws IOException"
      ],
      "methods": [
        {
          "buggy_method": "  public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n  \n  JsonDeserializer<Object> delegate = null;\n  if (_valueInstantiator != null) {\n  \n  AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n  if (delegateCreator != null) {\n  JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n  delegate = findDeserializer(ctxt, delegateType, property);\n  }\n  }\n  JsonDeserializer<?> valueDeser = _valueDeserializer;\n  final JavaType valueType = _containerType.getContentType();\n  if (valueDeser == null) {\n  \n  valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n  if (valueDeser == null) {\n  \n  valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n  }\n  } else { \n  valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n  }\n  \n  \n  Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n  JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n  NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n  if (isDefaultDeserializer(valueDeser)) {\n  valueDeser = null;\n  }\n  return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n  }",
          "fixed_method": "  public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n  \n  JsonDeserializer<Object> delegate = null;\n  if (_valueInstantiator != null) {\n  \n  AnnotatedWithParams delegateCreator = _valueInstantiator.getArrayDelegateCreator();\n  if (delegateCreator != null) {\n  JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n  delegate = findDeserializer(ctxt, delegateType, property);\n  } else if ((delegateCreator = _valueInstantiator.getDelegateCreator()) != null) {\n  JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n  delegate = findDeserializer(ctxt, delegateType, property);\n  }\n  }\n  JsonDeserializer<?> valueDeser = _valueDeserializer;\n  final JavaType valueType = _containerType.getContentType();\n  if (valueDeser == null) {\n  \n  valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n  if (valueDeser == null) {\n  \n  valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n  }\n  } else { \n  valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n  }\n  \n  \n  Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n  JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n  NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n  if (isDefaultDeserializer(valueDeser)) {\n  valueDeser = null;\n  }\n  return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n  }",
          "diff": [
            "@@ -104,8 +104,11 @@",
            "         JsonDeserializer<Object> delegate = null;\n",
            "         if (_valueInstantiator != null) {\n",
            "             // [databind#2324]: check both array-delegating and delegating\n",
            "-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n",
            "+            AnnotatedWithParams delegateCreator = _valueInstantiator.getArrayDelegateCreator();\n",
            "             if (delegateCreator != null) {\n",
            "+                JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n",
            "+                delegate = findDeserializer(ctxt, delegateType, property);\n",
            "+            } else if ((delegateCreator = _valueInstantiator.getDelegateCreator()) != null) {\n",
            "                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n",
            "                 delegate = findDeserializer(ctxt, delegateType, property);\n",
            "             }\n"
          ],
          "changed_lines": 5
        }
      ]
    }
  ]
}
