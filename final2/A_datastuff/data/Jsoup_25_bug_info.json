{
  "bug_id": "25",
  "failed_tests": {
    "org.jsoup.parser.HtmlParserTest": [
      {
        "methodName": "preservesSpaceInTextArea",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<One[",
        "fail_line": "        assertEquals(expect, el.text());",
        "test_source": "",
        "stack": [
          "HtmlParserTest.preservesSpaceInTextArea line 184"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/jsoup/parser/Tag.java",
      "buggy_full_code": "package org.jsoup.parser;\n\nimport org.jsoup.helper.Validate;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n\npublic class Tag { private static final Map<String, Tag> tags = new HashMap<String, Tag>(); private String tagName; private boolean isBlock = true; private boolean formatAsBlock = true; private boolean canContainBlock = true; private boolean canContainInline = true; private boolean empty = false; private boolean selfClosing = false; private boolean preserveWhitespace = false; private Tag(String tagName) {\n        this.tagName = tagName.toLowerCase();\n    }\n\n    \n    public String getName() {\n        return tagName;\n    }\n\n    \n    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                \n                tag = new Tag(tagName);\n                tag.isBlock = false;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }\n\n    \n    public boolean isBlock() {\n        return isBlock;\n    }\n\n    \n    public boolean formatAsBlock() {\n        return formatAsBlock;\n    }\n\n    \n    public boolean canContainBlock() {\n        return canContainBlock;\n    }\n\n    \n    public boolean isInline() {\n        return !isBlock;\n    }\n\n    \n    public boolean isData() {\n        return !canContainInline && !isEmpty();\n    }\n\n    \n    public boolean isEmpty() {\n        return empty;\n    }\n\n    \n    public boolean isSelfClosing() {\n        return empty || selfClosing;\n    }\n\n    \n    public boolean isKnownTag() {\n        return tags.containsKey(tagName);\n    }\n\n    \n    public static boolean isKnownTag(String tagName) {\n        return tags.containsKey(tagName);\n    }\n\n    \n    public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }\n\n    Tag setSelfClosing() {\n        selfClosing = true;\n        return this;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Tag)) return false;\n\n        Tag tag = (Tag) o;\n\n        if (canContainBlock != tag.canContainBlock) return false;\n        if (canContainInline != tag.canContainInline) return false;\n        if (empty != tag.empty) return false;\n        if (formatAsBlock != tag.formatAsBlock) return false;\n        if (isBlock != tag.isBlock) return false;\n        if (preserveWhitespace != tag.preserveWhitespace) return false;\n        if (selfClosing != tag.selfClosing) return false;\n        if (!tagName.equals(tag.tagName)) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = tagName.hashCode();\n        result = 31 * result + (isBlock ? 1 : 0);\n        result = 31 * result + (formatAsBlock ? 1 : 0);\n        result = 31 * result + (canContainBlock ? 1 : 0);\n        result = 31 * result + (canContainInline ? 1 : 0);\n        result = 31 * result + (empty ? 1 : 0);\n        result = 31 * result + (selfClosing ? 1 : 0);\n        result = 31 * result + (preserveWhitespace ? 1 : 0);\n        return result;\n    }\n\n    public String toString() {\n        return tagName;\n    }\n\n    \n    \n    private static final String[] blockTags = { \"html\", \"head\", \"body\", \"frameset\", \"script\", \"noscript\", \"style\", \"meta\", \"link\", \"title\", \"frame\", \"noframes\", \"section\", \"nav\", \"aside\", \"hgroup\", \"header\", \"footer\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"ul\", \"ol\", \"pre\", \"div\", \"blockquote\", \"hr\", \"address\", \"figure\", \"figcaption\", \"form\", \"fieldset\", \"ins\", \"del\", \"dl\", \"dt\", \"dd\", \"li\", \"table\", \"caption\", \"thead\", \"tfoot\", \"tbody\", \"colgroup\", \"col\", \"tr\", \"th\", \"td\", \"video\", \"audio\", \"canvas\", \"details\", \"menu\", \"plaintext\" }; private static final String[] inlineTags = { \"object\", \"base\", \"font\", \"tt\", \"i\", \"b\", \"u\", \"big\", \"small\", \"em\", \"strong\", \"dfn\", \"code\", \"samp\", \"kbd\", \"var\", \"cite\", \"abbr\", \"time\", \"acronym\", \"mark\", \"ruby\", \"rt\", \"rp\", \"a\", \"img\", \"br\", \"wbr\", \"map\", \"q\", \"sub\", \"sup\", \"bdo\", \"iframe\", \"embed\", \"span\", \"input\", \"select\", \"textarea\", \"label\", \"button\", \"optgroup\", \"option\", \"legend\", \"datalist\", \"keygen\", \"output\", \"progress\", \"meter\", \"area\", \"param\", \"source\", \"track\", \"summary\", \"command\", \"device\" }; private static final String[] emptyTags = { \"meta\", \"link\", \"base\", \"frame\", \"img\", \"br\", \"wbr\", \"embed\", \"hr\", \"input\", \"keygen\", \"col\", \"command\", \"device\" }; private static final String[] formatAsInlineTags = { \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\" }; private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; static { for (String tagName : blockTags) {\n            Tag tag = new Tag(tagName);\n            register(tag);\n        }\n        for (String tagName : inlineTags) {\n            Tag tag = new Tag(tagName);\n            tag.isBlock = false;\n            tag.canContainBlock = false;\n            tag.formatAsBlock = false;\n            register(tag);\n        }\n\n        \n        for (String tagName : emptyTags) {\n            Tag tag = tags.get(tagName);\n            Validate.notNull(tag);\n            tag.canContainBlock = false;\n            tag.canContainInline = false;\n            tag.empty = true;\n        }\n\n        for (String tagName : formatAsInlineTags) {\n            Tag tag = tags.get(tagName);\n            Validate.notNull(tag);\n            tag.formatAsBlock = false;\n        }\n\n        for (String tagName : preserveWhitespaceTags) {\n            Tag tag = tags.get(tagName);\n            Validate.notNull(tag);\n            tag.preserveWhitespace = true;\n        }\n    }\n\n    private static Tag register(Tag tag) {\n        synchronized (tags) {\n            tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }\n}\n",
      "fixed_full_code": "package org.jsoup.parser;\n\nimport org.jsoup.helper.Validate;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n\npublic class Tag { private static final Map<String, Tag> tags = new HashMap<String, Tag>(); private String tagName; private boolean isBlock = true; private boolean formatAsBlock = true; private boolean canContainBlock = true; private boolean canContainInline = true; private boolean empty = false; private boolean selfClosing = false; private boolean preserveWhitespace = false; private Tag(String tagName) {\n        this.tagName = tagName.toLowerCase();\n    }\n\n    \n    public String getName() {\n        return tagName;\n    }\n\n    \n    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                \n                tag = new Tag(tagName);\n                tag.isBlock = false;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }\n\n    \n    public boolean isBlock() {\n        return isBlock;\n    }\n\n    \n    public boolean formatAsBlock() {\n        return formatAsBlock;\n    }\n\n    \n    public boolean canContainBlock() {\n        return canContainBlock;\n    }\n\n    \n    public boolean isInline() {\n        return !isBlock;\n    }\n\n    \n    public boolean isData() {\n        return !canContainInline && !isEmpty();\n    }\n\n    \n    public boolean isEmpty() {\n        return empty;\n    }\n\n    \n    public boolean isSelfClosing() {\n        return empty || selfClosing;\n    }\n\n    \n    public boolean isKnownTag() {\n        return tags.containsKey(tagName);\n    }\n\n    \n    public static boolean isKnownTag(String tagName) {\n        return tags.containsKey(tagName);\n    }\n\n    \n    public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }\n\n    Tag setSelfClosing() {\n        selfClosing = true;\n        return this;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Tag)) return false;\n\n        Tag tag = (Tag) o;\n\n        if (canContainBlock != tag.canContainBlock) return false;\n        if (canContainInline != tag.canContainInline) return false;\n        if (empty != tag.empty) return false;\n        if (formatAsBlock != tag.formatAsBlock) return false;\n        if (isBlock != tag.isBlock) return false;\n        if (preserveWhitespace != tag.preserveWhitespace) return false;\n        if (selfClosing != tag.selfClosing) return false;\n        if (!tagName.equals(tag.tagName)) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = tagName.hashCode();\n        result = 31 * result + (isBlock ? 1 : 0);\n        result = 31 * result + (formatAsBlock ? 1 : 0);\n        result = 31 * result + (canContainBlock ? 1 : 0);\n        result = 31 * result + (canContainInline ? 1 : 0);\n        result = 31 * result + (empty ? 1 : 0);\n        result = 31 * result + (selfClosing ? 1 : 0);\n        result = 31 * result + (preserveWhitespace ? 1 : 0);\n        return result;\n    }\n\n    public String toString() {\n        return tagName;\n    }\n\n    \n    \n    private static final String[] blockTags = { \"html\", \"head\", \"body\", \"frameset\", \"script\", \"noscript\", \"style\", \"meta\", \"link\", \"title\", \"frame\", \"noframes\", \"section\", \"nav\", \"aside\", \"hgroup\", \"header\", \"footer\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"ul\", \"ol\", \"pre\", \"div\", \"blockquote\", \"hr\", \"address\", \"figure\", \"figcaption\", \"form\", \"fieldset\", \"ins\", \"del\", \"dl\", \"dt\", \"dd\", \"li\", \"table\", \"caption\", \"thead\", \"tfoot\", \"tbody\", \"colgroup\", \"col\", \"tr\", \"th\", \"td\", \"video\", \"audio\", \"canvas\", \"details\", \"menu\", \"plaintext\" }; private static final String[] inlineTags = { \"object\", \"base\", \"font\", \"tt\", \"i\", \"b\", \"u\", \"big\", \"small\", \"em\", \"strong\", \"dfn\", \"code\", \"samp\", \"kbd\", \"var\", \"cite\", \"abbr\", \"time\", \"acronym\", \"mark\", \"ruby\", \"rt\", \"rp\", \"a\", \"img\", \"br\", \"wbr\", \"map\", \"q\", \"sub\", \"sup\", \"bdo\", \"iframe\", \"embed\", \"span\", \"input\", \"select\", \"textarea\", \"label\", \"button\", \"optgroup\", \"option\", \"legend\", \"datalist\", \"keygen\", \"output\", \"progress\", \"meter\", \"area\", \"param\", \"source\", \"track\", \"summary\", \"command\", \"device\" }; private static final String[] emptyTags = { \"meta\", \"link\", \"base\", \"frame\", \"img\", \"br\", \"wbr\", \"embed\", \"hr\", \"input\", \"keygen\", \"col\", \"command\", \"device\" }; private static final String[] formatAsInlineTags = { \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\" }; private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"}; static { for (String tagName : blockTags) {\n            Tag tag = new Tag(tagName);\n            register(tag);\n        }\n        for (String tagName : inlineTags) {\n            Tag tag = new Tag(tagName);\n            tag.isBlock = false;\n            tag.canContainBlock = false;\n            tag.formatAsBlock = false;\n            register(tag);\n        }\n\n        \n        for (String tagName : emptyTags) {\n            Tag tag = tags.get(tagName);\n            Validate.notNull(tag);\n            tag.canContainBlock = false;\n            tag.canContainInline = false;\n            tag.empty = true;\n        }\n\n        for (String tagName : formatAsInlineTags) {\n            Tag tag = tags.get(tagName);\n            Validate.notNull(tag);\n            tag.formatAsBlock = false;\n        }\n\n        for (String tagName : preserveWhitespaceTags) {\n            Tag tag = tags.get(tagName);\n            Validate.notNull(tag);\n            tag.preserveWhitespace = true;\n        }\n    }\n\n    private static Tag register(Tag tag) {\n        synchronized (tags) {\n            tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }\n}\n",
      "buggy_signatures": [
        "public String getName()",
        "public static Tag valueOf(String tagName)",
        "synchronized (tags)",
        "public boolean isBlock()",
        "public boolean formatAsBlock()",
        "public boolean canContainBlock()",
        "public boolean isInline()",
        "public boolean isData()",
        "public boolean isEmpty()",
        "public boolean isSelfClosing()",
        "public boolean isKnownTag()",
        "public static boolean isKnownTag(String tagName)",
        "public boolean preserveWhitespace()",
        "public boolean equals(Object o)",
        "public int hashCode()",
        "public String toString()",
        "private static Tag register(Tag tag)",
        "synchronized (tags)"
      ],
      "fixed_signatures": [
        "public String getName()",
        "public static Tag valueOf(String tagName)",
        "synchronized (tags)",
        "public boolean isBlock()",
        "public boolean formatAsBlock()",
        "public boolean canContainBlock()",
        "public boolean isInline()",
        "public boolean isData()",
        "public boolean isEmpty()",
        "public boolean isSelfClosing()",
        "public boolean isKnownTag()",
        "public static boolean isKnownTag(String tagName)",
        "public boolean preserveWhitespace()",
        "public boolean equals(Object o)",
        "public int hashCode()",
        "public String toString()",
        "private static Tag register(Tag tag)",
        "synchronized (tags)"
      ],
      "methods": [
        {
          "buggy_method": "  public String toString() {\n  return tagName;\n  }",
          "fixed_method": "  public String toString() {\n  return tagName;\n  }",
          "diff": [
            "@@ -215,7 +215,7 @@",
            "     private static final String[] formatAsInlineTags = {\n",
            "             \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\"\n",
            "     };\n",
            "-    private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};\n",
            "+    private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};\n",
            " \n",
            "     static {\n",
            "         // creates\n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
