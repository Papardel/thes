{
  "bug_id": "29",
  "failed_tests": {
    "org.apache.commons.lang3.SystemUtilsTest": [
      {
        "methodName": "testJavaVersionAsInt",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<0> but was:<0.0>",
        "fail_line": "        assertEquals(0, SystemUtils.toJavaVersionInt(null));",
        "test_source": "  public void testJavaVersionAsInt() {\n  assertEquals(0, SystemUtils.toJavaVersionInt(null));\n  assertEquals(0, SystemUtils.toJavaVersionInt(\"\"));\n  assertEquals(0, SystemUtils.toJavaVersionInt(\"0\"));\n  assertEquals(110, SystemUtils.toJavaVersionInt(\"1.1\"));\n  assertEquals(120, SystemUtils.toJavaVersionInt(\"1.2\"));\n  assertEquals(130, SystemUtils.toJavaVersionInt(\"1.3.0\"));\n  assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1\"));\n  assertEquals(140, SystemUtils.toJavaVersionInt(\"1.4.0\"));\n  assertEquals(141, SystemUtils.toJavaVersionInt(\"1.4.1\"));\n  assertEquals(142, SystemUtils.toJavaVersionInt(\"1.4.2\"));\n  assertEquals(150, SystemUtils.toJavaVersionInt(\"1.5.0\"));\n  assertEquals(160, SystemUtils.toJavaVersionInt(\"1.6.0\"));\n  assertEquals(131, SystemUtils.toJavaVersionInt(\"JavaVM-1.3.1\"));\n  assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1 subset\"));\n  // This used to return 0f in [lang] version 2.5:\n  assertEquals(130, SystemUtils.toJavaVersionInt(\"XXX-1.3.x\"));\n  }",
        "stack": [
          "SystemUtilsTest.testJavaVersionAsInt line 210"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/lang3/SystemUtils.java",
      "buggy_full_code": "\npackage org.apache.commons.lang3;\n\nimport java.io.File;\nimport java.util.regex.Pattern;\n\n\npublic class SystemUtils { private static final int JAVA_VERSION_TRIM_SIZE = 3; private static final String OS_NAME_WINDOWS_PREFIX = \"Windows\"; private static final String USER_HOME_KEY = \"user.home\"; private static final String USER_DIR_KEY = \"user.dir\"; private static final String JAVA_IO_TMPDIR_KEY = \"java.io.tmpdir\"; private static final String JAVA_HOME_KEY = \"java.home\"; public static final String AWT_TOOLKIT = getSystemProperty(\"awt.toolkit\"); public static final String FILE_ENCODING = getSystemProperty(\"file.encoding\"); public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\"); public static final String JAVA_AWT_FONTS = getSystemProperty(\"java.awt.fonts\"); public static final String JAVA_AWT_GRAPHICSENV = getSystemProperty(\"java.awt.graphicsenv\"); public static final String JAVA_AWT_HEADLESS = getSystemProperty(\"java.awt.headless\"); public static final String JAVA_AWT_PRINTERJOB = getSystemProperty(\"java.awt.printerjob\"); public static final String JAVA_CLASS_PATH = getSystemProperty(\"java.class.path\"); public static final String JAVA_CLASS_VERSION = getSystemProperty(\"java.class.version\"); public static final String JAVA_COMPILER = getSystemProperty(\"java.compiler\"); public static final String JAVA_ENDORSED_DIRS = getSystemProperty(\"java.endorsed.dirs\"); public static final String JAVA_EXT_DIRS = getSystemProperty(\"java.ext.dirs\"); public static final String JAVA_HOME = getSystemProperty(JAVA_HOME_KEY); public static final String JAVA_IO_TMPDIR = getSystemProperty(JAVA_IO_TMPDIR_KEY); public static final String JAVA_LIBRARY_PATH = getSystemProperty(\"java.library.path\"); public static final String JAVA_RUNTIME_NAME = getSystemProperty(\"java.runtime.name\"); public static final String JAVA_RUNTIME_VERSION = getSystemProperty(\"java.runtime.version\"); public static final String JAVA_SPECIFICATION_NAME = getSystemProperty(\"java.specification.name\"); public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty(\"java.specification.vendor\"); public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(\"java.specification.version\"); public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = getSystemProperty(\"java.util.prefs.PreferencesFactory\"); public static final String JAVA_VENDOR = getSystemProperty(\"java.vendor\"); public static final String JAVA_VENDOR_URL = getSystemProperty(\"java.vendor.url\"); public static final String JAVA_VERSION = getSystemProperty(\"java.version\"); public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\"); public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\"); public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\"); public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\"); public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\"); public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\"); public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\"); public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\"); public static final String OS_ARCH = getSystemProperty(\"os.arch\"); public static final String OS_NAME = getSystemProperty(\"os.name\"); public static final String OS_VERSION = getSystemProperty(\"os.version\"); public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\"); public static final String USER_COUNTRY = getSystemProperty(\"user.country\") == null ? getSystemProperty(\"user.region\") : getSystemProperty(\"user.country\"); public static final String USER_DIR = getSystemProperty(USER_DIR_KEY); public static final String USER_HOME = getSystemProperty(USER_HOME_KEY); public static final String USER_LANGUAGE = getSystemProperty(\"user.language\"); public static final String USER_NAME = getSystemProperty(\"user.name\"); public static final String USER_TIMEZONE = getSystemProperty(\"user.timezone\"); public static final String JAVA_VERSION_TRIMMED = getJavaVersionTrimmed(); public static final float JAVA_VERSION_FLOAT = getJavaVersionAsFloat(); public static final int JAVA_VERSION_INT = getJavaVersionAsInt(); public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\"); public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\"); public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\"); public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\"); public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\"); public static final boolean IS_JAVA_1_6 = getJavaVersionMatches(\"1.6\"); public static final boolean IS_JAVA_1_7 = getJavaVersionMatches(\"1.7\"); public static final boolean IS_OS_AIX = getOSMatchesName(\"AIX\"); public static final boolean IS_OS_HP_UX = getOSMatchesName(\"HP-UX\"); public static final boolean IS_OS_IRIX = getOSMatchesName(\"Irix\"); public static final boolean IS_OS_LINUX = getOSMatchesName(\"Linux\") || getOSMatchesName(\"LINUX\"); public static final boolean IS_OS_MAC = getOSMatchesName(\"Mac\"); public static final boolean IS_OS_MAC_OSX = getOSMatchesName(\"Mac OS X\"); public static final boolean IS_OS_OS2 = getOSMatchesName(\"OS/2\"); public static final boolean IS_OS_SOLARIS = getOSMatchesName(\"Solaris\"); public static final boolean IS_OS_SUN_OS = getOSMatchesName(\"SunOS\"); public static final boolean IS_OS_UNIX = IS_OS_AIX || IS_OS_HP_UX || IS_OS_IRIX || IS_OS_LINUX || IS_OS_MAC_OSX || IS_OS_SOLARIS || IS_OS_SUN_OS; public static final boolean IS_OS_WINDOWS = getOSMatchesName(OS_NAME_WINDOWS_PREFIX); public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.0\"); public static final boolean IS_OS_WINDOWS_95 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.0\"); public static final boolean IS_OS_WINDOWS_98 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.1\"); public static final boolean IS_OS_WINDOWS_ME = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"4.9\"); public static final boolean IS_OS_WINDOWS_NT = getOSMatchesName(OS_NAME_WINDOWS_PREFIX + \" NT\"); public static final boolean IS_OS_WINDOWS_XP = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.1\"); public static final boolean IS_OS_WINDOWS_VISTA = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.0\"); public static final boolean IS_OS_WINDOWS_7 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.1\"); public static File getJavaHome() {\n        return new File(System.getProperty(JAVA_HOME_KEY));\n    }\n\n    \n    public static File getJavaIoTmpDir() {\n        return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));\n    }\n\n    \n    private static float getJavaVersionAsFloat() {\n        return toVersionFloat(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    \n    private static int getJavaVersionAsInt() {\n        return toVersionInt(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    \n    private static boolean getJavaVersionMatches(String versionPrefix) {\n        return isJavaVersionMatch(JAVA_VERSION_TRIMMED, versionPrefix);\n    }\n\n    \n    private static String getJavaVersionTrimmed() {\n        if (JAVA_VERSION != null) {\n            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n                char ch = JAVA_VERSION.charAt(i);\n                if (ch >= '0' && ch <= '9') {\n                    return JAVA_VERSION.substring(i);\n                }\n            }\n        }\n        return null;\n    }\n\n    \n    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n        return isOSMatch(OS_NAME, OS_VERSION, osNamePrefix, osVersionPrefix);\n    }\n\n    \n    private static boolean getOSMatchesName(String osNamePrefix) {\n        return isOSNameMatch(OS_NAME, osNamePrefix);\n    }\n\n    \n    \n    private static String getSystemProperty(String property) {\n        try {\n            return System.getProperty(property);\n        } catch (SecurityException ex) {\n            \n            System.err.println(\"Caught a SecurityException reading the system property '\" + property\n                    + \"'; the SystemUtils property value will default to null.\");\n            return null;\n        }\n    }\n\n    \n    public static File getUserDir() {\n        return new File(System.getProperty(USER_DIR_KEY));\n    }\n\n    \n    public static File getUserHome() {\n        return new File(System.getProperty(USER_HOME_KEY));\n    }\n\n    \n    public static boolean isJavaAwtHeadless() {\n        return JAVA_AWT_HEADLESS != null ? JAVA_AWT_HEADLESS.equals(Boolean.TRUE.toString()) : false;\n    }\n\n    \n    public static boolean isJavaVersionAtLeast(float requiredVersion) {\n        return JAVA_VERSION_FLOAT >= requiredVersion;\n    }\n\n    \n    public static boolean isJavaVersionAtLeast(int requiredVersion) {\n        return JAVA_VERSION_INT >= requiredVersion;\n    }\n\n    \n    static boolean isJavaVersionMatch(String version, String versionPrefix) {\n        if (version == null) {\n            return false;\n        }\n        return version.startsWith(versionPrefix);\n    }\n\n    \n    static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {\n        if (osName == null || osVersion == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);\n    }\n\n    \n    static boolean isOSNameMatch(String osName, String osNamePrefix) {\n        if (osName == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix);\n    }\n\n    \n    static float toJavaVersionFloat(String version) {\n        return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    \n    static float toJavaVersionInt(String version) {\n        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    \n    static int[] toJavaVersionIntArray(String version) {\n        return toJavaVersionIntArray(version, Integer.MAX_VALUE);\n    }\n\n    \n    private static int[] toJavaVersionIntArray(String version, int limit) {\n        if (version == null) {\n            return ArrayUtils.EMPTY_INT_ARRAY;\n        }\n        String[] strings = Pattern.compile(\"[^\\\\d]\").split(version);\n        int[] ints = new int[Math.min(limit, strings.length)];\n        int j = 0;\n        for (int i = 0; i < strings.length && j < limit; i++) {\n            String s = strings[i];\n            if (s.length() > 0) {\n                ints[j++] = Integer.parseInt(s);\n            }\n        }\n        return ints;\n    }\n\n    \n    private static float toVersionFloat(int[] javaVersions) {\n        if (javaVersions == null || javaVersions.length == 0) {\n            return 0f;\n        }\n        if (javaVersions.length == 1) {\n            return javaVersions[0];\n        }\n        StringBuilder builder = new StringBuilder();\n        builder.append(javaVersions[0]);\n        builder.append('.');\n        for (int i = 1; i < javaVersions.length; i++) {\n            builder.append(javaVersions[i]);\n        }\n        try {\n            return Float.parseFloat(builder.toString());\n        } catch (Exception ex) {\n            return 0f;\n        }\n    }\n\n    \n    private static int toVersionInt(int[] javaVersions) {\n        if (javaVersions == null) {\n            return 0;\n        }\n        int intVersion = 0;\n        int len = javaVersions.length;\n        if (len >= 1) {\n            intVersion = javaVersions[0] * 100;\n        }\n        if (len >= 2) {\n            intVersion += javaVersions[1] * 10;\n        }\n        if (len >= 3) {\n            intVersion += javaVersions[2];\n        }\n        return intVersion;\n    }\n\n    \n    \n    public SystemUtils() {\n        super();\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.lang3;\n\nimport java.io.File;\nimport java.util.regex.Pattern;\n\n\npublic class SystemUtils { private static final int JAVA_VERSION_TRIM_SIZE = 3; private static final String OS_NAME_WINDOWS_PREFIX = \"Windows\"; private static final String USER_HOME_KEY = \"user.home\"; private static final String USER_DIR_KEY = \"user.dir\"; private static final String JAVA_IO_TMPDIR_KEY = \"java.io.tmpdir\"; private static final String JAVA_HOME_KEY = \"java.home\"; public static final String AWT_TOOLKIT = getSystemProperty(\"awt.toolkit\"); public static final String FILE_ENCODING = getSystemProperty(\"file.encoding\"); public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\"); public static final String JAVA_AWT_FONTS = getSystemProperty(\"java.awt.fonts\"); public static final String JAVA_AWT_GRAPHICSENV = getSystemProperty(\"java.awt.graphicsenv\"); public static final String JAVA_AWT_HEADLESS = getSystemProperty(\"java.awt.headless\"); public static final String JAVA_AWT_PRINTERJOB = getSystemProperty(\"java.awt.printerjob\"); public static final String JAVA_CLASS_PATH = getSystemProperty(\"java.class.path\"); public static final String JAVA_CLASS_VERSION = getSystemProperty(\"java.class.version\"); public static final String JAVA_COMPILER = getSystemProperty(\"java.compiler\"); public static final String JAVA_ENDORSED_DIRS = getSystemProperty(\"java.endorsed.dirs\"); public static final String JAVA_EXT_DIRS = getSystemProperty(\"java.ext.dirs\"); public static final String JAVA_HOME = getSystemProperty(JAVA_HOME_KEY); public static final String JAVA_IO_TMPDIR = getSystemProperty(JAVA_IO_TMPDIR_KEY); public static final String JAVA_LIBRARY_PATH = getSystemProperty(\"java.library.path\"); public static final String JAVA_RUNTIME_NAME = getSystemProperty(\"java.runtime.name\"); public static final String JAVA_RUNTIME_VERSION = getSystemProperty(\"java.runtime.version\"); public static final String JAVA_SPECIFICATION_NAME = getSystemProperty(\"java.specification.name\"); public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty(\"java.specification.vendor\"); public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(\"java.specification.version\"); public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = getSystemProperty(\"java.util.prefs.PreferencesFactory\"); public static final String JAVA_VENDOR = getSystemProperty(\"java.vendor\"); public static final String JAVA_VENDOR_URL = getSystemProperty(\"java.vendor.url\"); public static final String JAVA_VERSION = getSystemProperty(\"java.version\"); public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\"); public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\"); public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\"); public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\"); public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\"); public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\"); public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\"); public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\"); public static final String OS_ARCH = getSystemProperty(\"os.arch\"); public static final String OS_NAME = getSystemProperty(\"os.name\"); public static final String OS_VERSION = getSystemProperty(\"os.version\"); public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\"); public static final String USER_COUNTRY = getSystemProperty(\"user.country\") == null ? getSystemProperty(\"user.region\") : getSystemProperty(\"user.country\"); public static final String USER_DIR = getSystemProperty(USER_DIR_KEY); public static final String USER_HOME = getSystemProperty(USER_HOME_KEY); public static final String USER_LANGUAGE = getSystemProperty(\"user.language\"); public static final String USER_NAME = getSystemProperty(\"user.name\"); public static final String USER_TIMEZONE = getSystemProperty(\"user.timezone\"); public static final String JAVA_VERSION_TRIMMED = getJavaVersionTrimmed(); public static final float JAVA_VERSION_FLOAT = getJavaVersionAsFloat(); public static final int JAVA_VERSION_INT = getJavaVersionAsInt(); public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\"); public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\"); public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\"); public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\"); public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\"); public static final boolean IS_JAVA_1_6 = getJavaVersionMatches(\"1.6\"); public static final boolean IS_JAVA_1_7 = getJavaVersionMatches(\"1.7\"); public static final boolean IS_OS_AIX = getOSMatchesName(\"AIX\"); public static final boolean IS_OS_HP_UX = getOSMatchesName(\"HP-UX\"); public static final boolean IS_OS_IRIX = getOSMatchesName(\"Irix\"); public static final boolean IS_OS_LINUX = getOSMatchesName(\"Linux\") || getOSMatchesName(\"LINUX\"); public static final boolean IS_OS_MAC = getOSMatchesName(\"Mac\"); public static final boolean IS_OS_MAC_OSX = getOSMatchesName(\"Mac OS X\"); public static final boolean IS_OS_OS2 = getOSMatchesName(\"OS/2\"); public static final boolean IS_OS_SOLARIS = getOSMatchesName(\"Solaris\"); public static final boolean IS_OS_SUN_OS = getOSMatchesName(\"SunOS\"); public static final boolean IS_OS_UNIX = IS_OS_AIX || IS_OS_HP_UX || IS_OS_IRIX || IS_OS_LINUX || IS_OS_MAC_OSX || IS_OS_SOLARIS || IS_OS_SUN_OS; public static final boolean IS_OS_WINDOWS = getOSMatchesName(OS_NAME_WINDOWS_PREFIX); public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.0\"); public static final boolean IS_OS_WINDOWS_95 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.0\"); public static final boolean IS_OS_WINDOWS_98 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.1\"); public static final boolean IS_OS_WINDOWS_ME = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"4.9\"); public static final boolean IS_OS_WINDOWS_NT = getOSMatchesName(OS_NAME_WINDOWS_PREFIX + \" NT\"); public static final boolean IS_OS_WINDOWS_XP = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.1\"); public static final boolean IS_OS_WINDOWS_VISTA = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.0\"); public static final boolean IS_OS_WINDOWS_7 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.1\"); public static File getJavaHome() {\n        return new File(System.getProperty(JAVA_HOME_KEY));\n    }\n\n    \n    public static File getJavaIoTmpDir() {\n        return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));\n    }\n\n    \n    private static float getJavaVersionAsFloat() {\n        return toVersionFloat(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    \n    private static int getJavaVersionAsInt() {\n        return toVersionInt(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    \n    private static boolean getJavaVersionMatches(String versionPrefix) {\n        return isJavaVersionMatch(JAVA_VERSION_TRIMMED, versionPrefix);\n    }\n\n    \n    private static String getJavaVersionTrimmed() {\n        if (JAVA_VERSION != null) {\n            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n                char ch = JAVA_VERSION.charAt(i);\n                if (ch >= '0' && ch <= '9') {\n                    return JAVA_VERSION.substring(i);\n                }\n            }\n        }\n        return null;\n    }\n\n    \n    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n        return isOSMatch(OS_NAME, OS_VERSION, osNamePrefix, osVersionPrefix);\n    }\n\n    \n    private static boolean getOSMatchesName(String osNamePrefix) {\n        return isOSNameMatch(OS_NAME, osNamePrefix);\n    }\n\n    \n    \n    private static String getSystemProperty(String property) {\n        try {\n            return System.getProperty(property);\n        } catch (SecurityException ex) {\n            \n            System.err.println(\"Caught a SecurityException reading the system property '\" + property\n                    + \"'; the SystemUtils property value will default to null.\");\n            return null;\n        }\n    }\n\n    \n    public static File getUserDir() {\n        return new File(System.getProperty(USER_DIR_KEY));\n    }\n\n    \n    public static File getUserHome() {\n        return new File(System.getProperty(USER_HOME_KEY));\n    }\n\n    \n    public static boolean isJavaAwtHeadless() {\n        return JAVA_AWT_HEADLESS != null ? JAVA_AWT_HEADLESS.equals(Boolean.TRUE.toString()) : false;\n    }\n\n    \n    public static boolean isJavaVersionAtLeast(float requiredVersion) {\n        return JAVA_VERSION_FLOAT >= requiredVersion;\n    }\n\n    \n    public static boolean isJavaVersionAtLeast(int requiredVersion) {\n        return JAVA_VERSION_INT >= requiredVersion;\n    }\n\n    \n    static boolean isJavaVersionMatch(String version, String versionPrefix) {\n        if (version == null) {\n            return false;\n        }\n        return version.startsWith(versionPrefix);\n    }\n\n    \n    static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {\n        if (osName == null || osVersion == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);\n    }\n\n    \n    static boolean isOSNameMatch(String osName, String osNamePrefix) {\n        if (osName == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix);\n    }\n\n    \n    static float toJavaVersionFloat(String version) {\n        return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    \n    static int toJavaVersionInt(String version) {\n        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    \n    static int[] toJavaVersionIntArray(String version) {\n        return toJavaVersionIntArray(version, Integer.MAX_VALUE);\n    }\n\n    \n    private static int[] toJavaVersionIntArray(String version, int limit) {\n        if (version == null) {\n            return ArrayUtils.EMPTY_INT_ARRAY;\n        }\n        String[] strings = Pattern.compile(\"[^\\\\d]\").split(version);\n        int[] ints = new int[Math.min(limit, strings.length)];\n        int j = 0;\n        for (int i = 0; i < strings.length && j < limit; i++) {\n            String s = strings[i];\n            if (s.length() > 0) {\n                ints[j++] = Integer.parseInt(s);\n            }\n        }\n        return ints;\n    }\n\n    \n    private static float toVersionFloat(int[] javaVersions) {\n        if (javaVersions == null || javaVersions.length == 0) {\n            return 0f;\n        }\n        if (javaVersions.length == 1) {\n            return javaVersions[0];\n        }\n        StringBuilder builder = new StringBuilder();\n        builder.append(javaVersions[0]);\n        builder.append('.');\n        for (int i = 1; i < javaVersions.length; i++) {\n            builder.append(javaVersions[i]);\n        }\n        try {\n            return Float.parseFloat(builder.toString());\n        } catch (Exception ex) {\n            return 0f;\n        }\n    }\n\n    \n    private static int toVersionInt(int[] javaVersions) {\n        if (javaVersions == null) {\n            return 0;\n        }\n        int intVersion = 0;\n        int len = javaVersions.length;\n        if (len >= 1) {\n            intVersion = javaVersions[0] * 100;\n        }\n        if (len >= 2) {\n            intVersion += javaVersions[1] * 10;\n        }\n        if (len >= 3) {\n            intVersion += javaVersions[2];\n        }\n        return intVersion;\n    }\n\n    \n    \n    public SystemUtils() {\n        super();\n    }\n\n}\n",
      "buggy_signatures": [
        "public static File getJavaIoTmpDir()",
        "private static float getJavaVersionAsFloat()",
        "private static int getJavaVersionAsInt()",
        "private static boolean getJavaVersionMatches(String versionPrefix)",
        "private static String getJavaVersionTrimmed()",
        "private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix)",
        "private static boolean getOSMatchesName(String osNamePrefix)",
        "private static String getSystemProperty(String property)",
        "public static File getUserDir()",
        "public static File getUserHome()",
        "public static boolean isJavaAwtHeadless()",
        "public static boolean isJavaVersionAtLeast(float requiredVersion)",
        "public static boolean isJavaVersionAtLeast(int requiredVersion)",
        "static boolean isJavaVersionMatch(String version, String versionPrefix)",
        "static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix)",
        "static boolean isOSNameMatch(String osName, String osNamePrefix)",
        "static float toJavaVersionFloat(String version)",
        "static float toJavaVersionInt(String version)",
        "static int[] toJavaVersionIntArray(String version)",
        "private static int[] toJavaVersionIntArray(String version, int limit)",
        "private static float toVersionFloat(int[] javaVersions)",
        "private static int toVersionInt(int[] javaVersions)",
        "public SystemUtils()"
      ],
      "fixed_signatures": [
        "public static File getJavaIoTmpDir()",
        "private static float getJavaVersionAsFloat()",
        "private static int getJavaVersionAsInt()",
        "private static boolean getJavaVersionMatches(String versionPrefix)",
        "private static String getJavaVersionTrimmed()",
        "private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix)",
        "private static boolean getOSMatchesName(String osNamePrefix)",
        "private static String getSystemProperty(String property)",
        "public static File getUserDir()",
        "public static File getUserHome()",
        "public static boolean isJavaAwtHeadless()",
        "public static boolean isJavaVersionAtLeast(float requiredVersion)",
        "public static boolean isJavaVersionAtLeast(int requiredVersion)",
        "static boolean isJavaVersionMatch(String version, String versionPrefix)",
        "static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix)",
        "static boolean isOSNameMatch(String osName, String osNamePrefix)",
        "static float toJavaVersionFloat(String version)",
        "static int toJavaVersionInt(String version)",
        "static int[] toJavaVersionIntArray(String version)",
        "private static int[] toJavaVersionIntArray(String version, int limit)",
        "private static float toVersionFloat(int[] javaVersions)",
        "private static int toVersionInt(int[] javaVersions)",
        "public SystemUtils()"
      ],
      "methods": [
        {
          "buggy_method": "  static float toJavaVersionInt(String version) {\n  return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n  }",
          "fixed_method": "  static int toJavaVersionInt(String version) {\n  return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n  }",
          "diff": [
            "@@ -1669,7 +1669,7 @@",
            "      * \n",
            "      * @return the version, for example 131 for Java 1.3.1\n",
            "      */\n",
            "-    static float toJavaVersionInt(String version) {\n",
            "+    static int toJavaVersionInt(String version) {\n",
            "         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n",
            "     }\n",
            " \n"
          ],
          "changed_lines": 2
        }
      ]
    }
  ]
}
