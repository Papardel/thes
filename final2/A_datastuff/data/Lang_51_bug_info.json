{
  "bug_id": "51",
  "failed_tests": {
    "org.apache.commons.lang.BooleanUtilsTest": [
      {
        "methodName": "test_toBoolean_String",
        "error": "java.lang.StringIndexOutOfBoundsException",
        "message": "String index out of range: 3",
        "fail_line": "        assertEquals(false, BooleanUtils.toBoolean(\"tru\"));",
        "test_source": "  public void test_toBoolean_String() {\n  assertEquals(false, BooleanUtils.toBoolean((String) null));\n  assertEquals(false, BooleanUtils.toBoolean(\"\"));\n  assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n  assertEquals(false, BooleanUtils.toBoolean(\"oof\"));\n  assertEquals(false, BooleanUtils.toBoolean(\"yep\"));\n  assertEquals(false, BooleanUtils.toBoolean(\"trux\"));\n  assertEquals(false, BooleanUtils.toBoolean(\"false\"));\n  assertEquals(false, BooleanUtils.toBoolean(\"a\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"true\")); // interned handled differently\n  assertEquals(true, BooleanUtils.toBoolean(new StringBuffer(\"tr\").append(\"ue\").toString()));\n  assertEquals(true, BooleanUtils.toBoolean(\"truE\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"trUe\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"trUE\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"tRue\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"tRuE\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"tRUe\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"tRUE\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"TRUE\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"TRUe\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"TRuE\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"TRue\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"TrUE\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"TrUe\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"TruE\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"True\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"on\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"oN\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"On\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"ON\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"yes\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"yeS\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"yEs\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"yES\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"Yes\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"YeS\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"YEs\"));\n  assertEquals(true, BooleanUtils.toBoolean(\"YES\"));\n  assertEquals(false, BooleanUtils.toBoolean(\"yes?\"));\n  assertEquals(false, BooleanUtils.toBoolean(\"tru\"));\n  }",
        "stack": [
          "BooleanUtils.toBoolean line 689, BooleanUtilsTest.test_toBoolean_String line 334"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/lang/BooleanUtils.java",
      "buggy_full_code": "\npackage org.apache.commons.lang;\n\nimport org.apache.commons.lang.math.NumberUtils;\n\n\npublic class BooleanUtils { public BooleanUtils() {\n      super();\n    }\n\n    \n    \n    \n    public static Boolean negate(Boolean bool) {\n        if (bool == null) {\n            return null;\n        }\n        return (bool.booleanValue() ? Boolean.FALSE : Boolean.TRUE);\n    }\n    \n    \n    \n    \n    public static boolean isTrue(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? true : false;\n    }\n\n    \n    public static boolean isNotTrue(Boolean bool) {\n        return !isTrue(bool);\n    }\n\n    \n    public static boolean isFalse(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? false : true;\n    }\n\n    \n    public static boolean isNotFalse(Boolean bool) {\n        return !isFalse(bool);\n    }\n\n    \n    \n    public static Boolean toBooleanObject(boolean bool) {\n        return bool ? Boolean.TRUE : Boolean.FALSE;\n    }\n    \n    \n    public static boolean toBoolean(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? true : false;\n    }\n    \n    \n    public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull) {\n        if (bool == null) {\n            return valueIfNull;\n        }\n        return bool.booleanValue() ? true : false;\n    }\n    \n    \n    \n    \n    public static boolean toBoolean(int value) {\n        return value == 0 ? false : true;\n    }\n    \n    \n    public static Boolean toBooleanObject(int value) {\n        return value == 0 ? Boolean.FALSE : Boolean.TRUE;\n    }\n    \n    \n    public static Boolean toBooleanObject(Integer value) {\n        if (value == null) {\n            return null;\n        }\n        return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;\n    }\n    \n    \n    public static boolean toBoolean(int value, int trueValue, int falseValue) {\n        if (value == trueValue) {\n            return true;\n        } else if (value == falseValue) {\n            return false;\n        }\n        \n        throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n    }\n    \n    \n    public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {\n        if (value == null) {\n            if (trueValue == null) {\n                return true;\n            } else if (falseValue == null) {\n                return false;\n            }\n        } else if (value.equals(trueValue)) {\n            return true;\n        } else if (value.equals(falseValue)) {\n            return false;\n        }\n        \n        throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n    }\n    \n    \n    public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {\n        if (value == trueValue) {\n            return Boolean.TRUE;\n        } else if (value == falseValue) {\n            return Boolean.FALSE;\n        } else if (value == nullValue) {\n            return null;\n        }\n        \n        throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n    }\n    \n    \n    public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {\n        if (value == null) {\n            if (trueValue == null) {\n                return Boolean.TRUE;\n            } else if (falseValue == null) {\n                return Boolean.FALSE;\n            } else if (nullValue == null) {\n                return null;\n            }\n        } else if (value.equals(trueValue)) {\n            return Boolean.TRUE;\n        } else if (value.equals(falseValue)) {\n            return Boolean.FALSE;\n        } else if (value.equals(nullValue)) {\n            return null;\n        }\n        \n        throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n    }\n    \n    \n    \n    \n    public static int toInteger(boolean bool) {\n        return bool ? 1 : 0;\n    }\n    \n    \n    public static Integer toIntegerObject(boolean bool) {\n        return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n    }\n    \n    \n    public static Integer toIntegerObject(Boolean bool) {\n        if (bool == null) {\n            return null;\n        }\n        return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n    }\n    \n    \n    public static int toInteger(boolean bool, int trueValue, int falseValue) {\n        return bool ? trueValue : falseValue;\n    }\n    \n    \n    public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {\n        if (bool == null) {\n            return nullValue;\n        }\n        return bool.booleanValue() ? trueValue : falseValue;\n    }\n    \n    \n    public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {\n        return bool ? trueValue : falseValue;\n    }\n    \n    \n    public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {\n        if (bool == null) {\n            return nullValue;\n        }\n        return bool.booleanValue() ? trueValue : falseValue;\n    }\n    \n    \n    \n    \n    public static Boolean toBooleanObject(String str) {\n        if (\"true\".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if (\"false\".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        } else if (\"on\".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if (\"off\".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        } else if (\"yes\".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if (\"no\".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        }\n        \n        return null;\n    }\n\n    \n    public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {\n        if (str == null) {\n            if (trueString == null) {\n                return Boolean.TRUE;\n            } else if (falseString == null) {\n                return Boolean.FALSE;\n            } else if (nullString == null) {\n                return null;\n            }\n        } else if (str.equals(trueString)) {\n            return Boolean.TRUE;\n        } else if (str.equals(falseString)) {\n            return Boolean.FALSE;\n        } else if (str.equals(nullString)) {\n            return null;\n        }\n        \n        throw new IllegalArgumentException(\"The String did not match any specified value\");\n    }\n\n    \n    \n    \n    public static boolean toBoolean(String str) {\n        \n        \n        \n        \n        \n        \n        if (str == \"true\") {\n            return true;\n        }\n        if (str == null) {\n            return false;\n        }\n        switch (str.length()) {\n            case 2: {\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                return \n                    (ch0 == 'o' || ch0 == 'O') &&\n                    (ch1 == 'n' || ch1 == 'N');\n            }\n            case 3: {\n                char ch = str.charAt(0);\n                if (ch == 'y') {\n                    return \n                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                        (str.charAt(2) == 's' || str.charAt(2) == 'S');\n                }\n                if (ch == 'Y') {\n                    return \n                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                        (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                }\n            }\n            case 4: {\n                char ch = str.charAt(0);\n                if (ch == 't') {\n                    return \n                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n                }\n                if (ch == 'T') {\n                    return \n                        (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                        (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&\n                        (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n                }\n            }\n        }\n        return false;\n    }\n    \n\n\n\n\n\n\n\n\n\n\n    \n    \n    public static boolean toBoolean(String str, String trueString, String falseString) {\n        if (str == null) {\n            if (trueString == null) {\n                return true;\n            } else if (falseString == null) {\n                return false;\n            }\n        } else if (str.equals(trueString)) {\n            return true;\n        } else if (str.equals(falseString)) {\n            return false;\n        }\n        \n        throw new IllegalArgumentException(\"The String did not match either specified value\");\n    }\n\n    \n    \n    \n    public static String toStringTrueFalse(Boolean bool) {\n        return toString(bool, \"true\", \"false\", null);\n    }\n    \n    \n    public static String toStringOnOff(Boolean bool) {\n        return toString(bool, \"on\", \"off\", null);\n    }\n    \n    \n    public static String toStringYesNo(Boolean bool) {\n        return toString(bool, \"yes\", \"no\", null);\n    }\n    \n    \n    public static String toString(Boolean bool, String trueString, String falseString, String nullString) {\n        if (bool == null) {\n            return nullString;\n        }\n        return bool.booleanValue() ? trueString : falseString;\n    }\n    \n    \n    \n    \n    public static String toStringTrueFalse(boolean bool) {\n        return toString(bool, \"true\", \"false\");\n    }\n    \n    \n    public static String toStringOnOff(boolean bool) {\n        return toString(bool, \"on\", \"off\");\n    }\n    \n    \n    public static String toStringYesNo(boolean bool) {\n        return toString(bool, \"yes\", \"no\");\n    }\n    \n    \n    public static String toString(boolean bool, String trueString, String falseString) {\n        return bool ? trueString : falseString;\n    }\n    \n    \n    \n    \n    public static boolean xor(boolean[] array) {\n        \n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array is empty\");\n        }\n\n        \n        int trueCount = 0;\n        for (int i = 0; i < array.length; i++) {\n            \n            \n            if (array[i]) {\n                if (trueCount < 1) {\n                    trueCount++;\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        \n        return trueCount == 1;\n    }\n\n    \n    public static Boolean xor(Boolean[] array) {\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array is empty\");\n        }\n        boolean[] primitive = null;\n        try {\n            primitive = ArrayUtils.toPrimitive(array);\n        } catch (NullPointerException ex) {\n            throw new IllegalArgumentException(\"The array must not contain any null elements\");\n        }\n        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;\n    }\n\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.lang;\n\nimport org.apache.commons.lang.math.NumberUtils;\n\n\npublic class BooleanUtils { public BooleanUtils() {\n      super();\n    }\n\n    \n    \n    \n    public static Boolean negate(Boolean bool) {\n        if (bool == null) {\n            return null;\n        }\n        return (bool.booleanValue() ? Boolean.FALSE : Boolean.TRUE);\n    }\n    \n    \n    \n    \n    public static boolean isTrue(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? true : false;\n    }\n\n    \n    public static boolean isNotTrue(Boolean bool) {\n        return !isTrue(bool);\n    }\n\n    \n    public static boolean isFalse(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? false : true;\n    }\n\n    \n    public static boolean isNotFalse(Boolean bool) {\n        return !isFalse(bool);\n    }\n\n    \n    \n    public static Boolean toBooleanObject(boolean bool) {\n        return bool ? Boolean.TRUE : Boolean.FALSE;\n    }\n    \n    \n    public static boolean toBoolean(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? true : false;\n    }\n    \n    \n    public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull) {\n        if (bool == null) {\n            return valueIfNull;\n        }\n        return bool.booleanValue() ? true : false;\n    }\n    \n    \n    \n    \n    public static boolean toBoolean(int value) {\n        return value == 0 ? false : true;\n    }\n    \n    \n    public static Boolean toBooleanObject(int value) {\n        return value == 0 ? Boolean.FALSE : Boolean.TRUE;\n    }\n    \n    \n    public static Boolean toBooleanObject(Integer value) {\n        if (value == null) {\n            return null;\n        }\n        return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;\n    }\n    \n    \n    public static boolean toBoolean(int value, int trueValue, int falseValue) {\n        if (value == trueValue) {\n            return true;\n        } else if (value == falseValue) {\n            return false;\n        }\n        \n        throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n    }\n    \n    \n    public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {\n        if (value == null) {\n            if (trueValue == null) {\n                return true;\n            } else if (falseValue == null) {\n                return false;\n            }\n        } else if (value.equals(trueValue)) {\n            return true;\n        } else if (value.equals(falseValue)) {\n            return false;\n        }\n        \n        throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n    }\n    \n    \n    public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {\n        if (value == trueValue) {\n            return Boolean.TRUE;\n        } else if (value == falseValue) {\n            return Boolean.FALSE;\n        } else if (value == nullValue) {\n            return null;\n        }\n        \n        throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n    }\n    \n    \n    public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {\n        if (value == null) {\n            if (trueValue == null) {\n                return Boolean.TRUE;\n            } else if (falseValue == null) {\n                return Boolean.FALSE;\n            } else if (nullValue == null) {\n                return null;\n            }\n        } else if (value.equals(trueValue)) {\n            return Boolean.TRUE;\n        } else if (value.equals(falseValue)) {\n            return Boolean.FALSE;\n        } else if (value.equals(nullValue)) {\n            return null;\n        }\n        \n        throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n    }\n    \n    \n    \n    \n    public static int toInteger(boolean bool) {\n        return bool ? 1 : 0;\n    }\n    \n    \n    public static Integer toIntegerObject(boolean bool) {\n        return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n    }\n    \n    \n    public static Integer toIntegerObject(Boolean bool) {\n        if (bool == null) {\n            return null;\n        }\n        return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n    }\n    \n    \n    public static int toInteger(boolean bool, int trueValue, int falseValue) {\n        return bool ? trueValue : falseValue;\n    }\n    \n    \n    public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {\n        if (bool == null) {\n            return nullValue;\n        }\n        return bool.booleanValue() ? trueValue : falseValue;\n    }\n    \n    \n    public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {\n        return bool ? trueValue : falseValue;\n    }\n    \n    \n    public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {\n        if (bool == null) {\n            return nullValue;\n        }\n        return bool.booleanValue() ? trueValue : falseValue;\n    }\n    \n    \n    \n    \n    public static Boolean toBooleanObject(String str) {\n        if (\"true\".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if (\"false\".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        } else if (\"on\".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if (\"off\".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        } else if (\"yes\".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if (\"no\".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        }\n        \n        return null;\n    }\n\n    \n    public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {\n        if (str == null) {\n            if (trueString == null) {\n                return Boolean.TRUE;\n            } else if (falseString == null) {\n                return Boolean.FALSE;\n            } else if (nullString == null) {\n                return null;\n            }\n        } else if (str.equals(trueString)) {\n            return Boolean.TRUE;\n        } else if (str.equals(falseString)) {\n            return Boolean.FALSE;\n        } else if (str.equals(nullString)) {\n            return null;\n        }\n        \n        throw new IllegalArgumentException(\"The String did not match any specified value\");\n    }\n\n    \n    \n    \n    public static boolean toBoolean(String str) {\n        \n        \n        \n        \n        \n        \n        if (str == \"true\") {\n            return true;\n        }\n        if (str == null) {\n            return false;\n        }\n        switch (str.length()) {\n            case 2: {\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                return \n                    (ch0 == 'o' || ch0 == 'O') &&\n                    (ch1 == 'n' || ch1 == 'N');\n            }\n            case 3: {\n                char ch = str.charAt(0);\n                if (ch == 'y') {\n                    return \n                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                        (str.charAt(2) == 's' || str.charAt(2) == 'S');\n                }\n                if (ch == 'Y') {\n                    return \n                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                        (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                }\n                return false;\n            }\n            case 4: {\n                char ch = str.charAt(0);\n                if (ch == 't') {\n                    return \n                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n                }\n                if (ch == 'T') {\n                    return \n                        (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                        (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&\n                        (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n                }\n            }\n        }\n        return false;\n    }\n    \n\n\n\n\n\n\n\n\n\n\n    \n    \n    public static boolean toBoolean(String str, String trueString, String falseString) {\n        if (str == null) {\n            if (trueString == null) {\n                return true;\n            } else if (falseString == null) {\n                return false;\n            }\n        } else if (str.equals(trueString)) {\n            return true;\n        } else if (str.equals(falseString)) {\n            return false;\n        }\n        \n        throw new IllegalArgumentException(\"The String did not match either specified value\");\n    }\n\n    \n    \n    \n    public static String toStringTrueFalse(Boolean bool) {\n        return toString(bool, \"true\", \"false\", null);\n    }\n    \n    \n    public static String toStringOnOff(Boolean bool) {\n        return toString(bool, \"on\", \"off\", null);\n    }\n    \n    \n    public static String toStringYesNo(Boolean bool) {\n        return toString(bool, \"yes\", \"no\", null);\n    }\n    \n    \n    public static String toString(Boolean bool, String trueString, String falseString, String nullString) {\n        if (bool == null) {\n            return nullString;\n        }\n        return bool.booleanValue() ? trueString : falseString;\n    }\n    \n    \n    \n    \n    public static String toStringTrueFalse(boolean bool) {\n        return toString(bool, \"true\", \"false\");\n    }\n    \n    \n    public static String toStringOnOff(boolean bool) {\n        return toString(bool, \"on\", \"off\");\n    }\n    \n    \n    public static String toStringYesNo(boolean bool) {\n        return toString(bool, \"yes\", \"no\");\n    }\n    \n    \n    public static String toString(boolean bool, String trueString, String falseString) {\n        return bool ? trueString : falseString;\n    }\n    \n    \n    \n    \n    public static boolean xor(boolean[] array) {\n        \n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array is empty\");\n        }\n\n        \n        int trueCount = 0;\n        for (int i = 0; i < array.length; i++) {\n            \n            \n            if (array[i]) {\n                if (trueCount < 1) {\n                    trueCount++;\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        \n        return trueCount == 1;\n    }\n\n    \n    public static Boolean xor(Boolean[] array) {\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array is empty\");\n        }\n        boolean[] primitive = null;\n        try {\n            primitive = ArrayUtils.toPrimitive(array);\n        } catch (NullPointerException ex) {\n            throw new IllegalArgumentException(\"The array must not contain any null elements\");\n        }\n        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;\n    }\n\n}\n",
      "buggy_signatures": [
        "public class BooleanUtils { public BooleanUtils()",
        "public static Boolean negate(Boolean bool)",
        "public static boolean isTrue(Boolean bool)",
        "public static boolean isNotTrue(Boolean bool)",
        "public static boolean isFalse(Boolean bool)",
        "public static boolean isNotFalse(Boolean bool)",
        "public static Boolean toBooleanObject(boolean bool)",
        "public static boolean toBoolean(Boolean bool)",
        "public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull)",
        "public static boolean toBoolean(int value)",
        "public static Boolean toBooleanObject(int value)",
        "public static Boolean toBooleanObject(Integer value)",
        "public static boolean toBoolean(int value, int trueValue, int falseValue)",
        "public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue)",
        "public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue)",
        "public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue)",
        "public static int toInteger(boolean bool)",
        "public static Integer toIntegerObject(boolean bool)",
        "public static Integer toIntegerObject(Boolean bool)",
        "public static int toInteger(boolean bool, int trueValue, int falseValue)",
        "public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue)",
        "public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue)",
        "public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue)",
        "public static Boolean toBooleanObject(String str)",
        "public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString)",
        "public static boolean toBoolean(String str)",
        "public static boolean toBoolean(String str, String trueString, String falseString)",
        "public static String toStringTrueFalse(Boolean bool)",
        "public static String toStringOnOff(Boolean bool)",
        "public static String toStringYesNo(Boolean bool)",
        "public static String toString(Boolean bool, String trueString, String falseString, String nullString)",
        "public static String toStringTrueFalse(boolean bool)",
        "public static String toStringOnOff(boolean bool)",
        "public static String toStringYesNo(boolean bool)",
        "public static String toString(boolean bool, String trueString, String falseString)",
        "public static boolean xor(boolean[] array)",
        "public static Boolean xor(Boolean[] array)"
      ],
      "fixed_signatures": [
        "public class BooleanUtils { public BooleanUtils()",
        "public static Boolean negate(Boolean bool)",
        "public static boolean isTrue(Boolean bool)",
        "public static boolean isNotTrue(Boolean bool)",
        "public static boolean isFalse(Boolean bool)",
        "public static boolean isNotFalse(Boolean bool)",
        "public static Boolean toBooleanObject(boolean bool)",
        "public static boolean toBoolean(Boolean bool)",
        "public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull)",
        "public static boolean toBoolean(int value)",
        "public static Boolean toBooleanObject(int value)",
        "public static Boolean toBooleanObject(Integer value)",
        "public static boolean toBoolean(int value, int trueValue, int falseValue)",
        "public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue)",
        "public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue)",
        "public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue)",
        "public static int toInteger(boolean bool)",
        "public static Integer toIntegerObject(boolean bool)",
        "public static Integer toIntegerObject(Boolean bool)",
        "public static int toInteger(boolean bool, int trueValue, int falseValue)",
        "public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue)",
        "public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue)",
        "public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue)",
        "public static Boolean toBooleanObject(String str)",
        "public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString)",
        "public static boolean toBoolean(String str)",
        "public static boolean toBoolean(String str, String trueString, String falseString)",
        "public static String toStringTrueFalse(Boolean bool)",
        "public static String toStringOnOff(Boolean bool)",
        "public static String toStringYesNo(Boolean bool)",
        "public static String toString(Boolean bool, String trueString, String falseString, String nullString)",
        "public static String toStringTrueFalse(boolean bool)",
        "public static String toStringOnOff(boolean bool)",
        "public static String toStringYesNo(boolean bool)",
        "public static String toString(boolean bool, String trueString, String falseString)",
        "public static boolean xor(boolean[] array)",
        "public static Boolean xor(Boolean[] array)"
      ],
      "methods": [
        {
          "buggy_method": "  public static boolean toBoolean(String str) {\n  \n  \n  \n  \n  \n  \n  if (str == \"true\") {\n  return true;\n  }\n  if (str == null) {\n  return false;\n  }\n  switch (str.length()) {\n  case 2: {\n  char ch0 = str.charAt(0);\n  char ch1 = str.charAt(1);\n  return \n  (ch0 == 'o' || ch0 == 'O') &&\n  (ch1 == 'n' || ch1 == 'N');\n  }\n  case 3: {\n  char ch = str.charAt(0);\n  if (ch == 'y') {\n  return \n  (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n  (str.charAt(2) == 's' || str.charAt(2) == 'S');\n  }\n  if (ch == 'Y') {\n  return \n  (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n  (str.charAt(2) == 'S' || str.charAt(2) == 's');\n  }\n  }\n  case 4: {\n  char ch = str.charAt(0);\n  if (ch == 't') {\n  return \n  (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n  (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n  (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n  }\n  if (ch == 'T') {\n  return \n  (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n  (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&\n  (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n  }\n  }\n  }\n  return false;\n  }",
          "fixed_method": "  public static boolean toBoolean(String str) {\n  \n  \n  \n  \n  \n  \n  if (str == \"true\") {\n  return true;\n  }\n  if (str == null) {\n  return false;\n  }\n  switch (str.length()) {\n  case 2: {\n  char ch0 = str.charAt(0);\n  char ch1 = str.charAt(1);\n  return \n  (ch0 == 'o' || ch0 == 'O') &&\n  (ch1 == 'n' || ch1 == 'N');\n  }\n  case 3: {\n  char ch = str.charAt(0);\n  if (ch == 'y') {\n  return \n  (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n  (str.charAt(2) == 's' || str.charAt(2) == 'S');\n  }\n  if (ch == 'Y') {\n  return \n  (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n  (str.charAt(2) == 'S' || str.charAt(2) == 's');\n  }\n  return false;\n  }\n  case 4: {\n  char ch = str.charAt(0);\n  if (ch == 't') {\n  return \n  (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n  (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n  (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n  }\n  if (ch == 'T') {\n  return \n  (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n  (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&\n  (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n  }\n  }\n  }\n  return false;\n  }",
          "diff": [
            "@@ -679,6 +679,7 @@",
            "                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n",
            "                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n",
            "                 }\n",
            "+                return false;\n",
            "             }\n",
            "             case 4: {\n",
            "                 char ch = str.charAt(0);\n"
          ],
          "changed_lines": 1
        }
      ]
    }
  ]
}
