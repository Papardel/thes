{
  "bug_id": "15",
  "failed_tests": {
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest": [
      {
        "methodName": "testNullCommentEqualsEmptyComment",
        "error": "junit.framework.AssertionFailedError",
        "message": "expected:<foo> but was:<foo>",
        "fail_line": "        assertEquals(entry1, entry2);",
        "test_source": "  public void testNullCommentEqualsEmptyComment() {\n  ZipArchiveEntry entry1 = new ZipArchiveEntry(\"foo\");\n  ZipArchiveEntry entry2 = new ZipArchiveEntry(\"foo\");\n  ZipArchiveEntry entry3 = new ZipArchiveEntry(\"foo\");\n  entry1.setComment(null);\n  entry2.setComment(\"\");\n  entry3.setComment(\"bar\");\n  assertEquals(entry1, entry2);\n  assertFalse(entry1.equals(entry3));\n  assertFalse(entry2.equals(entry3));\n  }",
        "stack": [
          "ZipArchiveEntryTest.testNullCommentEqualsEmptyComment line 250"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
      "buggy_full_code": "\npackage org.apache.commons.compress.archivers.zip;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.zip.ZipException;\nimport org.apache.commons.compress.archivers.ArchiveEntry;\n\n\npublic class ZipArchiveEntry extends java.util.zip.ZipEntry implements ArchiveEntry { public static final int PLATFORM_UNIX = 3; public static final int PLATFORM_FAT = 0; private static final int SHORT_MASK = 0xFFFF; private static final int SHORT_SHIFT = 16; private int method = -1; private long size = SIZE_UNKNOWN; private int internalAttributes = 0; private int platform = PLATFORM_FAT; private long externalAttributes = 0; private LinkedHashMap<ZipShort, ZipExtraField> extraFields = null; private UnparseableExtraFieldData unparseableExtra = null; private String name = null; private byte[] rawName = null; private GeneralPurposeBit gpb = new GeneralPurposeBit(); public ZipArchiveEntry(String name) {\n        super(name);\n        setName(name);\n    }\n\n    \n    public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {\n        super(entry);\n        setName(entry.getName());\n        byte[] extra = entry.getExtra();\n        if (extra != null) {\n            setExtraFields(ExtraFieldUtils.parse(extra, true,\n                                                 ExtraFieldUtils\n                                                 .UnparseableExtraField.READ));\n        } else {\n            \n            setExtra();\n        }\n        setMethod(entry.getMethod());\n        this.size = entry.getSize();\n    }\n\n    \n    public ZipArchiveEntry(ZipArchiveEntry entry) throws ZipException {\n        this((java.util.zip.ZipEntry) entry);\n        setInternalAttributes(entry.getInternalAttributes());\n        setExternalAttributes(entry.getExternalAttributes());\n        setExtraFields(entry.getExtraFields(true));\n    }\n\n    \n    protected ZipArchiveEntry() {\n        this(\"\");\n    }\n\n    \n    public ZipArchiveEntry(File inputFile, String entryName) {\n        this(inputFile.isDirectory() && !entryName.endsWith(\"/\") ? \n             entryName + \"/\" : entryName);\n        if (inputFile.isFile()){\n            setSize(inputFile.length());\n        }\n        setTime(inputFile.lastModified());\n        \n    }\n\n    \n    @Override\n    public Object clone() {\n        ZipArchiveEntry e = (ZipArchiveEntry) super.clone();\n\n        e.setInternalAttributes(getInternalAttributes());\n        e.setExternalAttributes(getExternalAttributes());\n        e.setExtraFields(getExtraFields(true));\n        return e;\n    }\n\n    \n    @Override\n    public int getMethod() {\n        return method;\n    }\n\n    \n    @Override\n    public void setMethod(int method) {\n        if (method < 0) {\n            throw new IllegalArgumentException(\n                    \"ZIP compression method can not be negative: \" + method);\n        }\n        this.method = method;\n    }\n\n    \n    public int getInternalAttributes() {\n        return internalAttributes;\n    }\n\n    \n    public void setInternalAttributes(int value) {\n        internalAttributes = value;\n    }\n\n    \n    public long getExternalAttributes() {\n        return externalAttributes;\n    }\n\n    \n    public void setExternalAttributes(long value) {\n        externalAttributes = value;\n    }\n\n    \n    public void setUnixMode(int mode) {\n        \n        setExternalAttributes((mode << SHORT_SHIFT)\n                              \n                              | ((mode & 0200) == 0 ? 1 : 0)\n                              \n                              | (isDirectory() ? 0x10 : 0));\n        \n        platform = PLATFORM_UNIX;\n    }\n\n    \n    public int getUnixMode() {\n        return platform != PLATFORM_UNIX ? 0 :\n            (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);\n    }\n\n    \n    public int getPlatform() {\n        return platform;\n    }\n\n    \n    protected void setPlatform(int platform) {\n        this.platform = platform;\n    }\n\n    \n    public void setExtraFields(ZipExtraField[] fields) {\n        extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();\n        for (ZipExtraField field : fields) {\n            if (field instanceof UnparseableExtraFieldData) {\n                unparseableExtra = (UnparseableExtraFieldData) field;\n            } else {\n                extraFields.put(field.getHeaderId(), field);\n            }\n        }\n        setExtra();\n    }\n\n    \n    public ZipExtraField[] getExtraFields() {\n        return getExtraFields(false);\n    }\n\n    \n    public ZipExtraField[] getExtraFields(boolean includeUnparseable) {\n        if (extraFields == null) {\n            return !includeUnparseable || unparseableExtra == null\n                ? new ZipExtraField[0]\n                : new ZipExtraField[] { unparseableExtra };\n        }\n        List<ZipExtraField> result =\n            new ArrayList<ZipExtraField>(extraFields.values());\n        if (includeUnparseable && unparseableExtra != null) {\n            result.add(unparseableExtra);\n        }\n        return result.toArray(new ZipExtraField[0]);\n    }\n\n    \n    public void addExtraField(ZipExtraField ze) {\n        if (ze instanceof UnparseableExtraFieldData) {\n            unparseableExtra = (UnparseableExtraFieldData) ze;\n        } else {\n            if (extraFields == null) {\n                extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();\n            }\n            extraFields.put(ze.getHeaderId(), ze);\n        }\n        setExtra();\n    }\n\n    \n    public void addAsFirstExtraField(ZipExtraField ze) {\n        if (ze instanceof UnparseableExtraFieldData) {\n            unparseableExtra = (UnparseableExtraFieldData) ze;\n        } else {\n            LinkedHashMap<ZipShort, ZipExtraField> copy = extraFields;\n            extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();\n            extraFields.put(ze.getHeaderId(), ze);\n            if (copy != null) {\n                copy.remove(ze.getHeaderId());\n                extraFields.putAll(copy);\n            }\n        }\n        setExtra();\n    }\n\n    \n    public void removeExtraField(ZipShort type) {\n        if (extraFields == null) {\n            throw new java.util.NoSuchElementException();\n        }\n        if (extraFields.remove(type) == null) {\n            throw new java.util.NoSuchElementException();\n        }\n        setExtra();\n    }\n\n    \n    public void removeUnparseableExtraFieldData() {\n        if (unparseableExtra == null) {\n            throw new java.util.NoSuchElementException();\n        }\n        unparseableExtra = null;\n        setExtra();\n    }\n\n    \n    public ZipExtraField getExtraField(ZipShort type) {\n        if (extraFields != null) {\n            return extraFields.get(type);\n        }\n        return null;\n    }\n\n    \n    public UnparseableExtraFieldData getUnparseableExtraFieldData() {\n        return unparseableExtra;\n    }\n\n    \n    @Override\n    public void setExtra(byte[] extra) throws RuntimeException {\n        try {\n            ZipExtraField[] local =\n                ExtraFieldUtils.parse(extra, true,\n                                      ExtraFieldUtils.UnparseableExtraField.READ);\n            mergeExtraFields(local, true);\n        } catch (ZipException e) {\n            \n            throw new RuntimeException(\"Error parsing extra fields for entry: \"\n                                       + getName() + \" - \" + e.getMessage(), e);\n        }\n    }\n\n    \n    protected void setExtra() {\n        super.setExtra(ExtraFieldUtils.mergeLocalFileDataData(getExtraFields(true)));\n    }\n\n    \n    public void setCentralDirectoryExtra(byte[] b) {\n        try {\n            ZipExtraField[] central =\n                ExtraFieldUtils.parse(b, false,\n                                      ExtraFieldUtils.UnparseableExtraField.READ);\n            mergeExtraFields(central, false);\n        } catch (ZipException e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    \n    public byte[] getLocalFileDataExtra() {\n        byte[] extra = getExtra();\n        return extra != null ? extra : new byte[0];\n    }\n\n    \n    public byte[] getCentralDirectoryExtra() {\n        return ExtraFieldUtils.mergeCentralDirectoryData(getExtraFields(true));\n    }\n\n    \n    @Override\n    public String getName() {\n        return name == null ? super.getName() : name;\n    }\n\n    \n    @Override\n    public boolean isDirectory() {\n        return getName().endsWith(\"/\");\n    }\n\n    \n    protected void setName(String name) {\n        if (name != null && getPlatform() == PLATFORM_FAT\n            && name.indexOf(\"/\") == -1) {\n            name = name.replace('\\\\', '/');\n        }\n        this.name = name;\n    }\n\n    \n    @Override\n    public long getSize() {\n        return size;\n    }\n\n    \n    @Override\n    public void setSize(long size) {\n        if (size < 0) {\n            throw new IllegalArgumentException(\"invalid entry size\");\n        }\n        this.size = size;\n    }\n\n    \n    protected void setName(String name, byte[] rawName) {\n        setName(name);\n        this.rawName = rawName;\n    }\n\n    \n    public byte[] getRawName() {\n        if (rawName != null) {\n            byte[] b = new byte[rawName.length];\n            System.arraycopy(rawName, 0, b, 0, rawName.length);\n            return b;\n        }\n        return null;\n    }\n\n    \n    @Override\n    public int hashCode() {\n        \n        \n        \n        \n        return getName().hashCode();\n    }\n\n    \n    public GeneralPurposeBit getGeneralPurposeBit() {\n        return gpb;\n    }\n\n    \n    public void setGeneralPurposeBit(GeneralPurposeBit b) {\n        gpb = b;\n    }\n\n    \n    private void mergeExtraFields(ZipExtraField[] f, boolean local) throws ZipException {\n        if (extraFields == null) {\n            setExtraFields(f);\n        } else {\n            for (ZipExtraField element : f) {\n                ZipExtraField existing;\n                if (element instanceof UnparseableExtraFieldData) {\n                    existing = unparseableExtra;\n                } else {\n                    existing = getExtraField(element.getHeaderId());\n                }\n                if (existing == null) {\n                    addExtraField(element);\n                } else {\n                    if (local) {\n                        byte[] b = element.getLocalFileDataData();\n                        existing.parseFromLocalFileData(b, 0, b.length);\n                    } else {\n                        byte[] b = element.getCentralDirectoryData();\n                        existing.parseFromCentralDirectoryData(b, 0, b.length);\n                    }\n                }\n            }\n            setExtra();\n        }\n    }\n\n    \n    public Date getLastModifiedDate() {\n        return new Date(getTime());\n    }\n\n    \n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        ZipArchiveEntry other = (ZipArchiveEntry) obj;\n        String myName = getName();\n        String otherName = other.getName();\n        if (myName == null) {\n            if (otherName != null) {\n                return false;\n            }\n        } else if (!myName.equals(otherName)) {\n            return false;\n        }\n        String myComment = getComment();\n        String otherComment = other.getComment();\n        if (myComment == null) {\n            if (otherComment != null) {\n                return false;\n            }\n        } else if (!myComment.equals(otherComment)) {\n            return false;\n        }\n        return getTime() == other.getTime()\n            && getInternalAttributes() == other.getInternalAttributes()\n            && getPlatform() == other.getPlatform()\n            && getExternalAttributes() == other.getExternalAttributes()\n            && getMethod() == other.getMethod()\n            && getSize() == other.getSize()\n            && getCrc() == other.getCrc()\n            && getCompressedSize() == other.getCompressedSize()\n            && Arrays.equals(getCentralDirectoryExtra(),\n                             other.getCentralDirectoryExtra())\n            && Arrays.equals(getLocalFileDataExtra(),\n                             other.getLocalFileDataExtra())\n            && gpb.equals(other.gpb);\n    }\n}\n",
      "fixed_full_code": "\npackage org.apache.commons.compress.archivers.zip;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.zip.ZipException;\nimport org.apache.commons.compress.archivers.ArchiveEntry;\n\n\npublic class ZipArchiveEntry extends java.util.zip.ZipEntry implements ArchiveEntry { public static final int PLATFORM_UNIX = 3; public static final int PLATFORM_FAT = 0; private static final int SHORT_MASK = 0xFFFF; private static final int SHORT_SHIFT = 16; private int method = -1; private long size = SIZE_UNKNOWN; private int internalAttributes = 0; private int platform = PLATFORM_FAT; private long externalAttributes = 0; private LinkedHashMap<ZipShort, ZipExtraField> extraFields = null; private UnparseableExtraFieldData unparseableExtra = null; private String name = null; private byte[] rawName = null; private GeneralPurposeBit gpb = new GeneralPurposeBit(); public ZipArchiveEntry(String name) {\n        super(name);\n        setName(name);\n    }\n\n    \n    public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {\n        super(entry);\n        setName(entry.getName());\n        byte[] extra = entry.getExtra();\n        if (extra != null) {\n            setExtraFields(ExtraFieldUtils.parse(extra, true,\n                                                 ExtraFieldUtils\n                                                 .UnparseableExtraField.READ));\n        } else {\n            \n            setExtra();\n        }\n        setMethod(entry.getMethod());\n        this.size = entry.getSize();\n    }\n\n    \n    public ZipArchiveEntry(ZipArchiveEntry entry) throws ZipException {\n        this((java.util.zip.ZipEntry) entry);\n        setInternalAttributes(entry.getInternalAttributes());\n        setExternalAttributes(entry.getExternalAttributes());\n        setExtraFields(entry.getExtraFields(true));\n    }\n\n    \n    protected ZipArchiveEntry() {\n        this(\"\");\n    }\n\n    \n    public ZipArchiveEntry(File inputFile, String entryName) {\n        this(inputFile.isDirectory() && !entryName.endsWith(\"/\") ? \n             entryName + \"/\" : entryName);\n        if (inputFile.isFile()){\n            setSize(inputFile.length());\n        }\n        setTime(inputFile.lastModified());\n        \n    }\n\n    \n    @Override\n    public Object clone() {\n        ZipArchiveEntry e = (ZipArchiveEntry) super.clone();\n\n        e.setInternalAttributes(getInternalAttributes());\n        e.setExternalAttributes(getExternalAttributes());\n        e.setExtraFields(getExtraFields(true));\n        return e;\n    }\n\n    \n    @Override\n    public int getMethod() {\n        return method;\n    }\n\n    \n    @Override\n    public void setMethod(int method) {\n        if (method < 0) {\n            throw new IllegalArgumentException(\n                    \"ZIP compression method can not be negative: \" + method);\n        }\n        this.method = method;\n    }\n\n    \n    public int getInternalAttributes() {\n        return internalAttributes;\n    }\n\n    \n    public void setInternalAttributes(int value) {\n        internalAttributes = value;\n    }\n\n    \n    public long getExternalAttributes() {\n        return externalAttributes;\n    }\n\n    \n    public void setExternalAttributes(long value) {\n        externalAttributes = value;\n    }\n\n    \n    public void setUnixMode(int mode) {\n        \n        setExternalAttributes((mode << SHORT_SHIFT)\n                              \n                              | ((mode & 0200) == 0 ? 1 : 0)\n                              \n                              | (isDirectory() ? 0x10 : 0));\n        \n        platform = PLATFORM_UNIX;\n    }\n\n    \n    public int getUnixMode() {\n        return platform != PLATFORM_UNIX ? 0 :\n            (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);\n    }\n\n    \n    public int getPlatform() {\n        return platform;\n    }\n\n    \n    protected void setPlatform(int platform) {\n        this.platform = platform;\n    }\n\n    \n    public void setExtraFields(ZipExtraField[] fields) {\n        extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();\n        for (ZipExtraField field : fields) {\n            if (field instanceof UnparseableExtraFieldData) {\n                unparseableExtra = (UnparseableExtraFieldData) field;\n            } else {\n                extraFields.put(field.getHeaderId(), field);\n            }\n        }\n        setExtra();\n    }\n\n    \n    public ZipExtraField[] getExtraFields() {\n        return getExtraFields(false);\n    }\n\n    \n    public ZipExtraField[] getExtraFields(boolean includeUnparseable) {\n        if (extraFields == null) {\n            return !includeUnparseable || unparseableExtra == null\n                ? new ZipExtraField[0]\n                : new ZipExtraField[] { unparseableExtra };\n        }\n        List<ZipExtraField> result =\n            new ArrayList<ZipExtraField>(extraFields.values());\n        if (includeUnparseable && unparseableExtra != null) {\n            result.add(unparseableExtra);\n        }\n        return result.toArray(new ZipExtraField[0]);\n    }\n\n    \n    public void addExtraField(ZipExtraField ze) {\n        if (ze instanceof UnparseableExtraFieldData) {\n            unparseableExtra = (UnparseableExtraFieldData) ze;\n        } else {\n            if (extraFields == null) {\n                extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();\n            }\n            extraFields.put(ze.getHeaderId(), ze);\n        }\n        setExtra();\n    }\n\n    \n    public void addAsFirstExtraField(ZipExtraField ze) {\n        if (ze instanceof UnparseableExtraFieldData) {\n            unparseableExtra = (UnparseableExtraFieldData) ze;\n        } else {\n            LinkedHashMap<ZipShort, ZipExtraField> copy = extraFields;\n            extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();\n            extraFields.put(ze.getHeaderId(), ze);\n            if (copy != null) {\n                copy.remove(ze.getHeaderId());\n                extraFields.putAll(copy);\n            }\n        }\n        setExtra();\n    }\n\n    \n    public void removeExtraField(ZipShort type) {\n        if (extraFields == null) {\n            throw new java.util.NoSuchElementException();\n        }\n        if (extraFields.remove(type) == null) {\n            throw new java.util.NoSuchElementException();\n        }\n        setExtra();\n    }\n\n    \n    public void removeUnparseableExtraFieldData() {\n        if (unparseableExtra == null) {\n            throw new java.util.NoSuchElementException();\n        }\n        unparseableExtra = null;\n        setExtra();\n    }\n\n    \n    public ZipExtraField getExtraField(ZipShort type) {\n        if (extraFields != null) {\n            return extraFields.get(type);\n        }\n        return null;\n    }\n\n    \n    public UnparseableExtraFieldData getUnparseableExtraFieldData() {\n        return unparseableExtra;\n    }\n\n    \n    @Override\n    public void setExtra(byte[] extra) throws RuntimeException {\n        try {\n            ZipExtraField[] local =\n                ExtraFieldUtils.parse(extra, true,\n                                      ExtraFieldUtils.UnparseableExtraField.READ);\n            mergeExtraFields(local, true);\n        } catch (ZipException e) {\n            \n            throw new RuntimeException(\"Error parsing extra fields for entry: \"\n                                       + getName() + \" - \" + e.getMessage(), e);\n        }\n    }\n\n    \n    protected void setExtra() {\n        super.setExtra(ExtraFieldUtils.mergeLocalFileDataData(getExtraFields(true)));\n    }\n\n    \n    public void setCentralDirectoryExtra(byte[] b) {\n        try {\n            ZipExtraField[] central =\n                ExtraFieldUtils.parse(b, false,\n                                      ExtraFieldUtils.UnparseableExtraField.READ);\n            mergeExtraFields(central, false);\n        } catch (ZipException e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    \n    public byte[] getLocalFileDataExtra() {\n        byte[] extra = getExtra();\n        return extra != null ? extra : new byte[0];\n    }\n\n    \n    public byte[] getCentralDirectoryExtra() {\n        return ExtraFieldUtils.mergeCentralDirectoryData(getExtraFields(true));\n    }\n\n    \n    @Override\n    public String getName() {\n        return name == null ? super.getName() : name;\n    }\n\n    \n    @Override\n    public boolean isDirectory() {\n        return getName().endsWith(\"/\");\n    }\n\n    \n    protected void setName(String name) {\n        if (name != null && getPlatform() == PLATFORM_FAT\n            && name.indexOf(\"/\") == -1) {\n            name = name.replace('\\\\', '/');\n        }\n        this.name = name;\n    }\n\n    \n    @Override\n    public long getSize() {\n        return size;\n    }\n\n    \n    @Override\n    public void setSize(long size) {\n        if (size < 0) {\n            throw new IllegalArgumentException(\"invalid entry size\");\n        }\n        this.size = size;\n    }\n\n    \n    protected void setName(String name, byte[] rawName) {\n        setName(name);\n        this.rawName = rawName;\n    }\n\n    \n    public byte[] getRawName() {\n        if (rawName != null) {\n            byte[] b = new byte[rawName.length];\n            System.arraycopy(rawName, 0, b, 0, rawName.length);\n            return b;\n        }\n        return null;\n    }\n\n    \n    @Override\n    public int hashCode() {\n        \n        \n        \n        \n        return getName().hashCode();\n    }\n\n    \n    public GeneralPurposeBit getGeneralPurposeBit() {\n        return gpb;\n    }\n\n    \n    public void setGeneralPurposeBit(GeneralPurposeBit b) {\n        gpb = b;\n    }\n\n    \n    private void mergeExtraFields(ZipExtraField[] f, boolean local) throws ZipException {\n        if (extraFields == null) {\n            setExtraFields(f);\n        } else {\n            for (ZipExtraField element : f) {\n                ZipExtraField existing;\n                if (element instanceof UnparseableExtraFieldData) {\n                    existing = unparseableExtra;\n                } else {\n                    existing = getExtraField(element.getHeaderId());\n                }\n                if (existing == null) {\n                    addExtraField(element);\n                } else {\n                    if (local) {\n                        byte[] b = element.getLocalFileDataData();\n                        existing.parseFromLocalFileData(b, 0, b.length);\n                    } else {\n                        byte[] b = element.getCentralDirectoryData();\n                        existing.parseFromCentralDirectoryData(b, 0, b.length);\n                    }\n                }\n            }\n            setExtra();\n        }\n    }\n\n    \n    public Date getLastModifiedDate() {\n        return new Date(getTime());\n    }\n\n    \n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        ZipArchiveEntry other = (ZipArchiveEntry) obj;\n        String myName = getName();\n        String otherName = other.getName();\n        if (myName == null) {\n            if (otherName != null) {\n                return false;\n            }\n        } else if (!myName.equals(otherName)) {\n            return false;\n        }\n        String myComment = getComment();\n        String otherComment = other.getComment();\n        if (myComment == null) {\n            myComment = \"\";\n        }\n        if (otherComment == null) {\n            otherComment = \"\";\n        }\n        return getTime() == other.getTime()\n            && myComment.equals(otherComment)\n            && getInternalAttributes() == other.getInternalAttributes()\n            && getPlatform() == other.getPlatform()\n            && getExternalAttributes() == other.getExternalAttributes()\n            && getMethod() == other.getMethod()\n            && getSize() == other.getSize()\n            && getCrc() == other.getCrc()\n            && getCompressedSize() == other.getCompressedSize()\n            && Arrays.equals(getCentralDirectoryExtra(),\n                             other.getCentralDirectoryExtra())\n            && Arrays.equals(getLocalFileDataExtra(),\n                             other.getLocalFileDataExtra())\n            && gpb.equals(other.gpb);\n    }\n}\n",
      "buggy_signatures": [
        "public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException",
        "public ZipArchiveEntry(ZipArchiveEntry entry) throws ZipException",
        "protected ZipArchiveEntry()",
        "public ZipArchiveEntry(File inputFile, String entryName)",
        "public Object clone()",
        "public int getMethod()",
        "public void setMethod(int method)",
        "public int getInternalAttributes()",
        "public void setInternalAttributes(int value)",
        "public long getExternalAttributes()",
        "public void setExternalAttributes(long value)",
        "public void setUnixMode(int mode)",
        "public int getUnixMode()",
        "public int getPlatform()",
        "protected void setPlatform(int platform)",
        "public void setExtraFields(ZipExtraField[] fields)",
        "public ZipExtraField[] getExtraFields()",
        "public ZipExtraField[] getExtraFields(boolean includeUnparseable)",
        "public void addExtraField(ZipExtraField ze)",
        "public void addAsFirstExtraField(ZipExtraField ze)",
        "public void removeExtraField(ZipShort type)",
        "public void removeUnparseableExtraFieldData()",
        "public ZipExtraField getExtraField(ZipShort type)",
        "public UnparseableExtraFieldData getUnparseableExtraFieldData()",
        "public void setExtra(byte[] extra) throws RuntimeException",
        "protected void setExtra()",
        "public void setCentralDirectoryExtra(byte[] b)",
        "public byte[] getLocalFileDataExtra()",
        "public byte[] getCentralDirectoryExtra()",
        "public String getName()",
        "public boolean isDirectory()",
        "protected void setName(String name)",
        "public long getSize()",
        "public void setSize(long size)",
        "protected void setName(String name, byte[] rawName)",
        "public byte[] getRawName()",
        "public int hashCode()",
        "public GeneralPurposeBit getGeneralPurposeBit()",
        "public void setGeneralPurposeBit(GeneralPurposeBit b)",
        "private void mergeExtraFields(ZipExtraField[] f, boolean local) throws ZipException",
        "public Date getLastModifiedDate()",
        "public boolean equals(Object obj)"
      ],
      "fixed_signatures": [
        "public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException",
        "public ZipArchiveEntry(ZipArchiveEntry entry) throws ZipException",
        "protected ZipArchiveEntry()",
        "public ZipArchiveEntry(File inputFile, String entryName)",
        "public Object clone()",
        "public int getMethod()",
        "public void setMethod(int method)",
        "public int getInternalAttributes()",
        "public void setInternalAttributes(int value)",
        "public long getExternalAttributes()",
        "public void setExternalAttributes(long value)",
        "public void setUnixMode(int mode)",
        "public int getUnixMode()",
        "public int getPlatform()",
        "protected void setPlatform(int platform)",
        "public void setExtraFields(ZipExtraField[] fields)",
        "public ZipExtraField[] getExtraFields()",
        "public ZipExtraField[] getExtraFields(boolean includeUnparseable)",
        "public void addExtraField(ZipExtraField ze)",
        "public void addAsFirstExtraField(ZipExtraField ze)",
        "public void removeExtraField(ZipShort type)",
        "public void removeUnparseableExtraFieldData()",
        "public ZipExtraField getExtraField(ZipShort type)",
        "public UnparseableExtraFieldData getUnparseableExtraFieldData()",
        "public void setExtra(byte[] extra) throws RuntimeException",
        "protected void setExtra()",
        "public void setCentralDirectoryExtra(byte[] b)",
        "public byte[] getLocalFileDataExtra()",
        "public byte[] getCentralDirectoryExtra()",
        "public String getName()",
        "public boolean isDirectory()",
        "protected void setName(String name)",
        "public long getSize()",
        "public void setSize(long size)",
        "protected void setName(String name, byte[] rawName)",
        "public byte[] getRawName()",
        "public int hashCode()",
        "public GeneralPurposeBit getGeneralPurposeBit()",
        "public void setGeneralPurposeBit(GeneralPurposeBit b)",
        "private void mergeExtraFields(ZipExtraField[] f, boolean local) throws ZipException",
        "public Date getLastModifiedDate()",
        "public boolean equals(Object obj)"
      ],
      "methods": [
        {
          "buggy_method": "  public boolean equals(Object obj) {\n  if (this == obj) {\n  return true;\n  }\n  if (obj == null || getClass() != obj.getClass()) {\n  return false;\n  }\n  ZipArchiveEntry other = (ZipArchiveEntry) obj;\n  String myName = getName();\n  String otherName = other.getName();\n  if (myName == null) {\n  if (otherName != null) {\n  return false;\n  }\n  } else if (!myName.equals(otherName)) {\n  return false;\n  }\n  String myComment = getComment();\n  String otherComment = other.getComment();\n  if (myComment == null) {\n  if (otherComment != null) {\n  return false;\n  }\n  } else if (!myComment.equals(otherComment)) {\n  return false;\n  }\n  return getTime() == other.getTime()\n  && getInternalAttributes() == other.getInternalAttributes()\n  && getPlatform() == other.getPlatform()\n  && getExternalAttributes() == other.getExternalAttributes()\n  && getMethod() == other.getMethod()\n  && getSize() == other.getSize()\n  && getCrc() == other.getCrc()\n  && getCompressedSize() == other.getCompressedSize()\n  && Arrays.equals(getCentralDirectoryExtra(),\n  other.getCentralDirectoryExtra())\n  && Arrays.equals(getLocalFileDataExtra(),\n  other.getLocalFileDataExtra())\n  && gpb.equals(other.gpb);\n  }",
          "fixed_method": "  public boolean equals(Object obj) {\n  if (this == obj) {\n  return true;\n  }\n  if (obj == null || getClass() != obj.getClass()) {\n  return false;\n  }\n  ZipArchiveEntry other = (ZipArchiveEntry) obj;\n  String myName = getName();\n  String otherName = other.getName();\n  if (myName == null) {\n  if (otherName != null) {\n  return false;\n  }\n  } else if (!myName.equals(otherName)) {\n  return false;\n  }\n  String myComment = getComment();\n  String otherComment = other.getComment();\n  if (myComment == null) {\n  myComment = \"\";\n  }\n  if (otherComment == null) {\n  otherComment = \"\";\n  }\n  return getTime() == other.getTime()\n  && myComment.equals(otherComment)\n  && getInternalAttributes() == other.getInternalAttributes()\n  && getPlatform() == other.getPlatform()\n  && getExternalAttributes() == other.getExternalAttributes()\n  && getMethod() == other.getMethod()\n  && getSize() == other.getSize()\n  && getCrc() == other.getCrc()\n  && getCompressedSize() == other.getCompressedSize()\n  && Arrays.equals(getCentralDirectoryExtra(),\n  other.getCentralDirectoryExtra())\n  && Arrays.equals(getLocalFileDataExtra(),\n  other.getLocalFileDataExtra())\n  && gpb.equals(other.gpb);\n  }",
          "diff": [
            "@@ -666,13 +666,13 @@",
            "         String myComment = getComment();\n",
            "         String otherComment = other.getComment();\n",
            "         if (myComment == null) {\n",
            "-            if (otherComment != null) {\n",
            "-                return false;\n",
            "-            }\n",
            "-        } else if (!myComment.equals(otherComment)) {\n",
            "-            return false;\n",
            "+            myComment = \"\";\n",
            "+        }\n",
            "+        if (otherComment == null) {\n",
            "+            otherComment = \"\";\n",
            "         }\n",
            "         return getTime() == other.getTime()\n",
            "+            && myComment.equals(otherComment)\n",
            "             && getInternalAttributes() == other.getInternalAttributes()\n",
            "             && getPlatform() == other.getPlatform()\n",
            "             && getExternalAttributes() == other.getExternalAttributes()\n"
          ],
          "changed_lines": 10
        }
      ]
    }
  ]
}
