{
  "bug_id": "13",
  "failed_tests": {
    "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest": [
      {
        "methodName": "shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine",
        "error": "junit.framework.AssertionFailedError",
        "message": "",
        "fail_line": "            fail();",
        "test_source": "  public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine() {\n  //given\n  when(mock.otherMethod()).thenReturn(\"foo\");\n  \n  //when\n  mockTwo.simpleMethod(\"foo\");\n  \n  //then\n  verify(mockTwo).simpleMethod(mock.otherMethod());\n  try {\n  verify(mockTwo, never()).simpleMethod(mock.otherMethod());\n  fail();\n  } catch (NeverWantedButInvoked e) {}\n  }",
        "stack": [
          "VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine line 33"
        ]
      }
    ]
  },
  "classes": [
    {
      "name": "org/mockito/internal/MockHandler.java",
      "buggy_full_code": "\npackage org.mockito.internal;\n\nimport java.util.List;\n\nimport org.mockito.internal.creation.MockSettingsImpl;\nimport org.mockito.internal.invocation.Invocation;\nimport org.mockito.internal.invocation.InvocationMatcher;\nimport org.mockito.internal.invocation.MatchersBinder;\nimport org.mockito.internal.progress.MockingProgress;\nimport org.mockito.internal.progress.ThreadSafeMockingProgress;\nimport org.mockito.internal.stubbing.InvocationContainer;\nimport org.mockito.internal.stubbing.InvocationContainerImpl;\nimport org.mockito.internal.stubbing.OngoingStubbingImpl;\nimport org.mockito.internal.stubbing.StubbedInvocationMatcher;\nimport org.mockito.internal.stubbing.VoidMethodStubbableImpl;\nimport org.mockito.internal.verification.MockAwareVerificationMode;\nimport org.mockito.internal.verification.VerificationDataImpl;\nimport org.mockito.stubbing.Answer;\nimport org.mockito.stubbing.VoidMethodStubbable;\nimport org.mockito.verification.VerificationMode;\n\n\npublic class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T> { private static final long serialVersionUID = -2917871070982574165L; InvocationContainerImpl invocationContainerImpl; MatchersBinder matchersBinder = new MatchersBinder(); MockingProgress mockingProgress = new ThreadSafeMockingProgress(); private final MockSettingsImpl mockSettings; public MockHandler(MockSettingsImpl mockSettings) {\n        this.mockSettings = mockSettings;\n        this.mockingProgress = new ThreadSafeMockingProgress();\n        this.matchersBinder = new MatchersBinder();\n        this.invocationContainerImpl = new InvocationContainerImpl(mockingProgress);\n    }\n\n    \n    MockHandler() {\n        this(new MockSettingsImpl());\n    }\n\n    public MockHandler(MockHandlerInterface<T> oldMockHandler) {\n        this(oldMockHandler.getMockSettings());\n    }\n\n    public Object handle(Invocation invocation) throws Throwable {\n        if (invocationContainerImpl.hasAnswersForStubbing()) {\n            \n            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n                            .getArgumentMatcherStorage(), invocation);\n            invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n            return null;\n        }\n        VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n\n        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\n                        invocation);\n\n        mockingProgress.validateState();\n\n        \n        if (verificationMode != null) {\n            \n            \n            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            \n                verificationMode.verify(data);\n                return null;\n                \n                \n            }\n        }\n        \n        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n        mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n\n        if (stubbedInvocation != null) {\n            stubbedInvocation.captureArgumentsFrom(invocation);\n            return stubbedInvocation.answer(invocation);\n        } else {\n            Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n            \n            \n            \n            \n            \n            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n            return ret;\n        }\n    }\n\n    public VoidMethodStubbable<T> voidMethodStubbable(T mock) {\n        return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl);\n    }\n\n    public MockSettingsImpl getMockSettings() {\n        return mockSettings;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void setAnswersForStubbing(List<Answer> answers) {\n        invocationContainerImpl.setAnswersForStubbing(answers);\n    }\n\n    public InvocationContainer getInvocationContainer() {\n        return invocationContainerImpl;\n    }\n}",
      "fixed_full_code": "\npackage org.mockito.internal;\n\nimport java.util.List;\n\nimport org.mockito.internal.creation.MockSettingsImpl;\nimport org.mockito.internal.invocation.Invocation;\nimport org.mockito.internal.invocation.InvocationMatcher;\nimport org.mockito.internal.invocation.MatchersBinder;\nimport org.mockito.internal.progress.MockingProgress;\nimport org.mockito.internal.progress.ThreadSafeMockingProgress;\nimport org.mockito.internal.stubbing.InvocationContainer;\nimport org.mockito.internal.stubbing.InvocationContainerImpl;\nimport org.mockito.internal.stubbing.OngoingStubbingImpl;\nimport org.mockito.internal.stubbing.StubbedInvocationMatcher;\nimport org.mockito.internal.stubbing.VoidMethodStubbableImpl;\nimport org.mockito.internal.verification.MockAwareVerificationMode;\nimport org.mockito.internal.verification.VerificationDataImpl;\nimport org.mockito.stubbing.Answer;\nimport org.mockito.stubbing.VoidMethodStubbable;\nimport org.mockito.verification.VerificationMode;\n\n\npublic class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T> { private static final long serialVersionUID = -2917871070982574165L; InvocationContainerImpl invocationContainerImpl; MatchersBinder matchersBinder = new MatchersBinder(); MockingProgress mockingProgress = new ThreadSafeMockingProgress(); private final MockSettingsImpl mockSettings; public MockHandler(MockSettingsImpl mockSettings) {\n        this.mockSettings = mockSettings;\n        this.mockingProgress = new ThreadSafeMockingProgress();\n        this.matchersBinder = new MatchersBinder();\n        this.invocationContainerImpl = new InvocationContainerImpl(mockingProgress);\n    }\n\n    \n    MockHandler() {\n        this(new MockSettingsImpl());\n    }\n\n    public MockHandler(MockHandlerInterface<T> oldMockHandler) {\n        this(oldMockHandler.getMockSettings());\n    }\n\n    public Object handle(Invocation invocation) throws Throwable {\n        if (invocationContainerImpl.hasAnswersForStubbing()) {\n            \n            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n                            .getArgumentMatcherStorage(), invocation);\n            invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n            return null;\n        }\n        VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n\n        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\n                        invocation);\n\n        mockingProgress.validateState();\n\n        \n        if (verificationMode != null) {\n            \n            \n            if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            \n                verificationMode.verify(data);\n                return null;\n            } else {\n                \n                \n                mockingProgress.verificationStarted(verificationMode);\n            }\n        }\n        \n        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n        mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n\n        if (stubbedInvocation != null) {\n            stubbedInvocation.captureArgumentsFrom(invocation);\n            return stubbedInvocation.answer(invocation);\n        } else {\n            Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n            \n            \n            \n            \n            \n            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n            return ret;\n        }\n    }\n\n    public VoidMethodStubbable<T> voidMethodStubbable(T mock) {\n        return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl);\n    }\n\n    public MockSettingsImpl getMockSettings() {\n        return mockSettings;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void setAnswersForStubbing(List<Answer> answers) {\n        invocationContainerImpl.setAnswersForStubbing(answers);\n    }\n\n    public InvocationContainer getInvocationContainer() {\n        return invocationContainerImpl;\n    }\n}",
      "buggy_signatures": [
        "public MockHandler(MockHandlerInterface<T> oldMockHandler)",
        "public Object handle(Invocation invocation) throws Throwable",
        "public VoidMethodStubbable<T> voidMethodStubbable(T mock)",
        "public MockSettingsImpl getMockSettings()",
        "public void setAnswersForStubbing(List<Answer> answers)",
        "public InvocationContainer getInvocationContainer()"
      ],
      "fixed_signatures": [
        "public MockHandler(MockHandlerInterface<T> oldMockHandler)",
        "public Object handle(Invocation invocation) throws Throwable",
        "public VoidMethodStubbable<T> voidMethodStubbable(T mock)",
        "public MockSettingsImpl getMockSettings()",
        "public void setAnswersForStubbing(List<Answer> answers)",
        "public InvocationContainer getInvocationContainer()"
      ],
      "methods": [
        {
          "buggy_method": "  public Object handle(Invocation invocation) throws Throwable {\n  if (invocationContainerImpl.hasAnswersForStubbing()) {\n  \n  InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n  .getArgumentMatcherStorage(), invocation);\n  invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n  return null;\n  }\n  VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n\n  InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\n  invocation);\n\n  mockingProgress.validateState();\n\n  \n  if (verificationMode != null) {\n  \n  \n  if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {  \n  VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);  \n  verificationMode.verify(data);\n  return null;\n  \n  \n  }\n  }\n  \n  invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n  OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n  mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n  StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n\n  if (stubbedInvocation != null) {\n  stubbedInvocation.captureArgumentsFrom(invocation);\n  return stubbedInvocation.answer(invocation);\n  } else {\n  Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n  \n  \n  \n  \n  \n  invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n  return ret;\n  }\n  }",
          "fixed_method": "  public Object handle(Invocation invocation) throws Throwable {\n  if (invocationContainerImpl.hasAnswersForStubbing()) {\n  \n  InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n  .getArgumentMatcherStorage(), invocation);\n  invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n  return null;\n  }\n  VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n\n  InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\n  invocation);\n\n  mockingProgress.validateState();\n\n  \n  if (verificationMode != null) {\n  \n  \n  if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {  \n  VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);  \n  verificationMode.verify(data);\n  return null;\n  } else {\n  \n  \n  mockingProgress.verificationStarted(verificationMode);\n  }\n  }\n  \n  invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n  OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n  mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n  StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n\n  if (stubbedInvocation != null) {\n  stubbedInvocation.captureArgumentsFrom(invocation);\n  return stubbedInvocation.answer(invocation);\n  } else {\n  Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n  \n  \n  \n  \n  \n  invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n  return ret;\n  }\n  }",
          "diff": [
            "@@ -74,12 +74,14 @@",
            "         if (verificationMode != null) {\n",
            "             //We need to check if verification was started on the correct mock \n",
            "             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n",
            "-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n",
            "+            if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n",
            "                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            \n",
            "                 verificationMode.verify(data);\n",
            "                 return null;\n",
            "+            } else {\n",
            "                 // this means there is an invocation on a different mock. Re-adding verification mode \n",
            "                 // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n",
            "+                mockingProgress.verificationStarted(verificationMode);\n",
            "             }\n",
            "         }\n",
            "         \n"
          ],
          "changed_lines": 4
        }
      ]
    }
  ]
}
